{
  "address": "0x676F14450adb26296d8E4F0c2F3896fE40D6D2B5",
  "abi": [
    {
      "inputs": [],
      "name": "CallerNotBorrower",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositCapExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBorrowAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBorrowerAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCapUpdate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMaxUtilizationBps",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxUtilizationBreached",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AllowancesGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "BorrowCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newDepositCap",
          "type": "uint256"
        }
      ],
      "name": "DepositCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IBorrower",
          "name": "dnGmxJuniorVault",
          "type": "address"
        }
      ],
      "name": "DnGmxJuniorVaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "optimalUtilizationRate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "baseVariableBorrowRate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "variableRateSlope1",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "variableRateSlope2",
          "type": "uint128"
        }
      ],
      "name": "FeeStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IBorrower",
          "name": "leveragePool",
          "type": "address"
        }
      ],
      "name": "LeveragePoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxUtilizationBps",
          "type": "uint256"
        }
      ],
      "name": "MaxUtilizationBpsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "juniorVaultAusdc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seniorVaultAusdc",
          "type": "uint256"
        }
      ],
      "name": "VaultState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "availableBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "availableAUsdc",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dnGmxJuniorVault",
      "outputs": [
        {
          "internalType": "contract IBorrower",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeStrategy",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "optimalUtilizationRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "baseVariableBorrowRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "variableRateSlope1",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "variableRateSlope2",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthRewardsSplitRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeSplitRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceX128",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultMarketValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "grantAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_poolAddressesProvider",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leveragePool",
      "outputs": [
        {
          "internalType": "contract IBorrower",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxUtilizationBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newDepositCap",
          "type": "uint256"
        }
      ],
      "name": "setDepositCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBorrower",
          "name": "_dnGmxJuniorVault",
          "type": "address"
        }
      ],
      "name": "setDnGmxJuniorVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBorrower",
          "name": "_leveragePool",
          "type": "address"
        }
      ],
      "name": "setLeveragePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxUtilizationBps",
          "type": "uint256"
        }
      ],
      "name": "setMaxUtilizationBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUsdcBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdcBorrowed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "updateBorrowCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "optimalUtilizationRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "baseVariableBorrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "variableRateSlope1",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "variableRateSlope2",
              "type": "uint128"
            }
          ],
          "internalType": "struct FeeSplitStrategy.Info",
          "name": "_feeStrategy",
          "type": "tuple"
        }
      ],
      "name": "updateFeeStrategyParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcce6124961f60aacaf2d08af72ffaf71bd365fae609e0f63020d7129fb371a9b",
  "receipt": {
    "to": null,
    "from": "0x4ec0dda0430A54b4796109913545F715B2d89F34",
    "contractAddress": "0x676F14450adb26296d8E4F0c2F3896fE40D6D2B5",
    "transactionIndex": 0,
    "gasUsed": "3308567",
    "logsBloom": "0x
    "blockHash": "0x2711b2a96e96da5c350016dead93db2933cd041708e2a9ba20e19a6efb4cd990",
    "transactionHash": "0xcce6124961f60aacaf2d08af72ffaf71bd365fae609e0f63020d7129fb371a9b",
    "logs": [],
    "blockNumber": 70067379,
    "cumulativeGasUsed": "3308567",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bccae2bf9f6442edbbfffade2941124d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CallerNotBorrower\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositCapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBorrowAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBorrowerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCapUpdate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxUtilizationBps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxUtilizationBreached\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowancesGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"BorrowCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDepositCap\",\"type\":\"uint256\"}],\"name\":\"DepositCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IBorrower\",\"name\":\"dnGmxJuniorVault\",\"type\":\"address\"}],\"name\":\"DnGmxJuniorVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"optimalUtilizationRate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"baseVariableBorrowRate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"variableRateSlope1\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"variableRateSlope2\",\"type\":\"uint128\"}],\"name\":\"FeeStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IBorrower\",\"name\":\"leveragePool\",\"type\":\"address\"}],\"name\":\"LeveragePoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxUtilizationBps\",\"type\":\"uint256\"}],\"name\":\"MaxUtilizationBpsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"juniorVaultAusdc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seniorVaultAusdc\",\"type\":\"uint256\"}],\"name\":\"VaultState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"availableBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableAUsdc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dnGmxJuniorVault\",\"outputs\":[{\"internalType\":\"contract IBorrower\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeStrategy\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"optimalUtilizationRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"baseVariableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableRateSlope1\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableRateSlope2\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthRewardsSplitRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeSplitRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceX128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultMarketValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grantAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_poolAddressesProvider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leveragePool\",\"outputs\":[{\"internalType\":\"contract IBorrower\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUtilizationBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDepositCap\",\"type\":\"uint256\"}],\"name\":\"setDepositCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBorrower\",\"name\":\"_dnGmxJuniorVault\",\"type\":\"address\"}],\"name\":\"setDnGmxJuniorVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBorrower\",\"name\":\"_leveragePool\",\"type\":\"address\"}],\"name\":\"setLeveragePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxUtilizationBps\",\"type\":\"uint256\"}],\"name\":\"setMaxUtilizationBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsdcBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcBorrowed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"updateBorrowCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"optimalUtilizationRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"baseVariableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableRateSlope1\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableRateSlope2\",\"type\":\"uint128\"}],\"internalType\":\"struct FeeSplitStrategy.Info\",\"name\":\"_feeStrategy\",\"type\":\"tuple\"}],\"name\":\"updateFeeStrategyParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"RageTrade*\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"availableBorrow(address)\":{\"params\":{\"borrower\":\"allowed borrower address\"},\"returns\":{\"availableAUsdc\":\"max aUsdc which given borrower can borrow\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"borrow(uint256)\":{\"details\":\"harvests fees from junior tranche since utilization changes\",\"params\":{\"amount\":\"amount of aUSDC to transfer from senior tranche to borrower\"}},\"convertToAssets(uint256)\":{\"details\":\"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"details\":\"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"decimals()\":{\"details\":\"overriding because default decimals are 18\",\"returns\":{\"_0\":\"decimals (6)\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,address)\":{\"details\":\"harvests fees from junior tranche since utilization changes\",\"params\":{\"amount\":\"amount of usdc to be deposited\",\"to\":\"receiver of shares\"},\"returns\":{\"shares\":\"minted to receiver\"}},\"getEthRewardsSplitRate()\":{\"returns\":{\"feeSplitRate\":\"part that should go to the senior tranche and remaining to junior tranche\"}},\"getPriceX128()\":{\"details\":\"only for external / frontend use, not used within contract\",\"returns\":{\"_0\":\"Q128 price of asset\"}},\"getVaultMarketValue()\":{\"returns\":{\"_0\":\"Q128 price of asset\"}},\"grantAllowances()\":{\"details\":\"to be called once the vault is deployed\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,string,string,address)\":{\"params\":{\"_name\":\"name of vault share token\",\"_poolAddressesProvider\":\"add\",\"_symbol\":\"symbol of vault share token\",\"_usdc\":\"address of usdc token\"}},\"maxDeposit(address)\":{\"returns\":{\"_0\":\"max no. of assets\"}},\"maxMint(address)\":{\"returns\":{\"_0\":\"max no. of shares\"}},\"maxRedeem(address)\":{\"params\":{\"owner\":\"address whose maximum redeemable shares needs to be computed\"},\"returns\":{\"_0\":\"max no. of shares\"}},\"maxWithdraw(address)\":{\"details\":\"checks the max amount basis user balance and maxUtilizationBps and gives the minimum of the two\",\"params\":{\"owner\":\"address whose maximum withdrawable assets needs to be computed\"},\"returns\":{\"_0\":\"max no. of assets\"}},\"mint(uint256,address)\":{\"details\":\"harvests fees from junior tranche since utilization changes\",\"params\":{\"shares\":\"amount of shares to be minted\",\"to\":\"receiver of shares\"},\"returns\":{\"amount\":\"of asset used to mint shares\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"previewWithdraw(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"redeem(uint256,address,address)\":{\"details\":\"harvests fees from junior tranche since utilization changes\",\"params\":{\"owner\":\"owner of the shares to be burnt\",\"receiver\":\"receiver of assets\",\"shares\":\"amount of shares to be burnt\"},\"returns\":{\"assets\":\"amount of assets received by receiver\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(uint256)\":{\"details\":\"harvests fees from junior tranche since utilization changes\",\"params\":{\"amount\":\"amount of aUSDC to transfer from borrower to senior tranche\"}},\"setDepositCap(uint256)\":{\"details\":\"depositCap = limit on the asset amount (usdc) that can be deposited into the vault\",\"params\":{\"_newDepositCap\":\": updated deposit cap\"}},\"setDnGmxJuniorVault(address)\":{\"params\":{\"_dnGmxJuniorVault\":\": updated deposit cap\"}},\"setLeveragePool(address)\":{\"params\":{\"_leveragePool\":\": updated deposit cap\"}},\"setMaxUtilizationBps(uint256)\":{\"details\":\"maximum utilization that vault is allowed to go upto on withdrawals (beyond this withdrawals would fail)\",\"params\":{\"_maxUtilizationBps\":\": updated max utilization bps\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"returns\":{\"amount\":\"total usdc under management\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalUsdcBorrowed()\":{\"returns\":{\"usdcBorrowed\":\"total usdc borrowed\"}},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBorrowCap(address,uint256)\":{\"params\":{\"borrowerAddress\":\": address of borrower for whom cap needs to be updated\",\"cap\":\": new cap for the borrower\"}},\"updateFeeStrategyParams((uint128,uint128,uint128,uint128))\":{\"params\":{\"_feeStrategy\":\": new fee strategy\"}},\"withdraw(uint256,address,address)\":{\"details\":\"harvests fees from junior tranche since utilization changes\",\"params\":{\"assets\":\"amount of usdc to be transferred\",\"owner\":\"owner of the shares to be burnt\",\"receiver\":\"receiver of assets\"},\"returns\":{\"shares\":\"amount of shares burned\"}}},\"title\":\"Delta Neutral GMX Senior Tranche contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"availableBorrow(address)\":{\"notice\":\"return the available borrow amount for a given borrower address\"},\"borrow(uint256)\":{\"notice\":\"borrow aUSDC\"},\"decimals()\":{\"notice\":\"decimals of vault shares (= usdc decimals)\"},\"deposit(uint256,address)\":{\"notice\":\"deposit usdc\"},\"getEthRewardsSplitRate()\":{\"notice\":\"returns eth reward split rate basis utilization in E30\"},\"getPriceX128()\":{\"notice\":\"returns price of a single asset token in X128\"},\"getVaultMarketValue()\":{\"notice\":\"returns overall vault market value for the vault by valueing the underlying assets\"},\"grantAllowances()\":{\"notice\":\"grants allowances for tokens to relevant external contracts\"},\"initialize(address,string,string,address)\":{\"notice\":\"initializer\"},\"maxDeposit(address)\":{\"notice\":\"max no. of assets which a user can deposit in single call\"},\"maxMint(address)\":{\"notice\":\"max no. of shares which a user can mint in single call\"},\"maxRedeem(address)\":{\"notice\":\"max no. of shares which a user can burn in single call\"},\"maxWithdraw(address)\":{\"notice\":\"max no. of assets which a user can withdraw in single call\"},\"mint(uint256,address)\":{\"notice\":\"deposit usdc\"},\"pause()\":{\"notice\":\"pause deposit, mint, withdraw and redeem\"},\"redeem(uint256,address,address)\":{\"notice\":\"withdraw usdc\"},\"repay(uint256)\":{\"notice\":\"repay aUSDC\"},\"setDepositCap(uint256)\":{\"notice\":\"sets deposit cap (6 decimals)\"},\"setDnGmxJuniorVault(address)\":{\"notice\":\"sets junior tranche address\"},\"setLeveragePool(address)\":{\"notice\":\"sets leverage pool address\"},\"setMaxUtilizationBps(uint256)\":{\"notice\":\"sets max utilization bps\"},\"totalAssets()\":{\"notice\":\"derive total assets managed by senior vault\"},\"totalUsdcBorrowed()\":{\"notice\":\"query amount of assset borrwed by all borrowers combined\"},\"unpause()\":{\"notice\":\"unpause deposit, mint, withdraw and redeem\"},\"updateBorrowCap(address,uint256)\":{\"notice\":\"updates borrow cap for junior tranche or leverage poolborrowCap = max amount a borrower can take from senior tranche\"},\"updateFeeStrategyParams((uint128,uint128,uint128,uint128))\":{\"notice\":\"updates fee split strategythis determines how eth rewards should be split between junior and senior tranchebasis the utilization of senior tranche\"},\"withdraw(uint256,address,address)\":{\"notice\":\"withdraw usdc\"}},\"notice\":\"Implements the handling of senior tranche which acts as a lender of aUSDC for junior tranche to borrow and hedge tokens using AAVEIt is upgradable contract (via TransparentUpgradeableProxy proxy owned by ProxyAdmin)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/DnGmxSeniorVault.sol\":\"DnGmxSeniorVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":256},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6e56fb472b39561ef68a43d8ec1845171b211635746cfc2c17cf4d3a687fe85d\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableAToken} from './IInitializableAToken.sol';\\n\\n/**\\n * @title IAToken\\n * @author Aave\\n * @notice Defines the basic interface for an AToken.\\n */\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The scaled amount being transferred\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @notice Mints `amount` aTokens to `user`\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted aTokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address caller,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @dev In some instances, the mint event could be emitted from a burn transaction\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param from The address from which the aTokens will be burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The next liquidity index of the reserve\\n   */\\n  function burn(\\n    address from,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @notice Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   */\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @notice Transfers the underlying asset to `target`.\\n   * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\n   * @param target The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   */\\n  function transferUnderlyingTo(address target, uint256 amount) external;\\n\\n  /**\\n   * @notice Handles the underlying received by the aToken after the transfer has been completed.\\n   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\\n   * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\\n   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\n   * @param user The user executing the repayment\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed\\n   * @param amount The amount getting repaid\\n   */\\n  function handleRepayment(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Allow passing a signed message to approve spending\\n   * @dev implements the permit function as for\\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner The owner of the funds\\n   * @param spender The spender\\n   * @param value The amount\\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n   * @param v Signature param\\n   * @param s Signature param\\n   * @param r Signature param\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @return The address of the underlying asset\\n   */\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.\\n   * @return Address of the Aave treasury\\n   */\\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Get the domain separator for the token\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n   * @return The domain separator of the token at current chain\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the nonce for owner.\\n   * @param owner The address of the owner\\n   * @return The nonce of the owner\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x3be0a6b8a763ab6ea1c36f367bdfe2382127b7e3a4dbe4ef9c1dd4d8b3bf03c4\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAaveIncentivesController\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\n * @dev It only contains one single function, needed as a hook on aToken and debtToken transfers.\\n */\\ninterface IAaveIncentivesController {\\n  /**\\n   * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n   * @dev The units of `totalSupply` and `userBalance` should be the same.\\n   * @param user The address of the user whose asset balance has changed\\n   * @param totalSupply The total supply of the asset prior to user balance change\\n   * @param userBalance The previous user balance prior to balance change\\n   */\\n  function handleAction(\\n    address user,\\n    uint256 totalSupply,\\n    uint256 userBalance\\n  ) external;\\n}\\n\",\"keccak256\":\"0xfebb2258ed0f33f66ede2dc6f452adbfe9f1e0115c1ae856b65bf518ab142018\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IInitializableAToken\\n * @author Aave\\n * @notice Interface for the initialize function on AToken\\n */\\ninterface IInitializableAToken {\\n  /**\\n   * @dev Emitted when an aToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param treasury The address of the treasury\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param aTokenDecimals The decimals of the underlying\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    address incentivesController,\\n    uint8 aTokenDecimals,\\n    string aTokenName,\\n    string aTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @notice Initializes the aToken\\n   * @param pool The pool contract that is initializing this contract\\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  function initialize(\\n    IPool pool,\\n    address treasury,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 aTokenDecimals,\\n    string calldata aTokenName,\\n    string calldata aTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb7c0da4c50ab10ce00e2325e649297923497738350092f64ef4b259307039dee\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   */\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\",\"keccak256\":\"0x96c0b6559a9f4b11a4ce0f825007d0b1a50340551714d0d79c6c1c5854b43f16\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x33d4308d9407b4ee2297fc4ba5acce1a96a6c658189e2778a4f6b90e032fb3b5\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracle\\n * @author Aave\\n * @notice Defines the basic interface for a Price oracle.\\n */\\ninterface IPriceOracle {\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   */\\n  function getAssetPrice(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Set the price of the asset\\n   * @param asset The address of the asset\\n   * @param price The price of the asset\\n   */\\n  function setAssetPrice(address asset, uint256 price) external;\\n}\\n\",\"keccak256\":\"0x672bcf328d4d811c1dea02b57580ea650f73121f98f39e7916ac70340bb234d2\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaled-balance token.\\n */\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted tokens\\n   * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Mint(\\n    address indexed caller,\\n    address indexed onBehalfOf,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted after the burn action\\n   * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\n   * @param from The address from which the tokens will be burned\\n   * @param target The address that will receive the underlying, if any\\n   * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Burn(\\n    address indexed from,\\n    address indexed target,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @notice Returns the scaled balance of the user.\\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n   * at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   */\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled total supply\\n   */\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   */\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns last index interest was accrued to the user's balance\\n   * @param user The address of the user\\n   * @return The last index interest was accrued to the user's balance, expressed in ray\\n   */\\n  function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x72b3ea433cd3386f369f1643a154bf233ec60c02acd02c32088a97556207d2e4\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0xe5c6db4edc44768b334b6f9271e1ae21c81d6ab0692c2740cce0c56c4ac433dd\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ab2a92fbac88a704270b039691afb363c5a1ef1170fb0c955043e4da84b987\",\"license\":\"AGPL-3.0-only\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7825565a4bb2a34a1dc96bbfead755785dfb0df8ef81bd934c43023689685645\",\"license\":\"MIT\"},\"contracts/ERC4626/ERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport { ERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\n\\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\\n\\nimport { IERC4626 } from '../interfaces/IERC4626.sol';\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Copied and modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626Upgradeable is IERC4626, ERC20Upgradeable {\\n    using SafeERC20 for IERC20Metadata;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               STATE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    address public asset;\\n\\n    // these gaps are added to allow adding new variables without shifting down inheritance chain\\n    uint256[50] private __gaps;\\n\\n    /* solhint-disable func-name-mixedcase */\\n    function __ERC4626Upgradeable_init(address _asset, string memory _name, string memory _symbol) internal {\\n        __ERC20_init(_name, _symbol);\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, 'ZERO_SHARES');\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        IERC20Metadata(asset).safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares, receiver);\\n    }\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        IERC20Metadata(asset).safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares, receiver);\\n    }\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\\n        }\\n\\n        beforeWithdraw(assets, shares, receiver);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        IERC20Metadata(asset).safeTransfer(receiver, assets);\\n    }\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, 'ZERO_ASSETS');\\n\\n        beforeWithdraw(assets, shares, receiver);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        IERC20Metadata(asset).safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf(owner));\\n    }\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /* solhint-disable no-empty-blocks */\\n    function beforeWithdraw(uint256 assets, uint256 shares, address receiver) internal virtual {}\\n\\n    /* solhint-disable no-empty-blocks */\\n    function afterDeposit(uint256 assets, uint256 shares, address receiver) internal virtual {}\\n}\\n\",\"keccak256\":\"0x36947efcbbfec428ddc12eedd9e0c80e710b6c245742216858c3687d64a4d878\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBorrower {\\n    function harvestFees() external;\\n\\n    function getUsdcBorrowed() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x48c1d26b7a809ead2186d20ba9d638e161d9df864d3632884eb759df20d8da47\",\"license\":\"MIT\"},\"contracts/interfaces/IDnGmxSeniorVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IBorrower } from './IBorrower.sol';\\nimport { IERC4626 } from './IERC4626.sol';\\n\\ninterface IDnGmxSeniorVault is IERC4626 {\\n    error InvalidMaxUtilizationBps();\\n\\n    error CallerNotBorrower();\\n\\n    error InvalidCapUpdate();\\n    error InvalidBorrowAmount();\\n    error InvalidBorrowerAddress();\\n\\n    error DepositCapExceeded();\\n    error MaxUtilizationBreached();\\n\\n    event AllowancesGranted();\\n    event DepositCapUpdated(uint256 _newDepositCap);\\n    event BorrowCapUpdated(address vault, uint256 newCap);\\n\\n    event LeveragePoolUpdated(IBorrower leveragePool);\\n    event DnGmxJuniorVaultUpdated(IBorrower dnGmxJuniorVault);\\n    event MaxUtilizationBpsUpdated(uint256 maxUtilizationBps);\\n\\n    event FeeStrategyUpdated(\\n        uint128 optimalUtilizationRate,\\n        uint128 baseVariableBorrowRate,\\n        uint128 variableRateSlope1,\\n        uint128 variableRateSlope2\\n    );\\n\\n    // eventType - 0 = start of txn | 1 = end of txn\\n    event VaultState(uint256 indexed eventType, uint256 juniorVaultAusdc, uint256 seniorVaultAusdc);\\n\\n    function borrow(uint256 amount) external;\\n\\n    function repay(uint256 amount) external;\\n\\n    function depositCap() external view returns (uint256);\\n\\n    function getPriceX128() external view returns (uint256);\\n\\n    function getEthRewardsSplitRate() external returns (uint256);\\n\\n    function getVaultMarketValue() external view returns (uint256);\\n\\n    function availableBorrow(address borrower) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x964f3d5725ec809f1cf148ef2e43030008a3622821d613c4f6ebe7d5ec18982f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\n\\ninterface IERC4626 is IERC20Upgradeable {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0xa39488173230a67ab6c273b78fda24678c99efe993997c82aba10bf81b2bd1b0\",\"license\":\"MIT\"},\"contracts/libraries/FeeSplitStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport { FullMath } from '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\n\\n/**\\n * @title FeeSplitStrategy library\\n * @notice Implements the calculation of the eth reward split depending on the utilization of reserve\\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE`\\n * point of utilization and another from that one to 100%\\n * @author adapted from https://github.com/aave/protocol-v2/blob/6f57232358af0fd41d9dcf9309d7a8c0b9aa3912/contracts/protocol/lendingpool/DefaultReserveInterestRateStrategy.sol\\n **/\\n\\nlibrary FeeSplitStrategy {\\n    using FullMath for uint128;\\n    using FullMath for uint256;\\n\\n    uint256 internal constant RATE_PRECISION = 1e30;\\n\\n    struct Info {\\n        /**\\n         * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\\n         * Expressed in ray\\n         **/\\n        uint128 optimalUtilizationRate;\\n        // Base variable borrow rate when Utilization rate = 0. Expressed in ray\\n        uint128 baseVariableBorrowRate;\\n        // Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint128 variableRateSlope1;\\n        // Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint128 variableRateSlope2;\\n    }\\n\\n    function getMaxVariableBorrowRate(Info storage feeStrategyInfo) internal view returns (uint256) {\\n        return\\n            feeStrategyInfo.baseVariableBorrowRate +\\n            feeStrategyInfo.variableRateSlope1 +\\n            feeStrategyInfo.variableRateSlope2;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * NOTE This function is kept for compatibility with the previous DefaultInterestRateStrategy interface.\\n     * New protocol implementation uses the new calculateInterestRates() interface\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param usedLiquidity The total borrowed from the reserve at a variable rate\\n     **/\\n    function calculateFeeSplit(\\n        Info storage feeStrategy,\\n        uint256 availableLiquidity,\\n        uint256 usedLiquidity\\n    ) internal view returns (uint256 feeSplitRate) {\\n        uint256 utilizationRate = usedLiquidity == 0\\n            ? 0\\n            : usedLiquidity.mulDiv(RATE_PRECISION, availableLiquidity + usedLiquidity);\\n\\n        uint256 excessUtilizationRate = RATE_PRECISION - feeStrategy.optimalUtilizationRate;\\n\\n        if (utilizationRate > feeStrategy.optimalUtilizationRate) {\\n            uint256 excessUtilizationRateRatio = (utilizationRate - feeStrategy.optimalUtilizationRate).mulDiv(\\n                RATE_PRECISION,\\n                excessUtilizationRate\\n            );\\n\\n            feeSplitRate =\\n                feeStrategy.baseVariableBorrowRate +\\n                feeStrategy.variableRateSlope1 +\\n                feeStrategy.variableRateSlope2.mulDiv(excessUtilizationRateRatio, RATE_PRECISION);\\n        } else {\\n            feeSplitRate =\\n                feeStrategy.baseVariableBorrowRate +\\n                utilizationRate.mulDiv(feeStrategy.variableRateSlope1, feeStrategy.optimalUtilizationRate);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8f1da8933f3510ce53ed33f6485757f965fca79fb64562dfddd4febbb4c7cf34\",\"license\":\"agpl-3.0\"},\"contracts/vaults/DnGmxSeniorVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IAToken } from '@aave/core-v3/contracts/interfaces/IAToken.sol';\\nimport { IPool } from '@aave/core-v3/contracts/interfaces/IPool.sol';\\nimport { IPoolAddressesProvider } from '@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol';\\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\nimport { FullMath } from '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\n\\nimport { IBorrower } from '../interfaces/IBorrower.sol';\\nimport { IDnGmxSeniorVault } from '../interfaces/IDnGmxSeniorVault.sol';\\nimport { IERC4626 } from '../interfaces/IERC4626.sol';\\n\\nimport { ERC4626Upgradeable } from '../ERC4626/ERC4626Upgradeable.sol';\\nimport { FeeSplitStrategy } from '../libraries/FeeSplitStrategy.sol';\\n\\n/**\\n * @title Delta Neutral GMX Senior Tranche contract\\n * @notice Implements the handling of senior tranche which acts as a lender of aUSDC for junior tranche to\\n * borrow and hedge tokens using AAVE\\n * @notice It is upgradable contract (via TransparentUpgradeableProxy proxy owned by ProxyAdmin)\\n * @author RageTrade\\n **/\\ncontract DnGmxSeniorVault is IDnGmxSeniorVault, ERC4626Upgradeable, OwnableUpgradeable, PausableUpgradeable {\\n    using FullMath for uint256;\\n    using FeeSplitStrategy for FeeSplitStrategy.Info;\\n\\n    uint16 internal constant MAX_BPS = 10_000;\\n\\n    // maximum assets(usdc) that can be deposited into the vault\\n    uint256 public depositCap;\\n    // maximum utilizqtion that the vault can go upto due to a withdrawal\\n    uint256 public maxUtilizationBps;\\n\\n    // leverage pool which can take usdc from senior tranche to lend against junior tranche shares\\n    IBorrower public leveragePool;\\n\\n    // junior tranche which can take usdc from senior tranche against the GLP assets deposited to borrow for taking hedges on AAVE\\n    IBorrower public dnGmxJuniorVault;\\n\\n    // fee split vs utilization curve\\n    // two sloped curve similar to the one used by AAVE\\n    FeeSplitStrategy.Info public feeStrategy;\\n\\n    // AAVE pool\\n    IPool internal pool;\\n    // AAVE usdc supply token\\n    IAToken internal aUsdc;\\n    // AAVE oracle\\n    IPriceOracle internal oracle;\\n    // AAVE pool address provider\\n    IPoolAddressesProvider internal poolAddressProvider;\\n    // Borrow caps on leverage pool and junior tranche\\n    mapping(address borrower => uint256 cap) public borrowCaps;\\n\\n    // these gaps are added to allow adding new variables without shifting down inheritance chain\\n    uint256[50] private __gaps;\\n\\n    // ensures caller is valid borrower\\n    modifier onlyBorrower() {\\n        if (msg.sender != address(dnGmxJuniorVault) && msg.sender != address(leveragePool)) revert CallerNotBorrower();\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            INIT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice initializer\\n    /// @param _name name of vault share token\\n    /// @param _symbol symbol of vault share token\\n    /// @param _usdc address of usdc token\\n    /// @param _poolAddressesProvider add\\n    function initialize(\\n        address _usdc,\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _poolAddressesProvider\\n    ) external initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ERC4626Upgradeable_init(_usdc, _name, _symbol);\\n\\n        poolAddressProvider = IPoolAddressesProvider(_poolAddressesProvider);\\n\\n        pool = IPool(poolAddressProvider.getPool());\\n        aUsdc = IAToken(pool.getReserveData(_usdc).aTokenAddress);\\n        oracle = IPriceOracle(poolAddressProvider.getPriceOracle());\\n\\n        aUsdc.approve(address(pool), type(uint256).max);\\n        IERC20(asset).approve(address(pool), type(uint256).max);\\n    }\\n\\n    /// @notice grants allowances for tokens to relevant external contracts\\n    /// @dev to be called once the vault is deployed\\n    function grantAllowances() external onlyOwner {\\n        address aavePool = address(pool);\\n\\n        // allow aave lending pool to spend asset\\n        IERC20(asset).approve(aavePool, type(uint256).max);\\n        // allow aave lending pool to spend interest bearing token\\n        aUsdc.approve(aavePool, type(uint256).max);\\n\\n        emit AllowancesGranted();\\n    }\\n\\n    /// @notice pause deposit, mint, withdraw and redeem\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice unpause deposit, mint, withdraw and redeem\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ADMIN SETTERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice sets deposit cap (6 decimals)\\n    /// @param _newDepositCap: updated deposit cap\\n    /// @dev depositCap = limit on the asset amount (usdc) that can be deposited into the vault\\n    function setDepositCap(uint256 _newDepositCap) external onlyOwner {\\n        depositCap = _newDepositCap;\\n        emit DepositCapUpdated(_newDepositCap);\\n    }\\n\\n    /// @notice sets leverage pool address\\n    /// @param _leveragePool: updated deposit cap\\n    function setLeveragePool(IBorrower _leveragePool) external onlyOwner {\\n        leveragePool = _leveragePool;\\n        emit LeveragePoolUpdated(_leveragePool);\\n    }\\n\\n    /// @notice sets junior tranche address\\n    /// @param _dnGmxJuniorVault: updated deposit cap\\n    function setDnGmxJuniorVault(IBorrower _dnGmxJuniorVault) external onlyOwner {\\n        dnGmxJuniorVault = _dnGmxJuniorVault;\\n        emit DnGmxJuniorVaultUpdated(_dnGmxJuniorVault);\\n    }\\n\\n    /// @notice sets max utilization bps\\n    /// @dev maximum utilization that vault is allowed to go upto on withdrawals (beyond this withdrawals would fail)\\n    /// @param _maxUtilizationBps: updated max utilization bps\\n    function setMaxUtilizationBps(uint256 _maxUtilizationBps) external onlyOwner {\\n        if (_maxUtilizationBps > MAX_BPS) revert InvalidMaxUtilizationBps();\\n        maxUtilizationBps = _maxUtilizationBps;\\n        emit MaxUtilizationBpsUpdated(_maxUtilizationBps);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      STRATEGY PARAMETERS SETTERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice updates borrow cap for junior tranche or leverage pool\\n    /// @notice borrowCap = max amount a borrower can take from senior tranche\\n    /// @param borrowerAddress: address of borrower for whom cap needs to be updated\\n    /// @param cap: new cap for the borrower\\n    function updateBorrowCap(address borrowerAddress, uint256 cap) external onlyOwner {\\n        if (borrowerAddress != address(dnGmxJuniorVault) && borrowerAddress != address(leveragePool))\\n            revert InvalidBorrowerAddress();\\n\\n        if (IBorrower(borrowerAddress).getUsdcBorrowed() >= cap) revert InvalidCapUpdate();\\n\\n        borrowCaps[borrowerAddress] = cap;\\n        // give allowance to borrower to pull whenever required\\n        aUsdc.approve(borrowerAddress, cap);\\n\\n        emit BorrowCapUpdated(borrowerAddress, cap);\\n    }\\n\\n    /// @notice updates fee split strategy\\n    /// @notice this determines how eth rewards should be split between junior and senior tranche\\n    /// @notice basis the utilization of senior tranche\\n    /// @param _feeStrategy: new fee strategy\\n    function updateFeeStrategyParams(FeeSplitStrategy.Info calldata _feeStrategy) external onlyOwner {\\n        feeStrategy = _feeStrategy;\\n        emit FeeStrategyUpdated(\\n            _feeStrategy.optimalUtilizationRate,\\n            _feeStrategy.baseVariableBorrowRate,\\n            _feeStrategy.variableRateSlope1,\\n            _feeStrategy.variableRateSlope2\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            PROTOCOL FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice borrow aUSDC\\n    /// @dev harvests fees from junior tranche since utilization changes\\n    /// @param amount amount of aUSDC to transfer from senior tranche to borrower\\n    function borrow(uint256 amount) external onlyBorrower {\\n        // revert on invalid borrow amount\\n        if (amount == 0 || amount > availableBorrow(msg.sender)) revert InvalidBorrowAmount();\\n\\n        // lazily harvest fees (harvest would return early if not enough rewards accrued)\\n        dnGmxJuniorVault.harvestFees();\\n\\n        // transfers aUsdc to borrower\\n        // but doesn't reduce totalAssets of vault since borrwed amounts are factored in\\n        aUsdc.transfer(msg.sender, amount);\\n    }\\n\\n    /// @notice repay aUSDC\\n    /// @dev harvests fees from junior tranche since utilization changes\\n    /// @param amount amount of aUSDC to transfer from borrower to senior tranche\\n    function repay(uint256 amount) external onlyBorrower {\\n        dnGmxJuniorVault.harvestFees();\\n\\n        // borrower should have given allowance to spend aUsdc\\n        aUsdc.transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /// @notice deposit usdc\\n    /// @dev harvests fees from junior tranche since utilization changes\\n    /// @param amount amount of usdc to be deposited\\n    /// @param to receiver of shares\\n    /// @return shares minted to receiver\\n    function deposit(\\n        uint256 amount,\\n        address to\\n    ) public virtual override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 shares) {\\n        _emitVaultState(0);\\n        // harvesting fees so asset to shares conversion rate is not stale\\n        dnGmxJuniorVault.harvestFees();\\n        shares = super.deposit(amount, to);\\n\\n        _emitVaultState(1);\\n    }\\n\\n    /// @notice deposit usdc\\n    /// @dev harvests fees from junior tranche since utilization changes\\n    /// @param shares amount of shares to be minted\\n    /// @param to receiver of shares\\n    /// @return amount of asset used to mint shares\\n    function mint(\\n        uint256 shares,\\n        address to\\n    ) public virtual override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 amount) {\\n        _emitVaultState(0);\\n\\n        // harvesting fees so asset to shares conversion rate is not stale\\n        dnGmxJuniorVault.harvestFees();\\n        amount = super.mint(shares, to);\\n\\n        _emitVaultState(1);\\n    }\\n\\n    /// @notice withdraw usdc\\n    /// @dev harvests fees from junior tranche since utilization changes\\n    /// @param assets amount of usdc to be transferred\\n    /// @param receiver receiver of assets\\n    /// @param owner owner of the shares to be burnt\\n    /// @return shares amount of shares burned\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 shares) {\\n        // harvesting fees so asset to shares conversion rate is not stale\\n        _emitVaultState(0);\\n\\n        dnGmxJuniorVault.harvestFees();\\n        shares = super.withdraw(assets, receiver, owner);\\n\\n        _emitVaultState(1);\\n    }\\n\\n    /// @notice withdraw usdc\\n    /// @dev harvests fees from junior tranche since utilization changes\\n    /// @param shares amount of shares to be burnt\\n    /// @param receiver receiver of assets\\n    /// @param owner owner of the shares to be burnt\\n    /// @return assets amount of assets received by receiver\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 assets) {\\n        _emitVaultState(0);\\n        // harvesting fees so asset to shares conversion rate is not stale\\n        dnGmxJuniorVault.harvestFees();\\n        assets = super.redeem(shares, receiver, owner);\\n\\n        _emitVaultState(1);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC4626 HOOKS OVERRIDE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice converts aUSDC to USDC before assets are withdrawn to receiver\\n    /// @notice also check if the maxUtilization is not being breached (reverts if it does)\\n    function beforeWithdraw(uint256 assets, uint256, address) internal override {\\n        /// @dev withdrawal will fail if the utilization goes above maxUtilization value due to a withdrawal\\n        // totalUsdcBorrowed will reduce when borrower (junior vault) repays\\n        if (totalUsdcBorrowed() > ((totalAssets() - assets) * maxUtilizationBps) / MAX_BPS)\\n            revert MaxUtilizationBreached();\\n\\n        // take out required assets from aave lending pool\\n        pool.withdraw(address(asset), assets, address(this));\\n    }\\n\\n    /// @notice converts USDC to aUSDC after assets are taken from depositor\\n    /// @notice also check if the depositCap is not being breached (reverts if it does)\\n    function afterDeposit(uint256 assets, uint256, address) internal override {\\n        // assets are not counted in 'totalAssets' yet because they are not supplied to aave pool\\n        if ((totalAssets() + assets) > depositCap) revert DepositCapExceeded();\\n\\n        // usdc is direclty supplied to lending pool and earns interest\\n        // and hence increasing totalAssets of the vault\\n        pool.supply(address(asset), assets, address(this), 0);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                GETTERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice returns price of a single asset token in X128\\n    /// @dev only for external / frontend use, not used within contract\\n    /// @return Q128 price of asset\\n    function getPriceX128() public view returns (uint256) {\\n        uint256 price = oracle.getAssetPrice(address(asset));\\n\\n        // @dev aave returns from same source as chainlink (which is 8 decimals)\\n        // usdc decimals - (chainlink decimals + asset decimals) = 6-8-6 = 8\\n        return price.mulDiv(1 << 128, 1e8);\\n    }\\n\\n    /// @notice returns overall vault market value for the vault by valueing the underlying assets\\n    /// @return Q128 price of asset\\n    function getVaultMarketValue() public view returns (uint256) {\\n        // use aave's oracle to get price of usdc\\n        uint256 price = oracle.getAssetPrice(address(asset));\\n\\n        // chainlink returns USD denomiated oracles in 1e8\\n        return totalAssets().mulDiv(price, 1e8);\\n    }\\n\\n    /// @notice query amount of assset borrwed by all borrowers combined\\n    /// @return usdcBorrowed total usdc borrowed\\n    function totalUsdcBorrowed() public view returns (uint256 usdcBorrowed) {\\n        /// @dev only call getUsdcBorrowed if address is set\\n        if (address(leveragePool) != address(0)) usdcBorrowed += leveragePool.getUsdcBorrowed();\\n        if (address(dnGmxJuniorVault) != address(0)) usdcBorrowed += dnGmxJuniorVault.getUsdcBorrowed();\\n    }\\n\\n    /// @notice returns eth reward split rate basis utilization in E30\\n    /// @return feeSplitRate part that should go to the senior tranche and remaining to junior tranche\\n    function getEthRewardsSplitRate() public view returns (uint256 feeSplitRate) {\\n        // feeSplitRate would adjust automatically depending upon utilization\\n        feeSplitRate = feeStrategy.calculateFeeSplit(aUsdc.balanceOf(address(this)), totalUsdcBorrowed());\\n    }\\n\\n    /// @notice return the available borrow amount for a given borrower address\\n    /// @param borrower allowed borrower address\\n    /// @return availableAUsdc max aUsdc which given borrower can borrow\\n    function availableBorrow(address borrower) public view returns (uint256 availableAUsdc) {\\n        uint256 borrowCap = borrowCaps[borrower];\\n        uint256 borrowed = IBorrower(borrower).getUsdcBorrowed();\\n\\n        if (borrowed > borrowCap) return 0;\\n\\n        uint256 availableBasisCap = borrowCap - borrowed;\\n        uint256 availableBasisBalance = aUsdc.balanceOf(address(this));\\n\\n        availableAUsdc = availableBasisCap < availableBasisBalance ? availableBasisCap : availableBasisBalance;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                       ERC4626 GETTERS OVERRIDES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice decimals of vault shares (= usdc decimals)\\n    /// @dev overriding because default decimals are 18\\n    /// @return decimals (6)\\n    function decimals() public pure override returns (uint8) {\\n        return 6;\\n    }\\n\\n    /// @notice derive total assets managed by senior vault\\n    /// @return amount total usdc under management\\n    function totalAssets() public view override(IERC4626, ERC4626Upgradeable) returns (uint256 amount) {\\n        amount = aUsdc.balanceOf(address(this));\\n        amount += totalUsdcBorrowed();\\n    }\\n\\n    /// @notice max no. of assets which a user can deposit in single call\\n    /// @return max no. of assets\\n    function maxDeposit(address) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\\n        uint256 cap = depositCap;\\n        uint256 total = totalAssets();\\n\\n        // if cap is not reached, user can deposit the difference\\n        // otherwise, user can deposit 0 assets\\n        return total < cap ? cap - total : 0;\\n    }\\n\\n    /// @notice max no. of shares which a user can mint in single call\\n    /// @return max no. of shares\\n    function maxMint(address) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\\n        return convertToShares(maxDeposit(address(0)));\\n    }\\n\\n    /// @notice max no. of assets which a user can withdraw in single call\\n    /// @dev checks the max amount basis user balance and maxUtilizationBps and gives the minimum of the two\\n    /// @param owner address whose maximum withdrawable assets needs to be computed\\n    /// @return max no. of assets\\n    function maxWithdraw(address owner) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\\n        uint256 total = totalAssets();\\n        uint256 borrowed = totalUsdcBorrowed();\\n\\n        // checks the max withdrawable amount until which the vault remains below max utilization\\n        uint256 scaledBorrow = (borrowed * MAX_BPS) / maxUtilizationBps;\\n        uint256 maxAvailable = total > scaledBorrow ? total - scaledBorrow : 0;\\n\\n        // checks the balance of the user\\n        uint256 maxOfUser = convertToAssets(balanceOf(owner));\\n\\n        // user can withdraw all assets (of owned shares) by if vault has enough\\n        // else, user can withdraw whatever is left with vault (non-borrowed)\\n        return maxOfUser < maxAvailable ? maxOfUser : maxAvailable;\\n    }\\n\\n    /// @notice max no. of shares which a user can burn in single call\\n    /// @param owner address whose maximum redeemable shares needs to be computed\\n    /// @return max no. of shares\\n    function maxRedeem(address owner) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\\n        return convertToShares(maxWithdraw(owner));\\n    }\\n\\n    function _emitVaultState(uint256 eventType) internal {\\n        emit VaultState(eventType, aUsdc.balanceOf(address(dnGmxJuniorVault)), aUsdc.balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x7f4351e92e1e061acecf5e1c97ae1765ef0ff589b7784e34fd0ba37b1f6ea1e9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657613adc908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806301e1d1141461036d57806306fdde031461036857806307a2d13a14610322578063095ea7b3146103635780630a28a4771461035e57806318160ddd1461035957806323b872dd14610354578063304ea9cb1461034f578063313ce5671461034a578063371fd8e61461034557806338d52e0f14610340578063395093511461033b5780633d672a45146103365780633f4ba83a14610331578063402d267d1461032c5780634a584432146103275780634cdad50614610322578063543bc9841461031d57806356ab92b3146103185780635c975abb14610313578063613d25bb1461030e5780636e553f651461030957806370a0823114610304578063715018a6146102ff578063768e66d3146102fa57806377c718ae146102f55780638224f4e8146102f05780638456cb59146102eb57806386651203146102e65780638d315d7b146102e15780638da5cb5b146102dc578063949b22ae146102d757806394bf804d146102d257806395d89b41146102cd578063964f7be2146102c8578063a457c2d7146102c3578063a9059cbb146102be578063aa88fdc3146102b9578063b3d7f6b9146102b4578063b460af94146102af578063ba087652146102aa578063bf9571f1146102a5578063c5ebeaec146102a0578063c63d75b61461029b578063c6e6f59214610273578063ce96cb7714610296578063d026c12314610291578063d905777e1461028c578063db2d9c3a14610287578063dbd5edc714610282578063dd62ed3e1461027d578063e3696edd14610278578063ef8b30f7146102735763f2fde38b1461026e57600080fd5b611d5a565b611b12565b611cdb565b611c76565b611c58565b611bea565b611bc5565b611b57565b611b30565b611ae4565b6119e9565b61189e565b61177a565b61163d565b6115f3565b6115cc565b6115a2565b6114ef565b6113b3565b61130c565b61115c565b611115565b6110ee565b61106b565b61101f565b610fc5565b610f9e565b610f83565b610dc0565b610d62565b610d24565b610bed565b610ab4565b610a63565b6109fb565b6109d4565b6104d3565b610995565b61096f565b6108db565b610840565b6107dd565b6107b6565b61068f565b610673565b610655565b610573565b610555565b610537565b610502565b6103ee565b610382565b600091031261037d57565b600080fd5b3461037d57600036600319011261037d57602061039d6137c3565b604051908152f35b6020808252825181830181905290939260005b8281106103da57505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016103b8565b3461037d576000806003193601126104d057604051908060365461041181611e8d565b808552916001918083169081156104a6575060011461044b575b6104478561043b81870382611f12565b604051918291826103a5565b0390f35b9250603683527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b85b82841061048e57505050810160200161043b8261044761042b565b80546020858701810191909152909301928101610473565b8695506104479693506020925061043b94915060ff191682840152151560051b820101929361042b565b80fd5b3461037d57602036600319011261037d57602061039d60043561228e565b6001600160a01b0381160361037d57565b3461037d57604036600319011261037d5761052c600435610522816104f1565b602435903361212e565b602060405160018152f35b3461037d57602036600319011261037d57602061039d6004356122ee565b3461037d57600036600319011261037d576020603554604051908152f35b3461037d57606036600319011261037d57600435610590816104f1565b60243561059c816104f1565b604435906001600160a01b03831660005260346020526105d3336040600020906001600160a01b0316600052602052604060002090565b5492600184016105f4575b6105e8935061200a565b60405160018152602090f35b8284106106105761060b836105e89503338361212e565b6105de565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b3461037d57600036600319011261037d57602060fd54604051908152f35b3461037d57600036600319011261037d57602060405160068152f35b3461037d57602036600319011261037d576001600160a01b038060ff5416908133141590816107a7575b5061079557803b1561037d576000809160046040518094819363138cc18f60e01b83525af180156107775761077c575b5061070c610700610103546001600160a01b031690565b6001600160a01b031690565b6040516323b872dd60e01b81523360048083019190915230602483015235604482015290602090829081600081606481015b03925af180156107775761074e57005b61076e9060203d8111610770575b6107668183611f12565b810190612595565b005b503d61075c565b612406565b8061078961078f92611edd565b80610372565b386106e9565b604051633c698d7960e01b8152600490fd5b905060fe5416331415386106b9565b3461037d57600036600319011261037d5760206001600160a01b0360655416604051908152f35b3461037d57604036600319011261037d576004356107fa816104f1565b336000526034602052610824816040600020906001600160a01b0316600052602052604060002090565b54602435810180911161083b5761052c913361212e565b611f34565b3461037d57600036600319011261037d576001600160a01b036020816101045416916065541660246040518094819363b3596f0760e01b835260048301525afa908115610777576104479161089d916000916108ad575b506132f0565b6040519081529081906020820190565b6108ce915060203d81116108d4575b6108c68183611f12565b810190612cde565b38610897565b503d6108bc565b3461037d57600036600319011261037d576108f4611deb565b60ca5460ff8116156109335760ff191660ca557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b3461037d57602036600319011261037d5761098b6004356104f1565b602061039d61382f565b3461037d57602036600319011261037d576001600160a01b036004356109ba816104f1565b166000526101066020526020604060002054604051908152f35b3461037d57602036600319011261037d57602061039d6004356109f6816104f1565b6136c6565b3461037d57602036600319011261037d57600435610a17611deb565b6127108111610a51576020817f17eb3ea543d479a0358f9f15a48526b973a5b7f30243301da7d83f4720e243c29260fd55604051908152a1005b60405163221d6b1360e01b8152600490fd5b3461037d57600036600319011261037d57602060ff60ca54166040519015158152f35b9181601f8401121561037d5782359167ffffffffffffffff831161037d576020838186019501011161037d57565b3461037d57608036600319011261037d57600435610ad1816104f1565b67ffffffffffffffff60243581811161037d57610af2903690600401610a86565b60443592831161037d57610b0d610b5c933690600401610a86565b9160643593610b1b856104f1565b60005496610b4060ff8960081c16158099819a610bdf575b8115610bbf575b5061230d565b87610b53600160ff196000541617600055565b610ba6576125ad565b610b6257005b610b7261ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989080602081015b0390a1005b610bba61010061ff00196000541617600055565b6125ad565b303b15915081610bd1575b5038610b3a565b6001915060ff161438610bca565b600160ff8216109150610b33565b3461037d57604036600319011261037d57602435600435610c0d826104f1565b610c15612c9a565b610c1d6138f1565b6001600160a01b038060ff5416803b1561037d576000809160046040518094819363138cc18f60e01b83525af1801561077757610d15575b50610c5f8261225b565b918215610ce25761044793610cda92610c9383610c8a6107006107006065546001600160a01b031690565b30903390612db1565b610c9d8583612ced565b6040805184815260208101879052929091169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d791a3613231565b61089d613a07565b60405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b6044820152606490fd5b610d1e90611edd565b38610c55565b3461037d57602036600319011261037d576001600160a01b03600435610d49816104f1565b1660005260336020526020604060002054604051908152f35b3461037d576000806003193601126104d057610d7c611deb565b806001600160a01b036098546001600160601b0360a01b8116609855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b3461037d5760408060031936011261037d57600435610dde816104f1565b60243590610dea611deb565b610e0261070061070060ff546001600160a01b031690565b6001600160a01b0382169081141580610f62575b610f515783518091632578b69f60e21b825281600460209485935afa8015610777578491600091610f34575b501015610f235782610e68836001600160a01b0316600052610106602052604060002090565b55610e7f610700610103546001600160a01b031690565b845163095ea7b360e01b81526001600160a01b03841660048201526024810185905294908290869060449082906000905af1918215610777577f84d2db42497fc6f1882756be420935d982025ad8a2a903dfb83638a09e49a77595610ba193610f05575b50505192839283602090939291936001600160a01b0360408201951681520152565b81610f1b92903d10610770576107668183611f12565b503880610ee3565b8351633a020d0160e11b8152600490fd5b610f4b9150833d85116108d4576108c68183611f12565b38610e42565b83516348b905b160e01b8152600490fd5b50610f7b61070061070060fe546001600160a01b031690565b811415610e16565b3461037d57600036600319011261037d57602061039d613503565b3461037d57600036600319011261037d5760206001600160a01b0360fe5416604051908152f35b3461037d57600036600319011261037d57610fde611deb565b610fe6612c9a565b600160ff1960ca54161760ca557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b3461037d57602036600319011261037d577f333b26cca69716ad4680ddb07663f5bfb4f06045671f336af9a83690a3ae00f9602060043561105e611deb565b8060fc55604051908152a1005b3461037d57600036600319011261037d576001600160a01b036020816101045416916065541660246040518094819363b3596f0760e01b835260048301525afa908115610777576104479161089d916000916110d0575b506110cb6137c3565b613361565b6110e8915060203d81116108d4576108c68183611f12565b386110c2565b3461037d57600036600319011261037d5760206001600160a01b0360985416604051908152f35b3461037d57600036600319011261037d576101005461010154604080516001600160801b038085168252608094851c602083015283169181019190915290821c6060820152f35b3461037d5760006040806003193601126113085760043590602435611180816104f1565b611188612c9a565b6111906138f1565b6001600160a01b0392848460ff5416803b15611308578190600486518094819363138cc18f60e01b83525af18015610777576112f5575b507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d76111f2826122ac565b9461120586826065541630903390612db1565b61120f8385612ced565b8451868152602081019390935292909216913391604090a3611238826112336137c3565b611f4a565b60fc54106112e55782611257610700610102546001600160a01b031690565b6065546001600160a01b031690803b156112e157835163617ba03760e01b81526001600160a01b0392909216600483015260248201859052306044830152600060648301529094859160849183915af192831561077757610447936112ce575b506112c0613a07565b519081529081906020820190565b806107896112db92611edd565b386112b7565b8280fd5b516324d758c360e21b8152600490fd5b61130190959195611edd565b93386111c7565b5080fd5b3461037d576000806003193601126104d057604051908060375461132f81611e8d565b808552916001918083169081156104a65750600114611358576104478561043b81870382611f12565b9250603783527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae5b82841061139b57505050810160200161043b8261044761042b565b80546020858701810191909152909301928101611380565b3461037d57608036600319011261037d576113cc611deb565b7f37f0489f29f6e60f68be54709fc0686e4fbf0ff44b70be0b5be1eebb17c9953f6004356113f981612441565b61010080546001600160801b0319166001600160801b0383161790556024359061142282612441565b61010080546001600160801b0316608084901b6001600160801b031916179055610ba160443561145181612441565b61010180546001600160801b0319166001600160801b0383161790556064359061147a82612441565b61010180546001600160801b0316608084901b6001600160801b0319161790556114a384612441565b6114ac85612441565b6114b581612441565b6114be82612441565b604080516001600160801b039586168152958516602087015290841690850152909116606083015281906080820190565b3461037d57604036600319011261037d5760043561150c816104f1565b6024359033600052603460205261153a816040600020906001600160a01b0316600052602052604060002090565b549180831061154f576105e89203903361212e565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b3461037d57604036600319011261037d5761052c6004356115c2816104f1565b602435903361200a565b3461037d57600036600319011261037d5760206001600160a01b0360ff5416604051908152f35b3461037d57602036600319011261037d57602061039d6004356122ac565b606090600319011261037d576004359060243561162d816104f1565b9060443561163a816104f1565b90565b3461037d5761164b36611611565b906000928391611659612c9a565b6116616138f1565b6001600160a01b038060ff5416803b1561177657849060046040518099819363138cc18f60e01b83525af19384156107775761044796610cda95611767575b50906116cd6116ae856122ee565b878184819a1695863303611729575b50506116c887613165565b612fad565b60408051858152602081018890529184169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db9190819081015b0390a46117246107006107006065546001600160a01b031690565b6130df565b868152603460209081526040918290203360009081529152205460018101156116bd576117609161175991612fa0565b338361212e565b81386116bd565b61177090611edd565b386116a0565b8480fd5b3461037d5761178836611611565b91906000928391611797612c9a565b61179f6138f1565b6001600160a01b038060ff5416803b1561177657849060046040518099819363138cc18f60e01b83525af19384156107775761044796610cda9561188f575b50908581851692833303611851575b506118116117fa8261228e565b978896611808881515613118565b6116c888613165565b6040805186815260208101929092529184169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db9181908101611709565b838152603460209081526040918290203360009081529152205460018101156117ed576118889161188191612fa0565b338661212e565b85386117ed565b61189890611edd565b386117de565b3461037d576000806003193601126104d0576118b8611deb565b6118ce610700610102546001600160a01b031690565b6118e66107006107006065546001600160a01b031690565b60405163095ea7b360e01b8082526001600160a01b03841660048301526000196024830152602093919290919084908490604490829089905af1918215610777576119779385936119cc575b50611949610700610103546001600160a01b031690565b90866040518096819582948352600483019190916001600160a01b0360408201931681526020600019910152565b03925af18015610777576119ae575b827fba5bb3f899c7a3edcc9ff9d46c4e08449c6a608b6f8254132bc5af4898645cbc8180a180f35b816119c492903d10610770576107668183611f12565b503880611986565b6119e290843d8611610770576107668183611f12565b5038611932565b3461037d57602036600319011261037d576004356001600160a01b038060ff541690813314159081611ad5575b506107955781158015611ac4575b611ab257803b1561037d576000809160046040518094819363138cc18f60e01b83525af180156107775760009260209261073e92611a9f575b50611a74610700610103546001600160a01b031690565b60405163a9059cbb60e01b815233600482015260248101929092529093849283919082906044820190565b80610789611aac92611edd565b38611a5d565b604051630e25379960e21b8152600490fd5b50611ace336136c6565b8211611a24565b905060fe541633141538611a16565b3461037d57602036600319011261037d57611b006004356104f1565b602061039d611b0d61382f565b61225b565b3461037d57602036600319011261037d57602061039d60043561225b565b3461037d57602036600319011261037d57602061039d600435611b52816104f1565b613857565b3461037d57602036600319011261037d577f52d81611b2e2e74037271caa673fe82efa363a106c27d6373566a950d2be73fc60206001600160a01b03600435611b9f816104f1565b611ba7611deb565b16806001600160601b0360a01b60ff54161760ff55604051908152a1005b3461037d57602036600319011261037d57602061039d611b0d600435611b52816104f1565b3461037d57602036600319011261037d577fbd325305afd7728b65bc6a18a2ad623494a5ee4e3f31aad475ddb77d8e70717b60206001600160a01b03600435611c32816104f1565b611c3a611deb565b16806001600160601b0360a01b60fe54161760fe55604051908152a1005b3461037d57600036600319011261037d57602060fc54604051908152f35b3461037d57604036600319011261037d576020611cd2600435611c98816104f1565b6001600160a01b0360243591611cad836104f1565b16600052603483526040600020906001600160a01b0316600052602052604060002090565b54604051908152f35b3461037d57600036600319011261037d57602460206001600160a01b036101035416604051928380926370a0823160e01b82523060048301525afa908115610777576104479161089d91600091611d3c575b50611d36613503565b9061360b565b611d54915060203d81116108d4576108c68183611f12565b38611d2d565b3461037d57602036600319011261037d57600435611d77816104f1565b611d7f611deb565b6001600160a01b03811615611d975761076e90611e43565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6001600160a01b03609854163303611dff57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b609854906001600160a01b0380911691826001600160601b0360a01b821617609855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b90600182811c92168015611ebd575b6020831014611ea757565b634e487b7160e01b600052602260045260246000fd5b91607f1691611e9c565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111611ef157604052565b611ec7565b6040810190811067ffffffffffffffff821117611ef157604052565b90601f8019910116810190811067ffffffffffffffff821117611ef157604052565b634e487b7160e01b600052601160045260246000fd5b9190820180921161083b57565b15611f5e57565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b15611fb657565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b91906001600160a01b03908184169283156120db576120b9827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef946120d6941696612056881515611f57565b61209f84612077836001600160a01b03166000526033602052604060002090565b5461208482821015611faf565b03916001600160a01b03166000526033602052604060002090565b556001600160a01b03166000526033602052604060002090565b6120c4828254611f4a565b90556040519081529081906020820190565b0390a3565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b906001600160a01b039182811692831561220a5782169384156121ba57806121a97f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925946121916120d6956001600160a01b03166000526034602052604060002090565b906001600160a01b0316600052602052604060002090565b556040519081529081906020820190565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b60355480612267575090565b9061163a916122746137c3565b915b8181029181830414901517821515161561037d570490565b6035548061229a575090565b61163a916122a66137c3565b90612276565b603554806122b8575090565b61163a916122c46137c3565b905b9190918281029281840414901517811515161561037d57600190600019830104019015150290565b603554806122fa575090565b9061163a916123076137c3565b916122c6565b1561231457565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b604051906101e0820182811067ffffffffffffffff821117611ef157604052565b67ffffffffffffffff8111611ef157601f01601f191660200190565b9291926123b982612391565b916123c76040519384611f12565b82948184528183011161037d578281602093846000960137010152565b51906123ef826104f1565b565b9081602091031261037d575161163a816104f1565b6040513d6000823e3d90fd5b919082602091031261037d576040516020810181811067ffffffffffffffff821117611ef15760405291518252565b6001600160801b0381160361037d57565b51906123ef82612441565b519064ffffffffff8216820361037d57565b519061ffff8216820361037d57565b6101e08183031261037d5761249b612494612370565b9282612412565b82526124a960208201612452565b60208301526124ba60408201612452565b60408301526124cb60608201612452565b60608301526124dc60808201612452565b60808301526124ed60a08201612452565b60a08301526124fe60c0820161245d565b60c083015261250f60e0820161246f565b60e08301526101006125228183016123e4565b908301526101206125348183016123e4565b908301526101406125468183016123e4565b908301526101606125588183016123e4565b9083015261018061256a818301612452565b908301526101a061257c818301612452565b9083015261258e6101c0809201612452565b9082015290565b9081602091031261037d5751801515810361037d5790565b9391926125d26125da926125e1956125c3612951565b6125cb612974565b36916123ad565b9236916123ad565b9083612995565b610105805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03938416908117825561261690610700565b92604051809463026b1d5f60e01b825281600460209788935afa908115610777576126679183916000916128d4575b50166001600160a01b0361010291166001600160601b0360a01b825416179055565b6126b26101029361268261070086546001600160a01b031690565b6040516335ea6a7560e01b81526001600160a01b0390921660048301526101e09283918391829081906024820190565b03915afa9081156107775760049461270e6126ee61070061010061271b96610700968d996000926128a7575b505001516001600160a01b031690565b6001600160a01b0361010391166001600160601b0360a01b825416179055565b546001600160a01b031690565b604051631f94a27560e31b815293849182905afa8015610777576127639260009161287a575b50166001600160a01b0361010491166001600160601b0360a01b825416179055565b612779610700610103546001600160a01b031690565b9061278e61070082546001600160a01b031690565b60405163095ea7b360e01b8082526001600160a01b039290921660048201526000196024820152928490849060449082906000905af19182156107775761283293859361285d575b506128036107006127f56107006107006065546001600160a01b031690565b92546001600160a01b031690565b6040519283526001600160a01b0316600483015260001960248301529092839190829060009082906044820190565b03925af1801561077757612844575050565b8161285a92903d10610770576107668183611f12565b50565b61287390843d8611610770576107668183611f12565b50386127d6565b61289a9150853d87116128a0575b6128928183611f12565b8101906123f1565b38612741565b503d612888565b6128c69250803d106128cd575b6128be8183611f12565b81019061247e565b38806126de565b503d6128b4565b6128eb9150873d89116128a0576128928183611f12565b38612645565b156128f857565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61296b60ff60005460081c16612966816128f1565b6128f1565b6123ef33611e43565b61298960ff60005460081c16612966816128f1565b60ff1960ca541660ca55565b9092916129ad60ff60005460081c16612966816128f1565b835167ffffffffffffffff8111611ef1576129d2816129cd603654611e8d565b612ace565b602080601f8311600114612a3857509080612a0f93926123ef9697600092612a2d575b50508160011b916000199060031b1c191617603655612bb0565b6001600160a01b03166001600160601b0360a01b6065541617606555565b0151905038806129f5565b90601f19831696612a6b60366000527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890565b926000905b898210612ab6575050918391600193612a0f96956123ef999a10612a9d575b505050811b01603655612bb0565b015160001960f88460031b161c19169055388080612a8f565b80600185968294968601518155019501930190612a70565b601f8111612ada575050565b600090603682527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8906020601f850160051c83019410612b35575b601f0160051c01915b828110612b2a57505050565b818155600101612b1e565b9092508290612b15565b601f8111612b4b575050565b600090603782527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae906020601f850160051c83019410612ba6575b601f0160051c01915b828110612b9b57505050565b818155600101612b8f565b9092508290612b86565b90815167ffffffffffffffff8111611ef157612bd681612bd1603754611e8d565b612b3f565b602080601f8311600114612c125750819293600092612c07575b50508160011b916000199060031b1c191617603755565b015190503880612bf0565b90601f19831694612c4560376000527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae90565b926000905b878210612c82575050836001959610612c69575b505050811b01603755565b015160001960f88460031b161c19169055388080612c5e565b80600185968294968601518155019501930190612c4a565b60ff60ca5416612ca657565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b9081602091031261037d575190565b906001600160a01b038216918215612d6c576035549082820180921161083b57612d2d916035556001600160a01b03166000526033602052604060002090565b80549082820180921161083b576000927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209255604051908152a3565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648201929092526123ef91612dfd82608481015b03601f198101845283611f12565b612e61565b15612e0957565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6001600160a01b03169060405190612e7882611ef6565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b15612eef5760008281928287612eca9796519301915af1612ec4612f34565b90612f64565b80519081612ed757505050565b826123ef93612eea938301019101612595565b612e02565b60405162461bcd60e51b815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d15612f5f573d90612f4582612391565b91612f536040519384611f12565b82523d6000602084013e565b606090565b90919015612f70575090565b815115612f805750805190602001fd5b60405162461bcd60e51b8152908190612f9c90600483016103a5565b0390fd5b9190820391821161083b57565b6001600160a01b03811690811561309057612fdb816001600160a01b03166000526033602052604060002090565b5483811061304057837fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9261302b6000966120d69403916001600160a01b03166000526033602052604060002090565b5561089d61303b82603554612fa0565b603555565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448201929092526123ef91612dfd8260648101612def565b1561311f57565b60405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b6044820152606490fd5b8181029291811591840414171561083b57565b61316d613503565b61319561318d6131848461317f6137c3565b612fa0565b60fd5490613152565b612710900490565b1061321f5760206131f7916131b6610700610102546001600160a01b031690565b606554604051631a4ca37b60e21b81526001600160a01b03909116600482015260248101929092523060448301529092839190829060009082906064820190565b03925af18015610777576132085750565b61285a9060203d81116108d4576108c68183611f12565b604051635276dbb960e01b8152600490fd5b6132396137c3565b81810180911161083b5760fc54106132d757613261610700610102546001600160a01b031690565b906132746065546001600160a01b031690565b823b1561037d5760405163617ba03760e01b81526001600160a01b03919091166004820152602481019190915230604482015260006064820181905290918290608490829084905af18015610777576132ca5750565b806107896123ef92611edd565b6040516324d758c360e21b8152600490fd5b1561037d57565b600160801b6000198183098260801b91828083109203918083039214613354576305f5e100908282111561037d577facbe0e98f503f8881186e60dbb7f727bf36b7213ee9f5a78c767074b22e90e21940990828211900360f81b910360081c170290565b50506305f5e10091500490565b9060001981830981830291828083109203918083039214613354576305f5e100908282111561037d577facbe0e98f503f8881186e60dbb7f727bf36b7213ee9f5a78c767074b22e90e21940990828211900360f81b910360081c170290565b6c0c9f2c9cd04674edea40000000916000198383099280830292838086109503948086039514613447579082916133f88684116132e9565b0981806000031680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b505091506134568215156132e9565b0490565b90600019818309818302918280831092039180830392146134c2576c0c9f2c9cd04674edea40000000908282111561037d577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b50506c0c9f2c9cd04674edea4000000091500490565b90916000198383099280830292838086109503948086039514613447579082916133f88684116132e9565b60009061351b61070060fe546001600160a01b031690565b6001600160a01b039081811661359f575b5061354261070060ff546001600160a01b031690565b90811661354c5750565b9160206004929360405193848092632578b69f60e21b82525afa9081156107775761163a9260009261357f575b50611f4a565b61359891925060203d81116108d4576108c68183611f12565b9038613579565b604051632578b69f60e21b8152919350602090829060049082905afa908115610777576000916135d2575b50913861352c565b6135ea915060203d81116108d4576108c68183611f12565b386135ca565b9190916001600160801b038080941691160191821161083b57565b816136ae57505060005b610100546001600160801b038082166c0c9f2c9cd04674edea400000009381850394851161083b57818111156136825761163a9461365961367b9361365e93612fa0565b6133c0565b61367261010154948486169060801c6135f0565b9360801c61345a565b9116611f4a565b61163a94506136a59261369e610101546001600160801b031690565b16906134d8565b9060801c611f4a565b81810180911161083b576136c1916133c0565b613615565b6001600160a01b03906136ed816001600160a01b0316600052610106602052604060002090565b549060405190632578b69f60e21b8252816004816020968794165afa908115610777576000916137a6575b5081811161379e5761372991612fa0565b90613740610700610103546001600160a01b031690565b6040516370a0823160e01b8152306004820152908290829060249082905afa91821561077757600092613781575b50508082101561377c575090565b905090565b6137979250803d106108d4576108c68183611f12565b388061376e565b505050600090565b6137bd9150833d85116108d4576108c68183611f12565b38613718565b602460206001600160a01b036101035416604051928380926370a0823160e01b82523060048301525afa90811561077757600091613811575b50613805613503565b810180911161083b5790565b613829915060203d81116108d4576108c68183611f12565b386137fc565b60fc5461383a6137c3565b6000828210156138515750810390811161083b5790565b91505090565b61385f6137c3565b613867613503565b6127109081810291818304149015171561083b5760fd549081156138db57046000818311156138c95750810390811161083b576001600160a01b0390915b1660005260336020526138bc60406000205461228e565b908082101561377c575090565b90506001600160a01b039150916138a5565b634e487b7160e01b600052601260045260246000fd5b613907610700610103546001600160a01b031690565b61394d61391f61070060ff546001600160a01b031690565b6040516370a0823160e01b8082526001600160a01b0390921660048201526020928390829081906024820190565b0381875afa9182156107775783916000936139e8575b5060405190815230600482015293849060249082905afa908115610777576000937f6398cf9a29f8130777c54d3d2c061f37c691879a0c04755d9e5e6eb66705ee769385936139c9575b505060408051918252602082019290925290819081015b0390a2565b6139e0929350803d106108d4576108c68183611f12565b9038806139ad565b613a00919350823d84116108d4576108c68183611f12565b9138613963565b613a1d610700610103546001600160a01b031690565b613a3561391f61070060ff546001600160a01b031690565b0381875afa918215610777578391600093613ab0575b5060405190815230600482015293849060249082905afa908115610777576001937f6398cf9a29f8130777c54d3d2c061f37c691879a0c04755d9e5e6eb66705ee76936000936139c957505060408051918252602082019290925290819081016139c4565b613ac8919350823d84116108d4576108c68183611f12565b9138613a4b56fea164736f6c6343000812000a",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806301e1d1141461036d57806306fdde031461036857806307a2d13a14610322578063095ea7b3146103635780630a28a4771461035e57806318160ddd1461035957806323b872dd14610354578063304ea9cb1461034f578063313ce5671461034a578063371fd8e61461034557806338d52e0f14610340578063395093511461033b5780633d672a45146103365780633f4ba83a14610331578063402d267d1461032c5780634a584432146103275780634cdad50614610322578063543bc9841461031d57806356ab92b3146103185780635c975abb14610313578063613d25bb1461030e5780636e553f651461030957806370a0823114610304578063715018a6146102ff578063768e66d3146102fa57806377c718ae146102f55780638224f4e8146102f05780638456cb59146102eb57806386651203146102e65780638d315d7b146102e15780638da5cb5b146102dc578063949b22ae146102d757806394bf804d146102d257806395d89b41146102cd578063964f7be2146102c8578063a457c2d7146102c3578063a9059cbb146102be578063aa88fdc3146102b9578063b3d7f6b9146102b4578063b460af94146102af578063ba087652146102aa578063bf9571f1146102a5578063c5ebeaec146102a0578063c63d75b61461029b578063c6e6f59214610273578063ce96cb7714610296578063d026c12314610291578063d905777e1461028c578063db2d9c3a14610287578063dbd5edc714610282578063dd62ed3e1461027d578063e3696edd14610278578063ef8b30f7146102735763f2fde38b1461026e57600080fd5b611d5a565b611b12565b611cdb565b611c76565b611c58565b611bea565b611bc5565b611b57565b611b30565b611ae4565b6119e9565b61189e565b61177a565b61163d565b6115f3565b6115cc565b6115a2565b6114ef565b6113b3565b61130c565b61115c565b611115565b6110ee565b61106b565b61101f565b610fc5565b610f9e565b610f83565b610dc0565b610d62565b610d24565b610bed565b610ab4565b610a63565b6109fb565b6109d4565b6104d3565b610995565b61096f565b6108db565b610840565b6107dd565b6107b6565b61068f565b610673565b610655565b610573565b610555565b610537565b610502565b6103ee565b610382565b600091031261037d57565b600080fd5b3461037d57600036600319011261037d57602061039d6137c3565b604051908152f35b6020808252825181830181905290939260005b8281106103da57505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016103b8565b3461037d576000806003193601126104d057604051908060365461041181611e8d565b808552916001918083169081156104a6575060011461044b575b6104478561043b81870382611f12565b604051918291826103a5565b0390f35b9250603683527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b85b82841061048e57505050810160200161043b8261044761042b565b80546020858701810191909152909301928101610473565b8695506104479693506020925061043b94915060ff191682840152151560051b820101929361042b565b80fd5b3461037d57602036600319011261037d57602061039d60043561228e565b6001600160a01b0381160361037d57565b3461037d57604036600319011261037d5761052c600435610522816104f1565b602435903361212e565b602060405160018152f35b3461037d57602036600319011261037d57602061039d6004356122ee565b3461037d57600036600319011261037d576020603554604051908152f35b3461037d57606036600319011261037d57600435610590816104f1565b60243561059c816104f1565b604435906001600160a01b03831660005260346020526105d3336040600020906001600160a01b0316600052602052604060002090565b5492600184016105f4575b6105e8935061200a565b60405160018152602090f35b8284106106105761060b836105e89503338361212e565b6105de565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b3461037d57600036600319011261037d57602060fd54604051908152f35b3461037d57600036600319011261037d57602060405160068152f35b3461037d57602036600319011261037d576001600160a01b038060ff5416908133141590816107a7575b5061079557803b1561037d576000809160046040518094819363138cc18f60e01b83525af180156107775761077c575b5061070c610700610103546001600160a01b031690565b6001600160a01b031690565b6040516323b872dd60e01b81523360048083019190915230602483015235604482015290602090829081600081606481015b03925af180156107775761074e57005b61076e9060203d8111610770575b6107668183611f12565b810190612595565b005b503d61075c565b612406565b8061078961078f92611edd565b80610372565b386106e9565b604051633c698d7960e01b8152600490fd5b905060fe5416331415386106b9565b3461037d57600036600319011261037d5760206001600160a01b0360655416604051908152f35b3461037d57604036600319011261037d576004356107fa816104f1565b336000526034602052610824816040600020906001600160a01b0316600052602052604060002090565b54602435810180911161083b5761052c913361212e565b611f34565b3461037d57600036600319011261037d576001600160a01b036020816101045416916065541660246040518094819363b3596f0760e01b835260048301525afa908115610777576104479161089d916000916108ad575b506132f0565b6040519081529081906020820190565b6108ce915060203d81116108d4575b6108c68183611f12565b810190612cde565b38610897565b503d6108bc565b3461037d57600036600319011261037d576108f4611deb565b60ca5460ff8116156109335760ff191660ca557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b3461037d57602036600319011261037d5761098b6004356104f1565b602061039d61382f565b3461037d57602036600319011261037d576001600160a01b036004356109ba816104f1565b166000526101066020526020604060002054604051908152f35b3461037d57602036600319011261037d57602061039d6004356109f6816104f1565b6136c6565b3461037d57602036600319011261037d57600435610a17611deb565b6127108111610a51576020817f17eb3ea543d479a0358f9f15a48526b973a5b7f30243301da7d83f4720e243c29260fd55604051908152a1005b60405163221d6b1360e01b8152600490fd5b3461037d57600036600319011261037d57602060ff60ca54166040519015158152f35b9181601f8401121561037d5782359167ffffffffffffffff831161037d576020838186019501011161037d57565b3461037d57608036600319011261037d57600435610ad1816104f1565b67ffffffffffffffff60243581811161037d57610af2903690600401610a86565b60443592831161037d57610b0d610b5c933690600401610a86565b9160643593610b1b856104f1565b60005496610b4060ff8960081c16158099819a610bdf575b8115610bbf575b5061230d565b87610b53600160ff196000541617600055565b610ba6576125ad565b610b6257005b610b7261ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989080602081015b0390a1005b610bba61010061ff00196000541617600055565b6125ad565b303b15915081610bd1575b5038610b3a565b6001915060ff161438610bca565b600160ff8216109150610b33565b3461037d57604036600319011261037d57602435600435610c0d826104f1565b610c15612c9a565b610c1d6138f1565b6001600160a01b038060ff5416803b1561037d576000809160046040518094819363138cc18f60e01b83525af1801561077757610d15575b50610c5f8261225b565b918215610ce25761044793610cda92610c9383610c8a6107006107006065546001600160a01b031690565b30903390612db1565b610c9d8583612ced565b6040805184815260208101879052929091169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d791a3613231565b61089d613a07565b60405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b6044820152606490fd5b610d1e90611edd565b38610c55565b3461037d57602036600319011261037d576001600160a01b03600435610d49816104f1565b1660005260336020526020604060002054604051908152f35b3461037d576000806003193601126104d057610d7c611deb565b806001600160a01b036098546001600160601b0360a01b8116609855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b3461037d5760408060031936011261037d57600435610dde816104f1565b60243590610dea611deb565b610e0261070061070060ff546001600160a01b031690565b6001600160a01b0382169081141580610f62575b610f515783518091632578b69f60e21b825281600460209485935afa8015610777578491600091610f34575b501015610f235782610e68836001600160a01b0316600052610106602052604060002090565b55610e7f610700610103546001600160a01b031690565b845163095ea7b360e01b81526001600160a01b03841660048201526024810185905294908290869060449082906000905af1918215610777577f84d2db42497fc6f1882756be420935d982025ad8a2a903dfb83638a09e49a77595610ba193610f05575b50505192839283602090939291936001600160a01b0360408201951681520152565b81610f1b92903d10610770576107668183611f12565b503880610ee3565b8351633a020d0160e11b8152600490fd5b610f4b9150833d85116108d4576108c68183611f12565b38610e42565b83516348b905b160e01b8152600490fd5b50610f7b61070061070060fe546001600160a01b031690565b811415610e16565b3461037d57600036600319011261037d57602061039d613503565b3461037d57600036600319011261037d5760206001600160a01b0360fe5416604051908152f35b3461037d57600036600319011261037d57610fde611deb565b610fe6612c9a565b600160ff1960ca54161760ca557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b3461037d57602036600319011261037d577f333b26cca69716ad4680ddb07663f5bfb4f06045671f336af9a83690a3ae00f9602060043561105e611deb565b8060fc55604051908152a1005b3461037d57600036600319011261037d576001600160a01b036020816101045416916065541660246040518094819363b3596f0760e01b835260048301525afa908115610777576104479161089d916000916110d0575b506110cb6137c3565b613361565b6110e8915060203d81116108d4576108c68183611f12565b386110c2565b3461037d57600036600319011261037d5760206001600160a01b0360985416604051908152f35b3461037d57600036600319011261037d576101005461010154604080516001600160801b038085168252608094851c602083015283169181019190915290821c6060820152f35b3461037d5760006040806003193601126113085760043590602435611180816104f1565b611188612c9a565b6111906138f1565b6001600160a01b0392848460ff5416803b15611308578190600486518094819363138cc18f60e01b83525af18015610777576112f5575b507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d76111f2826122ac565b9461120586826065541630903390612db1565b61120f8385612ced565b8451868152602081019390935292909216913391604090a3611238826112336137c3565b611f4a565b60fc54106112e55782611257610700610102546001600160a01b031690565b6065546001600160a01b031690803b156112e157835163617ba03760e01b81526001600160a01b0392909216600483015260248201859052306044830152600060648301529094859160849183915af192831561077757610447936112ce575b506112c0613a07565b519081529081906020820190565b806107896112db92611edd565b386112b7565b8280fd5b516324d758c360e21b8152600490fd5b61130190959195611edd565b93386111c7565b5080fd5b3461037d576000806003193601126104d057604051908060375461132f81611e8d565b808552916001918083169081156104a65750600114611358576104478561043b81870382611f12565b9250603783527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae5b82841061139b57505050810160200161043b8261044761042b565b80546020858701810191909152909301928101611380565b3461037d57608036600319011261037d576113cc611deb565b7f37f0489f29f6e60f68be54709fc0686e4fbf0ff44b70be0b5be1eebb17c9953f6004356113f981612441565b61010080546001600160801b0319166001600160801b0383161790556024359061142282612441565b61010080546001600160801b0316608084901b6001600160801b031916179055610ba160443561145181612441565b61010180546001600160801b0319166001600160801b0383161790556064359061147a82612441565b61010180546001600160801b0316608084901b6001600160801b0319161790556114a384612441565b6114ac85612441565b6114b581612441565b6114be82612441565b604080516001600160801b039586168152958516602087015290841690850152909116606083015281906080820190565b3461037d57604036600319011261037d5760043561150c816104f1565b6024359033600052603460205261153a816040600020906001600160a01b0316600052602052604060002090565b549180831061154f576105e89203903361212e565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b3461037d57604036600319011261037d5761052c6004356115c2816104f1565b602435903361200a565b3461037d57600036600319011261037d5760206001600160a01b0360ff5416604051908152f35b3461037d57602036600319011261037d57602061039d6004356122ac565b606090600319011261037d576004359060243561162d816104f1565b9060443561163a816104f1565b90565b3461037d5761164b36611611565b906000928391611659612c9a565b6116616138f1565b6001600160a01b038060ff5416803b1561177657849060046040518099819363138cc18f60e01b83525af19384156107775761044796610cda95611767575b50906116cd6116ae856122ee565b878184819a1695863303611729575b50506116c887613165565b612fad565b60408051858152602081018890529184169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db9190819081015b0390a46117246107006107006065546001600160a01b031690565b6130df565b868152603460209081526040918290203360009081529152205460018101156116bd576117609161175991612fa0565b338361212e565b81386116bd565b61177090611edd565b386116a0565b8480fd5b3461037d5761178836611611565b91906000928391611797612c9a565b61179f6138f1565b6001600160a01b038060ff5416803b1561177657849060046040518099819363138cc18f60e01b83525af19384156107775761044796610cda9561188f575b50908581851692833303611851575b506118116117fa8261228e565b978896611808881515613118565b6116c888613165565b6040805186815260208101929092529184169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db9181908101611709565b838152603460209081526040918290203360009081529152205460018101156117ed576118889161188191612fa0565b338661212e565b85386117ed565b61189890611edd565b386117de565b3461037d576000806003193601126104d0576118b8611deb565b6118ce610700610102546001600160a01b031690565b6118e66107006107006065546001600160a01b031690565b60405163095ea7b360e01b8082526001600160a01b03841660048301526000196024830152602093919290919084908490604490829089905af1918215610777576119779385936119cc575b50611949610700610103546001600160a01b031690565b90866040518096819582948352600483019190916001600160a01b0360408201931681526020600019910152565b03925af18015610777576119ae575b827fba5bb3f899c7a3edcc9ff9d46c4e08449c6a608b6f8254132bc5af4898645cbc8180a180f35b816119c492903d10610770576107668183611f12565b503880611986565b6119e290843d8611610770576107668183611f12565b5038611932565b3461037d57602036600319011261037d576004356001600160a01b038060ff541690813314159081611ad5575b506107955781158015611ac4575b611ab257803b1561037d576000809160046040518094819363138cc18f60e01b83525af180156107775760009260209261073e92611a9f575b50611a74610700610103546001600160a01b031690565b60405163a9059cbb60e01b815233600482015260248101929092529093849283919082906044820190565b80610789611aac92611edd565b38611a5d565b604051630e25379960e21b8152600490fd5b50611ace336136c6565b8211611a24565b905060fe541633141538611a16565b3461037d57602036600319011261037d57611b006004356104f1565b602061039d611b0d61382f565b61225b565b3461037d57602036600319011261037d57602061039d60043561225b565b3461037d57602036600319011261037d57602061039d600435611b52816104f1565b613857565b3461037d57602036600319011261037d577f52d81611b2e2e74037271caa673fe82efa363a106c27d6373566a950d2be73fc60206001600160a01b03600435611b9f816104f1565b611ba7611deb565b16806001600160601b0360a01b60ff54161760ff55604051908152a1005b3461037d57602036600319011261037d57602061039d611b0d600435611b52816104f1565b3461037d57602036600319011261037d577fbd325305afd7728b65bc6a18a2ad623494a5ee4e3f31aad475ddb77d8e70717b60206001600160a01b03600435611c32816104f1565b611c3a611deb565b16806001600160601b0360a01b60fe54161760fe55604051908152a1005b3461037d57600036600319011261037d57602060fc54604051908152f35b3461037d57604036600319011261037d576020611cd2600435611c98816104f1565b6001600160a01b0360243591611cad836104f1565b16600052603483526040600020906001600160a01b0316600052602052604060002090565b54604051908152f35b3461037d57600036600319011261037d57602460206001600160a01b036101035416604051928380926370a0823160e01b82523060048301525afa908115610777576104479161089d91600091611d3c575b50611d36613503565b9061360b565b611d54915060203d81116108d4576108c68183611f12565b38611d2d565b3461037d57602036600319011261037d57600435611d77816104f1565b611d7f611deb565b6001600160a01b03811615611d975761076e90611e43565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6001600160a01b03609854163303611dff57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b609854906001600160a01b0380911691826001600160601b0360a01b821617609855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b90600182811c92168015611ebd575b6020831014611ea757565b634e487b7160e01b600052602260045260246000fd5b91607f1691611e9c565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111611ef157604052565b611ec7565b6040810190811067ffffffffffffffff821117611ef157604052565b90601f8019910116810190811067ffffffffffffffff821117611ef157604052565b634e487b7160e01b600052601160045260246000fd5b9190820180921161083b57565b15611f5e57565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b15611fb657565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b91906001600160a01b03908184169283156120db576120b9827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef946120d6941696612056881515611f57565b61209f84612077836001600160a01b03166000526033602052604060002090565b5461208482821015611faf565b03916001600160a01b03166000526033602052604060002090565b556001600160a01b03166000526033602052604060002090565b6120c4828254611f4a565b90556040519081529081906020820190565b0390a3565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b906001600160a01b039182811692831561220a5782169384156121ba57806121a97f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925946121916120d6956001600160a01b03166000526034602052604060002090565b906001600160a01b0316600052602052604060002090565b556040519081529081906020820190565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b60355480612267575090565b9061163a916122746137c3565b915b8181029181830414901517821515161561037d570490565b6035548061229a575090565b61163a916122a66137c3565b90612276565b603554806122b8575090565b61163a916122c46137c3565b905b9190918281029281840414901517811515161561037d57600190600019830104019015150290565b603554806122fa575090565b9061163a916123076137c3565b916122c6565b1561231457565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b604051906101e0820182811067ffffffffffffffff821117611ef157604052565b67ffffffffffffffff8111611ef157601f01601f191660200190565b9291926123b982612391565b916123c76040519384611f12565b82948184528183011161037d578281602093846000960137010152565b51906123ef826104f1565b565b9081602091031261037d575161163a816104f1565b6040513d6000823e3d90fd5b919082602091031261037d576040516020810181811067ffffffffffffffff821117611ef15760405291518252565b6001600160801b0381160361037d57565b51906123ef82612441565b519064ffffffffff8216820361037d57565b519061ffff8216820361037d57565b6101e08183031261037d5761249b612494612370565b9282612412565b82526124a960208201612452565b60208301526124ba60408201612452565b60408301526124cb60608201612452565b60608301526124dc60808201612452565b60808301526124ed60a08201612452565b60a08301526124fe60c0820161245d565b60c083015261250f60e0820161246f565b60e08301526101006125228183016123e4565b908301526101206125348183016123e4565b908301526101406125468183016123e4565b908301526101606125588183016123e4565b9083015261018061256a818301612452565b908301526101a061257c818301612452565b9083015261258e6101c0809201612452565b9082015290565b9081602091031261037d5751801515810361037d5790565b9391926125d26125da926125e1956125c3612951565b6125cb612974565b36916123ad565b9236916123ad565b9083612995565b610105805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03938416908117825561261690610700565b92604051809463026b1d5f60e01b825281600460209788935afa908115610777576126679183916000916128d4575b50166001600160a01b0361010291166001600160601b0360a01b825416179055565b6126b26101029361268261070086546001600160a01b031690565b6040516335ea6a7560e01b81526001600160a01b0390921660048301526101e09283918391829081906024820190565b03915afa9081156107775760049461270e6126ee61070061010061271b96610700968d996000926128a7575b505001516001600160a01b031690565b6001600160a01b0361010391166001600160601b0360a01b825416179055565b546001600160a01b031690565b604051631f94a27560e31b815293849182905afa8015610777576127639260009161287a575b50166001600160a01b0361010491166001600160601b0360a01b825416179055565b612779610700610103546001600160a01b031690565b9061278e61070082546001600160a01b031690565b60405163095ea7b360e01b8082526001600160a01b039290921660048201526000196024820152928490849060449082906000905af19182156107775761283293859361285d575b506128036107006127f56107006107006065546001600160a01b031690565b92546001600160a01b031690565b6040519283526001600160a01b0316600483015260001960248301529092839190829060009082906044820190565b03925af1801561077757612844575050565b8161285a92903d10610770576107668183611f12565b50565b61287390843d8611610770576107668183611f12565b50386127d6565b61289a9150853d87116128a0575b6128928183611f12565b8101906123f1565b38612741565b503d612888565b6128c69250803d106128cd575b6128be8183611f12565b81019061247e565b38806126de565b503d6128b4565b6128eb9150873d89116128a0576128928183611f12565b38612645565b156128f857565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61296b60ff60005460081c16612966816128f1565b6128f1565b6123ef33611e43565b61298960ff60005460081c16612966816128f1565b60ff1960ca541660ca55565b9092916129ad60ff60005460081c16612966816128f1565b835167ffffffffffffffff8111611ef1576129d2816129cd603654611e8d565b612ace565b602080601f8311600114612a3857509080612a0f93926123ef9697600092612a2d575b50508160011b916000199060031b1c191617603655612bb0565b6001600160a01b03166001600160601b0360a01b6065541617606555565b0151905038806129f5565b90601f19831696612a6b60366000527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890565b926000905b898210612ab6575050918391600193612a0f96956123ef999a10612a9d575b505050811b01603655612bb0565b015160001960f88460031b161c19169055388080612a8f565b80600185968294968601518155019501930190612a70565b601f8111612ada575050565b600090603682527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8906020601f850160051c83019410612b35575b601f0160051c01915b828110612b2a57505050565b818155600101612b1e565b9092508290612b15565b601f8111612b4b575050565b600090603782527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae906020601f850160051c83019410612ba6575b601f0160051c01915b828110612b9b57505050565b818155600101612b8f565b9092508290612b86565b90815167ffffffffffffffff8111611ef157612bd681612bd1603754611e8d565b612b3f565b602080601f8311600114612c125750819293600092612c07575b50508160011b916000199060031b1c191617603755565b015190503880612bf0565b90601f19831694612c4560376000527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae90565b926000905b878210612c82575050836001959610612c69575b505050811b01603755565b015160001960f88460031b161c19169055388080612c5e565b80600185968294968601518155019501930190612c4a565b60ff60ca5416612ca657565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b9081602091031261037d575190565b906001600160a01b038216918215612d6c576035549082820180921161083b57612d2d916035556001600160a01b03166000526033602052604060002090565b80549082820180921161083b576000927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209255604051908152a3565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648201929092526123ef91612dfd82608481015b03601f198101845283611f12565b612e61565b15612e0957565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6001600160a01b03169060405190612e7882611ef6565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b15612eef5760008281928287612eca9796519301915af1612ec4612f34565b90612f64565b80519081612ed757505050565b826123ef93612eea938301019101612595565b612e02565b60405162461bcd60e51b815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d15612f5f573d90612f4582612391565b91612f536040519384611f12565b82523d6000602084013e565b606090565b90919015612f70575090565b815115612f805750805190602001fd5b60405162461bcd60e51b8152908190612f9c90600483016103a5565b0390fd5b9190820391821161083b57565b6001600160a01b03811690811561309057612fdb816001600160a01b03166000526033602052604060002090565b5483811061304057837fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9261302b6000966120d69403916001600160a01b03166000526033602052604060002090565b5561089d61303b82603554612fa0565b603555565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448201929092526123ef91612dfd8260648101612def565b1561311f57565b60405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b6044820152606490fd5b8181029291811591840414171561083b57565b61316d613503565b61319561318d6131848461317f6137c3565b612fa0565b60fd5490613152565b612710900490565b1061321f5760206131f7916131b6610700610102546001600160a01b031690565b606554604051631a4ca37b60e21b81526001600160a01b03909116600482015260248101929092523060448301529092839190829060009082906064820190565b03925af18015610777576132085750565b61285a9060203d81116108d4576108c68183611f12565b604051635276dbb960e01b8152600490fd5b6132396137c3565b81810180911161083b5760fc54106132d757613261610700610102546001600160a01b031690565b906132746065546001600160a01b031690565b823b1561037d5760405163617ba03760e01b81526001600160a01b03919091166004820152602481019190915230604482015260006064820181905290918290608490829084905af18015610777576132ca5750565b806107896123ef92611edd565b6040516324d758c360e21b8152600490fd5b1561037d57565b600160801b6000198183098260801b91828083109203918083039214613354576305f5e100908282111561037d577facbe0e98f503f8881186e60dbb7f727bf36b7213ee9f5a78c767074b22e90e21940990828211900360f81b910360081c170290565b50506305f5e10091500490565b9060001981830981830291828083109203918083039214613354576305f5e100908282111561037d577facbe0e98f503f8881186e60dbb7f727bf36b7213ee9f5a78c767074b22e90e21940990828211900360f81b910360081c170290565b6c0c9f2c9cd04674edea40000000916000198383099280830292838086109503948086039514613447579082916133f88684116132e9565b0981806000031680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b505091506134568215156132e9565b0490565b90600019818309818302918280831092039180830392146134c2576c0c9f2c9cd04674edea40000000908282111561037d577f7d33c22789773a07feda8b6f0930e26fa397c439f1d5cf4b2eb27d7306d2dc99940990828211900360e21b9103601e1c170290565b50506c0c9f2c9cd04674edea4000000091500490565b90916000198383099280830292838086109503948086039514613447579082916133f88684116132e9565b60009061351b61070060fe546001600160a01b031690565b6001600160a01b039081811661359f575b5061354261070060ff546001600160a01b031690565b90811661354c5750565b9160206004929360405193848092632578b69f60e21b82525afa9081156107775761163a9260009261357f575b50611f4a565b61359891925060203d81116108d4576108c68183611f12565b9038613579565b604051632578b69f60e21b8152919350602090829060049082905afa908115610777576000916135d2575b50913861352c565b6135ea915060203d81116108d4576108c68183611f12565b386135ca565b9190916001600160801b038080941691160191821161083b57565b816136ae57505060005b610100546001600160801b038082166c0c9f2c9cd04674edea400000009381850394851161083b57818111156136825761163a9461365961367b9361365e93612fa0565b6133c0565b61367261010154948486169060801c6135f0565b9360801c61345a565b9116611f4a565b61163a94506136a59261369e610101546001600160801b031690565b16906134d8565b9060801c611f4a565b81810180911161083b576136c1916133c0565b613615565b6001600160a01b03906136ed816001600160a01b0316600052610106602052604060002090565b549060405190632578b69f60e21b8252816004816020968794165afa908115610777576000916137a6575b5081811161379e5761372991612fa0565b90613740610700610103546001600160a01b031690565b6040516370a0823160e01b8152306004820152908290829060249082905afa91821561077757600092613781575b50508082101561377c575090565b905090565b6137979250803d106108d4576108c68183611f12565b388061376e565b505050600090565b6137bd9150833d85116108d4576108c68183611f12565b38613718565b602460206001600160a01b036101035416604051928380926370a0823160e01b82523060048301525afa90811561077757600091613811575b50613805613503565b810180911161083b5790565b613829915060203d81116108d4576108c68183611f12565b386137fc565b60fc5461383a6137c3565b6000828210156138515750810390811161083b5790565b91505090565b61385f6137c3565b613867613503565b6127109081810291818304149015171561083b5760fd549081156138db57046000818311156138c95750810390811161083b576001600160a01b0390915b1660005260336020526138bc60406000205461228e565b908082101561377c575090565b90506001600160a01b039150916138a5565b634e487b7160e01b600052601260045260246000fd5b613907610700610103546001600160a01b031690565b61394d61391f61070060ff546001600160a01b031690565b6040516370a0823160e01b8082526001600160a01b0390921660048201526020928390829081906024820190565b0381875afa9182156107775783916000936139e8575b5060405190815230600482015293849060249082905afa908115610777576000937f6398cf9a29f8130777c54d3d2c061f37c691879a0c04755d9e5e6eb66705ee769385936139c9575b505060408051918252602082019290925290819081015b0390a2565b6139e0929350803d106108d4576108c68183611f12565b9038806139ad565b613a00919350823d84116108d4576108c68183611f12565b9138613963565b613a1d610700610103546001600160a01b031690565b613a3561391f61070060ff546001600160a01b031690565b0381875afa918215610777578391600093613ab0575b5060405190815230600482015293849060249082905afa908115610777576001937f6398cf9a29f8130777c54d3d2c061f37c691879a0c04755d9e5e6eb66705ee76936000936139c957505060408051918252602082019290925290819081016139c4565b613ac8919350823d84116108d4576108c68183611f12565b9138613a4b56fea164736f6c6343000812000a",
  "devdoc": {
    "author": "RageTrade*",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "availableBorrow(address)": {
        "params": {
          "borrower": "allowed borrower address"
        },
        "returns": {
          "availableAUsdc": "max aUsdc which given borrower can borrow"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "borrow(uint256)": {
        "details": "harvests fees from junior tranche since utilization changes",
        "params": {
          "amount": "amount of aUSDC to transfer from senior tranche to borrower"
        }
      },
      "convertToAssets(uint256)": {
        "details": "Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
      },
      "convertToShares(uint256)": {
        "details": "Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
      },
      "decimals()": {
        "details": "overriding because default decimals are 18",
        "returns": {
          "_0": "decimals (6)"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256,address)": {
        "details": "harvests fees from junior tranche since utilization changes",
        "params": {
          "amount": "amount of usdc to be deposited",
          "to": "receiver of shares"
        },
        "returns": {
          "shares": "minted to receiver"
        }
      },
      "getEthRewardsSplitRate()": {
        "returns": {
          "feeSplitRate": "part that should go to the senior tranche and remaining to junior tranche"
        }
      },
      "getPriceX128()": {
        "details": "only for external / frontend use, not used within contract",
        "returns": {
          "_0": "Q128 price of asset"
        }
      },
      "getVaultMarketValue()": {
        "returns": {
          "_0": "Q128 price of asset"
        }
      },
      "grantAllowances()": {
        "details": "to be called once the vault is deployed"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(address,string,string,address)": {
        "params": {
          "_name": "name of vault share token",
          "_poolAddressesProvider": "add",
          "_symbol": "symbol of vault share token",
          "_usdc": "address of usdc token"
        }
      },
      "maxDeposit(address)": {
        "returns": {
          "_0": "max no. of assets"
        }
      },
      "maxMint(address)": {
        "returns": {
          "_0": "max no. of shares"
        }
      },
      "maxRedeem(address)": {
        "params": {
          "owner": "address whose maximum redeemable shares needs to be computed"
        },
        "returns": {
          "_0": "max no. of shares"
        }
      },
      "maxWithdraw(address)": {
        "details": "checks the max amount basis user balance and maxUtilizationBps and gives the minimum of the two",
        "params": {
          "owner": "address whose maximum withdrawable assets needs to be computed"
        },
        "returns": {
          "_0": "max no. of assets"
        }
      },
      "mint(uint256,address)": {
        "details": "harvests fees from junior tranche since utilization changes",
        "params": {
          "shares": "amount of shares to be minted",
          "to": "receiver of shares"
        },
        "returns": {
          "amount": "of asset used to mint shares"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "previewDeposit(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
      },
      "previewMint(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting."
      },
      "previewRedeem(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming."
      },
      "previewWithdraw(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
      },
      "redeem(uint256,address,address)": {
        "details": "harvests fees from junior tranche since utilization changes",
        "params": {
          "owner": "owner of the shares to be burnt",
          "receiver": "receiver of assets",
          "shares": "amount of shares to be burnt"
        },
        "returns": {
          "assets": "amount of assets received by receiver"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(uint256)": {
        "details": "harvests fees from junior tranche since utilization changes",
        "params": {
          "amount": "amount of aUSDC to transfer from borrower to senior tranche"
        }
      },
      "setDepositCap(uint256)": {
        "details": "depositCap = limit on the asset amount (usdc) that can be deposited into the vault",
        "params": {
          "_newDepositCap": ": updated deposit cap"
        }
      },
      "setDnGmxJuniorVault(address)": {
        "params": {
          "_dnGmxJuniorVault": ": updated deposit cap"
        }
      },
      "setLeveragePool(address)": {
        "params": {
          "_leveragePool": ": updated deposit cap"
        }
      },
      "setMaxUtilizationBps(uint256)": {
        "details": "maximum utilization that vault is allowed to go upto on withdrawals (beyond this withdrawals would fail)",
        "params": {
          "_maxUtilizationBps": ": updated max utilization bps"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssets()": {
        "returns": {
          "amount": "total usdc under management"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "totalUsdcBorrowed()": {
        "returns": {
          "usdcBorrowed": "total usdc borrowed"
        }
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBorrowCap(address,uint256)": {
        "params": {
          "borrowerAddress": ": address of borrower for whom cap needs to be updated",
          "cap": ": new cap for the borrower"
        }
      },
      "updateFeeStrategyParams((uint128,uint128,uint128,uint128))": {
        "params": {
          "_feeStrategy": ": new fee strategy"
        }
      },
      "withdraw(uint256,address,address)": {
        "details": "harvests fees from junior tranche since utilization changes",
        "params": {
          "assets": "amount of usdc to be transferred",
          "owner": "owner of the shares to be burnt",
          "receiver": "receiver of assets"
        },
        "returns": {
          "shares": "amount of shares burned"
        }
      }
    },
    "title": "Delta Neutral GMX Senior Tranche contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "availableBorrow(address)": {
        "notice": "return the available borrow amount for a given borrower address"
      },
      "borrow(uint256)": {
        "notice": "borrow aUSDC"
      },
      "decimals()": {
        "notice": "decimals of vault shares (= usdc decimals)"
      },
      "deposit(uint256,address)": {
        "notice": "deposit usdc"
      },
      "getEthRewardsSplitRate()": {
        "notice": "returns eth reward split rate basis utilization in E30"
      },
      "getPriceX128()": {
        "notice": "returns price of a single asset token in X128"
      },
      "getVaultMarketValue()": {
        "notice": "returns overall vault market value for the vault by valueing the underlying assets"
      },
      "grantAllowances()": {
        "notice": "grants allowances for tokens to relevant external contracts"
      },
      "initialize(address,string,string,address)": {
        "notice": "initializer"
      },
      "maxDeposit(address)": {
        "notice": "max no. of assets which a user can deposit in single call"
      },
      "maxMint(address)": {
        "notice": "max no. of shares which a user can mint in single call"
      },
      "maxRedeem(address)": {
        "notice": "max no. of shares which a user can burn in single call"
      },
      "maxWithdraw(address)": {
        "notice": "max no. of assets which a user can withdraw in single call"
      },
      "mint(uint256,address)": {
        "notice": "deposit usdc"
      },
      "pause()": {
        "notice": "pause deposit, mint, withdraw and redeem"
      },
      "redeem(uint256,address,address)": {
        "notice": "withdraw usdc"
      },
      "repay(uint256)": {
        "notice": "repay aUSDC"
      },
      "setDepositCap(uint256)": {
        "notice": "sets deposit cap (6 decimals)"
      },
      "setDnGmxJuniorVault(address)": {
        "notice": "sets junior tranche address"
      },
      "setLeveragePool(address)": {
        "notice": "sets leverage pool address"
      },
      "setMaxUtilizationBps(uint256)": {
        "notice": "sets max utilization bps"
      },
      "totalAssets()": {
        "notice": "derive total assets managed by senior vault"
      },
      "totalUsdcBorrowed()": {
        "notice": "query amount of assset borrwed by all borrowers combined"
      },
      "unpause()": {
        "notice": "unpause deposit, mint, withdraw and redeem"
      },
      "updateBorrowCap(address,uint256)": {
        "notice": "updates borrow cap for junior tranche or leverage poolborrowCap = max amount a borrower can take from senior tranche"
      },
      "updateFeeStrategyParams((uint128,uint128,uint128,uint128))": {
        "notice": "updates fee split strategythis determines how eth rewards should be split between junior and senior tranchebasis the utilization of senior tranche"
      },
      "withdraw(uint256,address,address)": {
        "notice": "withdraw usdc"
      }
    },
    "notice": "Implements the handling of senior tranche which acts as a lender of aUSDC for junior tranche to borrow and hedge tokens using AAVEIt is upgradable contract (via TransparentUpgradeableProxy proxy owned by ProxyAdmin)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3990,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3993,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5259,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4280,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4286,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4288,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 4290,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 4292,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 4871,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 15500,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "asset",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 15504,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "__gaps",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3862,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "_owner",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 3982,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4155,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "_paused",
        "offset": 0,
        "slot": "202",
        "type": "t_bool"
      },
      {
        "astId": 4260,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 32965,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "depositCap",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 32967,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "maxUtilizationBps",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 32970,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "leveragePool",
        "offset": 0,
        "slot": "254",
        "type": "t_contract(IBorrower)16079"
      },
      {
        "astId": 32973,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "dnGmxJuniorVault",
        "offset": 0,
        "slot": "255",
        "type": "t_contract(IBorrower)16079"
      },
      {
        "astId": 32976,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "feeStrategy",
        "offset": 0,
        "slot": "256",
        "type": "t_struct(Info)22878_storage"
      },
      {
        "astId": 32979,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "pool",
        "offset": 0,
        "slot": "258",
        "type": "t_contract(IPool)967"
      },
      {
        "astId": 32982,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "aUsdc",
        "offset": 0,
        "slot": "259",
        "type": "t_contract(IAToken)220"
      },
      {
        "astId": 32985,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "oracle",
        "offset": 0,
        "slot": "260",
        "type": "t_contract(IPriceOracle)1196"
      },
      {
        "astId": 32988,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "poolAddressProvider",
        "offset": 0,
        "slot": "261",
        "type": "t_contract(IPoolAddressesProvider)1176"
      },
      {
        "astId": 32992,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "262",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 32996,
        "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
        "label": "__gaps",
        "offset": 0,
        "slot": "263",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAToken)220": {
        "encoding": "inplace",
        "label": "contract IAToken",
        "numberOfBytes": "20"
      },
      "t_contract(IBorrower)16079": {
        "encoding": "inplace",
        "label": "contract IBorrower",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)967": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolAddressesProvider)1176": {
        "encoding": "inplace",
        "label": "contract IPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)1196": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Info)22878_storage": {
        "encoding": "inplace",
        "label": "struct FeeSplitStrategy.Info",
        "members": [
          {
            "astId": 22871,
            "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
            "label": "optimalUtilizationRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 22873,
            "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
            "label": "baseVariableBorrowRate",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 22875,
            "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
            "label": "variableRateSlope1",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 22877,
            "contract": "contracts/vaults/DnGmxSeniorVault.sol:DnGmxSeniorVault",
            "label": "variableRateSlope2",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}