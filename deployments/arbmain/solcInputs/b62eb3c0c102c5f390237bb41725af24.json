{
  "language": "Solidity",
  "sources": {
    "@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\n/**\n * @title IAaveIncentivesController\n * @author Aave\n * @notice Defines the basic interface for an Aave Incentives Controller.\n * @dev It only contains one single function, needed as a hook on aToken and debtToken transfers.\n */\ninterface IAaveIncentivesController {\n  /**\n   * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\n   * @dev The units of `totalSupply` and `userBalance` should be the same.\n   * @param user The address of the user whose asset balance has changed\n   * @param totalSupply The total supply of the asset prior to user balance change\n   * @param userBalance The previous user balance prior to balance change\n   */\n  function handleAction(\n    address user,\n    uint256 totalSupply,\n    uint256 userBalance\n  ) external;\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IAToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\nimport {IInitializableAToken} from './IInitializableAToken.sol';\n\n/**\n * @title IAToken\n * @author Aave\n * @notice Defines the basic interface for an AToken.\n */\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\n  /**\n   * @dev Emitted during the transfer action\n   * @param from The user whose tokens are being transferred\n   * @param to The recipient\n   * @param value The scaled amount being transferred\n   * @param index The next liquidity index of the reserve\n   */\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\n\n  /**\n   * @notice Mints `amount` aTokens to `user`\n   * @param caller The address performing the mint\n   * @param onBehalfOf The address of the user that will receive the minted aTokens\n   * @param amount The amount of tokens getting minted\n   * @param index The next liquidity index of the reserve\n   * @return `true` if the the previous balance of the user was 0\n   */\n  function mint(\n    address caller,\n    address onBehalfOf,\n    uint256 amount,\n    uint256 index\n  ) external returns (bool);\n\n  /**\n   * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\n   * @dev In some instances, the mint event could be emitted from a burn transaction\n   * if the amount to burn is less than the interest that the user accrued\n   * @param from The address from which the aTokens will be burned\n   * @param receiverOfUnderlying The address that will receive the underlying\n   * @param amount The amount being burned\n   * @param index The next liquidity index of the reserve\n   */\n  function burn(\n    address from,\n    address receiverOfUnderlying,\n    uint256 amount,\n    uint256 index\n  ) external;\n\n  /**\n   * @notice Mints aTokens to the reserve treasury\n   * @param amount The amount of tokens getting minted\n   * @param index The next liquidity index of the reserve\n   */\n  function mintToTreasury(uint256 amount, uint256 index) external;\n\n  /**\n   * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\n   * @param from The address getting liquidated, current owner of the aTokens\n   * @param to The recipient\n   * @param value The amount of tokens getting transferred\n   */\n  function transferOnLiquidation(\n    address from,\n    address to,\n    uint256 value\n  ) external;\n\n  /**\n   * @notice Transfers the underlying asset to `target`.\n   * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\n   * @param target The recipient of the underlying\n   * @param amount The amount getting transferred\n   */\n  function transferUnderlyingTo(address target, uint256 amount) external;\n\n  /**\n   * @notice Handles the underlying received by the aToken after the transfer has been completed.\n   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\n   * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\n   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\n   * @param user The user executing the repayment\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed\n   * @param amount The amount getting repaid\n   */\n  function handleRepayment(\n    address user,\n    address onBehalfOf,\n    uint256 amount\n  ) external;\n\n  /**\n   * @notice Allow passing a signed message to approve spending\n   * @dev implements the permit function as for\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n   * @param owner The owner of the funds\n   * @param spender The spender\n   * @param value The amount\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\n   * @param v Signature param\n   * @param s Signature param\n   * @param r Signature param\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\n   * @return The address of the underlying asset\n   */\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n\n  /**\n   * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.\n   * @return Address of the Aave treasury\n   */\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\n\n  /**\n   * @notice Get the domain separator for the token\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\n   * @return The domain separator of the token at current chain\n   */\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n  /**\n   * @notice Returns the nonce for owner.\n   * @param owner The address of the owner\n   * @return The nonce of the owner\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @notice Rescue and transfer tokens locked in this contract\n   * @param token The address of the token\n   * @param to The address of the recipient\n   * @param amount The amount of token to transfer\n   */\n  function rescueTokens(\n    address token,\n    address to,\n    uint256 amount\n  ) external;\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IInitializableAToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\nimport {IPool} from './IPool.sol';\n\n/**\n * @title IInitializableAToken\n * @author Aave\n * @notice Interface for the initialize function on AToken\n */\ninterface IInitializableAToken {\n  /**\n   * @dev Emitted when an aToken is initialized\n   * @param underlyingAsset The address of the underlying asset\n   * @param pool The address of the associated pool\n   * @param treasury The address of the treasury\n   * @param incentivesController The address of the incentives controller for this aToken\n   * @param aTokenDecimals The decimals of the underlying\n   * @param aTokenName The name of the aToken\n   * @param aTokenSymbol The symbol of the aToken\n   * @param params A set of encoded parameters for additional initialization\n   */\n  event Initialized(\n    address indexed underlyingAsset,\n    address indexed pool,\n    address treasury,\n    address incentivesController,\n    uint8 aTokenDecimals,\n    string aTokenName,\n    string aTokenSymbol,\n    bytes params\n  );\n\n  /**\n   * @notice Initializes the aToken\n   * @param pool The pool contract that is initializing this contract\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\n   * @param incentivesController The smart contract managing potential incentives distribution\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\n   * @param aTokenName The name of the aToken\n   * @param aTokenSymbol The symbol of the aToken\n   * @param params A set of encoded parameters for additional initialization\n   */\n  function initialize(\n    IPool pool,\n    address treasury,\n    address underlyingAsset,\n    IAaveIncentivesController incentivesController,\n    uint8 aTokenDecimals,\n    string calldata aTokenName,\n    string calldata aTokenSymbol,\n    bytes calldata params\n  ) external;\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IInitializableDebtToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\nimport {IPool} from './IPool.sol';\n\n/**\n * @title IInitializableDebtToken\n * @author Aave\n * @notice Interface for the initialize function common between debt tokens\n */\ninterface IInitializableDebtToken {\n  /**\n   * @dev Emitted when a debt token is initialized\n   * @param underlyingAsset The address of the underlying asset\n   * @param pool The address of the associated pool\n   * @param incentivesController The address of the incentives controller for this aToken\n   * @param debtTokenDecimals The decimals of the debt token\n   * @param debtTokenName The name of the debt token\n   * @param debtTokenSymbol The symbol of the debt token\n   * @param params A set of encoded parameters for additional initialization\n   */\n  event Initialized(\n    address indexed underlyingAsset,\n    address indexed pool,\n    address incentivesController,\n    uint8 debtTokenDecimals,\n    string debtTokenName,\n    string debtTokenSymbol,\n    bytes params\n  );\n\n  /**\n   * @notice Initializes the debt token.\n   * @param pool The pool contract that is initializing this contract\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\n   * @param incentivesController The smart contract managing potential incentives distribution\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\n   * @param debtTokenName The name of the token\n   * @param debtTokenSymbol The symbol of the token\n   * @param params A set of encoded parameters for additional initialization\n   */\n  function initialize(\n    IPool pool,\n    address underlyingAsset,\n    IAaveIncentivesController incentivesController,\n    uint8 debtTokenDecimals,\n    string memory debtTokenName,\n    string memory debtTokenSymbol,\n    bytes calldata params\n  ) external;\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\n\n/**\n * @title IPool\n * @author Aave\n * @notice Defines the basic interface for an Aave Pool.\n */\ninterface IPool {\n  /**\n   * @dev Emitted on mintUnbacked()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address initiating the supply\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\n   * @param amount The amount of supplied assets\n   * @param referralCode The referral code used\n   */\n  event MintUnbacked(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    uint16 indexed referralCode\n  );\n\n  /**\n   * @dev Emitted on backUnbacked()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param backer The address paying for the backing\n   * @param amount The amount added as backing\n   * @param fee The amount paid in fees\n   */\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\n\n  /**\n   * @dev Emitted on supply()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address initiating the supply\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\n   * @param amount The amount supplied\n   * @param referralCode The referral code used\n   */\n  event Supply(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    uint16 indexed referralCode\n  );\n\n  /**\n   * @dev Emitted on withdraw()\n   * @param reserve The address of the underlying asset being withdrawn\n   * @param user The address initiating the withdrawal, owner of aTokens\n   * @param to The address that will receive the underlying\n   * @param amount The amount to be withdrawn\n   */\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n  /**\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n   * @param reserve The address of the underlying asset being borrowed\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n   * initiator of the transaction on flashLoan()\n   * @param onBehalfOf The address that will be getting the debt\n   * @param amount The amount borrowed out\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\n   * @param referralCode The referral code used\n   */\n  event Borrow(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    DataTypes.InterestRateMode interestRateMode,\n    uint256 borrowRate,\n    uint16 indexed referralCode\n  );\n\n  /**\n   * @dev Emitted on repay()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The beneficiary of the repayment, getting his debt reduced\n   * @param repayer The address of the user initiating the repay(), providing the funds\n   * @param amount The amount repaid\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\n   */\n  event Repay(\n    address indexed reserve,\n    address indexed user,\n    address indexed repayer,\n    uint256 amount,\n    bool useATokens\n  );\n\n  /**\n   * @dev Emitted on swapBorrowRateMode()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address of the user swapping his rate mode\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n   */\n  event SwapBorrowRateMode(\n    address indexed reserve,\n    address indexed user,\n    DataTypes.InterestRateMode interestRateMode\n  );\n\n  /**\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\n   * @param asset The address of the underlying asset of the reserve\n   * @param totalDebt The total isolation mode debt for the reserve\n   */\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\n\n  /**\n   * @dev Emitted when the user selects a certain asset category for eMode\n   * @param user The address of the user\n   * @param categoryId The category id\n   */\n  event UserEModeSet(address indexed user, uint8 categoryId);\n\n  /**\n   * @dev Emitted on setUserUseReserveAsCollateral()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address of the user enabling the usage as collateral\n   */\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n  /**\n   * @dev Emitted on setUserUseReserveAsCollateral()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address of the user enabling the usage as collateral\n   */\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n  /**\n   * @dev Emitted on rebalanceStableBorrowRate()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address of the user for which the rebalance has been executed\n   */\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n  /**\n   * @dev Emitted on flashLoan()\n   * @param target The address of the flash loan receiver contract\n   * @param initiator The address initiating the flash loan\n   * @param asset The address of the asset being flash borrowed\n   * @param amount The amount flash borrowed\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\n   * @param premium The fee flash borrowed\n   * @param referralCode The referral code used\n   */\n  event FlashLoan(\n    address indexed target,\n    address initiator,\n    address indexed asset,\n    uint256 amount,\n    DataTypes.InterestRateMode interestRateMode,\n    uint256 premium,\n    uint16 indexed referralCode\n  );\n\n  /**\n   * @dev Emitted when a borrower is liquidated.\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n   * @param user The address of the borrower getting liquidated\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\n   * @param liquidator The address of the liquidator\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n   * to receive the underlying collateral asset directly\n   */\n  event LiquidationCall(\n    address indexed collateralAsset,\n    address indexed debtAsset,\n    address indexed user,\n    uint256 debtToCover,\n    uint256 liquidatedCollateralAmount,\n    address liquidator,\n    bool receiveAToken\n  );\n\n  /**\n   * @dev Emitted when the state of a reserve is updated.\n   * @param reserve The address of the underlying asset of the reserve\n   * @param liquidityRate The next liquidity rate\n   * @param stableBorrowRate The next stable borrow rate\n   * @param variableBorrowRate The next variable borrow rate\n   * @param liquidityIndex The next liquidity index\n   * @param variableBorrowIndex The next variable borrow index\n   */\n  event ReserveDataUpdated(\n    address indexed reserve,\n    uint256 liquidityRate,\n    uint256 stableBorrowRate,\n    uint256 variableBorrowRate,\n    uint256 liquidityIndex,\n    uint256 variableBorrowIndex\n  );\n\n  /**\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\n   * @param reserve The address of the reserve\n   * @param amountMinted The amount minted to the treasury\n   */\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\n\n  /**\n   * @notice Mints an `amount` of aTokens to the `onBehalfOf`\n   * @param asset The address of the underlying asset to mint\n   * @param amount The amount to mint\n   * @param onBehalfOf The address that will receive the aTokens\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   */\n  function mintUnbacked(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\n   * @param asset The address of the underlying asset to back\n   * @param amount The amount to back\n   * @param fee The amount paid in fees\n   * @return The backed amount\n   */\n  function backUnbacked(\n    address asset,\n    uint256 amount,\n    uint256 fee\n  ) external returns (uint256);\n\n  /**\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n   * @param asset The address of the underlying asset to supply\n   * @param amount The amount to be supplied\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   */\n  function supply(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n   * @param asset The address of the underlying asset to supply\n   * @param amount The amount to be supplied\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param deadline The deadline timestamp that the permit is valid\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param permitV The V parameter of ERC712 permit sig\n   * @param permitR The R parameter of ERC712 permit sig\n   * @param permitS The S parameter of ERC712 permit sig\n   */\n  function supplyWithPermit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode,\n    uint256 deadline,\n    uint8 permitV,\n    bytes32 permitR,\n    bytes32 permitS\n  ) external;\n\n  /**\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n   * @param asset The address of the underlying asset to withdraw\n   * @param amount The underlying amount to be withdrawn\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n   * @param to The address that will receive the underlying, same as msg.sender if the user\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n   *   different wallet\n   * @return The final amount withdrawn\n   */\n  function withdraw(\n    address asset,\n    uint256 amount,\n    address to\n  ) external returns (uint256);\n\n  /**\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n   * @param asset The address of the underlying asset to borrow\n   * @param amount The amount to be borrowed\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n   * if he has been given credit delegation allowance\n   */\n  function borrow(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    uint16 referralCode,\n    address onBehalfOf\n  ) external;\n\n  /**\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n   * other borrower whose debt should be removed\n   * @return The final amount repaid\n   */\n  function repay(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    address onBehalfOf\n  ) external returns (uint256);\n\n  /**\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n   * other borrower whose debt should be removed\n   * @param deadline The deadline timestamp that the permit is valid\n   * @param permitV The V parameter of ERC712 permit sig\n   * @param permitR The R parameter of ERC712 permit sig\n   * @param permitS The S parameter of ERC712 permit sig\n   * @return The final amount repaid\n   */\n  function repayWithPermit(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    address onBehalfOf,\n    uint256 deadline,\n    uint8 permitV,\n    bytes32 permitR,\n    bytes32 permitS\n  ) external returns (uint256);\n\n  /**\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\n   * equivalent debt tokens\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\n   * balance is not enough to cover the whole debt\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @return The final amount repaid\n   */\n  function repayWithATokens(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode\n  ) external returns (uint256);\n\n  /**\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\n   * @param asset The address of the underlying asset borrowed\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n   */\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\n\n  /**\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n   * - Users can be rebalanced if the following conditions are satisfied:\n   *     1. Usage ratio is above 95%\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\n   * @param asset The address of the underlying asset borrowed\n   * @param user The address of the user to be rebalanced\n   */\n  function rebalanceStableBorrowRate(address asset, address user) external;\n\n  /**\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\n   * @param asset The address of the underlying asset supplied\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\n   */\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n  /**\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n   * @param user The address of the borrower getting liquidated\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n   * to receive the underlying collateral asset directly\n   */\n  function liquidationCall(\n    address collateralAsset,\n    address debtAsset,\n    address user,\n    uint256 debtToCover,\n    bool receiveAToken\n  ) external;\n\n  /**\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n   * as long as the amount taken plus a fee is returned.\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n   * into consideration. For further details please visit https://docs.aave.com/developers/\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\n   * @param assets The addresses of the assets being flash-borrowed\n   * @param amounts The amounts of the assets being flash-borrowed\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n   * @param params Variadic packed params to pass to the receiver as extra information\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   */\n  function flashLoan(\n    address receiverAddress,\n    address[] calldata assets,\n    uint256[] calldata amounts,\n    uint256[] calldata interestRateModes,\n    address onBehalfOf,\n    bytes calldata params,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n   * as long as the amount taken plus a fee is returned.\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n   * into consideration. For further details please visit https://docs.aave.com/developers/\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\n   * @param asset The address of the asset being flash-borrowed\n   * @param amount The amount of the asset being flash-borrowed\n   * @param params Variadic packed params to pass to the receiver as extra information\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   */\n  function flashLoanSimple(\n    address receiverAddress,\n    address asset,\n    uint256 amount,\n    bytes calldata params,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @notice Returns the user account data across all the reserves\n   * @param user The address of the user\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\n   * @return currentLiquidationThreshold The liquidation threshold of the user\n   * @return ltv The loan to value of The user\n   * @return healthFactor The current health factor of the user\n   */\n  function getUserAccountData(address user)\n    external\n    view\n    returns (\n      uint256 totalCollateralBase,\n      uint256 totalDebtBase,\n      uint256 availableBorrowsBase,\n      uint256 currentLiquidationThreshold,\n      uint256 ltv,\n      uint256 healthFactor\n    );\n\n  /**\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\n   * interest rate strategy\n   * @dev Only callable by the PoolConfigurator contract\n   * @param asset The address of the underlying asset of the reserve\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\n   */\n  function initReserve(\n    address asset,\n    address aTokenAddress,\n    address stableDebtAddress,\n    address variableDebtAddress,\n    address interestRateStrategyAddress\n  ) external;\n\n  /**\n   * @notice Drop a reserve\n   * @dev Only callable by the PoolConfigurator contract\n   * @param asset The address of the underlying asset of the reserve\n   */\n  function dropReserve(address asset) external;\n\n  /**\n   * @notice Updates the address of the interest rate strategy contract\n   * @dev Only callable by the PoolConfigurator contract\n   * @param asset The address of the underlying asset of the reserve\n   * @param rateStrategyAddress The address of the interest rate strategy contract\n   */\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\n    external;\n\n  /**\n   * @notice Sets the configuration bitmap of the reserve as a whole\n   * @dev Only callable by the PoolConfigurator contract\n   * @param asset The address of the underlying asset of the reserve\n   * @param configuration The new configuration bitmap\n   */\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\n    external;\n\n  /**\n   * @notice Returns the configuration of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The configuration of the reserve\n   */\n  function getConfiguration(address asset)\n    external\n    view\n    returns (DataTypes.ReserveConfigurationMap memory);\n\n  /**\n   * @notice Returns the configuration of the user across all the reserves\n   * @param user The user address\n   * @return The configuration of the user\n   */\n  function getUserConfiguration(address user)\n    external\n    view\n    returns (DataTypes.UserConfigurationMap memory);\n\n  /**\n   * @notice Returns the normalized income of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The reserve's normalized income\n   */\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n  /**\n   * @notice Returns the normalized variable debt per unit of asset\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\n   * \"dynamic\" variable index based on time, current stored index and virtual rate at the current\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\n   * combination with variable debt supply/balances.\n   * If using this function externally, consider that is possible to have an increasing normalized\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\n   * (e.g. only updates with non-zero variable debt supply)\n   * @param asset The address of the underlying asset of the reserve\n   * @return The reserve normalized variable debt\n   */\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n  /**\n   * @notice Returns the state and configuration of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The state and configuration data of the reserve\n   */\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n  /**\n   * @notice Validates and finalizes an aToken transfer\n   * @dev Only callable by the overlying aToken of the `asset`\n   * @param asset The address of the underlying asset of the aToken\n   * @param from The user from which the aTokens are transferred\n   * @param to The user receiving the aTokens\n   * @param amount The amount being transferred/withdrawn\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\n   */\n  function finalizeTransfer(\n    address asset,\n    address from,\n    address to,\n    uint256 amount,\n    uint256 balanceFromBefore,\n    uint256 balanceToBefore\n  ) external;\n\n  /**\n   * @notice Returns the list of the underlying assets of all the initialized reserves\n   * @dev It does not include dropped reserves\n   * @return The addresses of the underlying assets of the initialized reserves\n   */\n  function getReservesList() external view returns (address[] memory);\n\n  /**\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\n   * @return The address of the reserve associated with id\n   */\n  function getReserveAddressById(uint16 id) external view returns (address);\n\n  /**\n   * @notice Returns the PoolAddressesProvider connected to this contract\n   * @return The address of the PoolAddressesProvider\n   */\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\n\n  /**\n   * @notice Updates the protocol fee on the bridging\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\n   */\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\n\n  /**\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\n   * - A part is sent to aToken holders as extra, one time accumulated interest\n   * - A part is collected by the protocol treasury\n   * @dev The total premium is calculated on the total borrowed amount\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\n   * @dev Only callable by the PoolConfigurator contract\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\n   */\n  function updateFlashloanPremiums(\n    uint128 flashLoanPremiumTotal,\n    uint128 flashLoanPremiumToProtocol\n  ) external;\n\n  /**\n   * @notice Configures a new category for the eMode.\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\n   * The category 0 is reserved as it's the default for volatile assets\n   * @param id The id of the category\n   * @param config The configuration of the category\n   */\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\n\n  /**\n   * @notice Returns the data of an eMode category\n   * @param id The id of the category\n   * @return The configuration data of the category\n   */\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\n\n  /**\n   * @notice Allows a user to use the protocol in eMode\n   * @param categoryId The id of the category\n   */\n  function setUserEMode(uint8 categoryId) external;\n\n  /**\n   * @notice Returns the eMode the user is using\n   * @param user The address of the user\n   * @return The eMode id\n   */\n  function getUserEMode(address user) external view returns (uint256);\n\n  /**\n   * @notice Resets the isolation mode total debt of the given asset to zero\n   * @dev It requires the given asset has zero debt ceiling\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\n   */\n  function resetIsolationModeTotalDebt(address asset) external;\n\n  /**\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\n   * @return The percentage of available liquidity to borrow, expressed in bps\n   */\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\n\n  /**\n   * @notice Returns the total fee on flash loans\n   * @return The total fee on flashloans\n   */\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\n\n  /**\n   * @notice Returns the part of the bridge fees sent to protocol\n   * @return The bridge fee sent to the protocol treasury\n   */\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\n\n  /**\n   * @notice Returns the part of the flashloan fees sent to protocol\n   * @return The flashloan fee sent to the protocol treasury\n   */\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\n\n  /**\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\n   * @return The maximum number of reserves supported\n   */\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\n\n  /**\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\n   * @param assets The list of reserves for which the minting needs to be executed\n   */\n  function mintToTreasury(address[] calldata assets) external;\n\n  /**\n   * @notice Rescue and transfer tokens locked in this contract\n   * @param token The address of the token\n   * @param to The address of the recipient\n   * @param amount The amount of token to transfer\n   */\n  function rescueTokens(\n    address token,\n    address to,\n    uint256 amount\n  ) external;\n\n  /**\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n   * @dev Deprecated: Use the `supply` function instead\n   * @param asset The address of the underlying asset to supply\n   * @param amount The amount to be supplied\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   */\n  function deposit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\n/**\n * @title IPoolAddressesProvider\n * @author Aave\n * @notice Defines the basic interface for a Pool Addresses Provider.\n */\ninterface IPoolAddressesProvider {\n  /**\n   * @dev Emitted when the market identifier is updated.\n   * @param oldMarketId The old id of the market\n   * @param newMarketId The new id of the market\n   */\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\n\n  /**\n   * @dev Emitted when the pool is updated.\n   * @param oldAddress The old address of the Pool\n   * @param newAddress The new address of the Pool\n   */\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the pool configurator is updated.\n   * @param oldAddress The old address of the PoolConfigurator\n   * @param newAddress The new address of the PoolConfigurator\n   */\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the price oracle is updated.\n   * @param oldAddress The old address of the PriceOracle\n   * @param newAddress The new address of the PriceOracle\n   */\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the ACL manager is updated.\n   * @param oldAddress The old address of the ACLManager\n   * @param newAddress The new address of the ACLManager\n   */\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the ACL admin is updated.\n   * @param oldAddress The old address of the ACLAdmin\n   * @param newAddress The new address of the ACLAdmin\n   */\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the price oracle sentinel is updated.\n   * @param oldAddress The old address of the PriceOracleSentinel\n   * @param newAddress The new address of the PriceOracleSentinel\n   */\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the pool data provider is updated.\n   * @param oldAddress The old address of the PoolDataProvider\n   * @param newAddress The new address of the PoolDataProvider\n   */\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when a new proxy is created.\n   * @param id The identifier of the proxy\n   * @param proxyAddress The address of the created proxy contract\n   * @param implementationAddress The address of the implementation contract\n   */\n  event ProxyCreated(\n    bytes32 indexed id,\n    address indexed proxyAddress,\n    address indexed implementationAddress\n  );\n\n  /**\n   * @dev Emitted when a new non-proxied contract address is registered.\n   * @param id The identifier of the contract\n   * @param oldAddress The address of the old contract\n   * @param newAddress The address of the new contract\n   */\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the implementation of the proxy registered with id is updated\n   * @param id The identifier of the contract\n   * @param proxyAddress The address of the proxy contract\n   * @param oldImplementationAddress The address of the old implementation contract\n   * @param newImplementationAddress The address of the new implementation contract\n   */\n  event AddressSetAsProxy(\n    bytes32 indexed id,\n    address indexed proxyAddress,\n    address oldImplementationAddress,\n    address indexed newImplementationAddress\n  );\n\n  /**\n   * @notice Returns the id of the Aave market to which this contract points to.\n   * @return The market id\n   */\n  function getMarketId() external view returns (string memory);\n\n  /**\n   * @notice Associates an id with a specific PoolAddressesProvider.\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\n   * identify and validate multiple Aave markets.\n   * @param newMarketId The market id\n   */\n  function setMarketId(string calldata newMarketId) external;\n\n  /**\n   * @notice Returns an address by its identifier.\n   * @dev The returned address might be an EOA or a contract, potentially proxied\n   * @dev It returns ZERO if there is no registered address with the given id\n   * @param id The id\n   * @return The address of the registered for the specified id\n   */\n  function getAddress(bytes32 id) external view returns (address);\n\n  /**\n   * @notice General function to update the implementation of a proxy registered with\n   * certain `id`. If there is no proxy registered, it will instantiate one and\n   * set as implementation the `newImplementationAddress`.\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\n   * setter function, in order to avoid unexpected consequences\n   * @param id The id\n   * @param newImplementationAddress The address of the new implementation\n   */\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\n\n  /**\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\n   * @param id The id\n   * @param newAddress The address to set\n   */\n  function setAddress(bytes32 id, address newAddress) external;\n\n  /**\n   * @notice Returns the address of the Pool proxy.\n   * @return The Pool proxy address\n   */\n  function getPool() external view returns (address);\n\n  /**\n   * @notice Updates the implementation of the Pool, or creates a proxy\n   * setting the new `pool` implementation when the function is called for the first time.\n   * @param newPoolImpl The new Pool implementation\n   */\n  function setPoolImpl(address newPoolImpl) external;\n\n  /**\n   * @notice Returns the address of the PoolConfigurator proxy.\n   * @return The PoolConfigurator proxy address\n   */\n  function getPoolConfigurator() external view returns (address);\n\n  /**\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\n   */\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\n\n  /**\n   * @notice Returns the address of the price oracle.\n   * @return The address of the PriceOracle\n   */\n  function getPriceOracle() external view returns (address);\n\n  /**\n   * @notice Updates the address of the price oracle.\n   * @param newPriceOracle The address of the new PriceOracle\n   */\n  function setPriceOracle(address newPriceOracle) external;\n\n  /**\n   * @notice Returns the address of the ACL manager.\n   * @return The address of the ACLManager\n   */\n  function getACLManager() external view returns (address);\n\n  /**\n   * @notice Updates the address of the ACL manager.\n   * @param newAclManager The address of the new ACLManager\n   */\n  function setACLManager(address newAclManager) external;\n\n  /**\n   * @notice Returns the address of the ACL admin.\n   * @return The address of the ACL admin\n   */\n  function getACLAdmin() external view returns (address);\n\n  /**\n   * @notice Updates the address of the ACL admin.\n   * @param newAclAdmin The address of the new ACL admin\n   */\n  function setACLAdmin(address newAclAdmin) external;\n\n  /**\n   * @notice Returns the address of the price oracle sentinel.\n   * @return The address of the PriceOracleSentinel\n   */\n  function getPriceOracleSentinel() external view returns (address);\n\n  /**\n   * @notice Updates the address of the price oracle sentinel.\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\n   */\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\n\n  /**\n   * @notice Returns the address of the data provider.\n   * @return The address of the DataProvider\n   */\n  function getPoolDataProvider() external view returns (address);\n\n  /**\n   * @notice Updates the address of the data provider.\n   * @param newDataProvider The address of the new DataProvider\n   */\n  function setPoolDataProvider(address newDataProvider) external;\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\n/**\n * @title IPriceOracle\n * @author Aave\n * @notice Defines the basic interface for a Price oracle.\n */\ninterface IPriceOracle {\n  /**\n   * @notice Returns the asset price in the base currency\n   * @param asset The address of the asset\n   * @return The price of the asset\n   */\n  function getAssetPrice(address asset) external view returns (uint256);\n\n  /**\n   * @notice Set the price of the asset\n   * @param asset The address of the asset\n   * @param price The price of the asset\n   */\n  function setAssetPrice(address asset, uint256 price) external;\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\n/**\n * @title IScaledBalanceToken\n * @author Aave\n * @notice Defines the basic interface for a scaled-balance token.\n */\ninterface IScaledBalanceToken {\n  /**\n   * @dev Emitted after the mint action\n   * @param caller The address performing the mint\n   * @param onBehalfOf The address of the user that will receive the minted tokens\n   * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\n   * @param index The next liquidity index of the reserve\n   */\n  event Mint(\n    address indexed caller,\n    address indexed onBehalfOf,\n    uint256 value,\n    uint256 balanceIncrease,\n    uint256 index\n  );\n\n  /**\n   * @dev Emitted after the burn action\n   * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\n   * @param from The address from which the tokens will be burned\n   * @param target The address that will receive the underlying, if any\n   * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\n   * @param index The next liquidity index of the reserve\n   */\n  event Burn(\n    address indexed from,\n    address indexed target,\n    uint256 value,\n    uint256 balanceIncrease,\n    uint256 index\n  );\n\n  /**\n   * @notice Returns the scaled balance of the user.\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\n   * at the moment of the update\n   * @param user The user whose balance is calculated\n   * @return The scaled balance of the user\n   */\n  function scaledBalanceOf(address user) external view returns (uint256);\n\n  /**\n   * @notice Returns the scaled balance of the user and the scaled total supply.\n   * @param user The address of the user\n   * @return The scaled balance of the user\n   * @return The scaled total supply\n   */\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\n\n  /**\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\n   * @return The scaled total supply\n   */\n  function scaledTotalSupply() external view returns (uint256);\n\n  /**\n   * @notice Returns last index interest was accrued to the user's balance\n   * @param user The address of the user\n   * @return The last index interest was accrued to the user's balance, expressed in ray\n   */\n  function getPreviousIndex(address user) external view returns (uint256);\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IVariableDebtToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\nimport {IInitializableDebtToken} from './IInitializableDebtToken.sol';\n\n/**\n * @title IVariableDebtToken\n * @author Aave\n * @notice Defines the basic interface for a variable debt token.\n */\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\n  /**\n   * @notice Mints debt token to the `onBehalfOf` address\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\n   * of credit delegate, or same as `onBehalfOf` otherwise\n   * @param onBehalfOf The address receiving the debt tokens\n   * @param amount The amount of debt being minted\n   * @param index The variable debt index of the reserve\n   * @return True if the previous balance of the user is 0, false otherwise\n   * @return The scaled total debt of the reserve\n   */\n  function mint(\n    address user,\n    address onBehalfOf,\n    uint256 amount,\n    uint256 index\n  ) external returns (bool, uint256);\n\n  /**\n   * @notice Burns user variable debt\n   * @dev In some instances, a burn transaction will emit a mint event\n   * if the amount to burn is less than the interest that the user accrued\n   * @param from The address from which the debt will be burned\n   * @param amount The amount getting burned\n   * @param index The variable debt index of the reserve\n   * @return The scaled total debt of the reserve\n   */\n  function burn(\n    address from,\n    uint256 amount,\n    uint256 index\n  ) external returns (uint256);\n\n  /**\n   * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)\n   * @return The address of the underlying asset\n   */\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n}\n"
    },
    "@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {Errors} from '../helpers/Errors.sol';\nimport {DataTypes} from '../types/DataTypes.sol';\n\n/**\n * @title ReserveConfiguration library\n * @author Aave\n * @notice Implements the bitmap logic to handle the reserve configuration\n */\nlibrary ReserveConfiguration {\n  uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\n  uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\n  uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant FLASHLOAN_ENABLED_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\n  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\n  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\n  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\n  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\n  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\n  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\n  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\n  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\n  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\n  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\n  uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\n  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\n  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\n  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\n  uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\n  uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\n  uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\n\n  uint256 internal constant MAX_VALID_LTV = 65535;\n  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\n  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\n  uint256 internal constant MAX_VALID_DECIMALS = 255;\n  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\n  uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\n  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\n  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\n  uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\n  uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\n  uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\n\n  uint256 public constant DEBT_CEILING_DECIMALS = 2;\n  uint16 public constant MAX_RESERVES_COUNT = 128;\n\n  /**\n   * @notice Sets the Loan to Value of the reserve\n   * @param self The reserve configuration\n   * @param ltv The new ltv\n   */\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\n    require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\n\n    self.data = (self.data & LTV_MASK) | ltv;\n  }\n\n  /**\n   * @notice Gets the Loan to Value of the reserve\n   * @param self The reserve configuration\n   * @return The loan to value\n   */\n  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n    return self.data & ~LTV_MASK;\n  }\n\n  /**\n   * @notice Sets the liquidation threshold of the reserve\n   * @param self The reserve configuration\n   * @param threshold The new liquidation threshold\n   */\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold)\n    internal\n    pure\n  {\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.INVALID_LIQ_THRESHOLD);\n\n    self.data =\n      (self.data & LIQUIDATION_THRESHOLD_MASK) |\n      (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the liquidation threshold of the reserve\n   * @param self The reserve configuration\n   * @return The liquidation threshold\n   */\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (uint256)\n  {\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the liquidation bonus of the reserve\n   * @param self The reserve configuration\n   * @param bonus The new liquidation bonus\n   */\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus)\n    internal\n    pure\n  {\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\n\n    self.data =\n      (self.data & LIQUIDATION_BONUS_MASK) |\n      (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the liquidation bonus of the reserve\n   * @param self The reserve configuration\n   * @return The liquidation bonus\n   */\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (uint256)\n  {\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the decimals of the underlying asset of the reserve\n   * @param self The reserve configuration\n   * @param decimals The decimals\n   */\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals)\n    internal\n    pure\n  {\n    require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\n\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the decimals of the underlying asset of the reserve\n   * @param self The reserve configuration\n   * @return The decimals of the asset\n   */\n  function getDecimals(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (uint256)\n  {\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the active state of the reserve\n   * @param self The reserve configuration\n   * @param active The active state\n   */\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\n    self.data =\n      (self.data & ACTIVE_MASK) |\n      (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the active state of the reserve\n   * @param self The reserve configuration\n   * @return The active state\n   */\n  function getActive(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n    return (self.data & ~ACTIVE_MASK) != 0;\n  }\n\n  /**\n   * @notice Sets the frozen state of the reserve\n   * @param self The reserve configuration\n   * @param frozen The frozen state\n   */\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\n    self.data =\n      (self.data & FROZEN_MASK) |\n      (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the frozen state of the reserve\n   * @param self The reserve configuration\n   * @return The frozen state\n   */\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n    return (self.data & ~FROZEN_MASK) != 0;\n  }\n\n  /**\n   * @notice Sets the paused state of the reserve\n   * @param self The reserve configuration\n   * @param paused The paused state\n   */\n  function setPaused(DataTypes.ReserveConfigurationMap memory self, bool paused) internal pure {\n    self.data =\n      (self.data & PAUSED_MASK) |\n      (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the paused state of the reserve\n   * @param self The reserve configuration\n   * @return The paused state\n   */\n  function getPaused(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n    return (self.data & ~PAUSED_MASK) != 0;\n  }\n\n  /**\n   * @notice Sets the borrowable in isolation flag for the reserve.\n   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\n   * amount will be accumulated in the isolated collateral's total debt exposure.\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\n   * consistency in the debt ceiling calculations.\n   * @param self The reserve configuration\n   * @param borrowable True if the asset is borrowable\n   */\n  function setBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self, bool borrowable)\n    internal\n    pure\n  {\n    self.data =\n      (self.data & BORROWABLE_IN_ISOLATION_MASK) |\n      (uint256(borrowable ? 1 : 0) << BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the borrowable in isolation flag for the reserve.\n   * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\n   * isolated collateral is accounted for in the isolated collateral's total debt exposure.\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\n   * consistency in the debt ceiling calculations.\n   * @param self The reserve configuration\n   * @return The borrowable in isolation flag\n   */\n  function getBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (bool)\n  {\n    return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\n  }\n\n  /**\n   * @notice Sets the siloed borrowing flag for the reserve.\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\n   * @param self The reserve configuration\n   * @param siloed True if the asset is siloed\n   */\n  function setSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self, bool siloed)\n    internal\n    pure\n  {\n    self.data =\n      (self.data & SILOED_BORROWING_MASK) |\n      (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the siloed borrowing flag for the reserve.\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\n   * @param self The reserve configuration\n   * @return The siloed borrowing flag\n   */\n  function getSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (bool)\n  {\n    return (self.data & ~SILOED_BORROWING_MASK) != 0;\n  }\n\n  /**\n   * @notice Enables or disables borrowing on the reserve\n   * @param self The reserve configuration\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\n   */\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled)\n    internal\n    pure\n  {\n    self.data =\n      (self.data & BORROWING_MASK) |\n      (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the borrowing state of the reserve\n   * @param self The reserve configuration\n   * @return The borrowing state\n   */\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (bool)\n  {\n    return (self.data & ~BORROWING_MASK) != 0;\n  }\n\n  /**\n   * @notice Enables or disables stable rate borrowing on the reserve\n   * @param self The reserve configuration\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\n   */\n  function setStableRateBorrowingEnabled(\n    DataTypes.ReserveConfigurationMap memory self,\n    bool enabled\n  ) internal pure {\n    self.data =\n      (self.data & STABLE_BORROWING_MASK) |\n      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the stable rate borrowing state of the reserve\n   * @param self The reserve configuration\n   * @return The stable rate borrowing state\n   */\n  function getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (bool)\n  {\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\n  }\n\n  /**\n   * @notice Sets the reserve factor of the reserve\n   * @param self The reserve configuration\n   * @param reserveFactor The reserve factor\n   */\n  function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor)\n    internal\n    pure\n  {\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.INVALID_RESERVE_FACTOR);\n\n    self.data =\n      (self.data & RESERVE_FACTOR_MASK) |\n      (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the reserve factor of the reserve\n   * @param self The reserve configuration\n   * @return The reserve factor\n   */\n  function getReserveFactor(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (uint256)\n  {\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the borrow cap of the reserve\n   * @param self The reserve configuration\n   * @param borrowCap The borrow cap\n   */\n  function setBorrowCap(DataTypes.ReserveConfigurationMap memory self, uint256 borrowCap)\n    internal\n    pure\n  {\n    require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\n\n    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the borrow cap of the reserve\n   * @param self The reserve configuration\n   * @return The borrow cap\n   */\n  function getBorrowCap(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (uint256)\n  {\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the supply cap of the reserve\n   * @param self The reserve configuration\n   * @param supplyCap The supply cap\n   */\n  function setSupplyCap(DataTypes.ReserveConfigurationMap memory self, uint256 supplyCap)\n    internal\n    pure\n  {\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\n\n    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the supply cap of the reserve\n   * @param self The reserve configuration\n   * @return The supply cap\n   */\n  function getSupplyCap(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (uint256)\n  {\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the debt ceiling in isolation mode for the asset\n   * @param self The reserve configuration\n   * @param ceiling The maximum debt ceiling for the asset\n   */\n  function setDebtCeiling(DataTypes.ReserveConfigurationMap memory self, uint256 ceiling)\n    internal\n    pure\n  {\n    require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\n\n    self.data = (self.data & DEBT_CEILING_MASK) | (ceiling << DEBT_CEILING_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\n   * @param self The reserve configuration\n   * @return The debt ceiling (0 = isolation mode disabled)\n   */\n  function getDebtCeiling(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (uint256)\n  {\n    return (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the liquidation protocol fee of the reserve\n   * @param self The reserve configuration\n   * @param liquidationProtocolFee The liquidation protocol fee\n   */\n  function setLiquidationProtocolFee(\n    DataTypes.ReserveConfigurationMap memory self,\n    uint256 liquidationProtocolFee\n  ) internal pure {\n    require(\n      liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\n      Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\n    );\n\n    self.data =\n      (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\n      (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the liquidation protocol fee\n   * @param self The reserve configuration\n   * @return The liquidation protocol fee\n   */\n  function getLiquidationProtocolFee(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (uint256)\n  {\n    return\n      (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >> LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the unbacked mint cap of the reserve\n   * @param self The reserve configuration\n   * @param unbackedMintCap The unbacked mint cap\n   */\n  function setUnbackedMintCap(\n    DataTypes.ReserveConfigurationMap memory self,\n    uint256 unbackedMintCap\n  ) internal pure {\n    require(unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP, Errors.INVALID_UNBACKED_MINT_CAP);\n\n    self.data =\n      (self.data & UNBACKED_MINT_CAP_MASK) |\n      (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the unbacked mint cap of the reserve\n   * @param self The reserve configuration\n   * @return The unbacked mint cap\n   */\n  function getUnbackedMintCap(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (uint256)\n  {\n    return (self.data & ~UNBACKED_MINT_CAP_MASK) >> UNBACKED_MINT_CAP_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the eMode asset category\n   * @param self The reserve configuration\n   * @param category The asset category when the user selects the eMode\n   */\n  function setEModeCategory(DataTypes.ReserveConfigurationMap memory self, uint256 category)\n    internal\n    pure\n  {\n    require(category <= MAX_VALID_EMODE_CATEGORY, Errors.INVALID_EMODE_CATEGORY);\n\n    self.data = (self.data & EMODE_CATEGORY_MASK) | (category << EMODE_CATEGORY_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the eMode asset category\n   * @param self The reserve configuration\n   * @return The eMode category for the asset\n   */\n  function getEModeCategory(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (uint256)\n  {\n    return (self.data & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the flashloanable flag for the reserve\n   * @param self The reserve configuration\n   * @param flashLoanEnabled True if the asset is flashloanable, false otherwise\n   */\n  function setFlashLoanEnabled(DataTypes.ReserveConfigurationMap memory self, bool flashLoanEnabled)\n    internal\n    pure\n  {\n    self.data =\n      (self.data & FLASHLOAN_ENABLED_MASK) |\n      (uint256(flashLoanEnabled ? 1 : 0) << FLASHLOAN_ENABLED_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the flashloanable flag for the reserve\n   * @param self The reserve configuration\n   * @return The flashloanable flag\n   */\n  function getFlashLoanEnabled(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (bool)\n  {\n    return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;\n  }\n\n  /**\n   * @notice Gets the configuration flags of the reserve\n   * @param self The reserve configuration\n   * @return The state flag representing active\n   * @return The state flag representing frozen\n   * @return The state flag representing borrowing enabled\n   * @return The state flag representing stableRateBorrowing enabled\n   * @return The state flag representing paused\n   */\n  function getFlags(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (\n      bool,\n      bool,\n      bool,\n      bool,\n      bool\n    )\n  {\n    uint256 dataLocal = self.data;\n\n    return (\n      (dataLocal & ~ACTIVE_MASK) != 0,\n      (dataLocal & ~FROZEN_MASK) != 0,\n      (dataLocal & ~BORROWING_MASK) != 0,\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0,\n      (dataLocal & ~PAUSED_MASK) != 0\n    );\n  }\n\n  /**\n   * @notice Gets the configuration parameters of the reserve from storage\n   * @param self The reserve configuration\n   * @return The state param representing ltv\n   * @return The state param representing liquidation threshold\n   * @return The state param representing liquidation bonus\n   * @return The state param representing reserve decimals\n   * @return The state param representing reserve factor\n   * @return The state param representing eMode category\n   */\n  function getParams(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    )\n  {\n    uint256 dataLocal = self.data;\n\n    return (\n      dataLocal & ~LTV_MASK,\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION,\n      (dataLocal & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION\n    );\n  }\n\n  /**\n   * @notice Gets the caps parameters of the reserve from storage\n   * @param self The reserve configuration\n   * @return The state param representing borrow cap\n   * @return The state param representing supply cap.\n   */\n  function getCaps(DataTypes.ReserveConfigurationMap memory self)\n    internal\n    pure\n    returns (uint256, uint256)\n  {\n    uint256 dataLocal = self.data;\n\n    return (\n      (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\n      (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\n    );\n  }\n}\n"
    },
    "@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n/**\n * @title Errors library\n * @author Aave\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\n */\nlibrary Errors {\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\n  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\n  string public constant USER_IN_ISOLATION_MODE = '62'; // 'User is in isolation mode'\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\n}\n"
    },
    "@aave/core-v3/contracts/protocol/libraries/math/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n/**\n * @title WadRayMath library\n * @author Aave\n * @notice Provides functions to perform calculations with Wad and Ray units\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\n * with 27 digits of precision)\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\n */\nlibrary WadRayMath {\n  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\n  uint256 internal constant WAD = 1e18;\n  uint256 internal constant HALF_WAD = 0.5e18;\n\n  uint256 internal constant RAY = 1e27;\n  uint256 internal constant HALF_RAY = 0.5e27;\n\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\n\n  /**\n   * @dev Multiplies two wad, rounding half up to the nearest wad\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n   * @param a Wad\n   * @param b Wad\n   * @return c = a*b, in wad\n   */\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\n    assembly {\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\n        revert(0, 0)\n      }\n\n      c := div(add(mul(a, b), HALF_WAD), WAD)\n    }\n  }\n\n  /**\n   * @dev Divides two wad, rounding half up to the nearest wad\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n   * @param a Wad\n   * @param b Wad\n   * @return c = a/b, in wad\n   */\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\n    assembly {\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\n        revert(0, 0)\n      }\n\n      c := div(add(mul(a, WAD), div(b, 2)), b)\n    }\n  }\n\n  /**\n   * @notice Multiplies two ray, rounding half up to the nearest ray\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n   * @param a Ray\n   * @param b Ray\n   * @return c = a raymul b\n   */\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\n    assembly {\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\n        revert(0, 0)\n      }\n\n      c := div(add(mul(a, b), HALF_RAY), RAY)\n    }\n  }\n\n  /**\n   * @notice Divides two ray, rounding half up to the nearest ray\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n   * @param a Ray\n   * @param b Ray\n   * @return c = a raydiv b\n   */\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\n    assembly {\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\n        revert(0, 0)\n      }\n\n      c := div(add(mul(a, RAY), div(b, 2)), b)\n    }\n  }\n\n  /**\n   * @dev Casts ray down to wad\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n   * @param a Ray\n   * @return b = a converted to wad, rounded half up to the nearest wad\n   */\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\n    assembly {\n      b := div(a, WAD_RAY_RATIO)\n      let remainder := mod(a, WAD_RAY_RATIO)\n      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\n        b := add(b, 1)\n      }\n    }\n  }\n\n  /**\n   * @dev Converts wad up to ray\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n   * @param a Wad\n   * @return b = a converted in ray\n   */\n  function wadToRay(uint256 a) internal pure returns (uint256 b) {\n    // to avoid overflow, b/WAD_RAY_RATIO == a\n    assembly {\n      b := mul(a, WAD_RAY_RATIO)\n\n      if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\n        revert(0, 0)\n      }\n    }\n  }\n}\n"
    },
    "@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nlibrary DataTypes {\n  struct ReserveData {\n    //stores the reserve configuration\n    ReserveConfigurationMap configuration;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    //the current supply rate. Expressed in ray\n    uint128 currentLiquidityRate;\n    //variable borrow index. Expressed in ray\n    uint128 variableBorrowIndex;\n    //the current variable borrow rate. Expressed in ray\n    uint128 currentVariableBorrowRate;\n    //the current stable borrow rate. Expressed in ray\n    uint128 currentStableBorrowRate;\n    //timestamp of last update\n    uint40 lastUpdateTimestamp;\n    //the id of the reserve. Represents the position in the list of the active reserves\n    uint16 id;\n    //aToken address\n    address aTokenAddress;\n    //stableDebtToken address\n    address stableDebtTokenAddress;\n    //variableDebtToken address\n    address variableDebtTokenAddress;\n    //address of the interest rate strategy\n    address interestRateStrategyAddress;\n    //the current treasury balance, scaled\n    uint128 accruedToTreasury;\n    //the outstanding unbacked aTokens minted through the bridging feature\n    uint128 unbacked;\n    //the outstanding debt borrowed against this asset in isolation mode\n    uint128 isolationModeTotalDebt;\n  }\n\n  struct ReserveConfigurationMap {\n    //bit 0-15: LTV\n    //bit 16-31: Liq. threshold\n    //bit 32-47: Liq. bonus\n    //bit 48-55: Decimals\n    //bit 56: reserve is active\n    //bit 57: reserve is frozen\n    //bit 58: borrowing is enabled\n    //bit 59: stable rate borrowing enabled\n    //bit 60: asset is paused\n    //bit 61: borrowing in isolation mode is enabled\n    //bit 62-63: reserved\n    //bit 64-79: reserve factor\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\n    //bit 152-167 liquidation protocol fee\n    //bit 168-175 eMode category\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\n    //bit 252-255 unused\n\n    uint256 data;\n  }\n\n  struct UserConfigurationMap {\n    /**\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\n     * asset is borrowed by the user.\n     */\n    uint256 data;\n  }\n\n  struct EModeCategory {\n    // each eMode category has a custom ltv and liquidation threshold\n    uint16 ltv;\n    uint16 liquidationThreshold;\n    uint16 liquidationBonus;\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\n    address priceSource;\n    string label;\n  }\n\n  enum InterestRateMode {\n    NONE,\n    STABLE,\n    VARIABLE\n  }\n\n  struct ReserveCache {\n    uint256 currScaledVariableDebt;\n    uint256 nextScaledVariableDebt;\n    uint256 currPrincipalStableDebt;\n    uint256 currAvgStableBorrowRate;\n    uint256 currTotalStableDebt;\n    uint256 nextAvgStableBorrowRate;\n    uint256 nextTotalStableDebt;\n    uint256 currLiquidityIndex;\n    uint256 nextLiquidityIndex;\n    uint256 currVariableBorrowIndex;\n    uint256 nextVariableBorrowIndex;\n    uint256 currLiquidityRate;\n    uint256 currVariableBorrowRate;\n    uint256 reserveFactor;\n    ReserveConfigurationMap reserveConfiguration;\n    address aTokenAddress;\n    address stableDebtTokenAddress;\n    address variableDebtTokenAddress;\n    uint40 reserveLastUpdateTimestamp;\n    uint40 stableDebtLastUpdateTimestamp;\n  }\n\n  struct ExecuteLiquidationCallParams {\n    uint256 reservesCount;\n    uint256 debtToCover;\n    address collateralAsset;\n    address debtAsset;\n    address user;\n    bool receiveAToken;\n    address priceOracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n  }\n\n  struct ExecuteSupplyParams {\n    address asset;\n    uint256 amount;\n    address onBehalfOf;\n    uint16 referralCode;\n  }\n\n  struct ExecuteBorrowParams {\n    address asset;\n    address user;\n    address onBehalfOf;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    uint16 referralCode;\n    bool releaseUnderlying;\n    uint256 maxStableRateBorrowSizePercent;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n  }\n\n  struct ExecuteRepayParams {\n    address asset;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    address onBehalfOf;\n    bool useATokens;\n  }\n\n  struct ExecuteWithdrawParams {\n    address asset;\n    uint256 amount;\n    address to;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n  }\n\n  struct ExecuteSetUserEModeParams {\n    uint256 reservesCount;\n    address oracle;\n    uint8 categoryId;\n  }\n\n  struct FinalizeTransferParams {\n    address asset;\n    address from;\n    address to;\n    uint256 amount;\n    uint256 balanceFromBefore;\n    uint256 balanceToBefore;\n    uint256 reservesCount;\n    address oracle;\n    uint8 fromEModeCategory;\n  }\n\n  struct FlashloanParams {\n    address receiverAddress;\n    address[] assets;\n    uint256[] amounts;\n    uint256[] interestRateModes;\n    address onBehalfOf;\n    bytes params;\n    uint16 referralCode;\n    uint256 flashLoanPremiumToProtocol;\n    uint256 flashLoanPremiumTotal;\n    uint256 maxStableRateBorrowSizePercent;\n    uint256 reservesCount;\n    address addressesProvider;\n    uint8 userEModeCategory;\n    bool isAuthorizedFlashBorrower;\n  }\n\n  struct FlashloanSimpleParams {\n    address receiverAddress;\n    address asset;\n    uint256 amount;\n    bytes params;\n    uint16 referralCode;\n    uint256 flashLoanPremiumToProtocol;\n    uint256 flashLoanPremiumTotal;\n  }\n\n  struct FlashLoanRepaymentParams {\n    uint256 amount;\n    uint256 totalPremium;\n    uint256 flashLoanPremiumToProtocol;\n    address asset;\n    address receiverAddress;\n    uint16 referralCode;\n  }\n\n  struct CalculateUserAccountDataParams {\n    UserConfigurationMap userConfig;\n    uint256 reservesCount;\n    address user;\n    address oracle;\n    uint8 userEModeCategory;\n  }\n\n  struct ValidateBorrowParams {\n    ReserveCache reserveCache;\n    UserConfigurationMap userConfig;\n    address asset;\n    address userAddress;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    uint256 maxStableLoanPercent;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n    bool isolationModeActive;\n    address isolationModeCollateralAddress;\n    uint256 isolationModeDebtCeiling;\n  }\n\n  struct ValidateLiquidationCallParams {\n    ReserveCache debtReserveCache;\n    uint256 totalDebt;\n    uint256 healthFactor;\n    address priceOracleSentinel;\n  }\n\n  struct CalculateInterestRatesParams {\n    uint256 unbacked;\n    uint256 liquidityAdded;\n    uint256 liquidityTaken;\n    uint256 totalStableDebt;\n    uint256 totalVariableDebt;\n    uint256 averageStableBorrowRate;\n    uint256 reserveFactor;\n    address reserve;\n    address aToken;\n  }\n\n  struct InitReserveParams {\n    address asset;\n    address aTokenAddress;\n    address stableDebtAddress;\n    address variableDebtAddress;\n    address interestRateStrategyAddress;\n    uint16 reservesCount;\n    uint16 maxNumberReserves;\n  }\n}\n"
    },
    "@aave/periphery-v3/contracts/misc/interfaces/IEACAggregatorProxy.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.10;\n\ninterface IEACAggregatorProxy {\n  function decimals() external view returns (uint8);\n\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\n}\n"
    },
    "@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.10;\n\nimport {IRewardsDistributor} from './IRewardsDistributor.sol';\nimport {ITransferStrategyBase} from './ITransferStrategyBase.sol';\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\nimport {RewardsDataTypes} from '../libraries/RewardsDataTypes.sol';\n\n/**\n * @title IRewardsController\n * @author Aave\n * @notice Defines the basic interface for a Rewards Controller.\n */\ninterface IRewardsController is IRewardsDistributor {\n  /**\n   * @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\n   * @param user The address of the user\n   * @param claimer The address of the claimer\n   */\n  event ClaimerSet(address indexed user, address indexed claimer);\n\n  /**\n   * @dev Emitted when rewards are claimed\n   * @param user The address of the user rewards has been claimed on behalf of\n   * @param reward The address of the token reward is claimed\n   * @param to The address of the receiver of the rewards\n   * @param claimer The address of the claimer\n   * @param amount The amount of rewards claimed\n   */\n  event RewardsClaimed(\n    address indexed user,\n    address indexed reward,\n    address indexed to,\n    address claimer,\n    uint256 amount\n  );\n\n  /**\n   * @dev Emitted when a transfer strategy is installed for the reward distribution\n   * @param reward The address of the token reward\n   * @param transferStrategy The address of TransferStrategy contract\n   */\n  event TransferStrategyInstalled(address indexed reward, address indexed transferStrategy);\n\n  /**\n   * @dev Emitted when the reward oracle is updated\n   * @param reward The address of the token reward\n   * @param rewardOracle The address of oracle\n   */\n  event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\n\n  /**\n   * @dev Whitelists an address to claim the rewards on behalf of another address\n   * @param user The address of the user\n   * @param claimer The address of the claimer\n   */\n  function setClaimer(address user, address claimer) external;\n\n  /**\n   * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\n   * @param reward The address of the reward token\n   * @param transferStrategy The address of the TransferStrategy logic contract\n   */\n  function setTransferStrategy(address reward, ITransferStrategyBase transferStrategy) external;\n\n  /**\n   * @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\n   * @notice At the moment of reward configuration, the Incentives Controller performs\n   * a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\n   * This check is enforced for integrators to be able to show incentives at\n   * the current Aave UI without the need to setup an external price registry\n   * @param reward The address of the reward to set the price aggregator\n   * @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\n   */\n  function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\n\n  /**\n   * @dev Get the price aggregator oracle address\n   * @param reward The address of the reward\n   * @return The price oracle of the reward\n   */\n  function getRewardOracle(address reward) external view returns (address);\n\n  /**\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\n   * @param user The address of the user\n   * @return The claimer address\n   */\n  function getClaimer(address user) external view returns (address);\n\n  /**\n   * @dev Returns the Transfer Strategy implementation contract address being used for a reward address\n   * @param reward The address of the reward\n   * @return The address of the TransferStrategy contract\n   */\n  function getTransferStrategy(address reward) external view returns (address);\n\n  /**\n   * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\n   * @param config The assets configuration input, the list of structs contains the following fields:\n   *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\n   *   uint256 totalSupply: The total supply of the asset to incentivize\n   *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\n   *   address asset: The asset address to incentivize\n   *   address reward: The reward token address\n   *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\n   *   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\n   *                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\n   */\n  function configureAssets(RewardsDataTypes.RewardsConfigInput[] memory config) external;\n\n  /**\n   * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\n   * @dev The units of `totalSupply` and `userBalance` should be the same.\n   * @param user The address of the user whose asset balance has changed\n   * @param totalSupply The total supply of the asset prior to user balance change\n   * @param userBalance The previous user balance prior to balance change\n   **/\n  function handleAction(\n    address user,\n    uint256 totalSupply,\n    uint256 userBalance\n  ) external;\n\n  /**\n   * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\n   * @param assets List of assets to check eligible distributions before claiming rewards\n   * @param amount The amount of rewards to claim\n   * @param to The address that will be receiving the rewards\n   * @param reward The address of the reward token\n   * @return The amount of rewards claimed\n   **/\n  function claimRewards(\n    address[] calldata assets,\n    uint256 amount,\n    address to,\n    address reward\n  ) external returns (uint256);\n\n  /**\n   * @dev Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The\n   * caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n   * @param assets The list of assets to check eligible distributions before claiming rewards\n   * @param amount The amount of rewards to claim\n   * @param user The address to check and claim rewards\n   * @param to The address that will be receiving the rewards\n   * @param reward The address of the reward token\n   * @return The amount of rewards claimed\n   **/\n  function claimRewardsOnBehalf(\n    address[] calldata assets,\n    uint256 amount,\n    address user,\n    address to,\n    address reward\n  ) external returns (uint256);\n\n  /**\n   * @dev Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\n   * @param assets The list of assets to check eligible distributions before claiming rewards\n   * @param amount The amount of rewards to claim\n   * @param reward The address of the reward token\n   * @return The amount of rewards claimed\n   **/\n  function claimRewardsToSelf(\n    address[] calldata assets,\n    uint256 amount,\n    address reward\n  ) external returns (uint256);\n\n  /**\n   * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\n   * @param assets The list of assets to check eligible distributions before claiming rewards\n   * @param to The address that will be receiving the rewards\n   * @return rewardsList List of addresses of the reward tokens\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \"rewardList\"\n   **/\n  function claimAllRewards(address[] calldata assets, address to)\n    external\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n\n  /**\n   * @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\n   * be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n   * @param assets The list of assets to check eligible distributions before claiming rewards\n   * @param user The address to check and claim rewards\n   * @param to The address that will be receiving the rewards\n   * @return rewardsList List of addresses of the reward tokens\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \"rewardsList\"\n   **/\n  function claimAllRewardsOnBehalf(\n    address[] calldata assets,\n    address user,\n    address to\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n\n  /**\n   * @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\n   * @param assets The list of assets to check eligible distributions before claiming rewards\n   * @return rewardsList List of addresses of the reward tokens\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \"rewardsList\"\n   **/\n  function claimAllRewardsToSelf(address[] calldata assets)\n    external\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n}\n"
    },
    "@aave/periphery-v3/contracts/rewards/interfaces/IRewardsDistributor.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.10;\n\n/**\n * @title IRewardsDistributor\n * @author Aave\n * @notice Defines the basic interface for a Rewards Distributor.\n */\ninterface IRewardsDistributor {\n  /**\n   * @dev Emitted when the configuration of the rewards of an asset is updated.\n   * @param asset The address of the incentivized asset\n   * @param reward The address of the reward token\n   * @param oldEmission The old emissions per second value of the reward distribution\n   * @param newEmission The new emissions per second value of the reward distribution\n   * @param oldDistributionEnd The old end timestamp of the reward distribution\n   * @param newDistributionEnd The new end timestamp of the reward distribution\n   * @param assetIndex The index of the asset distribution\n   */\n  event AssetConfigUpdated(\n    address indexed asset,\n    address indexed reward,\n    uint256 oldEmission,\n    uint256 newEmission,\n    uint256 oldDistributionEnd,\n    uint256 newDistributionEnd,\n    uint256 assetIndex\n  );\n\n  /**\n   * @dev Emitted when rewards of an asset are accrued on behalf of a user.\n   * @param asset The address of the incentivized asset\n   * @param reward The address of the reward token\n   * @param user The address of the user that rewards are accrued on behalf of\n   * @param assetIndex The index of the asset distribution\n   * @param userIndex The index of the asset distribution on behalf of the user\n   * @param rewardsAccrued The amount of rewards accrued\n   */\n  event Accrued(\n    address indexed asset,\n    address indexed reward,\n    address indexed user,\n    uint256 assetIndex,\n    uint256 userIndex,\n    uint256 rewardsAccrued\n  );\n\n  /**\n   * @dev Sets the end date for the distribution\n   * @param asset The asset to incentivize\n   * @param reward The reward token that incentives the asset\n   * @param newDistributionEnd The end date of the incentivization, in unix time format\n   **/\n  function setDistributionEnd(\n    address asset,\n    address reward,\n    uint32 newDistributionEnd\n  ) external;\n\n  /**\n   * @dev Sets the emission per second of a set of reward distributions\n   * @param asset The asset is being incentivized\n   * @param rewards List of reward addresses are being distributed\n   * @param newEmissionsPerSecond List of new reward emissions per second\n   */\n  function setEmissionPerSecond(\n    address asset,\n    address[] calldata rewards,\n    uint88[] calldata newEmissionsPerSecond\n  ) external;\n\n  /**\n   * @dev Gets the end date for the distribution\n   * @param asset The incentivized asset\n   * @param reward The reward token of the incentivized asset\n   * @return The timestamp with the end of the distribution, in unix time format\n   **/\n  function getDistributionEnd(address asset, address reward) external view returns (uint256);\n\n  /**\n   * @dev Returns the index of a user on a reward distribution\n   * @param user Address of the user\n   * @param asset The incentivized asset\n   * @param reward The reward token of the incentivized asset\n   * @return The current user asset index, not including new distributions\n   **/\n  function getUserAssetIndex(\n    address user,\n    address asset,\n    address reward\n  ) external view returns (uint256);\n\n  /**\n   * @dev Returns the configuration of the distribution reward for a certain asset\n   * @param asset The incentivized asset\n   * @param reward The reward token of the incentivized asset\n   * @return The index of the asset distribution\n   * @return The emission per second of the reward distribution\n   * @return The timestamp of the last update of the index\n   * @return The timestamp of the distribution end\n   **/\n  function getRewardsData(address asset, address reward)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    );\n\n  /**\n   * @dev Calculates the next value of an specific distribution index, with validations.\n   * @param asset The incentivized asset\n   * @param reward The reward token of the incentivized asset\n   * @return The old index of the asset distribution\n   * @return The new index of the asset distribution\n   **/\n  function getAssetIndex(address asset, address reward) external view returns (uint256, uint256);\n\n  /**\n   * @dev Returns the list of available reward token addresses of an incentivized asset\n   * @param asset The incentivized asset\n   * @return List of rewards addresses of the input asset\n   **/\n  function getRewardsByAsset(address asset) external view returns (address[] memory);\n\n  /**\n   * @dev Returns the list of available reward addresses\n   * @return List of rewards supported in this contract\n   **/\n  function getRewardsList() external view returns (address[] memory);\n\n  /**\n   * @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\n   * @param user The address of the user\n   * @param reward The address of the reward token\n   * @return Unclaimed rewards, not including new distributions\n   **/\n  function getUserAccruedRewards(address user, address reward) external view returns (uint256);\n\n  /**\n   * @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\n   * @param assets List of incentivized assets to check eligible distributions\n   * @param user The address of the user\n   * @param reward The address of the reward token\n   * @return The rewards amount\n   **/\n  function getUserRewards(\n    address[] calldata assets,\n    address user,\n    address reward\n  ) external view returns (uint256);\n\n  /**\n   * @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\n   * @param assets List of incentivized assets to check eligible distributions\n   * @param user The address of the user\n   * @return The list of reward addresses\n   * @return The list of unclaimed amount of rewards\n   **/\n  function getAllUserRewards(address[] calldata assets, address user)\n    external\n    view\n    returns (address[] memory, uint256[] memory);\n\n  /**\n   * @dev Returns the decimals of an asset to calculate the distribution delta\n   * @param asset The address to retrieve decimals\n   * @return The decimals of an underlying asset\n   */\n  function getAssetDecimals(address asset) external view returns (uint8);\n\n  /**\n   * @dev Returns the address of the emission manager\n   * @return The address of the EmissionManager\n   */\n  function EMISSION_MANAGER() external view returns (address);\n\n  /**\n   * @dev Returns the address of the emission manager.\n   * Deprecated: This getter is maintained for compatibility purposes. Use the `EMISSION_MANAGER()` function instead.\n   * @return The address of the EmissionManager\n   */\n  function getEmissionManager() external view returns (address);\n}\n"
    },
    "@aave/periphery-v3/contracts/rewards/interfaces/ITransferStrategyBase.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.10;\n\ninterface ITransferStrategyBase {\n  event EmergencyWithdrawal(\n    address indexed caller,\n    address indexed token,\n    address indexed to,\n    uint256 amount\n  );\n\n  /**\n   * @dev Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\n   * @param to Account to transfer rewards\n   * @param reward Address of the reward token\n   * @param amount Amount to transfer to the \"to\" address parameter\n   * @return Returns true bool if transfer logic succeeds\n   */\n  function performTransfer(\n    address to,\n    address reward,\n    uint256 amount\n  ) external returns (bool);\n\n  /**\n   * @return Returns the address of the Incentives Controller\n   */\n  function getIncentivesController() external view returns (address);\n\n  /**\n   * @return Returns the address of the Rewards admin\n   */\n  function getRewardsAdmin() external view returns (address);\n\n  /**\n   * @dev Perform an emergency token withdrawal only callable by the Rewards admin\n   * @param token Address of the token to withdraw funds from this contract\n   * @param to Address of the recipient of the withdrawal\n   * @param amount Amount of the withdrawal\n   */\n  function emergencyWithdrawal(\n    address token,\n    address to,\n    uint256 amount\n  ) external;\n}\n"
    },
    "@aave/periphery-v3/contracts/rewards/libraries/RewardsDataTypes.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.10;\n\nimport {ITransferStrategyBase} from '../interfaces/ITransferStrategyBase.sol';\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\n\nlibrary RewardsDataTypes {\n  struct RewardsConfigInput {\n    uint88 emissionPerSecond;\n    uint256 totalSupply;\n    uint32 distributionEnd;\n    address asset;\n    address reward;\n    ITransferStrategyBase transferStrategy;\n    IEACAggregatorProxy rewardOracle;\n  }\n\n  struct UserAssetBalance {\n    address asset;\n    uint256 userBalance;\n    uint256 totalSupply;\n  }\n\n  struct UserData {\n    // Liquidity index of the reward distribution for the user\n    uint104 index;\n    // Amount of accrued rewards for the user since last user index update\n    uint128 accrued;\n  }\n\n  struct RewardData {\n    // Liquidity index of the reward distribution\n    uint104 index;\n    // Amount of reward tokens distributed per second\n    uint88 emissionPerSecond;\n    // Timestamp of the last reward index update\n    uint32 lastUpdateTimestamp;\n    // The end of the distribution of rewards (in seconds)\n    uint32 distributionEnd;\n    // Map of user addresses and their rewards data (userAddress => userData)\n    mapping(address => UserData) usersData;\n  }\n\n  struct AssetData {\n    // Map of reward token addresses and their data (rewardTokenAddress => rewardData)\n    mapping(address => RewardData) rewards;\n    // List of reward token addresses for the asset\n    mapping(uint128 => address) availableRewards;\n    // Count of reward tokens for the asset\n    uint128 availableRewardsCount;\n    // Number of decimals of the asset\n    uint8 decimals;\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/TimelockController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (governance/TimelockController.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../access/AccessControl.sol\";\nimport \"../token/ERC721/IERC721Receiver.sol\";\nimport \"../token/ERC1155/IERC1155Receiver.sol\";\nimport \"../utils/Address.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n *\n * _Available since v3.3._\n */\ncontract TimelockController is AccessControl, IERC721Receiver, IERC1155Receiver {\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n    bytes32 public constant CANCELLER_ROLE = keccak256(\"CANCELLER_ROLE\");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with a given `minDelay`, and a list of\n     * initial proposers and executors. The proposers receive both the\n     * proposer and the canceller role (for backward compatibility). The\n     * executors receive the executor role.\n     *\n     * NOTE: At construction, both the deployer and the timelock itself are\n     * administrators. This helps further configuration of the timelock by the\n     * deployer. After configuration is done, it is recommended that the\n     * deployer renounces its admin position and relies on timelocked\n     * operations to perform future maintenance.\n     */\n    constructor(\n        uint256 minDelay,\n        address[] memory proposers,\n        address[] memory executors\n    ) {\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\n\n        // deployer + self administration\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n        // register proposers and cancellers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _setupRole(PROPOSER_ROLE, proposers[i]);\n            _setupRole(CANCELLER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _setupRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, AccessControl) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns whether an id correspond to a registered operation. This\n     * includes both Pending, Ready and Done operations.\n     */\n    function isOperation(bytes32 id) public view virtual returns (bool registered) {\n        return getTimestamp(id) > 0;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not.\n     */\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready or not.\n     */\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\n        uint256 timestamp = getTimestamp(id);\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns the minimum delay for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256 duration) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits a {CallScheduled} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == payloads.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to becomes valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'canceller' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n    // thus any modifications to the operation during reentrancy should be caught.\n    // slither-disable-next-line reentrancy-eth\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata payload,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        _execute(target, value, payload);\n        emit CallExecuted(id, 0, target, value, payload);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == payloads.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            address target = targets[i];\n            uint256 value = values[i];\n            bytes calldata payload = payloads[i];\n            _execute(target, value, payload);\n            emit CallExecuted(id, i, target, value, payload);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an operation's call.\n     */\n    function _execute(\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) internal virtual {\n        (bool success, ) = target.call{value: value}(data);\n        require(success, \"TimelockController: underlying transaction reverted\");\n    }\n\n    /**\n     * @dev Checks before execution of an operation's calls.\n     */\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\n    }\n\n    /**\n     * @dev Checks after execution of an operation's calls.\n     */\n    function _afterCall(bytes32 id) private {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155Received}.\n     */\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/IERC20Metadata.sol\";\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@ragetrade/core/contracts/utils/TimelockControllerWithMinDelayOverride.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { TimelockController } from '@openzeppelin/contracts/governance/TimelockController.sol';\n\n/// @title Timelock controller with a minimum delay override for certain functions\ncontract TimelockControllerWithMinDelayOverride is TimelockController {\n    uint256 private _minDelayOverridePlusOne;\n    mapping(bytes32 => uint256) private _minDelayOverridePlusOneMapping;\n\n    event MinDelayOverrideSet(address target, bytes4 selector, uint256 newMinDelay);\n    event MinDelayOverrideUnset(address target, bytes4 selector);\n\n    constructor(\n        uint256 minDelay,\n        address[] memory proposers,\n        address[] memory executors\n    ) TimelockController(minDelay, proposers, executors) {}\n\n    function setMinDelayOverride(\n        address target,\n        bytes4 selector,\n        uint256 minDelayOverride\n    ) public {\n        require(msg.sender == address(this), 'TimelockController: caller must be timelock');\n        _minDelayOverridePlusOneMapping[_getKey(target, selector)] = minDelayOverride + 1;\n        emit MinDelayOverrideSet(target, selector, minDelayOverride);\n    }\n\n    function unsetMinDelayOverride(address target, bytes4 selector) public {\n        require(msg.sender == address(this), 'TimelockController: caller must be timelock');\n        delete _minDelayOverridePlusOneMapping[_getKey(target, selector)];\n        emit MinDelayOverrideUnset(target, selector);\n    }\n\n    function getMinDelayOverride(address target, bytes4 selector) external view returns (uint256 minDelayOverride) {\n        uint256 minDelayOverridePlusOne = _minDelayOverridePlusOneMapping[_getKey(target, selector)];\n        require(minDelayOverridePlusOne > 0, 'TimelockController: minDelayOverride not set');\n        return minDelayOverridePlusOne - 1;\n    }\n\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual override onlyRole(PROPOSER_ROLE) {\n        if (data.length >= 4) {\n            uint256 minDelayOverridePlusOne = _minDelayOverridePlusOneMapping[_getKey(target, _getSelector(data))];\n            if (minDelayOverridePlusOne != 0) {\n                _minDelayOverridePlusOne = minDelayOverridePlusOne; // SSTORE\n            }\n        }\n        super.schedule(target, value, data, predecessor, salt, delay);\n        delete _minDelayOverridePlusOne;\n    }\n\n    function getMinDelay() public view virtual override returns (uint256 duration) {\n        uint256 minDelayOverridePlusOne = _minDelayOverridePlusOne;\n        return minDelayOverridePlusOne == 0 ? super.getMinDelay() : minDelayOverridePlusOne - 1;\n    }\n\n    function _getSelector(bytes calldata data) internal pure returns (bytes4 selector) {\n        assert(data.length >= 4);\n        assembly {\n            // clear first memory word\n            mstore(0, 0)\n            // copy calldata to memory scratch space\n            calldatacopy(0, data.offset, 4)\n            // load memory to stack\n            selector := mload(0)\n        }\n    }\n\n    function _getKey(address target, bytes4 selector) internal pure returns (bytes32 c) {\n        assembly {\n            // store target in the last 20 bytes and selector in the 4 bytes before\n            c := xor(target, selector)\n        }\n    }\n}\n"
    },
    "@rari-capital/solmate/src/utils/FixedPointMathLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\nlibrary FixedPointMathLib {\n    /*//////////////////////////////////////////////////////////////\n                    SIMPLIFIED FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\n    }\n\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\n    }\n\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\n    }\n\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    LOW LEVEL FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function mulDivDown(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // Divide z by the denominator.\n            z := div(z, denominator)\n        }\n    }\n\n    function mulDivUp(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // First, divide z - 1 by the denominator and add 1.\n            // We allow z - 1 to underflow if z is 0, because we multiply the\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\n        }\n    }\n\n    function rpow(\n        uint256 x,\n        uint256 n,\n        uint256 scalar\n    ) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := scalar\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store scalar in z for now.\n                    z := scalar\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, scalar)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, scalar)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, scalar)\n                    }\n                }\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        assembly {\n            // Start off with z at 1.\n            z := 1\n\n            // Used below to help find a nearby power of 2.\n            let y := x\n\n            // Find the lowest power of 2 that is at least sqrt(x).\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\n                y := shr(128, y) // Like dividing by 2 ** 128.\n                z := shl(64, z) // Like multiplying by 2 ** 64.\n            }\n            if iszero(lt(y, 0x10000000000000000)) {\n                y := shr(64, y) // Like dividing by 2 ** 64.\n                z := shl(32, z) // Like multiplying by 2 ** 32.\n            }\n            if iszero(lt(y, 0x100000000)) {\n                y := shr(32, y) // Like dividing by 2 ** 32.\n                z := shl(16, z) // Like multiplying by 2 ** 16.\n            }\n            if iszero(lt(y, 0x10000)) {\n                y := shr(16, y) // Like dividing by 2 ** 16.\n                z := shl(8, z) // Like multiplying by 2 ** 8.\n            }\n            if iszero(lt(y, 0x100)) {\n                y := shr(8, y) // Like dividing by 2 ** 8.\n                z := shl(4, z) // Like multiplying by 2 ** 4.\n            }\n            if iszero(lt(y, 0x10)) {\n                y := shr(4, y) // Like dividing by 2 ** 4.\n                z := shl(2, z) // Like multiplying by 2 ** 2.\n            }\n            if iszero(lt(y, 0x8)) {\n                // Equivalent to 2 ** z.\n                z := shl(1, z)\n            }\n\n            // Shifting right by 1 is like dividing by 2.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // Compute a rounded down version of z.\n            let zRoundDown := div(x, z)\n\n            // If zRoundDown is smaller, use it.\n            if lt(zRoundDown, z) {\n                z := zRoundDown\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#mint\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\ninterface IUniswapV3MintCallback {\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\n    function uniswapV3MintCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport {IUniswapV3PoolImmutables} from './pool/IUniswapV3PoolImmutables.sol';\nimport {IUniswapV3PoolState} from './pool/IUniswapV3PoolState.sol';\nimport {IUniswapV3PoolDerivedState} from './pool/IUniswapV3PoolDerivedState.sol';\nimport {IUniswapV3PoolActions} from './pool/IUniswapV3PoolActions.sol';\nimport {IUniswapV3PoolOwnerActions} from './pool/IUniswapV3PoolOwnerActions.sol';\nimport {IUniswapV3PoolErrors} from './pool/IUniswapV3PoolErrors.sol';\nimport {IUniswapV3PoolEvents} from './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolErrors,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolErrors.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Errors emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolErrors {\n    error LOK();\n    error TLU();\n    error TLM();\n    error TUM();\n    error AI();\n    error M0();\n    error M1();\n    error AS();\n    error IIA();\n    error L();\n    error F0();\n    error F1();\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// @return observationIndex The index of the last oracle observation that was written,\n    /// @return observationCardinality The current maximum number of observations stored in the pool,\n    /// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// @return feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    /// @return The liquidity at the current price of the pool\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper\n    /// @return liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// @return feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// @return feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// @return tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// @return secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// @return secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// @return initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return liquidity The amount of liquidity in the position,\n    /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// @return initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/BitMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\n/// @title BitMath\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\nlibrary BitMath {\n    /// @notice Returns the index of the most significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\n    /// @return r the index of the most significant bit\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        unchecked {\n            if (x >= 0x100000000000000000000000000000000) {\n                x >>= 128;\n                r += 128;\n            }\n            if (x >= 0x10000000000000000) {\n                x >>= 64;\n                r += 64;\n            }\n            if (x >= 0x100000000) {\n                x >>= 32;\n                r += 32;\n            }\n            if (x >= 0x10000) {\n                x >>= 16;\n                r += 16;\n            }\n            if (x >= 0x100) {\n                x >>= 8;\n                r += 8;\n            }\n            if (x >= 0x10) {\n                x >>= 4;\n                r += 4;\n            }\n            if (x >= 0x4) {\n                x >>= 2;\n                r += 2;\n            }\n            if (x >= 0x2) r += 1;\n        }\n    }\n\n    /// @notice Returns the index of the least significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\n    /// @return r the index of the least significant bit\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        unchecked {\n            r = 255;\n            if (x & type(uint128).max > 0) {\n                r -= 128;\n            } else {\n                x >>= 128;\n            }\n            if (x & type(uint64).max > 0) {\n                r -= 64;\n            } else {\n                x >>= 64;\n            }\n            if (x & type(uint32).max > 0) {\n                r -= 32;\n            } else {\n                x >>= 32;\n            }\n            if (x & type(uint16).max > 0) {\n                r -= 16;\n            } else {\n                x >>= 16;\n            }\n            if (x & type(uint8).max > 0) {\n                r -= 8;\n            } else {\n                x >>= 8;\n            }\n            if (x & 0xf > 0) {\n                r -= 4;\n            } else {\n                x >>= 4;\n            }\n            if (x & 0x3 > 0) {\n                r -= 2;\n            } else {\n                x >>= 2;\n            }\n            if (x & 0x1 > 0) r -= 1;\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FixedPoint128.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = a * b\n            // Compute the product mod 2**256 and mod 2**256 - 1\n            // then use the Chinese Remainder Theorem to reconstruct\n            // the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2**256 + prod0\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(a, b, not(0))\n                prod0 := mul(a, b)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division\n            if (prod1 == 0) {\n                require(denominator > 0);\n                assembly {\n                    result := div(prod0, denominator)\n                }\n                return result;\n            }\n\n            // Make sure the result is less than 2**256.\n            // Also prevents denominator == 0\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0]\n            // Compute remainder using mulmod\n            uint256 remainder;\n            assembly {\n                remainder := mulmod(a, b, denominator)\n            }\n            // Subtract 256 bit number from 512 bit number\n            assembly {\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator\n            // Compute largest power of two divisor of denominator.\n            // Always >= 1.\n            uint256 twos = (0 - denominator) & denominator;\n            // Divide denominator by power of two\n            assembly {\n                denominator := div(denominator, twos)\n            }\n\n            // Divide [prod1 prod0] by the factors of two\n            assembly {\n                prod0 := div(prod0, twos)\n            }\n            // Shift in bits from prod1 into prod0. For this we need\n            // to flip `twos` such that it is 2**256 / twos.\n            // If twos is zero, then it becomes one\n            assembly {\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2**256\n            // Now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inv = (3 * denominator) ^ 2;\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // inverse mod 2**8\n            inv *= 2 - denominator * inv; // inverse mod 2**16\n            inv *= 2 - denominator * inv; // inverse mod 2**32\n            inv *= 2 - denominator * inv; // inverse mod 2**64\n            inv *= 2 - denominator * inv; // inverse mod 2**128\n            inv *= 2 - denominator * inv; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the precoditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n            return result;\n        }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            result = mulDiv(a, b, denominator);\n            if (mulmod(a, b, denominator) > 0) {\n                require(result < type(uint256).max);\n                result++;\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/Simulate.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nimport {SwapMath} from './SwapMath.sol';\nimport {SafeCast} from './SafeCast.sol';\nimport {TickMath} from './TickMath.sol';\nimport {TickBitmap} from './TickBitmap.sol';\nimport {BitMath} from './BitMath.sol';\n\nimport {IUniswapV3Pool} from '../interfaces/IUniswapV3Pool.sol';\n\n/// @title Library for simulating swaps.\n/// @notice By fully replicating the swap logic, we can make a static call to get a quote.\nlibrary Simulate {\n    using SafeCast for uint256;\n\n    struct Cache {\n        // price at the beginning of the swap\n        uint160 sqrtPriceX96Start;\n        // tick at the beginning of the swap\n        int24 tickStart;\n        // liquidity at the beginning of the swap\n        uint128 liquidityStart;\n        // the lp fee of the pool\n        uint24 fee;\n        // the tick spacing of the pool\n        int24 tickSpacing;\n    }\n\n    struct State {\n        // the amount remaining to be swapped in/out of the input/output asset\n        int256 amountSpecifiedRemaining;\n        // the amount already swapped out/in of the output/input asset\n        int256 amountCalculated;\n        // current sqrt(price)\n        uint160 sqrtPriceX96;\n        // the tick associated with the current price\n        int24 tick;\n        // the current liquidity in range\n        uint128 liquidity;\n    }\n\n    // copied from UniswapV3Pool to avoid pragma issues associated with importing it\n    struct StepComputations {\n        // the price at the beginning of the step\n        uint160 sqrtPriceStartX96;\n        // the next tick to swap to from the current tick in the swap direction\n        int24 tickNext;\n        // whether tickNext is initialized or not\n        bool initialized;\n        // sqrt(price) for the next tick (1/0)\n        uint160 sqrtPriceNextX96;\n        // how much is being swapped in in this step\n        uint256 amountIn;\n        // how much is being swapped out\n        uint256 amountOut;\n        // how much fee is being paid in\n        uint256 feeAmount;\n    }\n\n    function simulateSwap(\n        IUniswapV3Pool pool,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) internal view returns (int256 amount0, int256 amount1) {\n        require(amountSpecified != 0, 'AS');\n\n        (uint160 sqrtPriceX96, int24 tick, , , , , ) = pool.slot0();\n\n        require(\n            zeroForOne\n                ? sqrtPriceLimitX96 < sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\n                : sqrtPriceLimitX96 > sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\n            'SPL'\n        );\n\n        Cache memory cache = Cache({\n            sqrtPriceX96Start: sqrtPriceX96,\n            tickStart: tick,\n            liquidityStart: pool.liquidity(),\n            fee: pool.fee(),\n            tickSpacing: pool.tickSpacing()\n        });\n\n        bool exactInput = amountSpecified > 0;\n\n        State memory state = State({\n            amountSpecifiedRemaining: amountSpecified,\n            amountCalculated: 0,\n            sqrtPriceX96: cache.sqrtPriceX96Start,\n            tick: cache.tickStart,\n            liquidity: cache.liquidityStart\n        });\n\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\n            StepComputations memory step;\n\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\n\n            (step.tickNext, step.initialized) = nextInitializedTickWithinOneWord(\n                pool.tickBitmap,\n                state.tick,\n                cache.tickSpacing,\n                zeroForOne\n            );\n\n            if (step.tickNext < TickMath.MIN_TICK) {\n                step.tickNext = TickMath.MIN_TICK;\n            } else if (step.tickNext > TickMath.MAX_TICK) {\n                step.tickNext = TickMath.MAX_TICK;\n            }\n\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\n\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\n                state.sqrtPriceX96,\n                (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)\n                    ? sqrtPriceLimitX96\n                    : step.sqrtPriceNextX96,\n                state.liquidity,\n                state.amountSpecifiedRemaining,\n                cache.fee\n            );\n\n            if (exactInput) {\n                unchecked {\n                    state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\n                }\n                state.amountCalculated -= step.amountOut.toInt256();\n            } else {\n                unchecked {\n                    state.amountSpecifiedRemaining += step.amountOut.toInt256();\n                }\n                state.amountCalculated += (step.amountIn + step.feeAmount).toInt256();\n            }\n\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\n                if (step.initialized) {\n                    (, int128 liquidityNet, , , , , , ) = pool.ticks(step.tickNext);\n                    unchecked {\n                        if (zeroForOne) liquidityNet = -liquidityNet;\n                    }\n\n                    state.liquidity = liquidityNet < 0\n                        ? state.liquidity - uint128(-liquidityNet)\n                        : state.liquidity + uint128(liquidityNet);\n                }\n\n                unchecked {\n                    state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n                }\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\n            }\n        }\n\n        (amount0, amount1) = zeroForOne == exactInput\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\n    }\n\n    // This function replicates TickBitmap, but accepts a function pointer argument.\n    // It's private because it's messy, and shouldn't be re-used.\n    function nextInitializedTickWithinOneWord(\n        function(int16) external view returns (uint256) self,\n        int24 tick,\n        int24 tickSpacing,\n        bool lte\n    ) private view returns (int24 next, bool initialized) {\n        unchecked {\n            int24 compressed = tick / tickSpacing;\n            if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n            if (lte) {\n                (int16 wordPos, uint8 bitPos) = TickBitmap.position(compressed);\n                // all the 1s at or to the right of the current bitPos\n                uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n                uint256 masked = self(wordPos) & mask;\n\n                // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n                initialized = masked != 0;\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n                next = initialized\n                    ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\n                    : (compressed - int24(uint24(bitPos))) * tickSpacing;\n            } else {\n                // start from the word of the next tick, since the current tick state doesn't matter\n                (int16 wordPos, uint8 bitPos) = TickBitmap.position(compressed + 1);\n                // all the 1s at or to the left of the bitPos\n                uint256 mask = ~((1 << bitPos) - 1);\n                uint256 masked = self(wordPos) & mask;\n\n                // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n                initialized = masked != 0;\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n                next = initialized\n                    ? (compressed + 1 + int24(uint24(BitMath.leastSignificantBit(masked) - bitPos))) * tickSpacing\n                    : (compressed + 1 + int24(uint24(type(uint8).max - bitPos))) * tickSpacing;\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {SafeCast} from './SafeCast.sol';\n\nimport {FullMath} from './FullMath.sol';\nimport {UnsafeMath} from './UnsafeMath.sol';\nimport {FixedPoint96} from './FixedPoint96.sol';\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMath {\n    using SafeCast for uint256;\n\n    /// @notice Gets the next sqrt price given a delta of token0\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token0 to add or remove from virtual reserves\n    /// @param add Whether to add or remove the amount of token0\n    /// @return The price after adding or removing amount, depending on add\n    function getNextSqrtPriceFromAmount0RoundingUp(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\n        if (amount == 0) return sqrtPX96;\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\n        if (add) {\n            unchecked {\n                uint256 product;\n                if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\n                    uint256 denominator = numerator1 + product;\n                    if (denominator >= numerator1)\n                        // always fits in 160 bits\n                        return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\n                }\n            }\n            // denominator is checked for overflow\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96) + amount));\n        } else {\n            unchecked {\n                uint256 product;\n                // if the product overflows, we know the denominator underflows\n                // in addition, we must check that the denominator does not underflow\n                require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\n                uint256 denominator = numerator1 - product;\n                return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\n            }\n        }\n    }\n\n    /// @notice Gets the next sqrt price given a delta of token1\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\n    /// @param add Whether to add, or remove, the amount of token1\n    /// @return The price after adding or removing `amount`\n    function getNextSqrtPriceFromAmount1RoundingDown(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\n        // in both cases, avoid a mulDiv for most inputs\n        if (add) {\n            uint256 quotient = (\n                amount <= type(uint160).max\n                    ? (amount << FixedPoint96.RESOLUTION) / liquidity\n                    : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\n            );\n\n            return (uint256(sqrtPX96) + quotient).toUint160();\n        } else {\n            uint256 quotient = (\n                amount <= type(uint160).max\n                    ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\n                    : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\n            );\n\n            require(sqrtPX96 > quotient);\n            // always fits 160 bits\n            unchecked {\n                return uint160(sqrtPX96 - quotient);\n            }\n        }\n    }\n\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountIn How much of token0, or token1, is being swapped in\n    /// @param zeroForOne Whether the amount in is token0 or token1\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\n    function getNextSqrtPriceFromInput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountIn,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we don't pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\n    }\n\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\n    /// @param sqrtPX96 The starting price before accounting for the output amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountOut How much of token0, or token1, is being swapped out\n    /// @param zeroForOne Whether the amount out is token0 or token1\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\n    function getNextSqrtPriceFromOutput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountOut,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\n    }\n\n    /// @notice Gets the amount0 delta between two prices\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up or down\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount0) {\n        unchecked {\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n            uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n            uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n            require(sqrtRatioAX96 > 0);\n\n            return\n                roundUp\n                    ? UnsafeMath.divRoundingUp(\n                        FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\n                        sqrtRatioAX96\n                    )\n                    : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\n        }\n    }\n\n    /// @notice Gets the amount1 delta between two prices\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up, or down\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount1) {\n        unchecked {\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n            return\n                roundUp\n                    ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\n                    : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n        }\n    }\n\n    /// @notice Helper that gets signed token0 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount0) {\n        unchecked {\n            return\n                liquidity < 0\n                    ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                    : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n        }\n    }\n\n    /// @notice Helper that gets signed token1 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount1) {\n        unchecked {\n            return\n                liquidity < 0\n                    ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                    : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/SwapMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {FullMath} from './FullMath.sol';\nimport {SqrtPriceMath} from './SqrtPriceMath.sol';\n\n/// @title Computes the result of a swap within ticks\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\nlibrary SwapMath {\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\n    /// @param liquidity The usable liquidity\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\n    /// @return feeAmount The amount of input that will be taken as a fee\n    function computeSwapStep(\n        uint160 sqrtRatioCurrentX96,\n        uint160 sqrtRatioTargetX96,\n        uint128 liquidity,\n        int256 amountRemaining,\n        uint24 feePips\n    )\n        internal\n        pure\n        returns (\n            uint160 sqrtRatioNextX96,\n            uint256 amountIn,\n            uint256 amountOut,\n            uint256 feeAmount\n        )\n    {\n        unchecked {\n            bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\n            bool exactIn = amountRemaining >= 0;\n\n            if (exactIn) {\n                uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\n                amountIn = zeroForOne\n                    ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\n                if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\n                else\n                    sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n                        sqrtRatioCurrentX96,\n                        liquidity,\n                        amountRemainingLessFee,\n                        zeroForOne\n                    );\n            } else {\n                amountOut = zeroForOne\n                    ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\n                if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\n                else\n                    sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n                        sqrtRatioCurrentX96,\n                        liquidity,\n                        uint256(-amountRemaining),\n                        zeroForOne\n                    );\n            }\n\n            bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\n\n            // get the input/output amounts\n            if (zeroForOne) {\n                amountIn = max && exactIn\n                    ? amountIn\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\n                amountOut = max && !exactIn\n                    ? amountOut\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\n            } else {\n                amountIn = max && exactIn\n                    ? amountIn\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\n                amountOut = max && !exactIn\n                    ? amountOut\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\n            }\n\n            // cap the output amount to not exceed the remaining output amount\n            if (!exactIn && amountOut > uint256(-amountRemaining)) {\n                amountOut = uint256(-amountRemaining);\n            }\n\n            if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\n                // we didn't reach the target, so take the remainder of the maximum input as fee\n                feeAmount = uint256(amountRemaining) - amountIn;\n            } else {\n                feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/TickBitmap.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {BitMath} from './BitMath.sol';\n\n/// @title Packed tick initialized state library\n/// @notice Stores a packed mapping of tick index to its initialized state\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\nlibrary TickBitmap {\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\n    /// @param tick The tick for which to compute the position\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\n    /// @return bitPos The bit position in the word where the flag is stored\n    function position(int24 tick) internal pure returns (int16 wordPos, uint8 bitPos) {\n        unchecked {\n            wordPos = int16(tick >> 8);\n            bitPos = uint8(int8(tick % 256));\n        }\n    }\n\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\n    /// @param self The mapping in which to flip the tick\n    /// @param tick The tick to flip\n    /// @param tickSpacing The spacing between usable ticks\n    function flipTick(\n        mapping(int16 => uint256) storage self,\n        int24 tick,\n        int24 tickSpacing\n    ) internal {\n        unchecked {\n            require(tick % tickSpacing == 0); // ensure that the tick is spaced\n            (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\n            uint256 mask = 1 << bitPos;\n            self[wordPos] ^= mask;\n        }\n    }\n\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n    /// to the left (less than or equal to) or right (greater than) of the given tick\n    /// @param self The mapping in which to compute the next initialized tick\n    /// @param tick The starting tick\n    /// @param tickSpacing The spacing between usable ticks\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\n    function nextInitializedTickWithinOneWord(\n        mapping(int16 => uint256) storage self,\n        int24 tick,\n        int24 tickSpacing,\n        bool lte\n    ) internal view returns (int24 next, bool initialized) {\n        unchecked {\n            int24 compressed = tick / tickSpacing;\n            if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n            if (lte) {\n                (int16 wordPos, uint8 bitPos) = position(compressed);\n                // all the 1s at or to the right of the current bitPos\n                uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n                uint256 masked = self[wordPos] & mask;\n\n                // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n                initialized = masked != 0;\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n                next = initialized\n                    ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\n                    : (compressed - int24(uint24(bitPos))) * tickSpacing;\n            } else {\n                // start from the word of the next tick, since the current tick state doesn't matter\n                (int16 wordPos, uint8 bitPos) = position(compressed + 1);\n                // all the 1s at or to the left of the bitPos\n                uint256 mask = ~((1 << bitPos) - 1);\n                uint256 masked = self[wordPos] & mask;\n\n                // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n                initialized = masked != 0;\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n                next = initialized\n                    ? (compressed + 1 + int24(uint24(BitMath.leastSignificantBit(masked) - bitPos))) * tickSpacing\n                    : (compressed + 1 + int24(uint24(type(uint8).max - bitPos))) * tickSpacing;\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    error T();\n    error R();\n\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        unchecked {\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\n\n            uint256 ratio = absTick & 0x1 != 0\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\n                : 0x100000000000000000000000000000000;\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n            if (tick > 0) ratio = type(uint256).max / ratio;\n\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n        }\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        unchecked {\n            // second inequality must be < because the price can never reach the price at the max tick\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n            uint256 r = ratio;\n            uint256 msb = 0;\n\n            assembly {\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(5, gt(r, 0xFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(4, gt(r, 0xFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(3, gt(r, 0xFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(2, gt(r, 0xF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(1, gt(r, 0x3))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := gt(r, 0x1)\n                msb := or(msb, f)\n            }\n\n            if (msb >= 128) r = ratio >> (msb - 127);\n            else r = ratio << (127 - msb);\n\n            int256 log_2 = (int256(msb) - 128) << 64;\n\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(63, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(62, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(61, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(60, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(59, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(58, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(57, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(56, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(55, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(54, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(53, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(52, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(51, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(50, f))\n            }\n\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/UnsafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n    /// @notice Returns ceil(x / y)\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\n    /// @param x The dividend\n    /// @param y The divisor\n    /// @return z The quotient, ceil(x / y)\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            z := add(div(x, y), gt(mod(x, y), 0))\n        }\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/base/SelfPermit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol';\n\nimport '../interfaces/ISelfPermit.sol';\nimport '../interfaces/external/IERC20PermitAllowed.sol';\n\n/// @title Self Permit\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\n/// that requires an approval in a single transaction.\nabstract contract SelfPermit is ISelfPermit {\n    /// @inheritdoc ISelfPermit\n    function selfPermit(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public payable override {\n        IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitIfNecessary(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable override {\n        if (IERC20(token).allowance(msg.sender, address(this)) < value) selfPermit(token, value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitAllowed(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public payable override {\n        IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitAllowedIfNecessary(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable override {\n        if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)\n            selfPermitAllowed(token, nonce, expiry, v, r, s);\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/external/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Interface for verifying contract-based account signatures\n/// @notice Interface that verifies provided signature for the data\n/// @dev Interface defined by EIP-1271\ninterface IERC1271 {\n    /// @notice Returns whether the provided signature is valid for the provided data\n    /// @dev MUST return the bytes4 magic value 0x1626ba7e when function passes.\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5).\n    /// MUST allow external calls.\n    /// @param hash Hash of the data to be signed\n    /// @param signature Signature byte array associated with _data\n    /// @return magicValue The bytes4 magic value 0x1626ba7e\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/external/IERC20PermitAllowed.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Interface for permit\n/// @notice Interface used by DAI/CHAI for permit\ninterface IERC20PermitAllowed {\n    /// @notice Approve the spender to spend some tokens via the holder signature\n    /// @dev This is the permit interface used by DAI and CHAI\n    /// @param holder The address of the token holder, the token owner\n    /// @param spender The address of the token spender\n    /// @param nonce The holder's nonce, increases at each call to permit\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Multicall interface\n/// @notice Enables calling multiple methods in a single call to the contract\ninterface IMulticall {\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n    /// @param data The encoded function data for each of the calls to make to this contract\n    /// @return results The results from each of the calls passed in via data\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/INonfungibleTokenPositionDescriptor.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './INonfungiblePositionManager.sol';\n\n/// @title Describes position NFT tokens via URI\ninterface INonfungibleTokenPositionDescriptor {\n    /// @notice Produces the URI describing a particular token ID for a position manager\n    /// @dev Note this URI may be a data: URI with the JSON contents directly inlined\n    /// @param positionManager The position manager for which to describe the token\n    /// @param tokenId The ID of the token for which to produce a description, which may not be valid\n    /// @return The URI of the ERC721-compliant metadata\n    function tokenURI(INonfungiblePositionManager positionManager, uint256 tokenId)\n        external\n        view\n        returns (string memory);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPaymentsWithFee.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport './IPeripheryPayments.sol';\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPaymentsWithFee is IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between\n    /// 0 (exclusive), and 1 (inclusive) going to feeRecipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    function unwrapWETH9WithFee(\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient, with a percentage between\n    /// 0 (exclusive) and 1 (inclusive) going to feeRecipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    function sweepTokenWithFee(\n        address token,\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Quoter Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountIn The desired input amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountOut The desired output amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    function quoteExactOutputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountOut,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountIn);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Self Permit\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\ninterface ISelfPermit {\n    /// @notice Permits this contract to spend a given token from `msg.sender`\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n    /// @param token The address of the token spent\n    /// @param value The amount that can be spent of token\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermit(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend a given token from `msg.sender`\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\n    /// @param token The address of the token spent\n    /// @param value The amount that can be spent of token\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitIfNecessary(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n    /// @param token The address of the token spent\n    /// @param nonce The current nonce of the owner\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitAllowed(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\n    /// @param token The address of the token spent\n    /// @param nonce The current nonce of the owner\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitAllowedIfNecessary(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary BytesLib {\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, 'slice_overflow');\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\n        require(_start + 3 >= _start, 'toUint24_overflow');\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\n        uint24 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x3), _start))\n        }\n\n        return tempUint;\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/CallbackValidation.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport './PoolAddress.sol';\n\n/// @notice Provides validation for callbacks from Uniswap V3 Pools\nlibrary CallbackValidation {\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The V3 pool contract address\n    function verifyCallback(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal view returns (IUniswapV3Pool pool) {\n        return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee));\n    }\n\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param poolKey The identifying key of the V3 pool\n    /// @return pool The V3 pool contract address\n    function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)\n        internal\n        view\n        returns (IUniswapV3Pool pool)\n    {\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\n        require(msg.sender == address(pool));\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/ChainId.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Function for getting the current chain ID\nlibrary ChainId {\n    /// @dev Gets the current chain ID\n    /// @return chainId The current chain ID\n    function get() internal view returns (uint256 chainId) {\n        assembly {\n            chainId := chainid()\n        }\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n    /// @notice Downcasts uint256 to uint128\n    /// @param x The uint258 to be downcasted\n    /// @return y The passed value, downcasted to uint128\n    function toUint128(uint256 x) private pure returns (uint128 y) {\n        require((y = uint128(x)) == x);\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount0 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n        unchecked {\n            return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n        }\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount1 The amount1 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        unchecked {\n            return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\n        }\n    }\n\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount of token0 being sent in\n    /// @param amount1 The amount of token1 being sent in\n    /// @return liquidity The maximum amount of liquidity received\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        }\n    }\n\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0) {\n        unchecked {\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n            return\n                FullMath.mulDiv(\n                    uint256(liquidity) << FixedPoint96.RESOLUTION,\n                    sqrtRatioBX96 - sqrtRatioAX96,\n                    sqrtRatioBX96\n                ) / sqrtRatioAX96;\n        }\n    }\n\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount1 The amount of token1\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        unchecked {\n            return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n        }\n    }\n\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n        } else {\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        }\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/Path.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport './BytesLib.sol';\n\n/// @title Functions for manipulating path data for multihop swaps\nlibrary Path {\n    using BytesLib for bytes;\n\n    /// @dev The length of the bytes encoded address\n    uint256 private constant ADDR_SIZE = 20;\n    /// @dev The length of the bytes encoded fee\n    uint256 private constant FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address and pool fee\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\n    /// @dev The offset of an encoded pool key\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\n\n    /// @notice Returns true iff the path contains two or more pools\n    /// @param path The encoded swap path\n    /// @return True if path contains two or more pools, otherwise false\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\n    }\n\n    /// @notice Returns the number of pools in the path\n    /// @param path The encoded swap path\n    /// @return The number of pools in the path\n    function numPools(bytes memory path) internal pure returns (uint256) {\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\n    }\n\n    /// @notice Decodes the first pool in path\n    /// @param path The bytes encoded swap path\n    /// @return tokenA The first token of the given pool\n    /// @return tokenB The second token of the given pool\n    /// @return fee The fee level of the pool\n    function decodeFirstPool(bytes memory path)\n        internal\n        pure\n        returns (\n            address tokenA,\n            address tokenB,\n            uint24 fee\n        )\n    {\n        tokenA = path.toAddress(0);\n        fee = path.toUint24(ADDR_SIZE);\n        tokenB = path.toAddress(NEXT_OFFSET);\n    }\n\n    /// @notice Gets the segment corresponding to the first pool in the path\n    /// @param path The bytes encoded swap path\n    /// @return The segment containing all data necessary to target the first pool in the path\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(0, POP_OFFSET);\n    }\n\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\n    /// @param path The swap path\n    /// @return The remaining token + fee elements in the path\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex'ff',\n                            factory,\n                            keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                            POOL_INIT_CODE_HASH\n                        )\n                    )\n                )\n            )\n        );\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/PositionKey.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nlibrary PositionKey {\n    /// @dev Returns the key of the position in the core library\n    function compute(\n        address owner,\n        int24 tickLower,\n        int24 tickUpper\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(owner, tickLower, tickUpper));\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/ERC4626/ERC4626Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport { ERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\n\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\n\nimport { IERC4626 } from '../interfaces/IERC4626.sol';\n\n/// @notice Minimal ERC4626 tokenized Vault implementation.\n/// @author Copied and modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\nabstract contract ERC4626Upgradeable is IERC4626, ERC20Upgradeable {\n    using SafeERC20 for IERC20Metadata;\n    using FixedPointMathLib for uint256;\n\n    /*//////////////////////////////////////////////////////////////\n                               STATE\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    address public asset;\n\n    // these gaps are added to allow adding new variables without shifting down inheritance chain\n    uint256[50] private __gaps;\n\n    /* solhint-disable func-name-mixedcase */\n    function __ERC4626Upgradeable_init(address _asset, string memory _name, string memory _symbol) internal {\n        __ERC20_init(_name, _symbol);\n        asset = _asset;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\n        // Check for rounding error since we round down in previewDeposit.\n        require((shares = previewDeposit(assets)) != 0, 'ZERO_SHARES');\n\n        // Need to transfer before minting or ERC777s could reenter.\n        IERC20Metadata(asset).safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares, receiver);\n    }\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\n\n        // Need to transfer before minting or ERC777s could reenter.\n        IERC20Metadata(asset).safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares, receiver);\n    }\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256 shares) {\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\n\n        if (msg.sender != owner) {\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\n        }\n\n        beforeWithdraw(assets, shares, receiver);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        IERC20Metadata(asset).safeTransfer(receiver, assets);\n    }\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256 assets) {\n        if (msg.sender != owner) {\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\n        }\n\n        // Check for rounding error since we round down in previewRedeem.\n        require((assets = previewRedeem(shares)) != 0, 'ZERO_ASSETS');\n\n        beforeWithdraw(assets, shares, receiver);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        IERC20Metadata(asset).safeTransfer(receiver, assets);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() public view virtual returns (uint256);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\n    }\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\n    }\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return convertToShares(assets);\n    }\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\n    }\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\n    }\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return convertToAssets(shares);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return convertToAssets(balanceOf(owner));\n    }\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          INTERNAL HOOKS LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /* solhint-disable no-empty-blocks */\n    function beforeWithdraw(uint256 assets, uint256 shares, address receiver) internal virtual {}\n\n    /* solhint-disable no-empty-blocks */\n    function afterDeposit(uint256 assets, uint256 shares, address receiver) internal virtual {}\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@ragetrade/core/contracts/utils/TimelockControllerWithMinDelayOverride.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@ragetrade/core/contracts/utils/TimelockControllerWithMinDelayOverride.sol';\n"
    },
    "contracts/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n    function latestRoundData()\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/interfaces/balancer/IBalancerVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IBalancerVault {\n    event FlashLoan(address indexed recipient, address indexed token, uint256 amount, uint256 feeAmount);\n\n    /**\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\n     *\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n     * for each token contract. `tokens` must be sorted in ascending order.\n     *\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n     * `receiveFlashLoan` call.\n     *\n     * Emits `FlashLoan` events.\n     */\n    function flashLoan(\n        address recipient,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory userData\n    ) external;\n}\n"
    },
    "contracts/interfaces/balancer/IFlashLoanRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IFlashLoanRecipient {\n    /**\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n     *\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n     * Vault, or else the entire flash loan will revert.\n     *\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\n     */\n    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external;\n}\n"
    },
    "contracts/interfaces/gmx/IGlpManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IGlpManager {\n    function gov() external view returns (address);\n\n    function cooldownDuration() external returns (uint256);\n\n    function lastAddedAt(address _account) external returns (uint256);\n\n    function setCooldownDuration(uint256 _cooldownDuration) external;\n\n    function addLiquidity(\n        address _token,\n        uint256 _amount,\n        uint256 _minUsdg,\n        uint256 _minGlp\n    ) external returns (uint256);\n\n    function addLiquidityForAccount(\n        address _fundingAccount,\n        address _account,\n        address _token,\n        uint256 _amount,\n        uint256 _minUsdg,\n        uint256 _minGlp\n    ) external returns (uint256);\n\n    function removeLiquidity(\n        address _tokenOut,\n        uint256 _glpAmount,\n        uint256 _minOut,\n        address _receiver\n    ) external returns (uint256);\n\n    function removeLiquidityForAccount(\n        address _account,\n        address _tokenOut,\n        uint256 _glpAmount,\n        uint256 _minOut,\n        address _receiver\n    ) external returns (uint256);\n\n    function getAums() external view returns (uint256[] memory);\n\n    function vault() external view returns (address);\n\n    function getAumInUsdg(bool maximise) external view returns (uint256);\n\n    function getAum(bool maximise) external view returns (uint256);\n\n    function getGlobalShortAveragePrice(address token) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/gmx/IGlpStakingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC4626 } from '../IERC4626.sol';\n\ninterface IGlpStakingManager is IERC4626 {\n    function depositToken(address token, uint256 amount) external returns (uint256 shares);\n\n    function harvestFees() external;\n}\n"
    },
    "contracts/interfaces/gmx/IGMXBatchingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC4626 } from '../IERC4626.sol';\n\npragma solidity ^0.8.0;\n\ninterface IGMXBatchingManager {\n    error InvalidVault(address vault);\n    error InvalidInput(uint256 errorCode);\n    error InsufficientShares(uint256 balance);\n    error InvalidSetDepositPaused(bool currentValue);\n\n    error ZeroBalance();\n\n    error VaultAlreadyAdded();\n    error VaultsLimitExceeded();\n\n    error CallerNotKeeper();\n    error CallerNotStakingManager();\n\n    event DepositToken(\n        uint256 indexed round,\n        address indexed token,\n        address indexed receiver,\n        uint256 amount,\n        uint256 glpStaked\n    );\n\n    event VaultAdded(address vault);\n    event VaultDeposit(uint256 vaultGlpAmount);\n\n    event KeeperUpdated(address newKeeper);\n\n    event SharesClaimed(address indexed from, address indexed receiver, uint256 claimAmount);\n    event BatchDeposit(uint256 indexed round, uint256 userGlpAmount, uint256 userShareAmount);\n\n    struct UserDeposit {\n        uint256 round;\n        uint128 glpBalance;\n        uint128 unclaimedShares;\n    }\n    struct RoundDeposit {\n        uint128 totalGlp;\n        uint128 totalShares;\n    }\n\n    function depositToken(address token, uint256 amount, uint256 minUSDG) external returns (uint256 glpStaked);\n\n    function depositToken(\n        IERC4626 gmxVault,\n        address token,\n        uint256 amount,\n        uint256 minUSDG,\n        address receiver\n    ) external returns (uint256 glpStaked);\n\n    function executeBatchDeposit() external;\n\n    function stakingManagerGlpBalance() external view returns (uint256 balance);\n\n    function glpBalanceAllVaults(address account) external view returns (uint256 balance);\n\n    function glpBalance(IERC4626 gmxVault, address account) external view returns (uint256 balance);\n\n    function unclaimedShares(IERC4626 gmxVault, address account) external view returns (uint256 shares);\n\n    function claim(IERC4626 gmxVault, address receiver, uint256 amount) external;\n\n    function currentRound(IERC4626 gmxVault) external view returns (uint256);\n\n    function roundDeposits(IERC4626 vault, uint256 round) external view returns (RoundDeposit memory);\n}\n"
    },
    "contracts/interfaces/gmx/IRewardRouterV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IRewardRouterV2 {\n    event StakeGmx(address account, address token, uint256 amount);\n    event UnstakeGmx(address account, address token, uint256 amount);\n\n    event StakeGlp(address account, uint256 amount);\n    event UnstakeGlp(address account, uint256 amount);\n\n    function stakedGmxTracker() external view returns (address);\n\n    function gmx() external view returns (address);\n\n    function esGmx() external view returns (address);\n\n    function glpVester() external view returns (address);\n\n    function glpManager() external view returns (address);\n\n    function batchStakeGmxForAccount(address[] memory _accounts, uint256[] memory _amounts) external;\n\n    function stakeGmxForAccount(address _account, uint256 _amount) external;\n\n    function stakeGmx(uint256 _amount) external;\n\n    function stakeEsGmx(uint256 _amount) external;\n\n    function unstakeGmx(uint256 _amount) external;\n\n    function unstakeEsGmx(uint256 _amount) external;\n\n    function mintAndStakeGlp(\n        address _token,\n        uint256 _amount,\n        uint256 _minUsdg,\n        uint256 _minGlp\n    ) external returns (uint256);\n\n    function mintAndStakeGlpETH(uint256 _minUsdg, uint256 _minGlp) external payable returns (uint256);\n\n    function unstakeAndRedeemGlp(\n        address _tokenOut,\n        uint256 _glpAmount,\n        uint256 _minOut,\n        address _receiver\n    ) external returns (uint256);\n\n    function unstakeAndRedeemGlpETH(\n        uint256 _glpAmount,\n        uint256 _minOut,\n        address payable _receiver\n    ) external returns (uint256);\n\n    function claim() external;\n\n    function claimEsGmx() external;\n\n    function claimFees() external;\n\n    function compound() external;\n\n    function compoundForAccount(address _account) external;\n\n    function handleRewards(\n        bool shouldClaimGmx,\n        bool shouldStakeGmx,\n        bool shouldClaimEsGmx,\n        bool shouldStakeEsGmx,\n        bool shouldStakeMultiplierPoints,\n        bool shouldClaimWeth,\n        bool shouldConvertWethToEth\n    ) external;\n\n    function batchCompoundForAccounts(address[] memory _accounts) external;\n\n    function signalTransfer(address _receiver) external;\n\n    function acceptTransfer(address _sender) external;\n}\n"
    },
    "contracts/interfaces/gmx/IRewardTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IRewardTracker {\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\n\n    function stakedAmounts(address _account) external view returns (uint256);\n\n    function updateRewards() external;\n\n    function stake(address _depositToken, uint256 _amount) external;\n\n    function stakeForAccount(\n        address _fundingAccount,\n        address _account,\n        address _depositToken,\n        uint256 _amount\n    ) external;\n\n    function unstake(address _depositToken, uint256 _amount) external;\n\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\n\n    function tokensPerInterval() external view returns (uint256);\n\n    function claim(address _receiver) external returns (uint256);\n\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\n\n    function claimable(address _account) external view returns (uint256);\n\n    function averageStakedAmounts(address _account) external view returns (uint256);\n\n    function cumulativeRewards(address _account) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/gmx/ISglpExtended.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/interfaces/IERC20.sol';\n\ninterface ISglpExtended is IERC20 {\n    function glp() external view returns (address);\n\n    function glpManager() external view returns (address);\n\n    function feeGlpTracker() external view returns (address);\n\n    function stakedGlpTracker() external view returns (address);\n}\n"
    },
    "contracts/interfaces/gmx/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IVault {\n    function isInitialized() external view returns (bool);\n\n    function isSwapEnabled() external view returns (bool);\n\n    function isLeverageEnabled() external view returns (bool);\n\n    function setError(uint256 _errorCode, string calldata _error) external;\n\n    function router() external view returns (address);\n\n    function usdg() external view returns (address);\n\n    function gov() external view returns (address);\n\n    function whitelistedTokenCount() external view returns (uint256);\n\n    function maxLeverage() external view returns (uint256);\n\n    function minProfitTime() external view returns (uint256);\n\n    function hasDynamicFees() external view returns (bool);\n\n    function fundingInterval() external view returns (uint256);\n\n    function totalTokenWeights() external view returns (uint256);\n\n    function inManagerMode() external view returns (bool);\n\n    function inPrivateLiquidationMode() external view returns (bool);\n\n    function maxGasPrice() external view returns (uint256);\n\n    function approvedRouters(address _account, address _router) external view returns (bool);\n\n    function isLiquidator(address _account) external view returns (bool);\n\n    function isManager(address _account) external view returns (bool);\n\n    function minProfitBasisPoints(address _token) external view returns (uint256);\n\n    function tokenBalances(address _token) external view returns (uint256);\n\n    function lastFundingTimes(address _token) external view returns (uint256);\n\n    function setInManagerMode(bool _inManagerMode) external;\n\n    function setManager(address _manager, bool _isManager) external;\n\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\n\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\n\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\n\n    function setFees(\n        uint256 _taxBasisPoints,\n        uint256 _stableTaxBasisPoints,\n        uint256 _mintBurnFeeBasisPoints,\n        uint256 _swapFeeBasisPoints,\n        uint256 _stableSwapFeeBasisPoints,\n        uint256 _marginFeeBasisPoints,\n        uint256 _liquidationFeeUsd,\n        uint256 _minProfitTime,\n        bool _hasDynamicFees\n    ) external;\n\n    function setTokenConfig(\n        address _token,\n        uint256 _tokenDecimals,\n        uint256 _redemptionBps,\n        uint256 _minProfitBps,\n        uint256 _maxUsdgAmount,\n        bool _isStable,\n        bool _isShortable\n    ) external;\n\n    function setPriceFeed(address _priceFeed) external;\n\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\n\n    function directPoolDeposit(address _token) external;\n\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\n\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\n\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\n\n    function increasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _sizeDelta,\n        bool _isLong\n    ) external;\n\n    function decreasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address _receiver\n    ) external returns (uint256);\n\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\n\n    function priceFeed() external view returns (address);\n\n    function fundingRateFactor() external view returns (uint256);\n\n    function stableFundingRateFactor() external view returns (uint256);\n\n    function cumulativeFundingRates(address _token) external view returns (uint256);\n\n    function getNextFundingRate(address _token) external view returns (uint256);\n\n    function getFeeBasisPoints(\n        address _token,\n        uint256 _usdgDelta,\n        uint256 _feeBasisPoints,\n        uint256 _taxBasisPoints,\n        bool _increment\n    ) external view returns (uint256);\n\n    function liquidationFeeUsd() external view returns (uint256);\n\n    function taxBasisPoints() external view returns (uint256);\n\n    function stableTaxBasisPoints() external view returns (uint256);\n\n    function mintBurnFeeBasisPoints() external view returns (uint256);\n\n    function swapFeeBasisPoints() external view returns (uint256);\n\n    function stableSwapFeeBasisPoints() external view returns (uint256);\n\n    function marginFeeBasisPoints() external view returns (uint256);\n\n    function allWhitelistedTokensLength() external view returns (uint256);\n\n    function allWhitelistedTokens(uint256) external view returns (address);\n\n    function whitelistedTokens(address _token) external view returns (bool);\n\n    function stableTokens(address _token) external view returns (bool);\n\n    function shortableTokens(address _token) external view returns (bool);\n\n    function feeReserves(address _token) external view returns (uint256);\n\n    function globalShortSizes(address _token) external view returns (uint256);\n\n    function globalShortAveragePrices(address _token) external view returns (uint256);\n\n    function tokenDecimals(address _token) external view returns (uint256);\n\n    function tokenWeights(address _token) external view returns (uint256);\n\n    function guaranteedUsd(address _token) external view returns (uint256);\n\n    function poolAmounts(address _token) external view returns (uint256);\n\n    function bufferAmounts(address _token) external view returns (uint256);\n\n    function reservedAmounts(address _token) external view returns (uint256);\n\n    function usdgAmounts(address _token) external view returns (uint256);\n\n    function maxUsdgAmounts(address _token) external view returns (uint256);\n\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\n\n    function getMaxPrice(address _token) external view returns (uint256);\n\n    function getMinPrice(address _token) external view returns (uint256);\n\n    function getDelta(\n        address _indexToken,\n        uint256 _size,\n        uint256 _averagePrice,\n        bool _isLong,\n        uint256 _lastIncreasedTime\n    ) external view returns (bool, uint256);\n\n    function getPosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong\n    ) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\n}\n"
    },
    "contracts/interfaces/gmx/IVester.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IVester {\n    function rewardTracker() external view returns (address);\n\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\n\n    function claimable(address _account) external view returns (uint256);\n\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\n\n    function claimedAmounts(address _account) external view returns (uint256);\n\n    function pairAmounts(address _account) external view returns (uint256);\n\n    function getVestedAmount(address _account) external view returns (uint256);\n\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\n\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\n\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\n\n    function bonusRewards(address _account) external view returns (uint256);\n\n    function transferStakeValues(address _sender, address _receiver) external;\n\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\n\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\n\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\n\n    function setBonusRewards(address _account, uint256 _amount) external;\n\n    function getMaxVestableAmount(address _account) external view returns (uint256);\n\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\n\n    function deposit(uint256 _amount) external;\n\n    function withdraw() external;\n\n    function claim() external returns (uint256);\n\n    function balances(address account) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IBatchingManagerBypass.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IBatchingManagerBypass {\n    function deposit(uint256 glpAmount, address receiver) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IBorrower.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IBorrower {\n    function harvestFees() external;\n\n    function getUsdcBorrowed() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IDebtToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IVariableDebtToken } from '@aave/core-v3/contracts/interfaces/IVariableDebtToken.sol';\n\ninterface IDebtToken is IVariableDebtToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address user) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IDnGmxBatchingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC4626 } from './IERC4626.sol';\n\npragma solidity ^0.8.0;\n\ninterface IDnGmxBatchingManager {\n    error NoUsdcBalance();\n\n    error CallerNotVault();\n    error CallerNotKeeper();\n\n    error InvalidInput(uint256 errorCode);\n    error InsufficientShares(uint256 balance);\n\n    error DepositCapBreached();\n\n    event DepositToken(\n        uint256 indexed round,\n        address indexed token,\n        address indexed receiver,\n        uint256 amount,\n        uint256 glpStaked\n    );\n\n    event ParamsV1Updated(address indexed rewardsHarvestingRouter, address weth);\n    event KeeperUpdated(address newKeeper);\n    event ThresholdsUpdated(uint256 newSlippageThresholdGmx, uint256 minUsdcConversionAmount);\n\n    event BatchStake(uint256 indexed round, uint256 userUsdcAmount, uint256 userGlpAmount);\n    event SharesClaimed(address indexed from, address indexed receiver, uint256 claimAmount);\n    event BatchDeposit(uint256 indexed round, uint256 userUsdcAmount, uint256 userGlpAmount, uint256 userShareAmount);\n\n    event ClaimedAndRedeemed(address indexed claimer, address indexed receiver, uint256 shares, uint256 assetsReceived);\n    event DepositCapUpdated(uint256 newDepositCap);\n    event PartialBatchDeposit(uint256 indexed round, uint256 partialGlpAmount, uint256 partialShareAmount);\n\n    struct UserDeposit {\n        uint256 round;\n        uint128 usdcBalance;\n        uint128 unclaimedShares;\n    }\n    struct RoundDeposit {\n        uint128 totalUsdc;\n        uint128 totalShares;\n    }\n\n    function executeBatch(uint128 usdcAmountToConvert) external;\n\n    function currentRound() external view returns (uint256);\n\n    function claim(address receiver, uint256 amount) external;\n\n    function usdcBalance(address account) external view returns (uint256 balance);\n\n    function dnGmxJuniorVaultGlpBalance() external view returns (uint256 balance);\n\n    function unclaimedShares(address account) external view returns (uint256 shares);\n\n    function roundDeposits(uint256 round) external view returns (RoundDeposit memory);\n\n    function depositUsdc(uint256 amount, address receiver) external;\n}\n"
    },
    "contracts/interfaces/IDnGmxBatchingManagerGlp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC4626 } from './IERC4626.sol';\n\npragma solidity ^0.8.0;\n\ninterface IDnGmxBatchingManagerGlp {\n    error NoAssetBalance();\n\n    error CallerNotVault();\n    error CallerNotKeeper();\n\n    error InvalidInput(uint256 errorCode);\n    error InsufficientShares(uint256 balance);\n\n    error DepositCapBreached();\n\n    event DepositToken(\n        uint256 indexed round,\n        address indexed token,\n        address indexed receiver,\n        uint256 amount,\n        uint256 glpStaked\n    );\n\n    event KeeperUpdated(address newKeeper);\n    event ThresholdsUpdated(uint256 minGlpDepositThreshold);\n\n    event SharesClaimed(address indexed from, address indexed receiver, uint256 claimAmount);\n    event BatchDeposit(uint256 indexed round, uint256 totalAssets, uint256 userGlpAmount, uint256 userShareAmount);\n\n    event ClaimedAndRedeemed(address indexed claimer, address indexed receiver, uint256 shares, uint256 assetsReceived);\n    event DepositCapUpdated(uint256 newDepositCap);\n    event PartialBatchDeposit(uint256 indexed round, uint256 partialGlpAmount, uint256 partialShareAmount);\n\n    struct UserDeposit {\n        uint256 round;\n        uint128 assetBalance;\n        uint128 unclaimedShares;\n    }\n    struct RoundDeposit {\n        uint128 totalAssets;\n        uint128 totalShares;\n    }\n\n    function executeBatch(uint128 sGlpToDeposit) external;\n\n    function currentRound() external view returns (uint256);\n\n    function claim(address receiver, uint256 amount) external;\n\n    function assetBalance(address account) external view returns (uint256 balance);\n\n    function unclaimedShares(address account) external view returns (uint256 shares);\n\n    function roundDeposits(uint256 round) external view returns (RoundDeposit memory);\n\n    function deposit(uint256 amount, address receiver) external;\n}\n"
    },
    "contracts/interfaces/IDnGmxJuniorVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IRewardsController } from '@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol';\nimport { IPoolAddressesProvider } from '@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol';\nimport { IPool } from '@aave/core-v3/contracts/interfaces/IPool.sol';\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\nimport { IERC4626 } from './IERC4626.sol';\nimport { IBorrower } from './IBorrower.sol';\nimport { IBalancerVault } from './balancer/IBalancerVault.sol';\nimport { IDnGmxTraderHedgeStrategy } from './IDnGmxTraderHedgeStrategy.sol';\n\ninterface IDnGmxJuniorVault is IERC4626, IBorrower {\n    error InvalidWithdrawFeeBps();\n    error InvalidSlippageThresholdSwapBtc();\n    error InvalidSlippageThresholdSwapEth();\n    error InvalidSlippageThresholdGmx();\n    error InvalidRebalanceTimeThreshold();\n    error InvalidRebalanceDeltaThresholdBps();\n    error InvalidRebalanceHfThresholdBps();\n    error InvalidTargetHealthFactor();\n\n    error InvalidRebalance();\n    error DepositCapExceeded();\n    error OnlyKeeperAllowed(address msgSender, address authorisedKeeperAddress);\n    error OnlyTraderHedgeStrategyAllowed(address msgSender, address authorisedKeeperAddress);\n    error NotDnGmxSeniorVault();\n    error NotBalancerVault();\n\n    error ArraysLengthMismatch();\n    error FlashloanNotInitiated();\n    error TooMuchSlippage(uint netSlippage, uint assets);\n\n    error InvalidFeeRecipient();\n    error InvalidFeeBps();\n\n    error InvalidTraderOIHedges(int128 btcTraderOIHedge, int128 ethTraderOIHedge);\n\n    event Rebalanced();\n    event AllowancesGranted();\n\n    event DnGmxSeniorVaultUpdated(address _dnGmxSeniorVault);\n    event KeeperUpdated(address _newKeeper);\n    event FeeParamsUpdated(uint256 feeBps, address _newFeeRecipient);\n    event WithdrawFeeUpdated(uint256 _withdrawFeeBps);\n    event FeesWithdrawn(uint256 feeAmount);\n\n    event DepositCapUpdated(uint256 _newDepositCap);\n\n    event AdminParamsUpdated(\n        address newKeeper,\n        address dnGmxSeniorVault,\n        uint256 newDepositCap,\n        address batchingManager,\n        uint16 withdrawFeeBps\n    );\n    event ThresholdsUpdated(\n        uint16 slippageThresholdSwapBtcBps,\n        uint16 slippageThresholdSwapEthBps,\n        uint16 slippageThresholdGmxBps,\n        uint128 usdcConversionThreshold,\n        uint128 wethConversionThreshold,\n        uint128 hedgeUsdcAmountThreshold,\n        uint128 partialBtcHedgeUsdcAmountThreshold,\n        uint128 partialEthHedgeUsdcAmountThreshold\n    );\n\n    event ParamsV1Updated(\n        uint128 rebalanceProfitUsdcAmountThreshold,\n        IDnGmxTraderHedgeStrategy dnGmxTraderHedgeStrategy\n    );\n    event RebalanceParamsUpdated(\n        uint32 rebalanceTimeThreshold,\n        uint16 rebalanceDeltaThresholdBps,\n        uint16 rebalanceHfThresholdBps\n    );\n\n    event HedgeParamsUpdated(\n        IBalancerVault vault,\n        ISwapRouter swapRouter,\n        uint256 targetHealthFactor,\n        IRewardsController aaveRewardsController,\n        IPool pool,\n        IPriceOracle oracle\n    );\n\n    event EsGmxVested(uint256 amount);\n\n    event EsGmxStaked(uint256 amount);\n\n    event GmxClaimed(uint256 amount);\n\n    event TraderOIHedgesUpdated(int256 btcTraderOIHedge, int256 ethTraderOIHedge);\n\n    function harvestFees() external;\n\n    function depositCap() external view returns (uint256);\n\n    function getPriceX128() external view returns (uint256);\n\n    function getVaultMarketValue() external view returns (int256);\n\n    function getMarketValue(uint256 assetAmount) external view returns (uint256 marketValue);\n}\n"
    },
    "contracts/interfaces/IDnGmxSeniorVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IBorrower } from './IBorrower.sol';\nimport { IERC4626 } from './IERC4626.sol';\n\ninterface IDnGmxSeniorVault is IERC4626 {\n    error InvalidMaxUtilizationBps();\n\n    error CallerNotBorrower();\n\n    error InvalidCapUpdate();\n    error InvalidBorrowAmount();\n    error InvalidBorrowerAddress();\n\n    error DepositCapExceeded();\n    error MaxUtilizationBreached();\n\n    event AllowancesGranted();\n    event DepositCapUpdated(uint256 _newDepositCap);\n    event BorrowCapUpdated(address vault, uint256 newCap);\n\n    event LeveragePoolUpdated(IBorrower leveragePool);\n    event DnGmxJuniorVaultUpdated(IBorrower dnGmxJuniorVault);\n    event MaxUtilizationBpsUpdated(uint256 maxUtilizationBps);\n\n    event FeeStrategyUpdated(\n        uint128 optimalUtilizationRate,\n        uint128 baseVariableBorrowRate,\n        uint128 variableRateSlope1,\n        uint128 variableRateSlope2\n    );\n\n    // eventType - 0 = start of txn | 1 = end of txn\n    event VaultState(uint256 indexed eventType, uint256 juniorVaultAusdc, uint256 seniorVaultAusdc);\n\n    function borrow(uint256 amount) external;\n\n    function repay(uint256 amount) external;\n\n    function depositCap() external view returns (uint256);\n\n    function getPriceX128() external view returns (uint256);\n\n    function getEthRewardsSplitRate() external returns (uint256);\n\n    function getVaultMarketValue() external view returns (uint256);\n\n    function availableBorrow(address borrower) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IDnGmxTraderHedgeStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\npragma solidity ^0.8.9;\n\ninterface IDnGmxTraderHedgeStrategy {\n    function overrideTraderOIHedges(int128 btcTraderOIHedge, int128 ethTraderOIHedge) external;\n\n    function setTraderOIHedgeBps(uint16 _traderOIHedgeBps) external;\n\n    function setTraderOIHedges() external;\n\n    function btcTraderOIHedge() external view returns (int128);\n\n    function ethTraderOIHedge() external view returns (int128);\n}\n"
    },
    "contracts/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\n\ninterface IERC4626 is IERC20Upgradeable {\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
    },
    "contracts/interfaces/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\npragma solidity ^0.8.9;\n\ninterface IWETH9 is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 _amount) external;\n}\n"
    },
    "contracts/libraries/DnGmxJuniorVaultManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IVault } from '../interfaces/gmx/IVault.sol';\nimport { IGlpManager } from '../interfaces/gmx/IGlpManager.sol';\nimport { IRewardTracker } from '../interfaces/gmx/IRewardTracker.sol';\nimport { IRewardRouterV2 } from '../interfaces/gmx/IRewardRouterV2.sol';\n\nimport { IDebtToken } from '../interfaces/IDebtToken.sol';\nimport { IPool } from '@aave/core-v3/contracts/interfaces/IPool.sol';\nimport { IAToken } from '@aave/core-v3/contracts/interfaces/IAToken.sol';\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\nimport { DataTypes } from '@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol';\nimport { IPoolAddressesProvider } from '@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol';\nimport { IRewardsController } from '@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol';\nimport { ReserveConfiguration } from '@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol';\n\nimport { IBalancerVault } from '../interfaces/balancer/IBalancerVault.sol';\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\n\nimport { IDnGmxJuniorVault } from '../interfaces/IDnGmxJuniorVault.sol';\nimport { IDnGmxSeniorVault } from '../interfaces/IDnGmxSeniorVault.sol';\nimport { IDnGmxBatchingManager } from '../interfaces/IDnGmxBatchingManager.sol';\nimport { IDnGmxTraderHedgeStrategy } from '../interfaces/IDnGmxTraderHedgeStrategy.sol';\n\nimport { SafeCast } from '../libraries/SafeCast.sol';\nimport { FeeSplitStrategy } from '../libraries/FeeSplitStrategy.sol';\nimport { SignedFixedPointMathLib } from '../libraries/SignedFixedPointMathLib.sol';\nimport { QuoterLib } from '../libraries/QuoterLib.sol';\nimport { SwapPath } from '../libraries/SwapPath.sol';\n\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\n\nimport { Simulate } from '@uniswap/v3-core/contracts/libraries/Simulate.sol';\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\n\n/**\n * @title Helper library for junior vault\n * @dev junior vault delegates calls to this library for logic\n * @author RageTrade\n */\n\nlibrary DnGmxJuniorVaultManager {\n    event RewardsHarvested(\n        uint256 wethHarvested,\n        uint256 esGmxStaked,\n        uint256 juniorVaultWeth,\n        uint256 seniorVaultWeth,\n        uint256 juniorVaultGlp,\n        uint256 seniorVaultAUsdc\n    );\n\n    event ProtocolFeeAccrued(uint256 fees);\n\n    event GlpSwapped(uint256 glpQuantity, uint256 usdcQuantity, bool fromGlpToUsdc);\n\n    event TokenSwapped(address indexed fromToken, address indexed toToken, uint256 fromQuantity, uint256 toQuantity);\n\n    event VaultState(\n        uint256 indexed eventType,\n        uint256 btcBorrows,\n        uint256 ethBorrows,\n        uint256 btcPoolAmount,\n        uint256 ethPoolAmount,\n        int256 btcTraderOIHedge,\n        int256 ethTraderOIHedge,\n        uint256 glpPrice,\n        uint256 glpBalance,\n        uint256 totalAssets,\n        int256 dnUsdcDeposited,\n        uint256 unhedgedGlpInUsdc,\n        uint256 juniorVaultAusdc,\n        uint256 seniorVaultAusdc\n    );\n\n    using DnGmxJuniorVaultManager for State;\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\n\n    using FixedPointMathLib for uint256;\n    using SafeCast for uint256;\n    using SignedFixedPointMathLib for int256;\n\n    uint256 internal constant MAX_BPS = 10_000;\n\n    uint256 internal constant PRICE_PRECISION = 1e30;\n    uint256 internal constant VARIABLE_INTEREST_MODE = 2;\n\n    struct Tokens {\n        IERC20Metadata weth;\n        IERC20Metadata wbtc;\n        IERC20Metadata sGlp;\n        IERC20Metadata usdc;\n    }\n\n    // prettier-ignore\n    struct State {\n        // core protocol roles\n        address keeper;\n        address feeRecipient;\n\n        // accounting\n        // amount of usdc deposited by junior tranche into AAVE\n        int256 dnUsdcDeposited;\n        // amount of asset which is in usdc (due to borrow limits / availability issue some glp might remain unhedged)\n        uint256 unhedgedGlpInUsdc;\n        // health factor to be targetted on AAVE\n        uint256 targetHealthFactor;\n\n        // accumulators\n        // protocol fee taken from ETH rewards\n        uint256 protocolFee;\n        // protocol fee taken from esGMX rewards\n        uint256 protocolEsGmx;\n        // senior tranche part of eth rewards which is not converted to usdc\n        uint256 seniorVaultWethRewards;\n\n        // locks\n        // true if a flashloan has been initiated by the vault\n        bool hasFlashloaned;\n        // ensures that the rebalance can be run only after certain intervals\n        uint48 lastRebalanceTS;\n\n        // fees\n        // protocol fees charged on the eth and esGmx rewards\n        uint16 feeBps;\n        // fees on the withdrawn assets\n        uint16 withdrawFeeBps;\n        // fee tier for uniswap path\n        uint24 feeTierWethWbtcPool;\n\n        // thresholds\n        uint256 depositCap;\n\n        // slippage threshold on asset conversion into glp\n        uint16 slippageThresholdGmxBps; // bps\n        // slippage threshold on btc swap on uniswap\n        uint16 slippageThresholdSwapBtcBps; // bps\n        // slippage threshold on eth swap on uniswap\n        uint16 slippageThresholdSwapEthBps; // bps\n        // health factor treshold below which rebalance can be called\n        uint16 rebalanceHfThresholdBps; // bps\n        // time threshold beyond which on top of last rebalance, rebalance can be called\n        uint32 rebalanceTimeThreshold; // seconds between rebalance\n        // difference between current and optimal amounts beyond which rebalance can be called\n        uint16 rebalanceDeltaThresholdBps; // bps\n        // eth amount of weth rewards accrued beyond which they can be compounded\n        uint128 wethConversionThreshold; // eth amount\n\n        // usdc amount beyond which usdc can be converted to assets\n        uint128 usdcConversionThreshold; // usdc amount\n        // usdc value of token hedges below which hedges are not taken\n        uint128 hedgeUsdcAmountThreshold; // usdc amount\n\n        // usdc amount of btc hedge beyond which partial hedges are taken over multiple rebalances\n        uint128 partialBtcHedgeUsdcAmountThreshold; // usdc amount\n        // usdc amount of eth hedge beyond which partial hedges are taken over multiple rebalances\n        uint128 partialEthHedgeUsdcAmountThreshold; // usdc amount\n\n        // token addrs\n        IERC20 fsGlp;\n        IERC20Metadata glp;\n        IERC20Metadata usdc;\n        IERC20Metadata weth;\n        IERC20Metadata wbtc;\n\n        // aave protocol addrs\n        // lending pool for liqudity market\n        IPool pool;\n        // aave interest bearing usdc\n        IAToken aUsdc;\n        // variable-rate debt accruing btc\n        IDebtToken vWbtc;\n        // variable-rate debt accruing eth\n        IDebtToken vWeth;\n        // cannocial oracle used by aave\n        IPriceOracle oracle;\n        // rewards controller to claim any emissions (for future use)\n        IRewardsController aaveRewardsController;\n        // immutable address provider to obtain various addresses\n        IPoolAddressesProvider poolAddressProvider;\n\n        // gmx protocol addrs\n        // core gmx vault\n        IVault gmxVault;\n        // staked gmx\n        IRewardTracker sGmx;\n        // glp manager (for giving assets allowance and fetching AUM)\n        IGlpManager glpManager;\n        // old rewardRouter for all actions except minting and burning glp\n        IRewardRouterV2 rewardRouter;\n        // new rewardRouter to be used for mintAndStakeGlp and unstakeAndRedeem\n        // ref: https://medium.com/@gmx.io/gmx-deployment-updates-nov-2022-16572314874d\n        IRewardRouterV2 mintBurnRewardRouter;\n\n        // other external protocols\n        // uniswap swap router for token swaps\n        ISwapRouter swapRouter;\n        // balancer vault for flashloans\n        IBalancerVault balancerVault;\n\n        // core protocol addrs\n        // senior tranche address\n        IDnGmxSeniorVault dnGmxSeniorVault;\n        // batching manager address !!! Deprecated !!!\n        IDnGmxBatchingManager batchingManager;\n        // switch to select route\n        bool useDirectConversion;\n\n        // !!! STORAGE EXTENSIONS !!! (reduced gaps by no. of slots added here)\n        uint128 btcPoolAmount;\n        uint128 ethPoolAmount;\n\n        int128 btcTraderOIHedge;\n        int128 ethTraderOIHedge;\n\n        IDnGmxTraderHedgeStrategy dnGmxTraderHedgeStrategy;\n\n        uint128 rebalanceProfitUsdcAmountThreshold;\n\n        // gaps for extending struct (if required during upgrade)\n        uint256[46] __gaps;\n    }\n\n    /// @notice stakes the rewards from the staked Glp and claims WETH to buy glp\n    /// @notice also update protocolEsGmx fees which can be vested and claimed\n    /// @notice divides the fees between senior and junior tranches based on senior tranche util\n    /// @notice for junior tranche weth is deposited to batching manager which handles conversion to sGLP\n    /// @notice for senior tranche weth is converted into usdc and deposited on AAVE which increases the borrowed amount\n    function harvestFees(State storage state) public {\n        uint256 sGmxHarvested;\n        {\n            address esGmx = state.rewardRouter.esGmx();\n            IRewardTracker sGmx = IRewardTracker(state.rewardRouter.stakedGmxTracker());\n\n            // existing staked gmx balance\n            uint256 sGmxPrevBalance = sGmx.depositBalances(address(this), esGmx);\n\n            // handles claiming and staking of esGMX, staking of multiplier points and claim of WETH rewards on GMX\n            state.rewardRouter.handleRewards({\n                shouldClaimGmx: false,\n                shouldStakeGmx: false,\n                shouldClaimEsGmx: true,\n                shouldStakeEsGmx: true,\n                shouldStakeMultiplierPoints: true,\n                shouldClaimWeth: true,\n                shouldConvertWethToEth: false\n            });\n\n            // harvested staked gmx\n            sGmxHarvested = sGmx.depositBalances(address(this), esGmx) - sGmxPrevBalance;\n        }\n        // protocol esGMX fees\n        state.protocolEsGmx += sGmxHarvested.mulDivDown(state.feeBps, MAX_BPS);\n\n        // total weth harvested which is not compounded\n        // its possible that this is accumulated value over multiple rebalance if in all of those it was below threshold\n        uint256 wethHarvested = state.weth.balanceOf(address(this)) - state.protocolFee - state.seniorVaultWethRewards;\n\n        if (wethHarvested > state.wethConversionThreshold) {\n            // weth harvested > conversion threshold\n            uint256 protocolFeeHarvested = (wethHarvested * state.feeBps) / MAX_BPS;\n            // protocol fee incremented\n            state.protocolFee += protocolFeeHarvested;\n            emit ProtocolFeeAccrued(protocolFeeHarvested);\n\n            // protocol fee to be kept in weth\n            // remaining amount needs to be compounded\n            uint256 wethToCompound = wethHarvested - protocolFeeHarvested;\n\n            // share of the wethToCompound that belongs to senior tranche\n            uint256 dnGmxSeniorVaultWethShare = state.dnGmxSeniorVault.getEthRewardsSplitRate().mulDivDown(\n                wethToCompound,\n                FeeSplitStrategy.RATE_PRECISION\n            );\n            // share of the wethToCompound that belongs to junior tranche\n            uint256 dnGmxWethShare = wethToCompound - dnGmxSeniorVaultWethShare;\n\n            // total senior tranche weth which is not compounded\n            uint256 _seniorVaultWethRewards = state.seniorVaultWethRewards + dnGmxSeniorVaultWethShare;\n\n            uint256 glpReceived;\n            {\n                // converts junior tranche share of weth into glp using batching manager\n                // we need to use batching manager since there is a cooldown period on sGLP\n                // if deposited directly for next 15mins withdrawals would fail\n                uint256 price = state.gmxVault.getMinPrice(address(state.weth));\n\n                uint256 usdgAmount = dnGmxWethShare.mulDivDown(\n                    price * (MAX_BPS - state.slippageThresholdGmxBps),\n                    PRICE_PRECISION * MAX_BPS\n                );\n\n                // deposits weth into batching manager which handles the conversion into glp\n                // can be taken back through batch execution\n                glpReceived = _stakeGlp(state, address(state.weth), dnGmxWethShare, usdgAmount);\n            }\n\n            if (_seniorVaultWethRewards > state.wethConversionThreshold) {\n                // converts senior tranche share of weth into usdc and deposit into AAVE\n                // Deposit aave vault share to AAVE in usdc\n                uint256 minUsdcAmount = _getTokenPriceInUsdc(state, state.weth).mulDivDown(\n                    _seniorVaultWethRewards * (MAX_BPS - state.slippageThresholdSwapEthBps),\n                    MAX_BPS * PRICE_PRECISION\n                );\n                // swaps weth into usdc\n                (uint256 aaveUsdcAmount, ) = state._swapToken(\n                    address(state.weth),\n                    _seniorVaultWethRewards,\n                    minUsdcAmount\n                );\n\n                // supplies usdc into AAVE\n                state._executeSupply(address(state.usdc), aaveUsdcAmount);\n\n                // resets senior tranche rewards\n                state.seniorVaultWethRewards = 0;\n\n                emit RewardsHarvested(\n                    wethHarvested,\n                    sGmxHarvested,\n                    dnGmxWethShare,\n                    dnGmxSeniorVaultWethShare,\n                    glpReceived,\n                    aaveUsdcAmount\n                );\n            } else {\n                state.seniorVaultWethRewards = _seniorVaultWethRewards;\n                emit RewardsHarvested(\n                    wethHarvested,\n                    sGmxHarvested,\n                    dnGmxWethShare,\n                    dnGmxSeniorVaultWethShare,\n                    glpReceived,\n                    0\n                );\n            }\n        } else {\n            emit RewardsHarvested(wethHarvested, sGmxHarvested, 0, 0, 0, 0);\n        }\n    }\n\n    /* ##################################################################\n                            REBALANCE HELPERS\n    ################################################################## */\n\n    ///@notice rebalances pnl on AAVE against the sGLP assets\n    ///@param state set of all state variables of vault\n    ///@param borrowValue value of the borrowed assets(ETH + BTC) from AAVE in USDC\n    function rebalanceProfit(State storage state, uint256 borrowValue) external {\n        return _rebalanceProfit(state, borrowValue);\n    }\n\n    ///@notice rebalances pnl on AAVE against the sGLP assets\n    ///@dev converts assets into usdc and deposits to AAVE if profit on GMX and loss on AAVE\n    ///@dev withdraws usdc from aave and converts to GLP if loss on GMX and profits on AAVE\n    ///@param state set of all state variables of vault\n    ///@param borrowValue value of the borrowed assets(ETH + BTC) from AAVE in USDC\n    function _rebalanceProfit(State storage state, uint256 borrowValue) private {\n        int256 borrowVal = borrowValue.toInt256();\n\n        if (borrowVal > state.dnUsdcDeposited) {\n            uint256 diff = uint256(borrowVal - state.dnUsdcDeposited);\n            if (diff < state.rebalanceProfitUsdcAmountThreshold && !_isValidRebalanceHF(state)) return;\n            // If glp goes up - there is profit on GMX and loss on AAVE\n            // So convert some glp to usdc and deposit to AAVE\n            state.dnUsdcDeposited += _convertAssetToAUsdc(state, diff).toInt256();\n        } else if (borrowVal < state.dnUsdcDeposited) {\n            uint256 diff = uint256(state.dnUsdcDeposited - borrowVal);\n            if (diff < state.rebalanceProfitUsdcAmountThreshold) return;\n            // If glp goes down - there is profit on AAVE and loss on GMX\n            // So withdraw some aave usdc and convert to glp\n            _convertAUsdcToAsset(state, diff);\n            state.dnUsdcDeposited = borrowVal;\n        }\n    }\n\n    ///@notice rebalances the assets borrowed from AAVE to hedge ETH and BTC underlying the assets\n    ///@param state set of all state variables of vault\n    ///@param optimalBtcBorrow optimal btc amount to hedge sGLP btc underlying completely\n    ///@param currentBtcBorrow current btc amount borrowed from AAVE\n    ///@param optimalEthBorrow optimal eth amount to hedge sGLP btc underlying completely\n    ///@param currentEthBorrow current eth amount borrowed from AAVE\n    function rebalanceBorrow(\n        State storage state,\n        uint256 optimalBtcBorrow,\n        uint256 currentBtcBorrow,\n        uint256 optimalEthBorrow,\n        uint256 currentEthBorrow\n    ) external {\n        return _rebalanceBorrow(state, optimalBtcBorrow, currentBtcBorrow, optimalEthBorrow, currentEthBorrow);\n    }\n\n    ///@notice rebalances the assets borrowed from AAVE to hedge ETH and BTC underlying the assets\n    ///@param state set of all state variables of vault\n    ///@param optimalBtcBorrow optimal btc amount to hedge sGLP btc underlying completely\n    ///@param currentBtcBorrow current btc amount borrowed from AAVE\n    ///@param optimalEthBorrow optimal eth amount to hedge sGLP btc underlying completely\n    ///@param currentEthBorrow current eth amount borrowed from AAVE\n    function _rebalanceBorrow(\n        State storage state,\n        uint256 optimalBtcBorrow,\n        uint256 currentBtcBorrow,\n        uint256 optimalEthBorrow,\n        uint256 currentEthBorrow\n    ) private {\n        address[] memory assets;\n        uint256[] memory amounts;\n\n        // calculate the token/usdc amount to be flashloaned from balancer\n        (uint256 btcTokenAmount, uint256 btcUsdcAmount, bool repayDebtBtc) = _flashloanAmounts(\n            state,\n            address(state.wbtc),\n            optimalBtcBorrow,\n            currentBtcBorrow\n        );\n        (uint256 ethTokenAmount, uint256 ethUsdcAmount, bool repayDebtEth) = _flashloanAmounts(\n            state,\n            address(state.weth),\n            optimalEthBorrow,\n            currentEthBorrow\n        );\n\n        // no swap needs to happen if the amount to hedge < threshold\n        if (btcUsdcAmount < state.hedgeUsdcAmountThreshold) {\n            btcTokenAmount = 0;\n            btcUsdcAmount = 0;\n        }\n        if (ethUsdcAmount < state.hedgeUsdcAmountThreshold) {\n            ethTokenAmount = 0;\n            ethUsdcAmount = 0;\n        }\n\n        // get asset amount basis increase/decrease of token amounts\n        uint256 btcAssetAmount = repayDebtBtc ? btcUsdcAmount : btcTokenAmount;\n        uint256 ethAssetAmount = repayDebtEth ? ethUsdcAmount : ethTokenAmount;\n\n        // If both eth and btc swap amounts are not beyond the threshold then no flashloan needs to be executed | case 1\n        if (btcAssetAmount == 0 && ethAssetAmount == 0) return;\n\n        if (repayDebtBtc && repayDebtEth) {\n            // case where both the token assets are USDC\n            // only one entry required which is combined asset amount for both tokens\n            assets = new address[](1);\n            amounts = new uint256[](1);\n\n            assets[0] = address(state.usdc);\n            amounts[0] = (btcAssetAmount + ethAssetAmount);\n        } else if (btcAssetAmount == 0 || ethAssetAmount == 0) {\n            // Exactly one would be true since case-1 excluded (both false) | case-2\n            // One token amount = 0 and other token amount > 0\n            // only one entry required for the non-zero amount token\n            assets = new address[](1);\n            amounts = new uint256[](1);\n\n            if (btcAssetAmount != 0) {\n                assets[0] = (repayDebtBtc ? address(state.usdc) : address(state.wbtc));\n                amounts[0] = btcAssetAmount;\n            } else {\n                assets[0] = (repayDebtEth ? address(state.usdc) : address(state.weth));\n                amounts[0] = ethAssetAmount;\n            }\n        } else {\n            // Both are true | case-3\n            assets = new address[](2);\n            amounts = new uint256[](2);\n\n            assets[0] = repayDebtBtc ? address(state.usdc) : address(state.wbtc);\n\n            assets[1] = repayDebtEth ? address(state.usdc) : address(state.weth);\n\n            // ensure that assets and amount tuples are in sorted order of addresses\n            // (required for balancer flashloans)\n            if (assets[0] > assets[1]) {\n                // if the order is descending\n                // switch the order for assets tupe\n                // assign amounts in opposite order\n                address tempAsset = assets[0];\n                assets[0] = assets[1];\n                assets[1] = tempAsset;\n\n                amounts[0] = ethAssetAmount;\n\n                amounts[1] = btcAssetAmount;\n            } else {\n                // if the order is ascending\n                // assign amount in same order\n                amounts[0] = btcAssetAmount;\n\n                amounts[1] = ethAssetAmount;\n            }\n        }\n        // execute the flashloan\n        _executeFlashloan(\n            state,\n            assets,\n            amounts,\n            btcTokenAmount,\n            btcUsdcAmount,\n            ethTokenAmount,\n            ethUsdcAmount,\n            repayDebtBtc,\n            repayDebtEth\n        );\n    }\n\n    ///@notice returns the optimal borrow amounts based on a swap threshold\n    ///@dev if the swap amount is less than threshold then that is returned\n    ///@dev if the swap amount is greater than threshold then threshold amount is returned\n    ///@param state set of all state variables of vault\n    ///@param token ETH / BTC token\n    ///@param optimalTokenBorrow optimal btc amount to hedge sGLP btc underlying completely\n    ///@param currentTokenBorrow current btc amount borrowed from AAVE\n    ///@return optimalPartialTokenBorrow optimal token hedge if threshold is breached\n    ///@return isPartialTokenHedge true if partial hedge needs to be executed for token\n    function _getOptimalPartialBorrows(\n        State storage state,\n        IERC20Metadata token,\n        uint256 optimalTokenBorrow,\n        uint256 currentTokenBorrow\n    ) internal view returns (uint256 optimalPartialTokenBorrow, bool isPartialTokenHedge) {\n        // checks if token hedge needs to be increased or decreased\n        bool isOptimalHigher = optimalTokenBorrow > currentTokenBorrow;\n        // difference = amount of swap to be done for complete hedge\n        uint256 diff = isOptimalHigher\n            ? optimalTokenBorrow - currentTokenBorrow\n            : currentTokenBorrow - optimalTokenBorrow;\n\n        // get the correct threshold basis the token\n        uint256 threshold = address(token) == address(state.wbtc)\n            ? state.partialBtcHedgeUsdcAmountThreshold\n            : state.partialEthHedgeUsdcAmountThreshold;\n\n        // convert usdc threshold into token amount threshold\n        uint256 tokenThreshold = threshold.mulDivDown(PRICE_PRECISION, _getTokenPriceInUsdc(state, token));\n\n        if (diff > tokenThreshold) {\n            // amount to swap > threshold\n            // swap only the threshold amount in this rebalance (partial hedge)\n            optimalPartialTokenBorrow = isOptimalHigher\n                ? currentTokenBorrow + tokenThreshold\n                : currentTokenBorrow - tokenThreshold;\n            isPartialTokenHedge = true;\n        } else {\n            // amount to swap < threshold\n            // swap the full amount in this rebalance (complete hedge)\n            optimalPartialTokenBorrow = optimalTokenBorrow;\n        }\n    }\n\n    function _getOptimalBorrowsFinal(\n        State storage state,\n        uint256 currentBtcBorrow,\n        uint256 currentEthBorrow,\n        uint256 glpDeposited,\n        bool[2] memory conditions // (isPartialAllowed, useUpdatedPoolAmounts)\n    )\n        internal\n        view\n        returns (\n            uint256 optimalBtcBorrow,\n            uint256 optimalEthBorrow,\n            uint256 targetDnGmxSeniorVaultAmount,\n            uint256 optimalUncappedEthBorrow,\n            bool isPartialHedge\n        )\n    {\n        // optimal btc and eth borrows\n        // calculated basis the underlying token weights in glp\n\n        (optimalBtcBorrow, optimalEthBorrow) = _getOptimalBorrows({\n            state: state,\n            glpDeposited: glpDeposited,\n            withUpdatedPoolAmounts: conditions[1]\n        });\n\n        if (conditions[0] /*isPartialHedge*/) {\n            // if partial hedges are allowed (i.e. rebalance call and not deposit/withdraw)\n            // check if swap amounts>threshold then basis that do a partial hedge\n            bool isPartialBtcHedge;\n            bool isPartialEthHedge;\n            // get optimal borrows basis hedge thresholds\n            (optimalBtcBorrow, isPartialBtcHedge) = _getOptimalPartialBorrows(\n                state,\n                state.wbtc,\n                optimalBtcBorrow,\n                currentBtcBorrow\n            );\n            (optimalEthBorrow, isPartialEthHedge) = _getOptimalPartialBorrows(\n                state,\n                state.weth,\n                optimalEthBorrow,\n                currentEthBorrow\n            );\n            // if some token is partially hedged then set that this rebalance is partial\n            // lastRebalanceTime not updated in this case so a rebalance can be called again\n            isPartialHedge = isPartialBtcHedge || isPartialEthHedge;\n        }\n\n        // calculate usdc value of optimal borrows\n        uint256 optimalBorrowValue = _getBorrowValue(state, optimalBtcBorrow, optimalEthBorrow);\n\n        // get liquidation threshold of usdc on AAVE\n        uint256 usdcLiquidationThreshold = _getLiquidationThreshold(state, address(state.usdc));\n\n        // Settle net change in market value and deposit/withdraw collateral tokens\n        // Vault market value is just the collateral value since profit has been settled\n        // AAVE target health factor = (usdc supply value * usdc liquidation threshold)/borrow value\n        // whatever tokens we borrow from AAVE (ETH/BTC) we sell for usdc and deposit that usdc into AAVE\n        // assuming 0 slippage borrow value of tokens = usdc deposit value (this leads to very small variation in hf)\n        // usdc supply value = usdc borrowed from senior tranche + borrow value\n        // replacing usdc supply value formula above in AAVE target health factor formula\n        // we can derive usdc amount to borrow from senior tranche i.e. targetDnGmxSeniorVaultAmount\n        targetDnGmxSeniorVaultAmount = (state.targetHealthFactor - usdcLiquidationThreshold).mulDivDown(\n            optimalBorrowValue,\n            usdcLiquidationThreshold\n        );\n\n        // current usdc borrowed from senior tranche\n        uint256 currentDnGmxSeniorVaultAmount = _getUsdcBorrowed(state);\n\n        if (targetDnGmxSeniorVaultAmount > currentDnGmxSeniorVaultAmount) {\n            // case where we need to borrow more usdc\n            // To get more usdc from senior tranche, so usdc is borrowed first and then hedge is updated on AAVE\n            {\n                uint256 amountToBorrow = targetDnGmxSeniorVaultAmount - currentDnGmxSeniorVaultAmount;\n                uint256 availableBorrow = state.dnGmxSeniorVault.availableBorrow(address(this));\n                if (amountToBorrow > availableBorrow) {\n                    // if amount to borrow > available borrow amount\n                    // we won't be able to hedge glp completely\n                    // convert some glp into usdc to keep the vault delta neutral\n                    // hedge the btc/eth of remaining amount\n                    optimalUncappedEthBorrow = optimalEthBorrow;\n\n                    // optimal btc and eth borrows basis the hedged part of glp\n                    (optimalBtcBorrow, optimalEthBorrow) = _getOptimalCappedBorrows(\n                        state,\n                        currentDnGmxSeniorVaultAmount + availableBorrow,\n                        usdcLiquidationThreshold\n                    );\n                }\n            }\n        }\n\n        return (\n            optimalBtcBorrow,\n            optimalEthBorrow,\n            targetDnGmxSeniorVaultAmount,\n            optimalUncappedEthBorrow,\n            isPartialHedge\n        );\n    }\n\n    ///@notice rebalances btc and eth hedges according to underlying glp token weights\n    ///@notice updates the borrowed amount from senior tranche basis the target health factor\n    ///@notice if the amount of swap for a token > theshold then a partial hedge is taken and remaining is taken separately\n    ///@notice if the amount of swap for a token < threshold complete hedge is taken\n    ///@notice in case there is not enough money in senior tranche then relevant amount of glp is converted into usdc\n    ///@dev to be called after settle profits only (since vaultMarketValue if after settlement of profits)\n    ///@param state set of all state variables of vault\n    ///@param currentBtcBorrow The amount of USDC collateral token deposited to LB Protocol\n    ///@param currentEthBorrow The market value of ETH/BTC part in sGLP\n    ///@param glpDeposited amount of glp deposited into the vault\n    ///@param isPartialAllowed true if partial hedge is allowed\n    ///@return isPartialHedge true if partial hedge is executed\n    function rebalanceHedge(\n        State storage state,\n        uint256 currentBtcBorrow,\n        uint256 currentEthBorrow,\n        uint256 glpDeposited,\n        bool isPartialAllowed\n    ) external returns (bool isPartialHedge) {\n        {\n            uint256 optimalBtcBorrow;\n            uint256 optimalEthBorrow;\n            uint256 targetDnGmxSeniorVaultAmount;\n            uint256 currentDnGmxSeniorVaultAmount;\n            uint256 optimalUncappedEthBorrow;\n            (\n                optimalBtcBorrow,\n                optimalEthBorrow,\n                targetDnGmxSeniorVaultAmount,\n                optimalUncappedEthBorrow,\n                isPartialHedge\n            ) = _getOptimalBorrowsFinal(\n                state,\n                currentBtcBorrow,\n                currentEthBorrow,\n                glpDeposited,\n                [isPartialAllowed, false]\n            );\n            // current usdc borrowed from senior tranche\n            currentDnGmxSeniorVaultAmount = _getUsdcBorrowed(state);\n            if (targetDnGmxSeniorVaultAmount > currentDnGmxSeniorVaultAmount) {\n                // case where we need to borrow more usdc\n                // To get more usdc from senior tranche, so usdc is borrowed first and then hedge is updated on AAVE\n                {\n                    uint256 amountToBorrow = targetDnGmxSeniorVaultAmount - currentDnGmxSeniorVaultAmount;\n                    uint256 availableBorrow = state.dnGmxSeniorVault.availableBorrow(address(this));\n\n                    if (amountToBorrow > availableBorrow) {\n                        // if amount to borrow > available borrow amount\n                        // we won't be able to hedge glp completely\n                        // convert some glp into usdc to keep the vault delta neutral\n                        // hedge the btc/eth of remaining amount\n\n                        // rebalance the unhedged glp (increase/decrease basis the capped optimal token hedges)\n                        _rebalanceUnhedgedGlp(state, optimalUncappedEthBorrow, optimalEthBorrow);\n\n                        if (availableBorrow > 0) {\n                            // borrow whatever is available since required > available\n                            state.dnGmxSeniorVault.borrow(availableBorrow);\n                        }\n                    } else {\n                        //No unhedged glp remaining so just pass same value in capped and uncapped (should convert back any ausdc back to sglp)\n                        _rebalanceUnhedgedGlp(state, optimalEthBorrow, optimalEthBorrow);\n\n                        // Take from LB Vault\n                        state.dnGmxSeniorVault.borrow(targetDnGmxSeniorVaultAmount - currentDnGmxSeniorVaultAmount);\n                    }\n                }\n\n                // Rebalance Position\n                // Executes a flashloan from balancer and btc/eth borrow updates on AAVE\n                _rebalanceBorrow(state, optimalBtcBorrow, currentBtcBorrow, optimalEthBorrow, currentEthBorrow);\n            } else {\n                //No unhedged glp remaining so just pass same value in capped and uncapped (should convert back any ausdc back to sglp)\n                _rebalanceUnhedgedGlp(state, optimalEthBorrow, optimalEthBorrow);\n\n                // Executes a flashloan from balancer and btc/eth borrow updates on AAVE\n                // To repay usdc to senior tranche so update the hedges on AAVE first\n                // then remove usdc to pay back to senior tranche\n                _rebalanceBorrow(state, optimalBtcBorrow, currentBtcBorrow, optimalEthBorrow, currentEthBorrow);\n                uint256 totalCurrentBorrowValue;\n                {\n                    (uint256 currentBtc, uint256 currentEth) = _getCurrentBorrows(state);\n                    totalCurrentBorrowValue = _getBorrowValue(state, currentBtc, currentEth);\n                }\n                _rebalanceProfit(state, totalCurrentBorrowValue);\n                // Deposit to LB Vault\n\n                state.dnGmxSeniorVault.repay(currentDnGmxSeniorVaultAmount - targetDnGmxSeniorVaultAmount);\n            }\n        }\n    }\n\n    ///@notice withdraws LP tokens from gauge, sells LP token for usdc\n    ///@param state set of all state variables of vault\n    ///@param usdcAmountDesired amount of USDC desired\n    ///@return usdcAmountOut usdc amount returned by gmx\n    function _convertAssetToAUsdc(\n        State storage state,\n        uint256 usdcAmountDesired\n    ) internal returns (uint256 usdcAmountOut) {\n        ///@dev if usdcAmountDesired < 10, then there is precision issue in gmx contracts while redeeming for usdg\n\n        if (usdcAmountDesired < state.usdcConversionThreshold) return 0;\n        address _usdc = address(state.usdc);\n\n        // calculate the minimum required amount basis the set slippage param\n        // uses current usdc max price from GMX and adds slippage on top\n\n        // calculate the amount of glp to be converted to get the desired usdc amount\n        uint256 glpAmountInput = usdcAmountDesired.mulDivDown(PRICE_PRECISION, _getGlpPriceInUsdc(state, false));\n\n        if (state.useDirectConversion) {\n            uint256 minUsdcOut = usdcAmountDesired.mulDivDown((MAX_BPS - state.slippageThresholdGmxBps), MAX_BPS);\n\n            usdcAmountOut = state.mintBurnRewardRouter.unstakeAndRedeemGlp(\n                _usdc,\n                glpAmountInput,\n                minUsdcOut,\n                address(this)\n            );\n\n            emit GlpSwapped(glpAmountInput, usdcAmountOut, true);\n\n            _executeSupply(state, _usdc, usdcAmountOut);\n        } else {\n            uint256 ethPriceInUsdc = _getTokenPriceInUsdc(state, state.weth);\n\n            uint256 minEthOut = (usdcAmountDesired.mulDivDown((MAX_BPS - state.slippageThresholdGmxBps), MAX_BPS))\n                .mulDivDown(PRICE_PRECISION, ethPriceInUsdc);\n\n            uint256 ethAmountOut = state.mintBurnRewardRouter.unstakeAndRedeemGlp(\n                address(state.weth),\n                glpAmountInput,\n                minEthOut,\n                address(this)\n            );\n\n            uint256 minUsdcAmount = ethPriceInUsdc.mulDivDown(\n                ethAmountOut * (MAX_BPS - state.slippageThresholdSwapEthBps),\n                MAX_BPS * PRICE_PRECISION\n            );\n\n            (usdcAmountOut, ) = _swapToken(state, address(state.weth), ethAmountOut, minUsdcAmount);\n\n            emit GlpSwapped(glpAmountInput, usdcAmountOut, true);\n\n            _executeSupply(state, _usdc, usdcAmountOut);\n        }\n    }\n\n    ///@notice sells usdc for LP tokens and then stakes LP tokens\n    ///@param state set of all state variables of vault\n    ///@param amount amount of usdc\n    function _convertAUsdcToAsset(State storage state, uint256 amount) internal {\n        _executeWithdraw(state, address(state.usdc), amount, address(this));\n\n        uint256 price = state.gmxVault.getMinPrice(address(state.usdc));\n\n        // USDG has 18 decimals and usdc has 6 decimals => 18-6 = 12\n        uint256 usdgAmount = amount.mulDivDown(\n            price * (MAX_BPS - state.slippageThresholdGmxBps) * 1e12,\n            PRICE_PRECISION * MAX_BPS\n        );\n\n        // conversion of token into glp using batching manager\n        // batching manager handles the conversion due to the cooldown\n        // glp transferred to the vault on batch execution\n\n        uint256 glpReceived = _stakeGlp(state, address(state.usdc), amount, usdgAmount);\n\n        emit GlpSwapped(glpReceived, amount, false);\n    }\n\n    function _stakeGlp(\n        State storage state,\n        address token,\n        uint256 amount,\n        uint256 minUSDG\n    ) internal returns (uint256 glpStaked) {\n        // will revert if notional output is less than minUSDG\n        glpStaked = state.mintBurnRewardRouter.mintAndStakeGlp(token, amount, minUSDG, 0);\n    }\n\n    ///@notice rebalances unhedged glp amount\n    ///@notice converts some glp into usdc if there is lesser amount of usdc to back the hedges than required\n    ///@notice converts some usdc into glp if some part of the unhedged glp can be hedged\n    ///@notice used when there is not enough usdc available in senior tranche\n    ///@param state set of all state variables of vault\n    ///@param uncappedTokenHedge token hedge if there was no asset cap\n    ///@param cappedTokenHedge token hedge if given there is limited about of assets available in senior tranche\n    function _rebalanceUnhedgedGlp(State storage state, uint256 uncappedTokenHedge, uint256 cappedTokenHedge) private {\n        // early return if optimal amounts are zero\n        if (uncappedTokenHedge == 0) return;\n\n        // part of glp assets to be kept unhedged\n        // calculated basis the uncapped amount (assumes unlimited borrow availability)\n        // and capped amount (basis available borrow)\n\n        // uncappedTokenHedge is required to hedge totalAssets\n        // cappedTokenHedge can be taken basis available borrow\n        // so basis what % if hedge cannot be taken, same % of glp is converted to usdc\n        uint256 targetUnhedgedGlp = _totalGlp(state, false).mulDivDown(\n            uncappedTokenHedge - cappedTokenHedge,\n            uncappedTokenHedge\n        );\n\n        // usdc value of unhedged glp assets\n        uint256 targetUnhedgedGlpUsdcAmount = targetUnhedgedGlp.mulDivDown(\n            _getGlpPriceInUsdc(state, false),\n            PRICE_PRECISION\n        );\n\n        if (targetUnhedgedGlpUsdcAmount > state.unhedgedGlpInUsdc) {\n            // if target unhedged amount > current unhedged amount\n            // convert glp to aUSDC\n            uint256 glpToUsdcAmount = targetUnhedgedGlpUsdcAmount - state.unhedgedGlpInUsdc;\n            state.unhedgedGlpInUsdc += _convertAssetToAUsdc(state, glpToUsdcAmount);\n        } else if (targetUnhedgedGlpUsdcAmount < state.unhedgedGlpInUsdc) {\n            // if target unhedged amount < current unhedged amount\n            // convert aUSDC to glp\n            uint256 usdcToGlpAmount = state.unhedgedGlpInUsdc - targetUnhedgedGlpUsdcAmount;\n            state.unhedgedGlpInUsdc -= usdcToGlpAmount;\n            _convertAUsdcToAsset(state, usdcToGlpAmount);\n        }\n    }\n\n    /* ##################################################################\n                            FLASHLOAN RECEIVER\n    ################################################################## */\n\n    ///@notice flashloan receiver for balance vault\n    ///@notice receives flashloaned tokens(WETH or WBTC or USDC) from balancer, swaps on uniswap and borrows/repays on AAVE\n    ///@dev only allows balancer vault to call this\n    ///@dev only runs when _hasFlashloaned is set to true (prevents someone else from initiating flashloan to vault)\n    ///@param tokens list of tokens flashloaned\n    ///@param amounts amounts of token flashloans in same order\n    ///@param feeAmounts amounts of fee/premium charged for flashloan\n    ///@param userData data passed to balancer for flashloan (includes token amounts, token usdc value and swap direction)\n    function receiveFlashLoan(\n        State storage state,\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        // Decode user data containing btc/eth token & usdc amount\n        // RepayDebt true means we need to reduce token hedge else we need to increase hedge\n        (\n            uint256 btcTokenAmount,\n            uint256 btcUsdcAmount,\n            uint256 ethTokenAmount,\n            uint256 ethUsdcAmount,\n            bool repayDebtBtc,\n            bool repayDebtEth\n        ) = abi.decode(userData, (uint256, uint256, uint256, uint256, bool, bool));\n\n        // Asset premium charged for taking the flashloan from balancer\n        uint256 btcAssetPremium;\n        uint256 ethAssetPremium;\n\n        // adjust asset amounts for premiums (zero for balancer at the time of dev)\n        if (repayDebtBtc && repayDebtEth) {\n            // Both token amounts are non zero\n            // The assets are same (usdc only)\n            // Here amounts[0] should be equal to btcTokenAmount+ethTokenAmount\n            // Total premium on USDC is divided on a prorata basis for btc and eth usdc amounts\n            btcAssetPremium = feeAmounts[0].mulDivDown(btcUsdcAmount, amounts[0]);\n\n            ethAssetPremium = (feeAmounts[0] - btcAssetPremium);\n        } else if (btcTokenAmount != 0 && ethTokenAmount != 0) {\n            // Both token amounts are non zero\n            // The assets are different (either usdc/btc, usdc/eth, btc/eth)\n            // Here amounts[0] should be equal to btcTokenAmount and amounts[1] should be equal to ethTokenAmount\n            bool btcFirst = false;\n\n            // Checks if btc or eth is first since they are sorted basis token address when taking flashloan\n            if (repayDebtBtc ? tokens[0] == state.usdc : tokens[0] == state.wbtc) btcFirst = true;\n\n            // Premiums are assigned basis the token amount orders\n            btcAssetPremium = feeAmounts[btcFirst ? 0 : 1];\n            ethAssetPremium = feeAmounts[btcFirst ? 1 : 0];\n        } else {\n            // One of the token amounts is zero\n            // The asset for non zero token can be both token or usdc\n            // Premium is assigned to the non-zero amount token\n            if (btcTokenAmount != 0) btcAssetPremium = feeAmounts[0];\n            else ethAssetPremium = feeAmounts[0];\n        }\n\n        // Execute the token swap (usdc to token / token to usdc) and repay the debt\n        if (btcTokenAmount > 0)\n            _executeOperationToken(\n                state,\n                address(state.wbtc),\n                btcTokenAmount,\n                btcUsdcAmount,\n                btcAssetPremium,\n                repayDebtBtc\n            );\n        if (ethTokenAmount > 0)\n            _executeOperationToken(\n                state,\n                address(state.weth),\n                ethTokenAmount,\n                ethUsdcAmount,\n                ethAssetPremium,\n                repayDebtEth\n            );\n    }\n\n    /* ##################################################################\n                            AAVE HELPERS\n    ################################################################## */\n\n    ///@notice executes borrow of \"token\" of \"amount\" quantity to AAVE at variable interest rate\n    ///@param state set of all state variables of vault\n    ///@param token address of token to borrow\n    ///@param amount amount of token to borrow\n    function _executeBorrow(State storage state, address token, uint256 amount) internal {\n        state.pool.borrow(token, amount, VARIABLE_INTEREST_MODE, 0, address(this));\n    }\n\n    ///@notice executes repay of \"token\" of \"amount\" quantity to AAVE at variable interest rate\n    ///@param state set of all state variables of vault\n    ///@param token address of token to borrow\n    ///@param amount amount of token to borrow\n    function _executeRepay(State storage state, address token, uint256 amount) internal {\n        state.pool.repay(token, amount, VARIABLE_INTEREST_MODE, address(this));\n    }\n\n    ///@notice executes supply of \"token\" of \"amount\" quantity to AAVE\n    ///@param state set of all state variables of vault\n    ///@param token address of token to borrow\n    ///@param amount amount of token to borrow\n    function _executeSupply(State storage state, address token, uint256 amount) internal {\n        state.pool.supply(token, amount, address(this), 0);\n    }\n\n    ///@notice executes withdraw of \"token\" of \"amount\" quantity to AAVE\n    ///@param state set of all state variables of vault\n    ///@param token address of token to borrow\n    ///@param amount amount of token to borrow\n    ///@param receiver address to which withdrawn tokens should be sent\n    function _executeWithdraw(State storage state, address token, uint256 amount, address receiver) internal {\n        state.pool.withdraw(token, amount, receiver);\n    }\n\n    ///@notice returns liquidation threshold of the selected asset's AAVE pool\n    ///@param state set of all state variables of vault\n    ///@param asset address of asset to check liquidation threshold for\n    function _getLiquidationThreshold(State storage state, address asset) private view returns (uint256) {\n        DataTypes.ReserveConfigurationMap memory config = state.pool.getConfiguration(asset);\n        (, uint256 liquidationThreshold, , , , ) = config.getParams();\n\n        return liquidationThreshold;\n    }\n\n    /* ##################################################################\n                            BALANCER HELPERS\n    ################################################################## */\n\n    ///@notice executes flashloan from balancer\n    ///@dev assets should be ordered in ascending order of addresses\n    ///@param assets list of token addresses\n    ///@param amounts amount of tokens to be flashloaned in same order as assets\n    ///@param _btcTokenAmount token amount of btc token by which hedge amount should be increased (if repayDebt false) or decreased (if repayDebt true)\n    ///@param _btcUsdcAmount usdc value of btc token considering swap slippage. Minimum amount (if repayDebt false) or maximum amount (if repayDebt true)\n    ///@param _ethTokenAmount token amount of eth token by which hedge amount should be increased (if repayDebt false) or decreased (if repayDebt true)\n    ///@param _ethUsdcAmount usdc value of eth token considering swap slippage. Minimum amount (if repayDebt false) or maximum amount (if repayDebt true)\n    ///@param _repayDebtBtc repay debt for btc token\n    ///@param _repayDebtEth repay debt for eth token\n    function _executeFlashloan(\n        State storage state,\n        address[] memory assets,\n        uint256[] memory amounts,\n        uint256 _btcTokenAmount,\n        uint256 _btcUsdcAmount,\n        uint256 _ethTokenAmount,\n        uint256 _ethUsdcAmount,\n        bool _repayDebtBtc,\n        bool _repayDebtEth\n    ) internal {\n        if (assets.length != amounts.length) revert IDnGmxJuniorVault.ArraysLengthMismatch();\n\n        // to ensure that only vault originated flashloans should be able to work with receive flashloan\n        state.hasFlashloaned = true;\n\n        state.balancerVault.flashLoan(\n            address(this),\n            assets,\n            amounts,\n            abi.encode(_btcTokenAmount, _btcUsdcAmount, _ethTokenAmount, _ethUsdcAmount, _repayDebtBtc, _repayDebtEth)\n        );\n\n        // receive flashloan has passed so the variable can be made false again\n        state.hasFlashloaned = false;\n    }\n\n    ///@notice executes relevant token hedge update on receiving the flashloan from Balancer\n    ///@dev if \"repayDebt = true\" then usdc flashloaned, swapped for token, repay token debt, withdraw usdc from AAVE and pay back usdc with premium\n    ///@dev if \"repayDebt = false\" then token flashloaned, swapped for usdc, supply usdc, borrow tokens from AAVE and pay back tokens with premium\n    ///@param token address of token to increase/decrease hedge by\n    ///@param tokenAmount amount of tokens to swap\n    ///@param usdcAmount if \"repayDebt = false\" then = minimum amount of usdc | if \"repayDebt = true\" then = maximum amount of usdc\n    ///@param premium additional tokens/usdc to be repaid to balancer to cover flashloan fees\n    ///@param repayDebt true if token hedge needs to be reduced\n    function _executeOperationToken(\n        State storage state,\n        address token,\n        uint256 tokenAmount,\n        uint256 usdcAmount,\n        uint256 premium,\n        bool repayDebt\n    ) internal {\n        if (!repayDebt) {\n            // increase token hedge amount\n            // add premium to token amount (to be paid back to balancer)\n            uint256 amountWithPremium = tokenAmount + premium;\n\n            // swap token to usdc\n            (uint256 usdcReceived, ) = state._swapToken(token, tokenAmount, usdcAmount);\n\n            // supply received usdc to AAVE\n            state._executeSupply(address(state.usdc), usdcReceived);\n\n            // borrow amount with premium amount of tokens from AAVE\n            state._executeBorrow(token, amountWithPremium);\n\n            // increase junior tranche usdc deposits by usdc received\n            state.dnUsdcDeposited += usdcReceived.toInt256();\n\n            // transfer token amount borrowed with premium back to balancer pool\n            IERC20(token).transfer(address(state.balancerVault), amountWithPremium);\n        } else {\n            // decrease token hedge amount\n            // usdcAmount = amount flashloaned from balancer\n            // usdcPaid = amount paid for receiving given token amount\n            // usdcAmount-usdcPaid = amount of usdc remaining after the swap\n            // so we just need to withdraw usdcPaid to transfer usdcAmount\n\n            // swap usdc amount to token\n            (uint256 usdcPaid, uint256 tokensReceived) = state._swapUSDC(token, tokenAmount, usdcAmount);\n\n            // amount of usdc that got charged for the token required\n            uint256 amountWithPremium = usdcPaid + premium;\n\n            // reduce delta neutral usdc amount by amount with premium\n            state.dnUsdcDeposited -= amountWithPremium.toInt256();\n\n            // repay token debt on AAVE\n            state._executeRepay(token, tokensReceived);\n\n            // withdraw amount with premium supplied to AAVE\n            state._executeWithdraw(address(state.usdc), amountWithPremium, address(this));\n\n            // transfer usdc amount flashloaned + premium back to balancer\n            state.usdc.transfer(address(state.balancerVault), usdcAmount + premium);\n        }\n    }\n\n    /* ##################################################################\n                            VIEW FUNCTIONS\n    ################################################################## */\n\n    ///@notice returns the usdc amount borrowed by junior tranche from senior tranche\n    ///@param state set of all state variables of vault\n    ///@return usdcAmount amount of usdc borrowed by junior tranche\n    function _getUsdcBorrowed(State storage state) private view returns (uint256 usdcAmount) {\n        // all the aave interest goes to senior tranche\n        // so, usdc borrowed from senior tranche =\n        // total aUSDC balance - (usdc deposited by delta neutral vault into AAVE) - (unhedged amount of glp in usdc)\n        return\n            uint256(\n                state.aUsdc.balanceOf(address(this)).toInt256() -\n                    state.dnUsdcDeposited -\n                    state.unhedgedGlpInUsdc.toInt256()\n            );\n    }\n\n    ///@notice returns the total assets deposited to the vault (in glp amount)\n    ///@param state set of all state variables of vault\n    ///@return total asset amount (glp + usdc (in glp terms))\n    function totalAssets(State storage state) external view returns (uint256) {\n        return _totalAssets(state, false);\n    }\n\n    ///@notice returns the total assets deposited to the vault (in glp amount)\n    ///@param state set of all state variables of vault\n    ///@param maximize true for maximizing the total assets value and false to minimize\n    ///@return total asset amount (glp + usdc (in glp terms))\n    function totalAssets(State storage state, bool maximize) external view returns (uint256) {\n        return _totalAssets(state, maximize);\n    }\n\n    ///@notice returns the total assets deposited to the vault (in glp amount)\n    ///@param state set of all state variables of vault\n    ///@param maximize true for maximizing the total assets value and false to minimize\n    ///@return total asset amount (glp + usdc (in glp terms))\n    function _totalAssets(State storage state, bool maximize) private view returns (uint256) {\n        // usdc deposited by junior tranche (can be negative)\n        int256 dnUsdcDeposited = state.dnUsdcDeposited;\n\n        // calculate current borrow amounts\n        (uint256 currentBtc, uint256 currentEth) = _getCurrentBorrows(state);\n        // total borrow value is the value of ETH and BTC required to be paid off\n        uint256 totalCurrentBorrowValue = _getBorrowValue(state, currentBtc, currentEth);\n        uint256 aaveProfitGlp;\n        uint256 aaveLossGlp;\n        {\n            // convert it into two uints basis the sign\n            uint256 aaveProfit = dnUsdcDeposited > int256(0) ? uint256(dnUsdcDeposited) : 0;\n            uint256 aaveLoss = dnUsdcDeposited < int256(0)\n                ? uint256(-dnUsdcDeposited) + totalCurrentBorrowValue\n                : totalCurrentBorrowValue;\n\n            if (aaveProfit > aaveLoss) {\n                aaveProfitGlp = (aaveProfit - aaveLoss).mulDivDown(\n                    PRICE_PRECISION,\n                    _getGlpPriceInUsdc(state, !maximize)\n                );\n                if (!maximize)\n                    aaveProfitGlp = aaveProfitGlp.mulDivDown(MAX_BPS - state.slippageThresholdGmxBps, MAX_BPS);\n                aaveLossGlp = 0;\n            } else {\n                aaveLossGlp = (aaveLoss - aaveProfit).mulDivDown(PRICE_PRECISION, _getGlpPriceInUsdc(state, maximize));\n                if (!maximize) aaveLossGlp = aaveLossGlp.mulDivDown(MAX_BPS + state.slippageThresholdGmxBps, MAX_BPS);\n                aaveProfitGlp = 0;\n            }\n        }\n\n        // total assets considers 3 parts\n        // part1: glp balance in vault\n        // part2: usdc balance in vault (unhedged glp)\n        // part3: pnl on AAVE (i.e. aaveProfitGlp - aaveLossGlp)\n        return _totalGlp(state, maximize) + aaveProfitGlp - aaveLossGlp;\n    }\n\n    ///@notice returns the total assets deposited to the vault (in glp amount)\n    ///@param state set of all state variables of vault\n    ///@param maximize true for maximizing the total assets value and false to minimize\n    ///@return total asset amount (glp + usdc (in glp terms))\n    function totalGlp(State storage state, bool maximize) external view returns (uint256) {\n        return _totalGlp(state, maximize);\n    }\n\n    function _totalGlp(State storage state, bool maximize) private view returns (uint256) {\n        // convert usdc amount into glp amount\n        // unhedged glp is kept in usdc so there would be conversion slippage on that\n        uint256 unhedgedGlp = (state.unhedgedGlpInUsdc).mulDivDown(\n            PRICE_PRECISION,\n            _getGlpPriceInUsdc(state, !maximize)\n        );\n\n        // if we need to minimize then add additional slippage\n        if (!maximize) unhedgedGlp = unhedgedGlp.mulDivDown(MAX_BPS - state.slippageThresholdGmxBps, MAX_BPS);\n\n        // total assets considers 3 parts\n        // part1: glp balance in vault\n        // part2: usdc balance in vault (unhedged glp)\n        return state.fsGlp.balanceOf(address(this)) + unhedgedGlp;\n    }\n\n    ///@notice returns if the rebalance is valid basis last rebalance time and rebalanceTimeThreshold\n    ///@param state set of all state variables of vault\n    ///@return true if the rebalance is valid basis time threshold\n    /* solhint-disable not-rely-on-time */\n    function isValidRebalanceTime(State storage state) external view returns (bool) {\n        // check if rebalanceTimeThreshold has passed since last rebalance time\n        return (block.timestamp - state.lastRebalanceTS) > state.rebalanceTimeThreshold;\n    }\n\n    ///@notice returns if the rebalance is valid basis health factor on AAVE\n    ///@notice returns true if current health factor < threshold\n    ///@param state set of all state variables of vault\n    ///@return true if the rebalance is valid basis AAVE health factor\n    function isValidRebalanceHF(State storage state) external view returns (bool) {\n        return _isValidRebalanceHF(state);\n    }\n\n    function _isValidRebalanceHF(State storage state) private view returns (bool) {\n        // check if health factor on AAVE is below rebalanceHfThreshold\n        (, , , , , uint256 healthFactor) = state.pool.getUserAccountData(address(this));\n\n        return healthFactor < (uint256(state.rebalanceHfThresholdBps) * 1e14);\n    }\n\n    ///@notice returns if the rebalance is valid basis the difference between the current and optimal hedges of tokens(ETH/BTC)\n    ///@param state set of all state variables of vault\n    ///@return true if the rebalance is valid basis diffeence (current and optimal) threshold\n    function isValidRebalanceDeviation(State storage state) external view returns (bool) {\n        (uint128 optimalBtcPoolAmount, uint128 optimalEthPoolAmount) = _getPoolAmounts(state);\n\n        uint128 currentBtcPoolAmount = state.btcPoolAmount;\n        uint128 currentEthPoolAmount = state.ethPoolAmount;\n\n        return\n            !(_isWithinAllowedDelta(state, optimalBtcPoolAmount, currentBtcPoolAmount) &&\n                _isWithinAllowedDelta(state, optimalEthPoolAmount, currentEthPoolAmount));\n    }\n\n    function isValidRebalanceDueToChangeInHedges(State storage state) external view returns (bool) {\n        return _isValidRebalanceDueToChangeInHedges(state);\n    }\n\n    function _isValidRebalanceDueToChangeInHedges(State storage state) private view returns (bool) {\n        (int128 currentBtcTraderOIHedge, int128 currentEthTraderOIHedge) = _getTraderOIHedgeAmounts(state);\n        return\n            !(currentBtcTraderOIHedge == state.btcTraderOIHedge && currentEthTraderOIHedge == state.ethTraderOIHedge);\n    }\n\n    function getTraderOIHedgeAmounts(\n        State storage state\n    ) external view returns (int128 currentBtcTraderOIHedge, int128 currentEthTraderOIHedge) {\n        return _getTraderOIHedgeAmounts(state);\n    }\n\n    function _getTraderOIHedgeAmounts(\n        State storage state\n    ) private view returns (int128 currentBtcTraderOIHedge, int128 currentEthTraderOIHedge) {\n        currentBtcTraderOIHedge = state.dnGmxTraderHedgeStrategy.btcTraderOIHedge();\n        currentEthTraderOIHedge = state.dnGmxTraderHedgeStrategy.ethTraderOIHedge();\n    }\n\n    function getPoolAmounts(State storage state) external view returns (uint128 btcPoolAmount, uint128 ethPoolAmount) {\n        return _getPoolAmounts(state);\n    }\n\n    function _getPoolAmounts(State storage state) private view returns (uint128 btcPoolAmount, uint128 ethPoolAmount) {\n        btcPoolAmount = uint128(state.gmxVault.poolAmounts(address(state.wbtc)));\n        ethPoolAmount = uint128(state.gmxVault.poolAmounts(address(state.weth)));\n    }\n\n    ///@notice returns the price of given token basis AAVE oracle\n    ///@param state set of all state variables of vault\n    ///@param token the token for which price is expected\n    ///@return token price in usd\n    function getTokenPrice(State storage state, IERC20Metadata token) external view returns (uint256) {\n        return _getTokenPrice(state, token);\n    }\n\n    ///@notice returns the price of given token basis AAVE oracle\n    ///@param state set of all state variables of vault\n    ///@param token the token for which price is expected\n    ///@return token price in usd\n    function _getTokenPrice(State storage state, IERC20Metadata token) private view returns (uint256) {\n        uint256 decimals = token.decimals();\n\n        // AAVE oracle\n        uint256 price = state.oracle.getAssetPrice(address(token));\n\n        // @dev aave returns from same source as chainlink (which is 8 decimals)\n        return price.mulDivDown(PRICE_PRECISION, 10 ** (decimals + 2));\n    }\n\n    ///@notice returns the price of glp token\n    ///@param state set of all state variables of vault\n    ///@param maximize true to get maximum price and false to get minimum\n    ///@return glp price in usd\n    function getGlpPrice(State storage state, bool maximize) external view returns (uint256) {\n        return _getGlpPrice(state, maximize);\n    }\n\n    ///@notice returns the price of glp token\n    ///@param state set of all state variables of vault\n    ///@param maximize true to get maximum price and false to get minimum\n    ///@return glp price in usd\n    function _getGlpPrice(State storage state, bool maximize) private view returns (uint256) {\n        uint256 aum = state.glpManager.getAum(maximize);\n        uint256 totalSupply = state.glp.totalSupply();\n\n        // price per glp token = (total AUM / total supply)\n        return aum.mulDivDown(PRICE_PRECISION, totalSupply * 1e24);\n    }\n\n    ///@notice returns the price of glp token in usdc\n    ///@param state set of all state variables of vault\n    ///@param maximize true to get maximum price and false to get minimum\n    ///@return glp price in usdc\n    function getGlpPriceInUsdc(State storage state, bool maximize) external view returns (uint256) {\n        return _getGlpPriceInUsdc(state, maximize);\n    }\n\n    ///@notice returns the price of glp token in usdc\n    ///@param state set of all state variables of vault\n    ///@param maximize true to get maximum price and false to get minimum\n    ///@return glp price in usdc\n    function _getGlpPriceInUsdc(State storage state, bool maximize) private view returns (uint256) {\n        uint256 aum = state.glpManager.getAum(maximize);\n        uint256 totalSupply = state.glp.totalSupply();\n\n        // @dev aave returns from same source as chainlink (which is 8 decimals)\n        uint256 quotePrice = state.oracle.getAssetPrice(address(state.usdc));\n\n        // price per glp token = (total AUM / total supply)\n        // scaling factor = 30(aum) -18(totalSupply) -8(quotePrice) +18(glp) -6(usdc) = 16\n        return aum.mulDivDown(PRICE_PRECISION, totalSupply * quotePrice * 1e16);\n    }\n\n    ///@notice returns the price of given token in USDC using AAVE oracle\n    ///@param state set of all state variables of vault\n    ///@param token the token for which price is expected\n    ///@return scaledPrice token price in usdc\n    function getTokenPriceInUsdc(\n        State storage state,\n        IERC20Metadata token\n    ) external view returns (uint256 scaledPrice) {\n        return _getTokenPriceInUsdc(state, token);\n    }\n\n    ///@notice returns the price of given token in USDC using AAVE oracle\n    ///@param state set of all state variables of vault\n    ///@param token the token for which price is expected\n    ///@return scaledPrice token price in usdc\n    function _getTokenPriceInUsdc(\n        State storage state,\n        IERC20Metadata token\n    ) internal view returns (uint256 scaledPrice) {\n        uint256 decimals = token.decimals();\n        uint256 price = state.oracle.getAssetPrice(address(token));\n\n        // @dev aave returns from same source as chainlink (which is 8 decimals)\n        uint256 quotePrice = state.oracle.getAssetPrice(address(state.usdc));\n\n        // token price / usdc price\n        scaledPrice = price.mulDivDown(PRICE_PRECISION, quotePrice * 10 ** (decimals - 6));\n    }\n\n    ///@notice returns liquidation threshold of the selected asset's AAVE pool\n    ///@param state set of all state variables of vault\n    ///@param asset address of asset to check liquidation threshold for\n    ///@return liquidation threshold\n    function getLiquidationThreshold(State storage state, address asset) external view returns (uint256) {\n        return _getLiquidationThreshold(state, asset);\n    }\n\n    ///@notice returns the borrow value for a given amount of tokens\n    ///@param state set of all state variables of vault\n    ///@param btcAmount amount of btc\n    ///@param ethAmount amount of eth\n    ///@return borrowValue value of the given token amounts\n    function getBorrowValue(\n        State storage state,\n        uint256 btcAmount,\n        uint256 ethAmount\n    ) external view returns (uint256 borrowValue) {\n        return _getBorrowValue(state, btcAmount, ethAmount);\n    }\n\n    ///@notice returns the borrow value for a given amount of tokens\n    ///@param state set of all state variables of vault\n    ///@param btcAmount amount of btc\n    ///@param ethAmount amount of eth\n    ///@return borrowValue value of the given token amounts\n    function _getBorrowValue(\n        State storage state,\n        uint256 btcAmount,\n        uint256 ethAmount\n    ) private view returns (uint256 borrowValue) {\n        borrowValue =\n            btcAmount.mulDivDown(_getTokenPrice(state, state.wbtc), PRICE_PRECISION) +\n            ethAmount.mulDivDown(_getTokenPrice(state, state.weth), PRICE_PRECISION);\n        borrowValue = borrowValue.mulDivDown(PRICE_PRECISION, _getTokenPrice(state, state.usdc));\n    }\n\n    function getSlippageAdjustedAssets(\n        State storage state,\n        uint256 assets,\n        bool isDeposit\n    ) external view returns (uint256) {\n        return _getSlippageAdjustedAssets(state, assets, isDeposit);\n    }\n\n    function _getSlippageAdjustedAssets(\n        State storage state,\n        uint256 assets,\n        bool isDeposit\n    ) private view returns (uint256) {\n        // get change in borrow positions to calculate amount to swap on uniswap\n        (int256 netBtcBorrowChange, int256 netEthBorrowChange) = _getNetPositionChange(state, assets, isDeposit);\n\n        uint256 dollarsLostDueToSlippage = _quoteSwapSlippageLoss(state, netBtcBorrowChange, netEthBorrowChange);\n\n        // netSlippage returned is in glp (asset) terms\n        uint256 glpPrice = _getGlpPriceInUsdc(state, false);\n        uint256 netSlippage = dollarsLostDueToSlippage.mulDivUp(PRICE_PRECISION, glpPrice);\n\n        // subtract slippage from assets, and calculate shares basis that slippage adjusted asset amount\n        if (netSlippage >= assets) revert IDnGmxJuniorVault.TooMuchSlippage(netSlippage, assets);\n        assets -= netSlippage;\n\n        return assets;\n    }\n\n    function getNetPositionChange(\n        State storage state,\n        uint256 assetAmount,\n        bool isDeposit\n    ) external view returns (int256, int256) {\n        return _getNetPositionChange(state, assetAmount, isDeposit);\n    }\n\n    function _getNetPositionChange(\n        State storage state,\n        uint256 assetAmount,\n        bool isDeposit\n    ) private view returns (int256 netBtcBorrowChange, int256 netEthBorrowChange) {\n        // get current borrows\n        (uint256 currentBtcBorrow, uint256 currentEthBorrow) = _getCurrentBorrows(state);\n\n        // calculate new total assets basis assetAmount\n        uint256 total = _totalGlp(state, true);\n        uint256 totalAssetsAfter = isDeposit ? total + assetAmount : total - assetAmount;\n\n        // get optimal borrows accounting for incoming glp deposit\n        (uint256 optimalBtcBorrow, uint256 optimalEthBorrow, , , ) = _getOptimalBorrowsFinal(\n            state,\n            currentBtcBorrow,\n            currentEthBorrow,\n            totalAssetsAfter,\n            [false, false]\n        );\n\n        // calculate the diff, i.e token amounts to be swapped on uniswap\n        // if optimal > current, swapping token to usdc\n        // if optimal < current, swapping usdc to token\n        netBtcBorrowChange = optimalBtcBorrow.toInt256() - currentBtcBorrow.toInt256();\n        netEthBorrowChange = optimalEthBorrow.toInt256() - currentEthBorrow.toInt256();\n    }\n\n    function quoteSwapSlippageLoss(\n        State storage state,\n        int256 btcAmount,\n        int256 ethAmount\n    ) external view returns (uint256) {\n        return _quoteSwapSlippageLoss(state, btcAmount, ethAmount);\n    }\n\n    function _calculateSwapLoss(\n        int256 tokenAmount,\n        int256 otherTokenAmount,\n        uint256 tokenPrice,\n        uint256 otherTokenPrice\n    ) internal pure returns (uint256) {\n        uint256 dollarsPaid;\n        uint256 dollarsReceived;\n        if (tokenAmount > 0) {\n            dollarsPaid = uint256(tokenAmount).mulDivUp(tokenPrice, PRICE_PRECISION);\n            dollarsReceived = uint256(-otherTokenAmount).mulDivDown(otherTokenPrice, PRICE_PRECISION);\n        } else if (tokenAmount < 0) {\n            dollarsPaid = uint256(otherTokenAmount).mulDivUp(otherTokenPrice, PRICE_PRECISION);\n            dollarsReceived = uint256(-tokenAmount).mulDivDown(tokenPrice, PRICE_PRECISION);\n        }\n        return (dollarsPaid > dollarsReceived) ? uint256(dollarsPaid - dollarsReceived) : 0;\n    }\n\n    /// @notice returns the amount of glp to be charged as slippage loss\n    /// @param state set of all state variables of vault\n    /// @param btcAmountInBtcSwap if positive btc sell amount else if negative btc buy amount\n    /// @param ethAmountInEthSwap if positive eth sell amount else if negative eth buy amount\n    function _quoteSwapSlippageLoss(\n        State storage state,\n        int256 btcAmountInBtcSwap,\n        int256 ethAmountInEthSwap\n    ) internal view returns (uint256 dollarsLostDueToSlippage) {\n        (int256 usdcAmountInBtcSwap, int256 usdcAmountInEthSwap) = QuoterLib.quoteCombinedSwap(\n            btcAmountInBtcSwap,\n            ethAmountInEthSwap,\n            SwapPath.generate({\n                tokenIn: state.wbtc,\n                feeIn: state.feeTierWethWbtcPool,\n                tokenIntermediate: state.weth,\n                feeOut: 500,\n                tokenOut: state.usdc,\n                isExactIn: true\n            }),\n            SwapPath.generate({ tokenIn: state.weth, fee: 500, tokenOut: state.usdc, isExactIn: true })\n        );\n\n        uint256 btcPrice = _getTokenPriceInUsdc(state, state.wbtc);\n        uint256 ethPrice = _getTokenPriceInUsdc(state, state.weth);\n        uint256 usdcPrice = _getTokenPriceInUsdc(state, state.usdc);\n\n        return\n            _calculateSwapLoss(btcAmountInBtcSwap, usdcAmountInBtcSwap, btcPrice, usdcPrice) +\n            _calculateSwapLoss(ethAmountInEthSwap, usdcAmountInEthSwap, ethPrice, usdcPrice);\n    }\n\n    ///@notice returns the amount of flashloan for a given token\n    ///@notice if token amount needs to be increased then usdcAmount is minimum amount\n    ///@notice if token amount needs to be decreased then usdcAmount is maximum amount\n    ///@param state set of all state variables of vault\n    ///@param token address of token\n    ///@param optimalBorrow optimal token borrow to completely hedge sGlp\n    ///@param currentBorrow curret token borrow from AAVE\n    ///@return tokenAmount amount of tokens to be swapped\n    ///@return usdcAmount minimum/maximum amount of usdc basis swap direction\n    ///@return repayDebt true then reduce token hedge, false then increase token hedge\n    function flashloanAmounts(\n        State storage state,\n        address token,\n        uint256 optimalBorrow,\n        uint256 currentBorrow\n    ) external view returns (uint256 tokenAmount, uint256 usdcAmount, bool repayDebt) {\n        return _flashloanAmounts(state, token, optimalBorrow, currentBorrow);\n    }\n\n    ///@notice returns the amount of flashloan for a given token\n    ///@notice if token amount needs to be increased then usdcAmount is minimum amount\n    ///@notice if token amount needs to be decreased then usdcAmount is maximum amount\n    ///@param state set of all state variables of vault\n    ///@param token address of token\n    ///@param optimalBorrow optimal token borrow to completely hedge sGlp\n    ///@param currentBorrow curret token borrow from AAVE\n    ///@return tokenAmount amount of tokens to be swapped\n    ///@return usdcAmount minimum/maximum amount of usdc basis swap direction\n    ///@return repayDebt true then reduce token hedge, false then increase token hedge\n    function _flashloanAmounts(\n        State storage state,\n        address token,\n        uint256 optimalBorrow,\n        uint256 currentBorrow\n    ) private view returns (uint256 tokenAmount, uint256 usdcAmount, bool repayDebt) {\n        uint256 slippageThresholdSwap = token == address(state.wbtc)\n            ? state.slippageThresholdSwapBtcBps\n            : state.slippageThresholdSwapEthBps;\n        // check the delta between optimal position and actual position in token terms\n        // take that position using swap\n        // To Increase\n        if (optimalBorrow > currentBorrow) {\n            tokenAmount = optimalBorrow - currentBorrow;\n            // To swap with the amount in specified hence usdcAmount should be the min amount out\n            usdcAmount = _getTokenPriceInUsdc(state, IERC20Metadata(token)).mulDivDown(\n                tokenAmount * (MAX_BPS - slippageThresholdSwap),\n                MAX_BPS * PRICE_PRECISION\n            );\n\n            repayDebt = false;\n            // Flash loan ETH/BTC from AAVE\n            // In callback: Sell loan for USDC and repay debt\n        } else {\n            // To Decrease\n            tokenAmount = (currentBorrow - optimalBorrow);\n            // To swap with amount out specified hence usdcAmount should be the max amount in\n            usdcAmount = _getTokenPriceInUsdc(state, IERC20Metadata(token)).mulDivDown(\n                tokenAmount * (MAX_BPS + slippageThresholdSwap),\n                MAX_BPS * PRICE_PRECISION\n            );\n\n            repayDebt = true;\n            // In callback: Swap to ETH/BTC and deposit to AAVE\n            // Send back some aUSDC to LB vault\n        }\n    }\n\n    ///@notice returns the amount of current borrows of btc and eth token from AAVE\n    ///@param state set of all state variables of vault\n    ///@return currentBtcBorrow amount of btc currently borrowed from AAVE\n    ///@return currentEthBorrow amount of eth currently borrowed from AAVE\n    function getCurrentBorrows(\n        State storage state\n    ) external view returns (uint256 currentBtcBorrow, uint256 currentEthBorrow) {\n        return _getCurrentBorrows(state);\n    }\n\n    ///@notice returns the amount of current borrows of btc and eth token from AAVE\n    ///@param state set of all state variables of vault\n    ///@return currentBtcBorrow amount of btc currently borrowed from AAVE\n    ///@return currentEthBorrow amount of eth currently borrowed from AAVE\n    function _getCurrentBorrows(\n        State storage state\n    ) private view returns (uint256 currentBtcBorrow, uint256 currentEthBorrow) {\n        return (state.vWbtc.balanceOf(address(this)), state.vWeth.balanceOf(address(this)));\n    }\n\n    ///@notice returns optimal borrows for BTC and ETH respectively basis glpDeposited amount and stored pool amount\n    ///@param state set of all state variables of vault\n    ///@param glpDeposited amount of glp for which optimal borrow needs to be calculated\n    ///@return optimalBtcBorrow optimal amount of btc borrowed from AAVE\n    ///@return optimalEthBorrow optimal amount of eth borrowed from AAVE\n    function getOptimalBorrows(\n        State storage state,\n        uint256 glpDeposited,\n        bool withUpdatedPoolAmounts\n    ) external view returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) {\n        return _getOptimalBorrows(state, glpDeposited, withUpdatedPoolAmounts);\n    }\n\n    ///@notice returns optimal borrows for BTC and ETH respectively basis glpDeposited amount and stored pool amount\n    ///@param state set of all state variables of vault\n    ///@param glpDeposited amount of glp for which optimal borrow needs to be calculated\n    ///@return optimalBtcBorrow optimal amount of btc borrowed from AAVE\n    ///@return optimalEthBorrow optimal amount of eth borrowed from AAVE\n    function _getOptimalBorrows(\n        State storage state,\n        uint256 glpDeposited,\n        bool withUpdatedPoolAmounts\n    ) private view returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) {\n        optimalBtcBorrow = _getTokenReservesInGlp(state, address(state.wbtc), glpDeposited, withUpdatedPoolAmounts);\n        optimalEthBorrow = _getTokenReservesInGlp(state, address(state.weth), glpDeposited, withUpdatedPoolAmounts);\n    }\n\n    ///@notice returns optimal borrows for BTC and ETH respectively basis available borrow amount\n    ///@param state set of all state variables of vault\n    ///@param availableBorrowAmount available borrow amount from senior vault\n    ///@param usdcLiquidationThreshold the usdc liquidation threshold on AAVE\n    ///@return optimalBtcBorrow optimal amount of btc borrowed from AAVE\n    ///@return optimalEthBorrow optimal amount of eth borrowed from AAVE\n    function getOptimalCappedBorrows(\n        State storage state,\n        uint256 availableBorrowAmount,\n        uint256 usdcLiquidationThreshold\n    ) external view returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) {\n        return _getOptimalCappedBorrows(state, availableBorrowAmount, usdcLiquidationThreshold);\n    }\n\n    ///@notice returns optimal borrows for BTC and ETH respectively basis available borrow amount\n    ///@param state set of all state variables of vault\n    ///@param availableBorrowAmount available borrow amount from senior vault\n    ///@param usdcLiquidationThreshold the usdc liquidation threshold on AAVE\n    ///@return optimalBtcBorrow optimal amount of btc borrowed from AAVE\n    ///@return optimalEthBorrow optimal amount of eth borrowed from AAVE\n    function _getOptimalCappedBorrows(\n        State storage state,\n        uint256 availableBorrowAmount,\n        uint256 usdcLiquidationThreshold\n    ) private view returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) {\n        // The value of max possible value of ETH+BTC borrow\n        // calculated basis available borrow amount, liqudation threshold and target health factor\n        // AAVE target health factor = (usdc supply value * usdc liquidation threshold)/borrow value\n        // whatever tokens we borrow from AAVE (ETH/BTC) we sell for usdc and deposit that usdc into AAVE\n        // assuming 0 slippage borrow value of tokens = usdc deposit value (this leads to very small variation in hf)\n        // usdc supply value = usdc borrowed from senior tranche + borrow value\n        // replacing usdc supply value formula above in AAVE target health factor formula\n        // we can replace usdc borrowed from senior tranche with available borrow amount\n        // we can derive max borrow value of tokens possible i.e. maxBorrowValue\n        uint256 maxBorrowValue = availableBorrowAmount.mulDivDown(\n            usdcLiquidationThreshold,\n            state.targetHealthFactor - usdcLiquidationThreshold\n        );\n\n        uint256 btcWeight;\n        uint256 ethWeight;\n\n        // get eth and btc price in usdc\n        uint256 btcPrice = _getTokenPriceInUsdc(state, state.wbtc);\n        uint256 ethPrice = _getTokenPriceInUsdc(state, state.weth);\n\n        {\n            int128 btcTokenTraderOIHedge = state.btcTraderOIHedge;\n            int128 ethTokenTraderOIHedge = state.ethTraderOIHedge;\n\n            uint256 btcPoolAmount = state.btcPoolAmount;\n            uint256 ethPoolAmount = state.ethPoolAmount;\n\n            // token reserve is the amount we short\n            // tokenTraderOIHedge if >0 then we need to go long because of OI hence less short (i.e. subtract if value +ve)\n            // tokenTraderOIHedge if <0 then we need to go short because of OI hence more long (i.e. add if value -ve)\n            uint256 btcTokenReserve = btcTokenTraderOIHedge > 0\n                ? btcPoolAmount - uint256(int256(btcTokenTraderOIHedge))\n                : btcPoolAmount + uint256(int256(-btcTokenTraderOIHedge));\n\n            uint256 ethTokenReserve = ethTokenTraderOIHedge > 0\n                ? ethPoolAmount - uint256(int256(ethTokenTraderOIHedge))\n                : ethPoolAmount + uint256(int256(-ethTokenTraderOIHedge));\n\n            // calculate the borrow value of eth & btc using their weights\n            btcWeight = btcTokenReserve.mulDivDown(btcPrice, PRICE_PRECISION);\n            ethWeight = ethTokenReserve.mulDivDown(ethPrice, PRICE_PRECISION);\n        }\n\n        // get token amounts from usdc amount\n        // total borrow should be divided basis the token weights\n        // using that we can calculate the borrow value for each token\n        // dividing that with token prices we can calculate the optimal token borrow amounts\n        optimalBtcBorrow = maxBorrowValue.mulDivDown(btcWeight * PRICE_PRECISION, (btcWeight + ethWeight) * btcPrice);\n        optimalEthBorrow = maxBorrowValue.mulDivDown(ethWeight * PRICE_PRECISION, (btcWeight + ethWeight) * ethPrice);\n    }\n\n    ///@notice returns token amount underlying glp amount deposited and stored pool amount\n    ///@param state set of all state variables of vault\n    ///@param token address of token\n    ///@param glpDeposited amount of glp for which underlying token amount is being calculated\n    ///@return amount of tokens of the supplied address underlying the given amount of glp\n    function getTokenReservesInGlp(\n        State storage state,\n        address token,\n        uint256 glpDeposited,\n        bool withUpdatedPoolAmounts\n    ) external view returns (uint256) {\n        return _getTokenReservesInGlp(state, token, glpDeposited, withUpdatedPoolAmounts);\n    }\n\n    ///@notice returns token amount underlying glp amount deposited and stored pool amount\n    ///@param state set of all state variables of vault\n    ///@param token address of token\n    ///@param glpDeposited amount of glp for which underlying token amount is being calculated\n    ///@return amount of tokens of the supplied address underlying the given amount of glp\n    function _getTokenReservesInGlp(\n        State storage state,\n        address token,\n        uint256 glpDeposited,\n        bool withUpdatedPoolAmounts\n    ) private view returns (uint256) {\n        uint256 poolAmount = withUpdatedPoolAmounts\n            ? state.gmxVault.poolAmounts(token)\n            : (token == address(state.wbtc) ? state.btcPoolAmount : state.ethPoolAmount);\n\n        uint256 totalSupply = state.glp.totalSupply();\n\n        int128 tokenTraderOIHedge = token == address(state.wbtc) ? state.btcTraderOIHedge : state.ethTraderOIHedge;\n\n        // token reserve is the amount we short\n        // tokenTraderOIHedge if >0 then we need to go long because of OI hence less short (i.e. subtract if value +ve)\n        // tokenTraderOIHedge if <0 then we need to go short because of OI hence more long (i.e. add if value -ve)\n        uint256 tokenReserve = tokenTraderOIHedge > 0\n            ? poolAmount - uint256(int256(tokenTraderOIHedge))\n            : poolAmount + uint256(int256(-tokenTraderOIHedge));\n\n        return tokenReserve.mulDivDown(glpDeposited, totalSupply);\n    }\n\n    ///@notice returns token amount underlying glp amount deposited\n    ///@param state set of all state variables of vault\n    ///@param optimalBorrow optimal borrow amount basis glp deposits\n    ///@param currentBorrow current borrow amount from AAVE\n    ///@return true if the difference is below allowed threshold else false\n    function isWithinAllowedDelta(\n        State storage state,\n        uint256 optimalBorrow,\n        uint256 currentBorrow\n    ) external view returns (bool) {\n        return _isWithinAllowedDelta(state, optimalBorrow, currentBorrow);\n    }\n\n    ///@notice returns token amount underlying glp amount deposited\n    ///@param state set of all state variables of vault\n    ///@param optimalBorrow optimal borrow amount basis glp deposits\n    ///@param currentBorrow current borrow amount from AAVE\n    ///@return true if the difference is below allowed threshold else false\n    function _isWithinAllowedDelta(\n        State storage state,\n        uint256 optimalBorrow,\n        uint256 currentBorrow\n    ) private view returns (bool) {\n        // calcualte the absolute difference between the optimal and current borrows\n        // optimal borrow is what we should borrow from AAVE\n        // curret borrow is what is already borrowed from AAVE\n        uint256 diff = optimalBorrow > currentBorrow ? optimalBorrow - currentBorrow : currentBorrow - optimalBorrow;\n\n        // if absolute diff < threshold return true\n        // if absolute diff > threshold return false\n        return diff <= uint256(state.rebalanceDeltaThresholdBps).mulDivDown(currentBorrow, MAX_BPS);\n    }\n\n    // ISwapRouter internal constant swapRouter = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\n    ///@notice swaps token into usdc\n    ///@param state set of all state variables of vault\n    ///@param token address of token\n    ///@param tokenAmount token amount to be sold\n    ///@param minUsdcAmount minimum amount of usdc required\n    ///@return usdcReceived amount of usdc received on swap\n    ///@return tokensUsed amount of tokens paid for swap\n    function _swapToken(\n        State storage state,\n        address token,\n        uint256 tokenAmount,\n        uint256 minUsdcAmount\n    ) internal returns (uint256 usdcReceived, uint256 tokensUsed) {\n        ISwapRouter swapRouter = state.swapRouter;\n\n        // path of the token swap\n        bytes memory path = token == address(state.weth)\n            ? SwapPath.generate({ tokenIn: state.weth, fee: 500, tokenOut: state.usdc, isExactIn: true })\n            : SwapPath.generate({\n                tokenIn: state.wbtc,\n                feeIn: state.feeTierWethWbtcPool,\n                tokenIntermediate: state.weth,\n                feeOut: 500,\n                tokenOut: state.usdc,\n                isExactIn: true\n            });\n\n        // executes the swap on uniswap pool\n        // exact input swap to convert exact amount of tokens into usdc\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\n            path: path,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountIn: tokenAmount,\n            amountOutMinimum: minUsdcAmount\n        });\n\n        // since exact input swap tokens used = token amount passed\n        tokensUsed = tokenAmount;\n        usdcReceived = swapRouter.exactInput(params);\n\n        emit TokenSwapped(token, address(state.usdc), tokenAmount, usdcReceived);\n    }\n\n    ///@notice swaps usdc into token\n    ///@param state set of all state variables of vault\n    ///@param token address of token\n    ///@param tokenAmount token amount to be bought\n    ///@param maxUsdcAmount maximum amount of usdc that can be sold\n    ///@return usdcPaid amount of usdc paid for swap\n    ///@return tokensReceived amount of tokens received on swap\n    function _swapUSDC(\n        State storage state,\n        address token,\n        uint256 tokenAmount,\n        uint256 maxUsdcAmount\n    ) internal returns (uint256 usdcPaid, uint256 tokensReceived) {\n        ISwapRouter swapRouter = state.swapRouter;\n\n        bytes memory path = token == address(state.weth)\n            ? SwapPath.generate({ tokenIn: state.usdc, fee: 500, tokenOut: state.weth, isExactIn: false })\n            : SwapPath.generate({\n                tokenIn: state.usdc,\n                feeIn: 500,\n                tokenIntermediate: state.weth,\n                feeOut: state.feeTierWethWbtcPool,\n                tokenOut: state.wbtc,\n                isExactIn: false\n            });\n\n        // exact output swap to ensure exact amount of tokens are received\n        ISwapRouter.ExactOutputParams memory params = ISwapRouter.ExactOutputParams({\n            path: path,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountOut: tokenAmount,\n            amountInMaximum: maxUsdcAmount\n        });\n\n        // since exact output swap tokensReceived = tokenAmount passed\n        tokensReceived = tokenAmount;\n        usdcPaid = swapRouter.exactOutput(params);\n\n        emit TokenSwapped(address(state.usdc), token, usdcPaid, tokensReceived);\n    }\n\n    function emitVaultState(State storage state, uint256 eventType) external {\n        (uint256 currentBtc, uint256 currentEth) = _getCurrentBorrows(state);\n\n        uint256 ts = state.glp.totalSupply();\n        uint256 bal = state.fsGlp.balanceOf(address(this));\n\n        emit VaultState(\n            eventType,\n            currentBtc,\n            currentEth,\n            (state.btcPoolAmount * bal) / ts,\n            (state.ethPoolAmount * bal) / ts,\n            (state.btcTraderOIHedge * bal.toInt256()) / ts.toInt256(),\n            (state.ethTraderOIHedge * bal.toInt256()) / ts.toInt256(),\n            _getGlpPriceInUsdc(state, false),\n            bal,\n            _totalAssets(state, false),\n            state.dnUsdcDeposited,\n            state.unhedgedGlpInUsdc,\n            state.aUsdc.balanceOf(address(this)),\n            state.aUsdc.balanceOf(address(state.dnGmxSeniorVault))\n        );\n    }\n}\n"
    },
    "contracts/libraries/FeeSplitStrategy.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity >=0.8.0;\n\nimport { FullMath } from '@uniswap/v3-core/contracts/libraries/FullMath.sol';\n\n/**\n * @title FeeSplitStrategy library\n * @notice Implements the calculation of the eth reward split depending on the utilization of reserve\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE`\n * point of utilization and another from that one to 100%\n * @author adapted from https://github.com/aave/protocol-v2/blob/6f57232358af0fd41d9dcf9309d7a8c0b9aa3912/contracts/protocol/lendingpool/DefaultReserveInterestRateStrategy.sol\n **/\n\nlibrary FeeSplitStrategy {\n    using FullMath for uint128;\n    using FullMath for uint256;\n\n    uint256 internal constant RATE_PRECISION = 1e30;\n\n    struct Info {\n        /**\n         * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\n         * Expressed in ray\n         **/\n        uint128 optimalUtilizationRate;\n        // Base variable borrow rate when Utilization rate = 0. Expressed in ray\n        uint128 baseVariableBorrowRate;\n        // Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\n        uint128 variableRateSlope1;\n        // Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\n        uint128 variableRateSlope2;\n    }\n\n    function getMaxVariableBorrowRate(Info storage feeStrategyInfo) internal view returns (uint256) {\n        return\n            feeStrategyInfo.baseVariableBorrowRate +\n            feeStrategyInfo.variableRateSlope1 +\n            feeStrategyInfo.variableRateSlope2;\n    }\n\n    /**\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\n     * NOTE This function is kept for compatibility with the previous DefaultInterestRateStrategy interface.\n     * New protocol implementation uses the new calculateInterestRates() interface\n     * @param availableLiquidity The liquidity available in the corresponding aToken\n     * @param usedLiquidity The total borrowed from the reserve at a variable rate\n     **/\n    function calculateFeeSplit(\n        Info storage feeStrategy,\n        uint256 availableLiquidity,\n        uint256 usedLiquidity\n    ) internal view returns (uint256 feeSplitRate) {\n        uint256 utilizationRate = usedLiquidity == 0\n            ? 0\n            : usedLiquidity.mulDiv(RATE_PRECISION, availableLiquidity + usedLiquidity);\n\n        uint256 excessUtilizationRate = RATE_PRECISION - feeStrategy.optimalUtilizationRate;\n\n        if (utilizationRate > feeStrategy.optimalUtilizationRate) {\n            uint256 excessUtilizationRateRatio = (utilizationRate - feeStrategy.optimalUtilizationRate).mulDiv(\n                RATE_PRECISION,\n                excessUtilizationRate\n            );\n\n            feeSplitRate =\n                feeStrategy.baseVariableBorrowRate +\n                feeStrategy.variableRateSlope1 +\n                feeStrategy.variableRateSlope2.mulDiv(excessUtilizationRateRatio, RATE_PRECISION);\n        } else {\n            feeSplitRate =\n                feeStrategy.baseVariableBorrowRate +\n                utilizationRate.mulDiv(feeStrategy.variableRateSlope1, feeStrategy.optimalUtilizationRate);\n        }\n    }\n}\n"
    },
    "contracts/libraries/QuoterLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nimport { SafeCast } from '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\nimport { TickMath } from '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport { IUniswapV3Pool } from '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport { IUniswapV3SwapCallback } from '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\nimport { Path } from '@uniswap/v3-periphery/contracts/libraries/Path.sol';\nimport { PoolAddress } from '@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol';\nimport { CallbackValidation } from '@uniswap/v3-periphery/contracts/libraries/CallbackValidation.sol';\n\nimport { Simulate } from './Simulate.sol';\n\n/// @title Provides quotes for swaps\n/// @notice Allows getting the expected amount out or amount in for a given swap without executing the swap\n/// @dev These functions are not gas efficient and should _not_ be called on chain. Instead, optimistically execute\n/// the swap and check the amounts in the callback.\nlibrary QuoterLib {\n    using Path for bytes;\n    using SafeCast for uint256;\n    using Simulate for IUniswapV3Pool;\n\n    address constant factory = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\n\n    function _getPool(address tokenA, address tokenB, uint24 fee) internal pure returns (IUniswapV3Pool) {\n        return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\n    }\n\n    function _decodeFirstPool(\n        bytes memory path,\n        bool exactIn\n    ) internal pure returns (IUniswapV3Pool pool, bool zeroForOne) {\n        (address tokenA, address tokenB, uint24 fee) = path.decodeFirstPool();\n        pool = _getPool(tokenA, tokenB, fee);\n        zeroForOne = exactIn == (tokenA < tokenB);\n    }\n\n    function _quoteExactInputSingle(\n        IUniswapV3Pool pool,\n        bool zeroForOne,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96,\n        Simulate.State memory swapState\n    ) internal view returns (uint256 amountOut) {\n        (int256 amount0, int256 amount1) = pool.simulateSwap(\n            zeroForOne,\n            amountIn.toInt256(),\n            sqrtPriceLimitX96 == 0\n                ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                : sqrtPriceLimitX96,\n            swapState\n        );\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\n    }\n\n    function _quoteExactInput(\n        bytes memory path,\n        uint256 amountIn,\n        Simulate.State[] memory swapStates\n    ) internal view returns (uint256[] memory amounts, Simulate.State[] memory swapStatesEnd) {\n        uint256 i = path.numPools();\n        amounts = new uint256[](i + 1);\n        if (swapStates.length == 0) {\n            swapStates = new Simulate.State[](i);\n        }\n        amounts[i] = amountIn;\n        while (true) {\n            (IUniswapV3Pool pool, bool zeroForOne) = _decodeFirstPool(path, true);\n\n            // the outputs of prior swaps become the inputs to subsequent ones\n            --i;\n            amounts[i] = _quoteExactInputSingle(pool, zeroForOne, amounts[i + 1], 0, swapStates[i]);\n\n            // decide whether to continue or terminate\n            if (i > 0) {\n                path = path.skipToken();\n            } else {\n                break;\n            }\n        }\n        return (amounts, swapStates);\n    }\n\n    function _quoteExactOutputSingle(\n        IUniswapV3Pool pool,\n        bool zeroForOne,\n        uint256 amountOut,\n        uint160 sqrtPriceLimitX96,\n        Simulate.State memory swapState\n    ) internal view returns (uint256 amountIn) {\n        (int256 amount0, int256 amount1) = pool.simulateSwap(\n            zeroForOne,\n            -amountOut.toInt256(),\n            sqrtPriceLimitX96 == 0\n                ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                : sqrtPriceLimitX96,\n            swapState\n        );\n        return zeroForOne ? uint256(amount0) : uint256(amount1);\n    }\n\n    function _quoteExactOutput(\n        bytes memory path,\n        uint256 amountOut,\n        Simulate.State[] memory swapStates\n    ) internal view returns (uint256[] memory amounts, Simulate.State[] memory swapStatesEnd) {\n        uint256 i = path.numPools();\n        amounts = new uint256[](i + 1);\n        if (swapStates.length == 0) {\n            swapStates = new Simulate.State[](i);\n        }\n        amounts[i] = amountOut;\n        while (true) {\n            (IUniswapV3Pool pool, bool zeroForOne) = _decodeFirstPool(path, false);\n\n            // the inputs of prior swaps become the outputs of subsequent ones\n            --i;\n            amounts[i] = _quoteExactOutputSingle(pool, zeroForOne, amounts[i + 1], 0, swapStates[i]);\n\n            // decide whether to continue or terminate\n            if (i > 0) {\n                path = path.skipToken();\n            } else {\n                break;\n            }\n        }\n        return (amounts, swapStates);\n    }\n\n    function _getQuote(\n        int256 tokenAmount,\n        bytes memory swapPath,\n        Simulate.State[] memory swapStates\n    ) internal view returns (int256, int256, Simulate.State[] memory) {\n        if (tokenAmount > 0) {\n            // swap wbtc to usdc\n            (uint256[] memory otherTokenAmounts, Simulate.State[] memory swapStatesEnd) = _quoteExactInput(\n                swapPath,\n                uint256(tokenAmount),\n                swapStates\n            );\n            return (-int256(otherTokenAmounts[0]), int256(otherTokenAmounts[1]), swapStatesEnd); // pool looses usdc hence negative\n        } else if (tokenAmount < 0) {\n            // swap usdc to wbtc\n            (uint256[] memory otherTokenAmounts, Simulate.State[] memory swapStatesEnd) = _quoteExactOutput(\n                swapPath,\n                uint256(-tokenAmount),\n                swapStates\n            );\n            return (int256(otherTokenAmounts[0]), -int256(otherTokenAmounts[1]), swapStatesEnd); // pool gains usdc hence positive\n        } else {\n            return (0, 0, swapStates);\n        }\n    }\n\n    function _quoteCombinedSwap(\n        int256 btcAmountInBtcSwap,\n        int256 ethAmountInEthSwap,\n        bytes memory btcSellPath,\n        bytes memory ethSellPath\n    ) internal view returns (int256 usdcAmountInBtcSwap, int256 usdcAmountInEthSwap) {\n        // btc swap\n        int256 ethAmountInBtcSwap;\n        Simulate.State[] memory swapStates;\n        (usdcAmountInBtcSwap, ethAmountInBtcSwap, swapStates) = _getQuote(\n            btcAmountInBtcSwap,\n            btcSellPath, // WBTC_TO_USDC(state),\n            swapStates\n        );\n\n        // ensure btcAmountInBtcSwap and usdcAmountInBtcSwap are of opposite sign when they are both non-zero\n        assert(\n            btcAmountInBtcSwap == 0 || usdcAmountInBtcSwap == 0 || btcAmountInBtcSwap > 0 != usdcAmountInBtcSwap > 0\n        );\n\n        // eth swap (also accounting for price change in btc swap)\n        Simulate.State[] memory swapStates2 = new Simulate.State[](1);\n        if (ethAmountInBtcSwap != 0) {\n            swapStates2[0] = swapStates[0];\n        }\n        (usdcAmountInEthSwap, , ) = _getQuote(\n            ethAmountInEthSwap,\n            ethSellPath, // WETH_TO_USDC(state),\n            swapStates2\n        );\n\n        // ensure ethAmountInEthSwap and usdcAmountInEthSwap are of opposite sign when they are both non-zero\n        assert(\n            ethAmountInEthSwap == 0 || usdcAmountInEthSwap == 0 || ethAmountInEthSwap > 0 != usdcAmountInEthSwap > 0\n        );\n    }\n\n    function quoteCombinedSwap(\n        int256 btcAmountInBtcSwap,\n        int256 ethAmountInEthSwap,\n        bytes memory btcSellPath,\n        bytes memory ethSellPath\n    ) external view returns (int256 usdcAmountInBtcSwap, int256 usdcAmountInEthSwap) {\n        return _quoteCombinedSwap(btcAmountInBtcSwap, ethAmountInEthSwap, btcSellPath, ethSellPath);\n    }\n}\n"
    },
    "contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\n/// @title safe casting methods\n/// @notice contains methods for safely casting between types\n/// @author adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n */\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint128, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\n        unchecked {\n            /* solhint-disable reason-string */\n            require((z = uint128(y)) == y);\n        }\n    }\n\n    /// @notice Cast a uint256 to a uint128, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        unchecked {\n            /* solhint-disable reason-string */\n            require((z = int128(y)) == y);\n        }\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        unchecked {\n            require(y < 2 ** 255, 'Overflow');\n            z = int256(y);\n        }\n    }\n}\n"
    },
    "contracts/libraries/SignedFixedPointMathLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\nimport { SignedMathUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol';\n\nlibrary SignedFixedPointMathLib {\n    function sign(int256 a) internal pure returns (int256) {\n        return a < 0 ? -1 : int256(1);\n    }\n\n    function mulDivDown(int256 x, uint256 y, uint256 denominator) internal pure returns (int256 z) {\n        int256 _sign = sign(x);\n        z = _sign * int256(FixedPointMathLib.mulDivDown(SignedMathUpgradeable.abs(x), y, denominator));\n        if (_sign < 0) {\n            z--;\n        }\n    }\n}\n"
    },
    "contracts/libraries/Simulate.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nimport { SwapMath } from '@uniswap/v3-core/contracts/libraries/SwapMath.sol';\nimport { SafeCast } from '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\nimport { TickMath } from '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport { TickBitmap } from '@uniswap/v3-core/contracts/libraries/TickBitmap.sol';\nimport { BitMath } from '@uniswap/v3-core/contracts/libraries/BitMath.sol';\n\nimport { IUniswapV3Pool } from '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\n/// @title Library for simulating swaps.\n/// @notice By fully replicating the swap logic, we can make a static call to get a quote.\nlibrary Simulate {\n    using SafeCast for uint256;\n\n    struct Cache {\n        // the lp fee of the pool\n        uint24 fee;\n        // the tick spacing of the pool\n        int24 tickSpacing;\n    }\n\n    struct State {\n        // the amount remaining to be swapped in/out of the input/output asset\n        int256 amountSpecifiedRemaining;\n        // the amount already swapped out/in of the output/input asset\n        int256 amountCalculated;\n        // current sqrt(price)\n        uint160 sqrtPriceX96;\n        // the tick associated with the current price\n        int24 tick;\n        // the current liquidity in range\n        uint128 liquidity;\n    }\n\n    // copied from UniswapV3Pool to avoid pragma issues associated with importing it\n    struct StepComputations {\n        // the price at the beginning of the step\n        uint160 sqrtPriceStartX96;\n        // the next tick to swap to from the current tick in the swap direction\n        int24 tickNext;\n        // whether tickNext is initialized or not\n        bool initialized;\n        // sqrt(price) for the next tick (1/0)\n        uint160 sqrtPriceNextX96;\n        // how much is being swapped in in this step\n        uint256 amountIn;\n        // how much is being swapped out\n        uint256 amountOut;\n        // how much fee is being paid in\n        uint256 feeAmount;\n    }\n\n    function simulateSwap(\n        IUniswapV3Pool pool,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) internal view returns (int256 amount0, int256 amount1) {\n        State memory state;\n        return simulateSwap(pool, zeroForOne, amountSpecified, sqrtPriceLimitX96, state);\n    }\n\n    function simulateSwap(\n        IUniswapV3Pool pool,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        State memory state\n    ) internal view returns (int256 amount0, int256 amount1) {\n        require(amountSpecified != 0, 'AS');\n\n        if (state.sqrtPriceX96 == 0) {\n            (uint160 sqrtPriceX96, int24 tick, , , , , ) = pool.slot0();\n            state.sqrtPriceX96 = sqrtPriceX96;\n            state.tick = tick;\n            state.liquidity = pool.liquidity();\n        }\n\n        require(\n            zeroForOne\n                ? sqrtPriceLimitX96 < state.sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\n                : sqrtPriceLimitX96 > state.sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\n            'SPL'\n        );\n\n        Cache memory cache = Cache({ fee: pool.fee(), tickSpacing: pool.tickSpacing() });\n\n        bool exactInput = amountSpecified > 0;\n\n        state.amountSpecifiedRemaining = amountSpecified;\n        state.amountCalculated = 0;\n\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\n            StepComputations memory step;\n\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\n\n            (step.tickNext, step.initialized) = nextInitializedTickWithinOneWord(\n                pool.tickBitmap,\n                state.tick,\n                cache.tickSpacing,\n                zeroForOne\n            );\n\n            if (step.tickNext < TickMath.MIN_TICK) {\n                step.tickNext = TickMath.MIN_TICK;\n            } else if (step.tickNext > TickMath.MAX_TICK) {\n                step.tickNext = TickMath.MAX_TICK;\n            }\n\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\n\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\n                state.sqrtPriceX96,\n                (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)\n                    ? sqrtPriceLimitX96\n                    : step.sqrtPriceNextX96,\n                state.liquidity,\n                state.amountSpecifiedRemaining,\n                cache.fee\n            );\n\n            if (exactInput) {\n                unchecked {\n                    state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\n                }\n                state.amountCalculated -= step.amountOut.toInt256();\n            } else {\n                unchecked {\n                    state.amountSpecifiedRemaining += step.amountOut.toInt256();\n                }\n                state.amountCalculated += (step.amountIn + step.feeAmount).toInt256();\n            }\n\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\n                if (step.initialized) {\n                    (, int128 liquidityNet, , , , , , ) = pool.ticks(step.tickNext);\n                    unchecked {\n                        if (zeroForOne) liquidityNet = -liquidityNet;\n                    }\n\n                    state.liquidity = liquidityNet < 0\n                        ? state.liquidity - uint128(-liquidityNet)\n                        : state.liquidity + uint128(liquidityNet);\n                }\n\n                unchecked {\n                    state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n                }\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\n            }\n        }\n\n        (amount0, amount1) = zeroForOne == exactInput\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\n    }\n\n    // This function replicates TickBitmap, but accepts a function pointer argument.\n    // It's private because it's messy, and shouldn't be re-used.\n    function nextInitializedTickWithinOneWord(\n        function(int16) external view returns (uint256) self,\n        int24 tick,\n        int24 tickSpacing,\n        bool lte\n    ) private view returns (int24 next, bool initialized) {\n        unchecked {\n            int24 compressed = tick / tickSpacing;\n            if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n            if (lte) {\n                (int16 wordPos, uint8 bitPos) = TickBitmap.position(compressed);\n                // all the 1s at or to the right of the current bitPos\n                uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n                uint256 masked = self(wordPos) & mask;\n\n                // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n                initialized = masked != 0;\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n                next = initialized\n                    ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\n                    : (compressed - int24(uint24(bitPos))) * tickSpacing;\n            } else {\n                // start from the word of the next tick, since the current tick state doesn't matter\n                (int16 wordPos, uint8 bitPos) = TickBitmap.position(compressed + 1);\n                // all the 1s at or to the left of the bitPos\n                uint256 mask = ~((1 << bitPos) - 1);\n                uint256 masked = self(wordPos) & mask;\n\n                // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n                initialized = masked != 0;\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n                next = initialized\n                    ? (compressed + 1 + int24(uint24(BitMath.leastSignificantBit(masked) - bitPos))) * tickSpacing\n                    : (compressed + 1 + int24(uint24(type(uint8).max - bitPos))) * tickSpacing;\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/SwapPath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\n\nlibrary SwapPath {\n    function generate(\n        IERC20Metadata tokenIn,\n        uint24 fee,\n        IERC20Metadata tokenOut,\n        bool isExactIn\n    ) internal pure returns (bytes memory) {\n        if (isExactIn) {\n            return abi.encodePacked(tokenIn, fee, tokenOut);\n        } else {\n            return abi.encodePacked(tokenOut, fee, tokenIn);\n        }\n    }\n\n    function generate(\n        IERC20Metadata tokenIn,\n        uint24 feeIn,\n        IERC20Metadata tokenIntermediate,\n        uint24 feeOut,\n        IERC20Metadata tokenOut,\n        bool isExactIn\n    ) internal pure returns (bytes memory) {\n        if (isExactIn) {\n            return abi.encodePacked(tokenIn, feeIn, tokenIntermediate, feeOut, tokenOut);\n        } else {\n            return abi.encodePacked(tokenOut, feeOut, tokenIntermediate, feeIn, tokenIn);\n        }\n    }\n}\n"
    },
    "contracts/mocks/balancer/BalancerVaultMock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport { IBalancerVault } from '../../interfaces/balancer/IBalancerVault.sol';\nimport { IFlashLoanRecipient } from '../../interfaces/balancer/IFlashLoanRecipient.sol';\n\ncontract BalancerVaultMock is IBalancerVault {\n    using SafeERC20 for IERC20;\n\n    function flashLoan(\n        address recipient,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory userData\n    ) external override {\n        uint256[] memory preLoanBalances = new uint256[](tokens.length);\n        uint256[] memory feeAmounts = new uint256[](tokens.length);\n\n        address previousToken = address(0);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(tokens[i] > previousToken, 'BalancerVaultMock: tokens must be sorted');\n            previousToken = tokens[i];\n\n            preLoanBalances[i] = IERC20(tokens[i]).balanceOf(address(this));\n\n            require(preLoanBalances[i] >= amounts[i], 'BalancerVaultMock: insufficient balance to flashloan');\n            IERC20(tokens[i]).safeTransfer(recipient, amounts[i]);\n            feeAmounts[i] = 0; // fee is zero\n        }\n\n        IFlashLoanRecipient(recipient).receiveFlashLoan(tokens, amounts, feeAmounts, userData);\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 postLoanBalance = IERC20(tokens[i]).balanceOf(address(this));\n\n            require(postLoanBalance >= preLoanBalances[i], 'BalancerVaultMock: amount not returned');\n        }\n    }\n}\n"
    },
    "contracts/mocks/DnGmxJuniorVaultMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\n\nimport { DnGmxJuniorVaultManager } from '../libraries/DnGmxJuniorVaultManager.sol';\nimport { DnGmxJuniorVault } from '../vaults/DnGmxJuniorVault.sol';\n\nimport { FullMath } from '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport { IDnGmxBatchingManager } from '../interfaces/IDnGmxBatchingManager.sol';\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\n\nimport { IERC4626 } from '../interfaces/IERC4626.sol';\nimport { ERC4626Upgradeable } from '../ERC4626/ERC4626Upgradeable.sol';\nimport { SafeCast } from '../libraries/SafeCast.sol';\n\ncontract DnGmxJuniorVaultMock is DnGmxJuniorVault {\n    uint256 internal constant VARIABLE_INTEREST_MODE = 2;\n    IDnGmxBatchingManager batchingManager;\n\n    using SafeCast for uint256;\n    using FullMath for uint256;\n    using FixedPointMathLib for uint256;\n\n    bool useMocks = false;\n\n    using DnGmxJuniorVaultManager for DnGmxJuniorVaultManager.State;\n\n    function dnUsdcDepositedExternal() external view returns (int256) {\n        return state.dnUsdcDeposited;\n    }\n\n    function protocolEsGmx() external view returns (uint256) {\n        return state.protocolEsGmx;\n    }\n\n    function protocolFee() external view returns (uint256) {\n        return state.protocolFee;\n    }\n\n    function withdrawFeeBps() external view returns (uint256) {\n        return state.withdrawFeeBps;\n    }\n\n    function feeBps() external view returns (uint256) {\n        return state.feeBps;\n    }\n\n    function slippageThresholdSwapBtcBps() external view returns (uint256) {\n        return state.slippageThresholdSwapBtcBps;\n    }\n\n    function slippageThresholdSwapEthBps() external view returns (uint256) {\n        return state.slippageThresholdSwapEthBps;\n    }\n\n    function unhedgedGlpInUsdc() external view returns (uint256) {\n        return state.unhedgedGlpInUsdc;\n    }\n\n    function getBorrowValue(uint256 btcAmount, uint256 ethAmount) external view returns (uint256 borrowValue) {\n        return state.getBorrowValue(btcAmount, ethAmount);\n    }\n\n    function rebalanceBeforeShareAllocation() external {\n        return _rebalanceBeforeShareAllocation();\n    }\n\n    function isValidRebalanceTime() external view returns (bool) {\n        return state.isValidRebalanceTime();\n    }\n\n    function isValidRebalanceDeviation() external view returns (bool) {\n        return state.isValidRebalanceDeviation();\n    }\n\n    function isValidRebalanceHF() external view returns (bool) {\n        return state.isValidRebalanceHF();\n    }\n\n    function isValidRebalanceDueToChangeInHedges() external view returns (bool) {\n        return state.isValidRebalanceDueToChangeInHedges();\n    }\n\n    function swapToken(\n        address token,\n        uint256 tokenAmount,\n        uint256 minUsdcAmount\n    ) external returns (uint256 usdcReceived, uint256 tokensUsed) {\n        return state._swapToken(token, tokenAmount, minUsdcAmount);\n    }\n\n    function swapUSDC(\n        address token,\n        uint256 tokenAmount,\n        uint256 maxUsdcAmount\n    ) external returns (uint256 usdcPaid, uint256 tokensReceived) {\n        return state._swapUSDC(token, tokenAmount, maxUsdcAmount);\n    }\n\n    function executeFlashloan(\n        address[] memory assets,\n        uint256[] memory amounts,\n        uint256 _btcTokenAmount,\n        uint256 _btcUsdcAmount,\n        uint256 _ethTokenAmount,\n        uint256 _ethUsdcAmount,\n        bool _repayDebtBtc,\n        bool _repayDebtEth\n    ) external {\n        return\n            state._executeFlashloan(\n                assets,\n                amounts,\n                _btcTokenAmount,\n                _btcUsdcAmount,\n                _ethTokenAmount,\n                _ethUsdcAmount,\n                _repayDebtBtc,\n                _repayDebtEth\n            );\n    }\n\n    function executeBorrow(address token, uint256 amount) external {\n        state.pool.borrow(token, amount, VARIABLE_INTEREST_MODE, 0, address(this));\n    }\n\n    function executeRepay(address token, uint256 amount) external {\n        state.pool.repay(token, amount, VARIABLE_INTEREST_MODE, address(this));\n    }\n\n    function executeSupply(address token, uint256 amount) external {\n        state.pool.supply(token, amount, address(this), 0);\n    }\n\n    function executeWithdraw(address token, uint256 amount) external {\n        state.pool.withdraw(token, amount, address(this));\n    }\n\n    function executeBorrowFromDnGmxSeniorVault(uint256 amount) external {\n        state.dnGmxSeniorVault.borrow(amount);\n    }\n\n    function executeRepayFromDnGmxSeniorVault(uint256 amount) external {\n        state.dnGmxSeniorVault.repay(amount);\n    }\n\n    function executeOperationToken(\n        address token,\n        uint256 tokenAmount,\n        uint256 usdcAmount,\n        uint256 premium,\n        bool repayDebt\n    ) external {\n        return state._executeOperationToken(token, tokenAmount, usdcAmount, premium, repayDebt);\n    }\n\n    function flashloanAmounts(\n        address token,\n        uint256 optimalBorrow,\n        uint256 currentBorrow\n    ) external view returns (uint256 tokenAmount, uint256 usdcAmount, bool repayDebt) {\n        return state.flashloanAmounts(token, optimalBorrow, currentBorrow);\n    }\n\n    function rebalanceProfit(uint256 borrowValue) external {\n        return state.rebalanceProfit(borrowValue);\n    }\n\n    function getLiquidationThreshold(address asset) internal view returns (uint256) {\n        return state.getLiquidationThreshold(asset);\n    }\n\n    function rebalanceBorrow(\n        uint256 optimalBtcBorrow,\n        uint256 currentBtcBorrow,\n        uint256 optimalEthBorrow,\n        uint256 currentEthBorrow\n    ) external {\n        return state.rebalanceBorrow(optimalBtcBorrow, currentBtcBorrow, optimalEthBorrow, currentEthBorrow);\n    }\n\n    function getPriceExternal() external view returns (uint256) {\n        return getPrice(false);\n    }\n\n    function getGlpPriceInUsdc(bool maximize) external view returns (uint256) {\n        return state.getGlpPriceInUsdc(maximize);\n    }\n\n    function getPrice(IERC20Metadata token) external view returns (uint256) {\n        return state.getTokenPrice(token);\n    }\n\n    function getPrice(IERC20Metadata token, bool) external view returns (uint256) {\n        return state.getTokenPriceInUsdc(token);\n    }\n\n    function getOptimalCappedBorrows(\n        uint256 availableBorrowAmount,\n        uint256 usdcLiquidationThreshold\n    ) external view returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) {\n        return state.getOptimalCappedBorrows(availableBorrowAmount, usdcLiquidationThreshold);\n    }\n\n    function getTokenReservesInGlp(\n        address token,\n        uint256 glpDeposited,\n        bool withUpdatedPoolAmounts\n    ) external view returns (uint256) {\n        return state.getTokenReservesInGlp(token, glpDeposited, withUpdatedPoolAmounts);\n    }\n\n    function isWithinAllowedDelta(uint256 optimalBorrow, uint256 currentBorrow) external view returns (bool) {\n        return state.isWithinAllowedDelta(optimalBorrow, currentBorrow);\n    }\n\n    function setPoolAmounts() external {\n        state.btcPoolAmount = (state.gmxVault.poolAmounts(address(state.wbtc))).toUint128();\n        state.ethPoolAmount = (state.gmxVault.poolAmounts(address(state.weth))).toUint128();\n    }\n\n    function rebalanceHedge(uint256 currentBtcBorrow, uint256 currentEthBorrow) external returns (bool) {\n        return state.rebalanceHedge(currentBtcBorrow, currentEthBorrow, totalAssets(), false);\n    }\n\n    function totalAssetsMax() external view returns (uint256) {\n        return state.totalAssets(true);\n    }\n\n    function totalAssetsComponents(\n        bool maximize\n    ) external view returns (uint256 fsGlpBal, uint256 aaveProfitGlp, uint256 aaveLossGlp, uint256 unhedgedGlp) {\n        fsGlpBal = state.fsGlp.balanceOf(address(this));\n\n        int256 dnUsdcDeposited = state.dnUsdcDeposited;\n\n        // calculate current borrow amounts\n        (uint256 currentBtc, uint256 currentEth) = state.getCurrentBorrows();\n\n        // total borrow value is the value of ETH and BTC required to be paid off\n        uint256 totalCurrentBorrowValue = state.getBorrowValue(currentBtc, currentEth);\n\n        uint256 glpPrice = state.getGlpPriceInUsdc(maximize);\n\n        {\n            // convert it into two uints basis the sign\n            uint256 aaveProfit = dnUsdcDeposited > int256(0) ? uint256(dnUsdcDeposited) : 0;\n            uint256 aaveLoss = dnUsdcDeposited < int256(0)\n                ? uint256(-dnUsdcDeposited) + totalCurrentBorrowValue\n                : totalCurrentBorrowValue;\n\n            if (aaveProfit > aaveLoss) {\n                aaveProfitGlp = (aaveProfit - aaveLoss).mulDivDown(PRICE_PRECISION, glpPrice);\n                if (!maximize)\n                    aaveProfitGlp = aaveProfitGlp.mulDivDown(MAX_BPS - state.slippageThresholdGmxBps, MAX_BPS);\n                aaveLossGlp = 0;\n            } else {\n                aaveLossGlp = (aaveLoss - aaveProfit).mulDivDown(PRICE_PRECISION, glpPrice);\n                if (!maximize) aaveLossGlp = aaveLossGlp.mulDivDown(MAX_BPS + state.slippageThresholdGmxBps, MAX_BPS);\n                aaveProfitGlp = 0;\n            }\n        }\n\n        unhedgedGlp = (state.unhedgedGlpInUsdc).mulDivDown(PRICE_PRECISION, state.getGlpPriceInUsdc(!maximize));\n\n        if (!maximize) unhedgedGlp = unhedgedGlp.mulDivDown(MAX_BPS - state.slippageThresholdGmxBps, MAX_BPS);\n    }\n\n    function convertAssetToAUsdc(uint256 usdcAmountDesired) external returns (uint256 usdcAmount) {\n        return state._convertAssetToAUsdc(usdcAmountDesired);\n    }\n\n    function convertAUsdcToAsset(uint256 amount) external {\n        return state._convertAUsdcToAsset(amount);\n    }\n\n    function setMocks(ISwapRouter _swapRouter) external {\n        state.swapRouter = _swapRouter;\n        useMocks = true;\n    }\n\n    function _quoteSwapSlippageLoss(int256 btcAmount, int256 ethAmount) internal view returns (uint256) {\n        uint256 btcPrice = state.getTokenPriceInUsdc(state.wbtc);\n        uint256 ethPrice = state.getTokenPriceInUsdc(state.weth);\n\n        uint256 ethAmt = ethAmount >= 0 ? uint256(ethAmount) : uint256(-ethAmount);\n        uint256 btcAmt = btcAmount >= 0 ? uint256(btcAmount) : uint256(-btcAmount);\n\n        uint256 netUsdc = uint256(btcAmt).mulDiv(btcPrice, PRICE_PRECISION).mulDiv(\n            MAX_BPS - state.slippageThresholdSwapBtcBps,\n            MAX_BPS * 100\n        );\n        netUsdc += uint256(ethAmt).mulDiv(ethPrice, PRICE_PRECISION).mulDiv(\n            MAX_BPS - state.slippageThresholdSwapEthBps,\n            MAX_BPS * 100\n        );\n\n        return netUsdc;\n    }\n\n    function getSlippageAdjustedAssets(uint256 assets, bool isDeposit) public view returns (uint256) {\n        // get change in borrow positions to calculate amount to swap on uniswap\n        (int256 netBtcBorrowChange, int256 netEthBorrowChange) = state.getNetPositionChange(assets, isDeposit);\n\n        uint256 dollarsLostDueToSlippage = useMocks\n            ? _quoteSwapSlippageLoss(netBtcBorrowChange, netEthBorrowChange)\n            : state.quoteSwapSlippageLoss(netBtcBorrowChange, netEthBorrowChange);\n\n        // netSlippage returned is in glp (asset) terms\n        uint256 glpPrice = state.getGlpPriceInUsdc(false);\n        uint256 netSlippage = dollarsLostDueToSlippage.mulDivUp(PRICE_PRECISION, glpPrice);\n\n        // subtract slippage from assets, and calculate shares basis that slippage adjusted asset amount\n        assets -= uint256(netSlippage);\n\n        return assets;\n    }\n\n    function setBatchingManager(IDnGmxBatchingManager _batchingManager) external {\n        batchingManager = _batchingManager;\n        state.weth.approve(address(_batchingManager), type(uint256).max);\n        state.usdc.approve(address(_batchingManager), type(uint256).max);\n    }\n\n    function previewDeposit(uint256 assets) public view override(DnGmxJuniorVault) returns (uint256) {\n        uint256 netAssets = getSlippageAdjustedAssets({ assets: assets, isDeposit: true });\n        return convertToShares(netAssets);\n    }\n\n    /// @notice preview function for minting of shares\n    /// @param shares number of shares to mint\n    /// @return assets that would be taken from the user\n    function previewMint(uint256 shares) public view virtual override(DnGmxJuniorVault) returns (uint256) {\n        uint256 supply = totalSupply();\n\n        if (supply == 0) return shares;\n\n        uint256 assets = convertToAssets(shares);\n        uint256 netAssets = getSlippageAdjustedAssets({ assets: assets, isDeposit: true });\n\n        uint256 slippageInAssetTerms = assets - netAssets;\n\n        return assets + slippageInAssetTerms;\n    }\n\n    /// @notice preview function for withdrawal of assets\n    /// @param assets that would be given to the user\n    /// @return shares that would be burnt\n    function previewWithdraw(uint256 assets) public view virtual override(DnGmxJuniorVault) returns (uint256) {\n        uint256 supply = totalSupply();\n\n        if (supply == 0) return assets;\n\n        uint256 netAssets = getSlippageAdjustedAssets({ assets: assets, isDeposit: false });\n\n        return netAssets.mulDivUp(supply * MAX_BPS, state.totalAssets(false) * (MAX_BPS - state.withdrawFeeBps));\n    }\n\n    /// @notice preview function for redeeming shares\n    /// @param shares that would be taken from the user\n    /// @return assets that user would get\n    function previewRedeem(uint256 shares) public view virtual override(DnGmxJuniorVault) returns (uint256) {\n        uint256 supply = totalSupply();\n\n        if (supply == 0) return shares;\n\n        uint256 assets = convertToAssets(shares);\n        uint256 netAssets = getSlippageAdjustedAssets({ assets: assets, isDeposit: false });\n\n        return netAssets.mulDivDown(MAX_BPS - state.withdrawFeeBps, MAX_BPS);\n    }\n}\n"
    },
    "contracts/mocks/DnGmxSeniorVaultMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { DnGmxSeniorVault } from '../vaults/DnGmxSeniorVault.sol';\n\ncontract DnGmxSeniorVaultMock is DnGmxSeniorVault {\n    function _beforeWithdraw(uint256 assets, uint256 shares, address receiver) external {\n        return beforeWithdraw(assets, shares, receiver);\n    }\n\n    function _afterDeposit(uint256 assets, uint256 shares, address receiver) external {\n        afterDeposit(assets, shares, receiver);\n    }\n}\n"
    },
    "contracts/mocks/FeeSplitStrategyMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { FeeSplitStrategy } from '../libraries/FeeSplitStrategy.sol';\n\ncontract FeeSplitStrategyMock {\n    using FeeSplitStrategy for FeeSplitStrategy.Info;\n\n    FeeSplitStrategy.Info public info;\n\n    function setFeeSplitStrategy(FeeSplitStrategy.Info calldata _info) external {\n        info = _info;\n    }\n\n    function getMaxVariableBorrowRate() external view returns (uint256) {\n        return info.getMaxVariableBorrowRate();\n    }\n\n    function calculateFeeSplit(\n        uint256 availableLiquidity,\n        uint256 usedLiquidity\n    ) external view returns (uint256 feeSplitRate) {\n        feeSplitRate = info.calculateFeeSplit(availableLiquidity, usedLiquidity);\n    }\n}\n"
    },
    "contracts/mocks/QuoterV3Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\n\nimport { DnGmxJuniorVaultManager } from '../libraries/DnGmxJuniorVaultManager.sol';\nimport { SwapPath } from '../libraries/SwapPath.sol';\n\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\nimport { IPoolAddressesProvider } from '@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol';\n\ncontract QuoterV3Mock {\n    using DnGmxJuniorVaultManager for DnGmxJuniorVaultManager.State;\n\n    uint256 internal constant MAX_BPS = 10_000;\n    uint256 internal constant PRICE_PRECISION = 1e30;\n\n    DnGmxJuniorVaultManager.State internal state;\n\n    bytes public USDC_TO_WETH;\n    bytes public USDC_TO_WBTC;\n\n    bytes public USDC_TO_WETH_;\n    bytes public WETH_TO_USDC;\n    bytes public WBTC_TO_USDC;\n\n    uint256 slippageThresholdSwapBtcBps;\n    uint256 slippageThresholdSwapEthBps;\n\n    constructor() {\n        state.feeTierWethWbtcPool = 500;\n\n        state.wbtc = IERC20Metadata(0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f);\n        state.weth = IERC20Metadata(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);\n        state.usdc = IERC20Metadata(0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8);\n\n        USDC_TO_WETH = SwapPath.generate({ tokenIn: state.usdc, fee: 500, tokenOut: state.weth, isExactIn: false });\n        USDC_TO_WETH_ = SwapPath.generate({ tokenIn: state.usdc, fee: 500, tokenOut: state.weth, isExactIn: true });\n        USDC_TO_WBTC = SwapPath.generate({\n            tokenIn: state.usdc,\n            feeIn: 500,\n            tokenIntermediate: state.weth,\n            feeOut: 3000,\n            tokenOut: state.wbtc,\n            isExactIn: false\n        });\n\n        WETH_TO_USDC = SwapPath.generate({ tokenIn: state.weth, fee: 500, tokenOut: state.usdc, isExactIn: true });\n        WBTC_TO_USDC = SwapPath.generate({\n            tokenIn: state.wbtc,\n            feeIn: 3000,\n            tokenIntermediate: state.weth,\n            feeOut: 500,\n            tokenOut: state.usdc,\n            isExactIn: true\n        });\n\n        state.poolAddressProvider = IPoolAddressesProvider(0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb);\n        state.oracle = IPriceOracle(state.poolAddressProvider.getPriceOracle());\n    }\n\n    function setSlippages(uint256 _slippageThresholdSwapBtcBps, uint256 _slippageThresholdSwapEthBps) external {\n        slippageThresholdSwapBtcBps = _slippageThresholdSwapBtcBps;\n        slippageThresholdSwapEthBps = _slippageThresholdSwapEthBps;\n    }\n\n    function quoteExactInput(bytes memory path, uint256 amountIn) external view returns (uint256 amountOut) {\n        uint256 btcPrice = state.getTokenPriceInUsdc(state.wbtc);\n        uint256 ethPrice = state.getTokenPriceInUsdc(state.weth);\n        if (keccak256(path) == keccak256(USDC_TO_WETH_)) {\n            return (amountIn * PRICE_PRECISION * (MAX_BPS - slippageThresholdSwapEthBps)) / MAX_BPS / ethPrice;\n        }\n        return\n            keccak256(path) == keccak256(WETH_TO_USDC)\n                ? (ethPrice * amountIn * (MAX_BPS - slippageThresholdSwapEthBps)) / MAX_BPS / PRICE_PRECISION\n                : (btcPrice * amountIn * (MAX_BPS - slippageThresholdSwapBtcBps)) / MAX_BPS / PRICE_PRECISION;\n    }\n\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external view returns (uint256 amountIn) {\n        uint256 btcPrice = state.getTokenPriceInUsdc(state.wbtc);\n        uint256 ethPrice = state.getTokenPriceInUsdc(state.weth);\n        if (keccak256(path) == keccak256(USDC_TO_WETH_)) {\n            return (amountOut * PRICE_PRECISION * (MAX_BPS + slippageThresholdSwapEthBps)) / MAX_BPS / ethPrice;\n        }\n        return\n            keccak256(path) == keccak256(USDC_TO_WETH)\n                ? (ethPrice * amountOut * (MAX_BPS + slippageThresholdSwapEthBps)) / MAX_BPS / PRICE_PRECISION\n                : (btcPrice * amountOut * (MAX_BPS + slippageThresholdSwapBtcBps)) / MAX_BPS / PRICE_PRECISION;\n    }\n}\n"
    },
    "contracts/mocks/StableSwapMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ncontract StableSwapMock {\n    error SwapNotAllowed();\n    error InsufficientOutput();\n\n    uint256 price; // usd per 1e8 wbtc;\n\n    mapping(uint256 index => IERC20) public coins;\n\n    function setPrice(uint256 _price) external {\n        price = _price;\n    }\n\n    constructor() {\n        // USDT = 0, WBTC = 1, WETH = 2\n        coins[0] = IERC20(0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9);\n        coins[1] = IERC20(0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f);\n        coins[2] = IERC20(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);\n    }\n\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy, bool use_eth) external {\n        if (use_eth) revert SwapNotAllowed();\n        if (!((i == 0 && j == 1) || (i == 1 && j == 0))) revert SwapNotAllowed();\n\n        coins[i].transferFrom(msg.sender, address(this), dx);\n\n        uint256 dy = i == 0 ? (dx * 1e8) / price : (dx * price) / 1e8;\n\n        if (dy < min_dy) revert InsufficientOutput();\n\n        coins[j].transfer(msg.sender, dy);\n    }\n}\n"
    },
    "contracts/mocks/SwapRouterMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\n\nimport { DnGmxJuniorVaultManager } from '../libraries/DnGmxJuniorVaultManager.sol';\nimport { SwapPath } from '../libraries/SwapPath.sol';\n\ncontract SwapRouterMock {\n    address internal constant wbtc = 0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f;\n    address internal constant weth = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;\n    address internal constant usdc = 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8;\n\n    bytes internal USDC_TO_WETH;\n    bytes internal USDC_TO_WBTC;\n\n    bytes internal WETH_TO_USDC;\n    bytes internal WBTC_TO_USDC;\n\n    constructor() {\n        USDC_TO_WETH = SwapPath.generate({\n            tokenIn: IERC20Metadata(usdc),\n            fee: 500,\n            tokenOut: IERC20Metadata(weth),\n            isExactIn: false\n        });\n        USDC_TO_WBTC = SwapPath.generate({\n            tokenIn: IERC20Metadata(usdc),\n            feeIn: 500,\n            tokenIntermediate: IERC20Metadata(weth),\n            feeOut: 500,\n            tokenOut: IERC20Metadata(wbtc),\n            isExactIn: false\n        });\n\n        WETH_TO_USDC = SwapPath.generate({\n            tokenIn: IERC20Metadata(weth),\n            fee: 500,\n            tokenOut: IERC20Metadata(usdc),\n            isExactIn: true\n        });\n        WBTC_TO_USDC = SwapPath.generate({\n            tokenIn: IERC20Metadata(wbtc),\n            feeIn: 500,\n            tokenIntermediate: IERC20Metadata(weth),\n            feeOut: 500,\n            tokenOut: IERC20Metadata(usdc),\n            isExactIn: true\n        });\n    }\n\n    function exactOutputSingle(\n        ISwapRouter.ExactOutputSingleParams calldata params\n    ) external returns (uint256 amountIn) {\n        IERC20(params.tokenIn).transferFrom(msg.sender, address(this), params.amountInMaximum);\n        IERC20(params.tokenOut).transfer(msg.sender, params.amountOut);\n        return params.amountInMaximum;\n    }\n\n    function exactInputSingle(ISwapRouter.ExactInputSingleParams calldata params) external returns (uint256 amountOut) {\n        IERC20(params.tokenIn).transferFrom(msg.sender, address(this), params.amountIn);\n        IERC20(params.tokenOut).transfer(msg.sender, params.amountOutMinimum);\n        return params.amountOutMinimum;\n    }\n\n    function exactOutput(ISwapRouter.ExactOutputParams calldata params) external returns (uint256 amountIn) {\n        address to;\n        address from;\n\n        bytes memory path = params.path;\n\n        if (keccak256(path) == keccak256(USDC_TO_WETH)) {\n            from = usdc;\n            to = weth;\n        } else {\n            from = usdc;\n            to = wbtc;\n        }\n\n        IERC20(from).transferFrom(msg.sender, address(this), params.amountInMaximum);\n        IERC20(to).transfer(msg.sender, params.amountOut);\n        return params.amountInMaximum;\n    }\n\n    function exactInput(ISwapRouter.ExactInputParams calldata params) external returns (uint256 amountOut) {\n        address to;\n        address from;\n\n        bytes memory path = params.path;\n\n        if (keccak256(path) == keccak256(WETH_TO_USDC)) {\n            from = weth;\n            to = usdc;\n        } else {\n            from = wbtc;\n            to = usdc;\n        }\n\n        IERC20(from).transferFrom(msg.sender, address(this), params.amountIn);\n        IERC20(to).transfer(msg.sender, params.amountOutMinimum);\n        return params.amountOutMinimum;\n    }\n}\n"
    },
    "contracts/periphery/BatchingManagerBypass.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IERC4626 } from '../interfaces/IERC4626.sol';\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\nimport { IERC20 } from '@openzeppelin/contracts/interfaces/IERC20.sol';\n\n/**\n * @title batching manager bypass contract\n * @notice it acts as circuit breaker to prevent cooldown on batching manager by receiving sGlp and depositing it into juniorVault\n * @author RageTrade\n **/\n\ncontract BatchingManagerBypass is Ownable {\n    IERC20 internal sGlp;\n    IERC4626 internal juniorVault;\n\n    /// @notice sets the junior vault address, only owner can call this function\n    /// @param _juniorVault address of DnGmxJuniorVault\n    function setJuniorVault(IERC4626 _juniorVault) external onlyOwner {\n        juniorVault = _juniorVault;\n    }\n\n    /// @notice sets the junior staked glp address, only owner can call this function\n    /// @param _sGlp address of StakedGlp\n    function setSglp(IERC20 _sGlp) external onlyOwner {\n        sGlp = _sGlp;\n        sGlp.approve(address(juniorVault), type(uint256).max);\n    }\n\n    /// @notice receives sGlp from batching manager and deposits it into juniorVault\n    /// @param glpAmount amount of staked glp sent by batching manager\n    /// @param receiver address of receiver of juniorVault shares\n    function deposit(uint256 glpAmount, address receiver) external returns (uint256) {\n        return juniorVault.deposit(glpAmount, receiver);\n    }\n}\n"
    },
    "contracts/periphery/DepositPeriphery.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IVault } from '../interfaces/gmx/IVault.sol';\nimport { IGlpManager } from '../interfaces/gmx/IGlpManager.sol';\nimport { ISglpExtended } from '../interfaces/gmx/ISglpExtended.sol';\nimport { IRewardRouterV2 } from '../interfaces/gmx/IRewardRouterV2.sol';\n\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\nimport { IERC20 } from '@openzeppelin/contracts/interfaces/IERC20.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\n\nimport { IDnGmxJuniorVault } from '../interfaces/IDnGmxJuniorVault.sol';\n\nimport { FullMath } from '@uniswap/v3-core/contracts/libraries/FullMath.sol';\n\n/**\n * @title Periphery to convert tokens to junior vault shares\n * @notice uses a fixed max slippage threshold\n * @notice primarily constructed to be used from frontend\n * @author RageTrade\n **/\n\ncontract DepositPeriphery is Ownable {\n    using FullMath for uint256;\n\n    event TokenDeposited(\n        address indexed from,\n        address indexed receiver,\n        address token,\n        uint256 assets,\n        uint256 shares,\n        uint256 tokensSpent\n    );\n\n    event SlippageThresholdUpdated(uint256 newSlippageThreshold);\n\n    event AddressesUpdated(address juniorVault, address rewardRouter);\n\n    uint256 internal constant MAX_BPS = 10_000;\n    // same price precision is used in gmx's Vault (Vault.sol)\n    uint256 internal constant PRICE_PRECISION = 1e30;\n\n    // max allowed slippage threshold (in bps) when sGlp to output token\n    uint256 public slippageThreshold;\n\n    // staked glp\n    ISglpExtended internal sGlp;\n\n    // gmx's Vault (vault.sol) contract\n    IVault internal gmxVault;\n    // gmx's GlpManager (GlpManager.sol), which can burn/mint glp\n    IGlpManager internal glpManager;\n    // gmx's RewardRouterV2 (RewardRouterV2.sol) contract\n    IRewardRouterV2 internal rewardRouter;\n\n    // delta neutral junior tranche\n    IDnGmxJuniorVault internal dnGmxJuniorVault;\n\n    /// @notice sets the maximum slippage threshold to be used for converting glp for asset\n    /// @param _slippageThreshold slippage threshold value in bps\n    function setSlippageThreshold(uint256 _slippageThreshold) external onlyOwner {\n        slippageThreshold = _slippageThreshold;\n        emit SlippageThresholdUpdated(_slippageThreshold);\n    }\n\n    /// @notice sets the required external contract address in order to swap glp for tokens\n    /// @dev only owner call this setter function\n    /// @param _dnGmxJuniorVault junior tranche of delta neutral vault\n    /// @param _rewardRouter reward router v2 of gmx protocol\n    /// @param _glpManager glp manager of gmx protocol\n    function setAddresses(\n        IDnGmxJuniorVault _dnGmxJuniorVault,\n        IRewardRouterV2 _rewardRouter,\n        IGlpManager _glpManager\n    ) external onlyOwner {\n        rewardRouter = _rewardRouter;\n        dnGmxJuniorVault = _dnGmxJuniorVault;\n\n        // query sGlp direclty from junior tranche\n        sGlp = ISglpExtended(dnGmxJuniorVault.asset());\n\n        glpManager = _glpManager;\n\n        // query gmxVault from glpManager\n        gmxVault = IVault(glpManager.vault());\n\n        // give allowance to glpManager to pull & burn sGlp\n        sGlp.approve(address(_dnGmxJuniorVault), type(uint256).max);\n\n        emit AddressesUpdated(address(_dnGmxJuniorVault), address(_rewardRouter));\n    }\n\n    /// @notice allows to use tokens to deposit into junior vault\n    /// @param token input token\n    /// @param receiver address of the receiver\n    /// @param tokenAmount amount of token to deposit\n    /// @return sharesReceived shares received in exchange of token\n    function depositToken(\n        address token,\n        address receiver,\n        uint256 tokenAmount\n    ) external returns (uint256 sharesReceived) {\n        IERC20(token).transferFrom(msg.sender, address(this), tokenAmount);\n\n        uint256 glpReceived = _convertToSglp(token, tokenAmount);\n\n        sharesReceived = dnGmxJuniorVault.deposit(glpReceived, receiver);\n\n        emit TokenDeposited(msg.sender, receiver, token, glpReceived, sharesReceived, tokenAmount);\n    }\n\n    function _convertToSglp(address token, uint256 tokenAmount) internal returns (uint256 glpReceived) {\n        IERC20(token).approve(address(glpManager), tokenAmount);\n\n        uint8 decimals = IERC20Metadata(token).decimals();\n\n        uint256 price = gmxVault.getMinPrice(token);\n\n        // USDG has 18 decimals\n        uint256 minUsdgOut = tokenAmount.mulDiv(\n            price * (MAX_BPS - slippageThreshold) * 10 ** (18 - decimals),\n            PRICE_PRECISION * MAX_BPS\n        );\n\n        // will revert if notional output is less than minUsdgOut\n        glpReceived = rewardRouter.mintAndStakeGlp(token, tokenAmount, minUsdgOut, 0);\n    }\n}\n"
    },
    "contracts/periphery/WithdrawPeriphery.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IVault } from '../interfaces/gmx/IVault.sol';\nimport { IGlpManager } from '../interfaces/gmx/IGlpManager.sol';\nimport { ISglpExtended } from '../interfaces/gmx/ISglpExtended.sol';\nimport { IRewardRouterV2 } from '../interfaces/gmx/IRewardRouterV2.sol';\n\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\nimport { IERC20 } from '@openzeppelin/contracts/interfaces/IERC20.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\n\nimport { IDnGmxJuniorVault } from '../interfaces/IDnGmxJuniorVault.sol';\n\nimport { FullMath } from '@uniswap/v3-core/contracts/libraries/FullMath.sol';\n\n/**\n * @title Periphery to convert junior vault shares to tokens\n * @notice uses a fixed max slippage threshold\n * @notice primarily constructed to be used from frontend\n * @author RageTrade\n **/\n\ncontract WithdrawPeriphery is Ownable {\n    using FullMath for uint256;\n\n    event TokenWithdrawn(\n        address indexed from,\n        address indexed receiver,\n        address token,\n        uint256 assets,\n        uint256 shares,\n        uint256 tokensReceived\n    );\n\n    event TokenRedeemed(\n        address indexed from,\n        address indexed receiver,\n        address token,\n        uint256 assets,\n        uint256 shares,\n        uint256 tokensReceived\n    );\n\n    event SlippageThresholdUpdated(uint256 newSlippageThreshold);\n\n    event AddressesUpdated(address juniorVault, address rewardRouter);\n\n    uint256 internal constant MAX_BPS = 10_000;\n    // same price precision is used in gmx's Vault (Vault.sol)\n    uint256 internal constant PRICE_PRECISION = 1e30;\n\n    // max allowed slippage threshold (in bps) when sGlp to output token\n    uint256 public slippageThreshold;\n\n    // gmx's Glp (requird to query totalSupply)\n    IERC20 internal glp;\n    // staked glp tracker is requred to query balanceOf staked glp\n    // since staked glp returns 0 when balanceOf is called on it\n    IERC20 internal fsGlp;\n    // staked glp\n    ISglpExtended internal sGlp;\n\n    // gmx's Vault (vault.sol) contract\n    IVault internal gmxVault;\n    // gmx's GlpManager (GlpManager.sol), which can burn/mint glp\n    IGlpManager internal glpManager;\n    // gmx's RewardRouterV2 (RewardRouterV2.sol) contract\n    IRewardRouterV2 internal rewardRouter;\n\n    // delta neutral junior tranche\n    IDnGmxJuniorVault internal dnGmxJuniorVault;\n\n    /// @notice sets the maximum slippage threshold to be used for converting glp for asset\n    /// @param _slippageThreshold slippage threshold value in bps\n    function setSlippageThreshold(uint256 _slippageThreshold) external onlyOwner {\n        slippageThreshold = _slippageThreshold;\n        emit SlippageThresholdUpdated(_slippageThreshold);\n    }\n\n    /// @notice sets the required external contract address in order to swap glp for tokens\n    /// @dev only owner call this setter function\n    /// @param _dnGmxJuniorVault junior tranche of delta neutral vault\n    /// @param _rewardRouter reward router v2 of gmx protocol\n    function setAddresses(IDnGmxJuniorVault _dnGmxJuniorVault, IRewardRouterV2 _rewardRouter) external onlyOwner {\n        dnGmxJuniorVault = _dnGmxJuniorVault;\n\n        // query sGlp direclty from junior tranche\n        sGlp = ISglpExtended(dnGmxJuniorVault.asset());\n\n        // query glp from sGlp\n        glp = IERC20(sGlp.glp());\n        // query sGlp direclty from junior tranche\n        fsGlp = IERC20(sGlp.stakedGlpTracker());\n\n        rewardRouter = _rewardRouter;\n        // query glpManager from sGlp\n        glpManager = IGlpManager(rewardRouter.glpManager());\n\n        // query gmxVault from glpManager\n        gmxVault = IVault(glpManager.vault());\n\n        // give allowance to glpManager to pull & burn sGlp\n        sGlp.approve(address(glpManager), type(uint256).max);\n\n        emit AddressesUpdated(address(_dnGmxJuniorVault), address(_rewardRouter));\n    }\n\n    /// @notice allows to withdraw junior vault shares to any token available on gmx\n    /// @param token output token\n    /// @param receiver address of the receiver\n    /// @param sGlpAmount amount of sGLP(asset) to withdraw\n    /// @return amountOut tokens received in exchange of glp\n    function withdrawToken(address token, address receiver, uint256 sGlpAmount) external returns (uint256 amountOut) {\n        // user has approved periphery to use junior vault shares\n        uint256 shares = dnGmxJuniorVault.withdraw(sGlpAmount, address(this), msg.sender);\n\n        amountOut = _convertToToken(token, receiver);\n\n        emit TokenWithdrawn(msg.sender, receiver, token, sGlpAmount, shares, amountOut);\n    }\n\n    /// @notice allows to redeem junior vault shares to any token available on gmx\n    /// @param token output token\n    /// @param receiver address of the receiver\n    /// @param sharesAmount amount of shares to burn\n    /// @return amountOut tokens received in exchange of glp\n    function redeemToken(address token, address receiver, uint256 sharesAmount) external returns (uint256 amountOut) {\n        // user has approved periphery to use junior vault shares\n        uint256 assets = dnGmxJuniorVault.redeem(sharesAmount, address(this), msg.sender);\n\n        amountOut = _convertToToken(token, receiver);\n\n        emit TokenRedeemed(msg.sender, receiver, token, assets, sharesAmount, amountOut);\n    }\n\n    function _convertToToken(address token, address receiver) internal returns (uint256 amountOut) {\n        // this value should be whatever glp is received by calling withdraw/redeem to junior vault\n        uint256 outputGlp = fsGlp.balanceOf(address(this));\n\n        // using min price of glp because giving in glp\n        uint256 glpPrice = _getGlpPrice(false);\n        // using max price of token because taking token out of gmx\n        uint256 tokenPrice = gmxVault.getMaxPrice(token);\n\n        // apply slippage threshold on top of estimated output amount\n        uint256 minTokenOut = outputGlp.mulDiv(\n            glpPrice * (MAX_BPS - slippageThreshold) * 10 ** (IERC20Metadata(token).decimals() - 6),\n            tokenPrice * MAX_BPS\n        );\n\n        // will revert if atleast minTokenOut is not received\n        amountOut = rewardRouter.unstakeAndRedeemGlp(address(token), outputGlp, minTokenOut, receiver);\n    }\n\n    function _getGlpPrice(bool maximize) private view returns (uint256) {\n        // aum is in 1e30\n        uint256 aum = glpManager.getAum(maximize);\n        // totalSupply is in 1e18\n        uint256 totalSupply = glp.totalSupply();\n\n        // price per glp token = (total AUM / total supply)\n        // div by 1e24 because of usdc unit (30 - 6)\n        return aum.mulDiv(PRICE_PRECISION, totalSupply * 1e24);\n    }\n}\n"
    },
    "contracts/test/DnGmxJuniorVaultManagerTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\n\nimport '../libraries/DnGmxJuniorVaultManager.sol';\n\ncontract DnGmxJuniorVaultManagerTest {\n    DnGmxJuniorVaultManager.State state;\n\n    constructor(IERC20Metadata usdc, IERC20Metadata weth, IERC20Metadata wbtc) {\n        state.usdc = usdc;\n        state.weth = weth;\n        state.wbtc = wbtc;\n\n        state.feeTierWethWbtcPool = 3000;\n        state.oracle = IPriceOracle(0xb56c2F0B653B2e0b10C9b928C8580Ac5Df02C7C7);\n    }\n\n    function quoteSwapSlippageLoss(int256 btcAmountInBtcSwap, int256 ethAmountInEthSwap) public view returns (uint256) {\n        return DnGmxJuniorVaultManager._quoteSwapSlippageLoss(state, btcAmountInBtcSwap, ethAmountInEthSwap);\n    }\n\n    function getTokenPriceInUsdc(IERC20Metadata token) external view returns (uint256 scaledPrice) {\n        return DnGmxJuniorVaultManager._getTokenPriceInUsdc(state, token);\n    }\n\n    function USDC_TO_WETH() public view returns (bytes memory) {\n        return SwapPath.generate({ tokenIn: state.usdc, fee: 500, tokenOut: state.weth, isExactIn: true });\n    }\n\n    function WETH_TO_USDC() public view returns (bytes memory) {\n        return SwapPath.generate({ tokenIn: state.weth, fee: 500, tokenOut: state.usdc, isExactIn: true });\n    }\n\n    function USDC_TO_WBTC() public view returns (bytes memory) {\n        return\n            SwapPath.generate({\n                tokenIn: state.wbtc,\n                feeIn: state.feeTierWethWbtcPool,\n                tokenIntermediate: state.weth,\n                feeOut: 500,\n                tokenOut: state.usdc,\n                isExactIn: true\n            });\n    }\n\n    function WBTC_TO_USDC() public view returns (bytes memory) {\n        return\n            SwapPath.generate({\n                tokenIn: state.wbtc,\n                feeIn: state.feeTierWethWbtcPool,\n                tokenIntermediate: state.weth,\n                feeOut: 500,\n                tokenOut: state.usdc,\n                isExactIn: true\n            });\n    }\n}\n"
    },
    "contracts/test/DnGmxTraderHedgeStrategyTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport '../vaults/DnGmxTraderHedgeStrategy.sol';\n\ncontract DnGmxTraderHedgeStrategyTest is DnGmxTraderHedgeStrategy {\n    function getTokenHedgeAmount(address token, uint16 _traderOIHedgeBps) external view returns (int256) {\n        return _getTokenHedgeAmount(token, _traderOIHedgeBps);\n    }\n\n    function checkHedgeAmounts(int128 _btcTraderOIHedge, int128 _ethTraderOIHedge) external view returns (bool) {\n        return _checkHedgeAmounts(_btcTraderOIHedge, _ethTraderOIHedge);\n    }\n\n    function checkTokenHedgeAmount(int256 tokenTraderOIHedge, int256 tokenTraderOIMax) external pure returns (bool) {\n        return _checkTokenHedgeAmount(tokenTraderOIHedge, tokenTraderOIMax);\n    }\n\n    function getMaxTokenHedgeAmount(address token) external view returns (int256) {\n        return _getMaxTokenHedgeAmount(token);\n    }\n}\n"
    },
    "contracts/test/QuoterLibTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\n\nimport { DnGmxJuniorVaultManager } from '../libraries/DnGmxJuniorVaultManager.sol';\nimport '../libraries/QuoterLib.sol';\nimport '../libraries/SwapPath.sol';\n\ncontract QuoterLibTest {\n    DnGmxJuniorVaultManager.State state;\n\n    constructor(IERC20Metadata usdc, IERC20Metadata weth, IERC20Metadata wbtc) {\n        state.usdc = usdc;\n        state.weth = weth;\n        state.wbtc = wbtc;\n\n        state.feeTierWethWbtcPool = 3000;\n        state.oracle = IPriceOracle(0xb56c2F0B653B2e0b10C9b928C8580Ac5Df02C7C7);\n    }\n\n    function getQuote(int256 tokenAmount, bytes memory swapPath) public view returns (int256 otherTokenAmount) {\n        Simulate.State[] memory states;\n        (otherTokenAmount, , ) = QuoterLib._getQuote(tokenAmount, swapPath, states);\n    }\n\n    function quoteCombinedSwap(\n        int256 btcAmountInBtcSwap,\n        int256 ethAmountInEthSwap\n    ) public view returns (int256 usdcAmountInBtcSwap, int256 usdcAmountInEthSwap) {\n        return QuoterLib._quoteCombinedSwap(btcAmountInBtcSwap, ethAmountInEthSwap, WBTC_TO_USDC(), WETH_TO_USDC());\n    }\n\n    function getTokenPriceInUsdc(IERC20Metadata token) external view returns (uint256 scaledPrice) {\n        return DnGmxJuniorVaultManager._getTokenPriceInUsdc(state, token);\n    }\n\n    function USDC_TO_WETH() public view returns (bytes memory) {\n        return SwapPath.generate({ tokenIn: state.usdc, fee: 500, tokenOut: state.weth, isExactIn: true });\n    }\n\n    function WETH_TO_USDC() public view returns (bytes memory) {\n        return SwapPath.generate({ tokenIn: state.weth, fee: 500, tokenOut: state.usdc, isExactIn: true });\n    }\n\n    function USDC_TO_WBTC() public view returns (bytes memory) {\n        return\n            SwapPath.generate({\n                tokenIn: state.usdc,\n                feeIn: 500,\n                tokenIntermediate: state.weth,\n                feeOut: state.feeTierWethWbtcPool,\n                tokenOut: state.wbtc,\n                isExactIn: true\n            });\n    }\n\n    function WBTC_TO_USDC() public view returns (bytes memory) {\n        return\n            SwapPath.generate({\n                tokenIn: state.wbtc,\n                feeIn: state.feeTierWethWbtcPool,\n                tokenIntermediate: state.weth,\n                feeOut: 500,\n                tokenOut: state.usdc,\n                isExactIn: true\n            });\n    }\n}\n"
    },
    "contracts/test/SafeCastTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport '../libraries/SafeCast.sol';\n\ncontract SafeCastTest {\n    function toUint128(uint256 y) public pure returns (uint128 z) {\n        return SafeCast.toUint128(y);\n    }\n\n    function toInt128(int256 y) public pure returns (int128 z) {\n        return SafeCast.toInt128(y);\n    }\n\n    function toInt256(uint256 y) public pure returns (int256 z) {\n        return SafeCast.toInt256(y);\n    }\n}\n"
    },
    "contracts/test/SwapPathTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport '../libraries/SwapPath.sol';\n\ncontract SwapPathTest {\n    function generate1(\n        IERC20Metadata tokenIn,\n        uint24 fee,\n        IERC20Metadata tokenOut,\n        bool isExactIn\n    ) external pure returns (bytes memory) {\n        return SwapPath.generate(tokenIn, fee, tokenOut, isExactIn);\n    }\n\n    function generate2(\n        IERC20Metadata tokenIn,\n        uint24 feeIn,\n        IERC20Metadata tokenIntermediate,\n        uint24 feeOut,\n        IERC20Metadata tokenOut,\n        bool isExactIn\n    ) external pure returns (bytes memory) {\n        return SwapPath.generate(tokenIn, feeIn, tokenIntermediate, feeOut, tokenOut, isExactIn);\n    }\n}\n"
    },
    "contracts/vaults/DnGmxBatchingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\n\nimport { FullMath } from '@uniswap/v3-core/contracts/libraries/FullMath.sol';\n\nimport { IDnGmxJuniorVault } from '../interfaces/IDnGmxJuniorVault.sol';\nimport { IDnGmxBatchingManager } from '../interfaces/IDnGmxBatchingManager.sol';\nimport { IGlpManager } from '../interfaces/gmx/IGlpManager.sol';\nimport { IRewardRouterV2 } from '../interfaces/gmx/IRewardRouterV2.sol';\nimport { IVault } from '../interfaces/gmx/IVault.sol';\n\nimport { IBatchingManagerBypass } from '../interfaces/IBatchingManagerBypass.sol';\n\nimport { SafeCast } from '../libraries/SafeCast.sol';\n\n/**\n * @title Batching Manager to avoid glp transfer cooldown\n * @notice batches the incoming deposit token deposits after converting them to glp\n * @notice It is upgradable contract (via TransparentUpgradeableProxy proxy owned by ProxyAdmin)\n * @author RageTrade\n **/\n\ncontract DnGmxBatchingManager is IDnGmxBatchingManager, OwnableUpgradeable, PausableUpgradeable {\n    using FullMath for uint256;\n    using FullMath for uint128;\n    using SafeCast for uint256;\n\n    struct VaultBatchingState {\n        // round indentifier\n        uint256 currentRound;\n        // !!! roundGlpDepositPending is deprecated !!!\n        uint256 roundGlpDepositPending;\n        // junior vault shares minted in current round\n        uint256 roundSharesMinted;\n        // amount of sGlp received in current round\n        uint256 roundGlpStaked;\n        // amount of usdc recieved in current round\n        uint256 roundUsdcBalance;\n        // stores junior vault shares accumulated for user\n        mapping(address user => UserDeposit) userDeposits;\n        // stores total glp received in a given round\n        mapping(uint256 roundId => RoundDeposit) roundDeposits;\n    }\n\n    uint256 private constant MAX_BPS = 10_000;\n\n    // keeper can be EOA or smart contracts which executes stake and batch\n    address public keeper;\n    // delta neutral junior tranche\n    IDnGmxJuniorVault public dnGmxJuniorVault;\n\n    // max allowed slippage threshold (in bps) when converting usdc to sGlp\n    uint256 public slippageThresholdGmxBps;\n    // accumulator to keep track of sGlp direclty (as a means of compounding) send by junior vault\n    uint256 public dnGmxJuniorVaultGlpBalance;\n\n    uint256 public depositCap;\n\n    // !!! previously this variable was glpDepositPendingThreshold\n    // re-using same storage slot for storing threshold on usdc (instead of glp compared to previous version)\n    uint256 public minUsdcConversionAmount;\n\n    // staked glp\n    IERC20 private sGlp;\n    // usdc\n    IERC20 private usdc;\n\n    // gmx's GlpManager (GlpManager.sol), which can burn/mint glp\n    IGlpManager private glpManager;\n    // gmx's Vault (vault.sol) contract\n    IVault private gmxUnderlyingVault;\n    // gmx's RewardRouterV2 (RewardRouterV2.sol) contract\n    IRewardRouterV2 private rewardRouter;\n\n    // batching manager bypass contract !!! deprecated !!!\n    IBatchingManagerBypass private bypass;\n\n    // batching manager's state\n    VaultBatchingState public vaultBatchingState;\n\n    // wrapped eth\n    IERC20 private weth;\n\n    // gmx's reward router used for harvesting rewards\n    IRewardRouterV2 private rewardsHarvestingRouter;\n\n    // these gaps are added to allow adding new variables without shifting down inheritance chain\n    uint256[48] private __gaps;\n\n    /// @dev ensures caller is junior vault\n    modifier onlyDnGmxJuniorVault() {\n        if (msg.sender != address(dnGmxJuniorVault)) revert CallerNotVault();\n        _;\n    }\n\n    /// @dev ensures caller is keeper\n    modifier onlyKeeper() {\n        if (msg.sender != keeper) revert CallerNotKeeper();\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            INIT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice initializes the proxy state\n    /// @dev this function is supposed to be called only once\n    /// @param _sGlp address of staked glp\n    /// @param _usdc address of usdc\n    /// @param _rewardRouter gmx protocol's reward router v2\n    /// @param _dnGmxJuniorVault address of delta neutral junior tranche\n    function initialize(\n        IERC20 _sGlp,\n        IERC20 _usdc,\n        IRewardRouterV2 _rewardRouter,\n        IGlpManager _glpManager,\n        address _dnGmxJuniorVault,\n        address _keeper\n    ) external initializer {\n        __Ownable_init();\n        __Pausable_init();\n        __GMXBatchingManager_init(_sGlp, _usdc, _rewardRouter, _glpManager, _dnGmxJuniorVault, _keeper);\n    }\n\n    /* solhint-disable-next-line func-name-mixedcase */\n    function __GMXBatchingManager_init(\n        IERC20 _sGlp,\n        IERC20 _usdc,\n        IRewardRouterV2 _rewardRouter,\n        IGlpManager _glpManager,\n        address _dnGmxJuniorVault,\n        address _keeper\n    ) internal onlyInitializing {\n        sGlp = _sGlp;\n        usdc = _usdc;\n        glpManager = _glpManager;\n        rewardRouter = _rewardRouter;\n\n        gmxUnderlyingVault = IVault(glpManager.vault());\n        dnGmxJuniorVault = IDnGmxJuniorVault(_dnGmxJuniorVault);\n\n        keeper = _keeper;\n        emit KeeperUpdated(_keeper);\n\n        vaultBatchingState.currentRound = 1;\n    }\n\n    /// @notice grants the allowance to the vault to pull sGLP (via safeTransfer from in vault.deposit)\n    /// @dev allowance is granted while vault is added via addVault, this is only failsafe if that allowance is exhausted\n    function grantAllowances() external onlyOwner {\n        sGlp.approve(address(dnGmxJuniorVault), type(uint256).max);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             ADMIN SETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice sets the keeper address (to pause & unpause deposits)\n    /// @param _keeper address of keeper\n    function setKeeper(address _keeper) external onlyOwner {\n        keeper = _keeper;\n        emit KeeperUpdated(_keeper);\n    }\n\n    function setParamsV1(address _weth, address _rewardsHarvestingRouter) external onlyOwner {\n        weth = IERC20(_weth);\n        rewardsHarvestingRouter = IRewardRouterV2(_rewardsHarvestingRouter);\n        emit ParamsV1Updated(_rewardsHarvestingRouter, _weth);\n    }\n\n    /// @notice sets the slippage (in bps) to use while staking on gmx\n    /// @param _slippageThresholdGmxBps slippage (in bps)\n    function setThresholds(uint256 _slippageThresholdGmxBps, uint256 _minUsdcConversionAmount) external onlyOwner {\n        slippageThresholdGmxBps = _slippageThresholdGmxBps;\n        minUsdcConversionAmount = _minUsdcConversionAmount;\n        emit ThresholdsUpdated(_slippageThresholdGmxBps, _minUsdcConversionAmount);\n    }\n\n    function setDepositCap(uint256 _depositCap) external onlyOwner {\n        depositCap = _depositCap;\n        emit DepositCapUpdated(_depositCap);\n    }\n\n    /// @notice pauses deposits (to prevent DOS due to GMX 15 min cooldown)\n    function pauseDeposit() external onlyKeeper {\n        _pause();\n    }\n\n    /// @notice unpauses the deposit function\n    function unpauseDeposit() external onlyKeeper {\n        _unpause();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            PROTOCOL FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function depositUsdc(uint256 amount, address receiver) external whenNotPaused {\n        // revert for zero values\n        if (amount == 0) revert InvalidInput(0x21);\n        if (receiver == address(0)) revert InvalidInput(0x22);\n\n        // revert if deposit amount is too low,\n        // such that it would revert while converting to glp if it was only deposit in batch\n        if (amount < minUsdcConversionAmount) revert InvalidInput(0x23);\n\n        if (vaultBatchingState.roundUsdcBalance + amount > depositCap) revert DepositCapBreached();\n\n        // user gives approval to batching manager to spend usdc\n        usdc.transferFrom(msg.sender, address(this), amount);\n\n        UserDeposit storage userDeposit = vaultBatchingState.userDeposits[receiver];\n        uint128 userUsdcBalance = userDeposit.usdcBalance;\n\n        // Convert previous round usdc balance into unredeemed shares\n        uint256 userDepositRound = userDeposit.round;\n        if (userDepositRound < vaultBatchingState.currentRound && userUsdcBalance > 0) {\n            // update user's unclaimed shares with previous executed batch\n            RoundDeposit storage roundDeposit = vaultBatchingState.roundDeposits[userDepositRound];\n            userDeposit.unclaimedShares += userDeposit\n                .usdcBalance\n                .mulDiv(roundDeposit.totalShares, roundDeposit.totalUsdc)\n                .toUint128();\n            userUsdcBalance = 0;\n        }\n\n        // Update round and usdc balance for current round\n        userDeposit.round = vaultBatchingState.currentRound;\n        userDeposit.usdcBalance = userUsdcBalance + amount.toUint128();\n        vaultBatchingState.roundUsdcBalance += amount.toUint128();\n\n        emit DepositToken(vaultBatchingState.currentRound, address(usdc), receiver, amount, 0);\n    }\n\n    function executeBatch(uint128 usdcAmountToConvert) external onlyKeeper {\n        if (!paused()) _pause();\n\n        if (usdcAmountToConvert == 0) revert InvalidInput(0x40);\n\n        (uint128 glpReceived, uint128 usdcUsed) = _executeVaultUserBatchStake(usdcAmountToConvert);\n\n        uint128 sharesReceived = _executeVaultUserBatchDeposit(glpReceived);\n        uint128 usdcRemainingInRound = vaultBatchingState.roundUsdcBalance.toUint128();\n\n        vaultBatchingState.roundDeposits[vaultBatchingState.currentRound].totalUsdc += usdcUsed;\n        vaultBatchingState.roundDeposits[vaultBatchingState.currentRound].totalShares += sharesReceived;\n\n        // move current round to roundDeposits and reset state variables when batch is executed\n        if (usdcRemainingInRound == 0) {\n            emit BatchDeposit(\n                vaultBatchingState.currentRound,\n                vaultBatchingState.roundDeposits[vaultBatchingState.currentRound].totalUsdc,\n                vaultBatchingState.roundGlpStaked,\n                vaultBatchingState.roundSharesMinted\n            );\n\n            // reset curret round's bal and increase round id\n            vaultBatchingState.roundGlpStaked = 0;\n            vaultBatchingState.roundSharesMinted = 0;\n            ++vaultBatchingState.currentRound;\n\n            // unpause when batch is executed\n            _unpause();\n        }\n    }\n\n    /// @notice claim the shares received from depositing batch\n    /// @param receiver address of receiver\n    /// @param amount amount of shares\n    function claim(address receiver, uint256 amount) external {\n        _claim(msg.sender, receiver, amount);\n    }\n\n    function claimAndRedeem(address receiver) external returns (uint256 glpReceived) {\n        // claimed shares would be transfered back to msg.sender and later user's complete balance is pulled\n        _claim(msg.sender, msg.sender, unclaimedShares(msg.sender));\n\n        uint256 shares = dnGmxJuniorVault.balanceOf(msg.sender);\n        if (shares == 0) return 0;\n\n        // withdraw all shares from user\n        // user should have given approval to batching manager to spend dnGmxJuniorVault shares\n        glpReceived = dnGmxJuniorVault.redeem(shares, receiver, msg.sender);\n\n        emit ClaimedAndRedeemed(msg.sender, receiver, shares, glpReceived);\n    }\n\n    function rescueFees() external onlyOwner {\n        rewardsHarvestingRouter.handleRewards({\n            shouldClaimGmx: false,\n            shouldStakeGmx: false,\n            shouldClaimEsGmx: true,\n            shouldStakeEsGmx: true,\n            shouldStakeMultiplierPoints: true,\n            shouldClaimWeth: true,\n            shouldConvertWethToEth: false\n        });\n\n        uint256 wethHarvested = weth.balanceOf(address(this));\n\n        uint256 price = gmxUnderlyingVault.getMinPrice(address(weth));\n\n        uint256 usdgAmount = wethHarvested.mulDiv(price * (MAX_BPS - slippageThresholdGmxBps), 1e30 * MAX_BPS);\n\n        uint256 glpReceived = _stakeGlp(address(weth), wethHarvested, usdgAmount);\n\n        sGlp.transfer(address(dnGmxJuniorVault), glpReceived);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                GETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice gets the current active round\n    function currentRound() external view returns (uint256) {\n        return vaultBatchingState.currentRound;\n    }\n\n    /// @notice get the usdc balance for a given vault and account address\n    /// @param account address of user\n    function usdcBalance(address account) public view returns (uint256 balance) {\n        balance = vaultBatchingState.userDeposits[account].usdcBalance;\n    }\n\n    /// @notice get the unclaimed shares for a given vault and account address\n    /// @param account address of user\n    function unclaimedShares(address account) public view returns (uint256 shares) {\n        UserDeposit memory userDeposit = vaultBatchingState.userDeposits[account];\n        shares = userDeposit.unclaimedShares;\n\n        if (userDeposit.round < vaultBatchingState.currentRound && userDeposit.usdcBalance > 0) {\n            RoundDeposit memory roundDeposit = vaultBatchingState.roundDeposits[userDeposit.round];\n            shares += userDeposit.usdcBalance.mulDiv(roundDeposit.totalShares, roundDeposit.totalUsdc).toUint128();\n        }\n    }\n\n    /// @notice get the usdc balance for current active round\n    function roundUsdcBalance() external view returns (uint256) {\n        return vaultBatchingState.roundUsdcBalance;\n    }\n\n    /// @notice get the usdc balance for current active round\n    function roundGlpStaked() external view returns (uint256) {\n        return vaultBatchingState.roundGlpStaked;\n    }\n\n    function roundGlpDepositPending() external view returns (uint256) {\n        return vaultBatchingState.roundGlpDepositPending;\n    }\n\n    function roundSharesMinted() external view returns (uint256) {\n        return vaultBatchingState.roundSharesMinted;\n    }\n\n    /// @notice get the vaultBatchingState of user deposits\n    /// @param account address of user\n    function userDeposits(address account) external view returns (UserDeposit memory) {\n        return vaultBatchingState.userDeposits[account];\n    }\n\n    /// @notice get the info for given vault and round\n    /// @param round address of user\n    function roundDeposits(uint256 round) external view returns (RoundDeposit memory) {\n        return vaultBatchingState.roundDeposits[round];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             INTERNAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _stakeGlp(address token, uint256 amount, uint256 minUSDG) internal returns (uint256 glpStaked) {\n        // swap token to obtain sGLP\n        IERC20(token).approve(address(glpManager), amount);\n        // will revert if notional output is less than minUSDG\n        glpStaked = rewardRouter.mintAndStakeGlp(token, amount, minUSDG, 0);\n    }\n\n    function _executeVaultUserBatchStake(\n        uint128 usdcAmountToConvert\n    ) internal returns (uint128 _roundGlpStaked, uint128 _usdcToConvert) {\n        uint128 _roundUsdcBalance = vaultBatchingState.roundUsdcBalance.toUint128();\n\n        _usdcToConvert = usdcAmountToConvert < _roundUsdcBalance ? usdcAmountToConvert : _roundUsdcBalance;\n\n        if (_usdcToConvert == 0) revert NoUsdcBalance();\n\n        // ensure we are atleast swapping minUsdcConversionAmount units of usdc\n        //\n        // here, _roundUsdcBalance will be always >= _usdcToConvert, because:\n        // 1) when swapping first time in round, due to checks in depositUsdc\n        // 2) when swapping subsequent times, due to checks below (which ensure remaining usdc >= minUsdcConversionAmount)\n        if (_usdcToConvert < minUsdcConversionAmount.toUint128()) _usdcToConvert = minUsdcConversionAmount.toUint128();\n\n        if ((_roundUsdcBalance - _usdcToConvert) <= minUsdcConversionAmount) _usdcToConvert = _roundUsdcBalance;\n\n        // eventually, vaultBatchingState.roundUsdcBalance should become 0 for current round\n        // (due to above conditions)\n        vaultBatchingState.roundUsdcBalance = _roundUsdcBalance - _usdcToConvert;\n\n        // use min price of usdc, because we are selling usdc\n        uint256 price = gmxUnderlyingVault.getMinPrice(address(usdc));\n\n        // adjust for decimals and max possible slippage\n        uint256 minUsdg = _usdcToConvert.mulDiv(price * 1e12 * (MAX_BPS - slippageThresholdGmxBps), 1e30 * MAX_BPS);\n\n        _roundGlpStaked = _stakeGlp(address(usdc), _usdcToConvert, minUsdg).toUint128();\n        vaultBatchingState.roundGlpStaked += _roundGlpStaked;\n\n        emit BatchStake(vaultBatchingState.currentRound, _roundUsdcBalance, _roundGlpStaked);\n    }\n\n    function _executeVaultUserBatchDeposit(uint256 depositAmount) internal returns (uint128 _sharesReceived) {\n        _sharesReceived = dnGmxJuniorVault.deposit(depositAmount, address(this)).toUint128();\n        vaultBatchingState.roundSharesMinted += _sharesReceived;\n\n        emit PartialBatchDeposit(vaultBatchingState.currentRound, depositAmount, _sharesReceived);\n    }\n\n    function _claim(address claimer, address receiver, uint256 amount) internal {\n        // revert for zero values\n        if (receiver == address(0)) revert InvalidInput(0x10);\n        if (amount == 0) revert InvalidInput(0x11);\n\n        UserDeposit storage userDeposit = vaultBatchingState.userDeposits[claimer];\n\n        uint128 userUsdcBalance = userDeposit.usdcBalance;\n        uint128 userUnclaimedShares = userDeposit.unclaimedShares;\n\n        {\n            // Convert previous round usdc balance into unredeemed shares\n            uint256 userDepositRound = userDeposit.round;\n            if (userDepositRound < vaultBatchingState.currentRound && userUsdcBalance > 0) {\n                RoundDeposit storage roundDeposit = vaultBatchingState.roundDeposits[userDepositRound];\n                userUnclaimedShares += userUsdcBalance\n                    .mulDiv(roundDeposit.totalShares, roundDeposit.totalUsdc)\n                    .toUint128();\n                userDeposit.usdcBalance = 0;\n            }\n        }\n\n        if (userUnclaimedShares < amount.toUint128()) revert InsufficientShares(userUnclaimedShares);\n        userDeposit.unclaimedShares = userUnclaimedShares - amount.toUint128();\n\n        // transfer junior vault shares to user\n        dnGmxJuniorVault.transfer(receiver, amount);\n\n        emit SharesClaimed(claimer, receiver, amount);\n    }\n}\n"
    },
    "contracts/vaults/DnGmxBatchingManagerGlp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\n\nimport { FullMath } from '@uniswap/v3-core/contracts/libraries/FullMath.sol';\n\nimport { IDnGmxJuniorVault } from '../interfaces/IDnGmxJuniorVault.sol';\nimport { IDnGmxBatchingManagerGlp } from '../interfaces/IDnGmxBatchingManagerGlp.sol';\nimport { IGlpManager } from '../interfaces/gmx/IGlpManager.sol';\nimport { IRewardRouterV2 } from '../interfaces/gmx/IRewardRouterV2.sol';\nimport { IVault } from '../interfaces/gmx/IVault.sol';\n\nimport { IBatchingManagerBypass } from '../interfaces/IBatchingManagerBypass.sol';\n\nimport { SafeCast } from '../libraries/SafeCast.sol';\n\n/**\n * @title Batching Manager to avoid glp transfer cooldown\n * @notice batches the incoming deposit token deposits after converting them to glp\n * @notice It is upgradable contract (via TransparentUpgradeableProxy proxy owned by ProxyAdmin)\n * @author RageTrade\n **/\n\ncontract DnGmxBatchingManagerGlp is IDnGmxBatchingManagerGlp, OwnableUpgradeable, PausableUpgradeable {\n    using FullMath for uint256;\n    using FullMath for uint128;\n    using SafeCast for uint256;\n\n    struct VaultBatchingState {\n        // round indentifier\n        uint256 currentRound;\n        // junior vault shares minted in current round\n        uint256 roundSharesMinted;\n        // amount of sGlp converted to shares so far in current round\n        uint256 roundGlpDeposited;\n        // amount of glp pending to be converted to shares in current round\n        uint256 roundAssetBalance;\n        // stores junior vault shares accumulated for user\n        mapping(address user => UserDeposit) userDeposits;\n        // stores total glp received in a given round\n        mapping(uint256 roundId => RoundDeposit) roundDeposits;\n    }\n\n    // keeper can be EOA or smart contracts which executes stake and batch\n    address public keeper;\n    // delta neutral junior tranche\n    IDnGmxJuniorVault public dnGmxJuniorVault;\n\n    uint256 public depositCap;\n\n    uint256 public minGlpDepositThreshold;\n\n    // staked glp\n    IERC20 private sGlp;\n\n    // gmx's GlpManager (GlpManager.sol), which can burn/mint glp\n    IGlpManager private glpManager;\n    // gmx's Vault (vault.sol) contract\n    IVault private gmxUnderlyingVault;\n    // gmx's RewardRouterV2 (RewardRouterV2.sol) contract\n    IRewardRouterV2 private rewardRouter;\n\n    // batching manager's state\n    VaultBatchingState public vaultBatchingState;\n\n    // these gaps are added to allow adding new variables without shifting down inheritance chain\n    uint256[50] private __gaps;\n\n    /// @dev ensures caller is junior vault\n    modifier onlyDnGmxJuniorVault() {\n        if (msg.sender != address(dnGmxJuniorVault)) revert CallerNotVault();\n        _;\n    }\n\n    /// @dev ensures caller is keeper\n    modifier onlyKeeper() {\n        if (msg.sender != keeper) revert CallerNotKeeper();\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            INIT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice initializes the proxy state\n    /// @dev this function is supposed to be called only once\n    /// @param _sGlp address of staked glp\n    /// @param _rewardRouter gmx protocol's reward router v2\n    /// @param _dnGmxJuniorVault address of delta neutral junior tranche\n    function initialize(\n        IERC20 _sGlp,\n        IRewardRouterV2 _rewardRouter,\n        IGlpManager _glpManager,\n        address _dnGmxJuniorVault,\n        address _keeper\n    ) external initializer {\n        __Ownable_init();\n        __Pausable_init();\n        __GMXBatchingManager_init(_sGlp, _rewardRouter, _glpManager, _dnGmxJuniorVault, _keeper);\n    }\n\n    /* solhint-disable-next-line func-name-mixedcase */\n    function __GMXBatchingManager_init(\n        IERC20 _sGlp,\n        IRewardRouterV2 _rewardRouter,\n        IGlpManager _glpManager,\n        address _dnGmxJuniorVault,\n        address _keeper\n    ) internal onlyInitializing {\n        sGlp = _sGlp;\n        glpManager = _glpManager;\n        rewardRouter = _rewardRouter;\n\n        gmxUnderlyingVault = IVault(glpManager.vault());\n        dnGmxJuniorVault = IDnGmxJuniorVault(_dnGmxJuniorVault);\n\n        keeper = _keeper;\n        emit KeeperUpdated(_keeper);\n\n        vaultBatchingState.currentRound = 1;\n    }\n\n    /// @notice grants the allowance to the vault to pull sGLP (via safeTransfer from in vault.deposit)\n    /// @dev allowance is granted while vault is added via addVault, this is only failsafe if that allowance is exhausted\n    function grantAllowances() external onlyOwner {\n        sGlp.approve(address(dnGmxJuniorVault), type(uint256).max);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             ADMIN SETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice sets the keeper address (to pause & unpause deposits)\n    /// @param _keeper address of keeper\n    function setKeeper(address _keeper) external onlyOwner {\n        keeper = _keeper;\n        emit KeeperUpdated(_keeper);\n    }\n\n    /// @notice sets the slippage (in bps) to use while staking on gmx\n    function setThresholds(uint256 _minGlpDepositThreshold) external onlyOwner {\n        minGlpDepositThreshold = _minGlpDepositThreshold;\n        emit ThresholdsUpdated(_minGlpDepositThreshold);\n    }\n\n    function setDepositCap(uint256 _depositCap) external onlyOwner {\n        depositCap = _depositCap;\n        emit DepositCapUpdated(_depositCap);\n    }\n\n    /// @notice pauses deposits (to prevent DOS due to GMX 15 min cooldown)\n    function pauseDeposit() external onlyKeeper {\n        _pause();\n    }\n\n    /// @notice unpauses the deposit function\n    function unpauseDeposit() external onlyKeeper {\n        _unpause();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            PROTOCOL FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function deposit(uint256 amount, address receiver) external whenNotPaused {\n        // revert for zero values\n        if (amount == 0) revert InvalidInput(0x21);\n        if (receiver == address(0)) revert InvalidInput(0x22);\n\n        // revert if deposit amount is too low,\n        // such that it would revert while converting to glp if it was only deposit in batch\n        if (amount < minGlpDepositThreshold) revert InvalidInput(0x23);\n\n        if (vaultBatchingState.roundAssetBalance + amount > depositCap) revert DepositCapBreached();\n\n        // user gives approval to batching manager to spend glp\n        sGlp.transferFrom(msg.sender, address(this), amount);\n\n        UserDeposit storage userDeposit = vaultBatchingState.userDeposits[receiver];\n        uint128 userAssetBalance = userDeposit.assetBalance;\n\n        // Convert previous round glp balance into unredeemed shares\n        uint256 userDepositRound = userDeposit.round;\n        if (userDepositRound < vaultBatchingState.currentRound && userAssetBalance > 0) {\n            // update user's unclaimed shares with previous executed batch\n            RoundDeposit storage roundDeposit = vaultBatchingState.roundDeposits[userDepositRound];\n            userDeposit.unclaimedShares += userDeposit\n                .assetBalance\n                .mulDiv(roundDeposit.totalShares, roundDeposit.totalAssets)\n                .toUint128();\n            userAssetBalance = 0;\n        }\n\n        // Update round and glp balance for current round\n        userDeposit.round = vaultBatchingState.currentRound;\n        userDeposit.assetBalance = userAssetBalance + amount.toUint128();\n        vaultBatchingState.roundAssetBalance += amount.toUint128();\n\n        emit DepositToken(vaultBatchingState.currentRound, address(sGlp), receiver, amount, 0);\n    }\n\n    function executeBatch(uint128 sGlpToDeposit) external onlyKeeper {\n        if (!paused()) _pause();\n\n        if (sGlpToDeposit == 0) revert InvalidInput(0x40);\n\n        uint128 _roundAssetBalance = vaultBatchingState.roundAssetBalance.toUint128();\n\n        uint128 _sGlpToDeposit = sGlpToDeposit < _roundAssetBalance ? sGlpToDeposit : _roundAssetBalance;\n\n        if (_sGlpToDeposit == 0) revert NoAssetBalance();\n\n        if (_sGlpToDeposit < minGlpDepositThreshold.toUint128()) _sGlpToDeposit = minGlpDepositThreshold.toUint128();\n\n        if ((_roundAssetBalance - _sGlpToDeposit) <= minGlpDepositThreshold) _sGlpToDeposit = _roundAssetBalance;\n\n        // eventually, vaultBatchingState.roundAssetBalance should become 0 for current round\n        vaultBatchingState.roundAssetBalance = _roundAssetBalance - _sGlpToDeposit;\n\n        vaultBatchingState.roundGlpDeposited += _sGlpToDeposit;\n        ////\n        uint128 sharesReceived = _executeVaultUserBatchDeposit(_sGlpToDeposit);\n        uint128 assetRemainingInRound = vaultBatchingState.roundAssetBalance.toUint128();\n\n        vaultBatchingState.roundDeposits[vaultBatchingState.currentRound].totalAssets += _sGlpToDeposit;\n        vaultBatchingState.roundDeposits[vaultBatchingState.currentRound].totalShares += sharesReceived;\n\n        // move current round to roundDeposits and reset state variables when batch is executed\n        if (assetRemainingInRound == 0) {\n            emit BatchDeposit(\n                vaultBatchingState.currentRound,\n                vaultBatchingState.roundDeposits[vaultBatchingState.currentRound].totalAssets,\n                vaultBatchingState.roundGlpDeposited,\n                vaultBatchingState.roundSharesMinted\n            );\n\n            // reset curret round's bal and increase round id\n            vaultBatchingState.roundGlpDeposited = 0;\n            vaultBatchingState.roundSharesMinted = 0;\n            ++vaultBatchingState.currentRound;\n\n            // unpause when batch is executed\n            _unpause();\n        }\n    }\n\n    /// @notice claim the shares received from depositing batch\n    /// @param receiver address of receiver\n    /// @param amount amount of shares\n    function claim(address receiver, uint256 amount) external {\n        _claim(msg.sender, receiver, amount);\n    }\n\n    function claimAndRedeem(address receiver) external returns (uint256 glpReceived) {\n        // claimed shares would be transfered back to msg.sender and later user's complete balance is pulled\n        _claim(msg.sender, msg.sender, unclaimedShares(msg.sender));\n\n        uint256 shares = dnGmxJuniorVault.balanceOf(msg.sender);\n        if (shares == 0) return 0;\n\n        // withdraw all shares from user\n        // user should have given approval to batching manager to spend dnGmxJuniorVault shares\n        glpReceived = dnGmxJuniorVault.redeem(shares, receiver, msg.sender);\n\n        emit ClaimedAndRedeemed(msg.sender, receiver, shares, glpReceived);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                GETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice gets the current active round\n    function currentRound() external view returns (uint256) {\n        return vaultBatchingState.currentRound;\n    }\n\n    /// @notice get the glp balance for a given vault and account address\n    /// @param account address of user\n    function assetBalance(address account) public view returns (uint256 balance) {\n        balance = vaultBatchingState.userDeposits[account].assetBalance;\n    }\n\n    /// @notice get the unclaimed shares for a given vault and account address\n    /// @param account address of user\n    function unclaimedShares(address account) public view returns (uint256 shares) {\n        UserDeposit memory userDeposit = vaultBatchingState.userDeposits[account];\n        shares = userDeposit.unclaimedShares;\n\n        if (userDeposit.round < vaultBatchingState.currentRound && userDeposit.assetBalance > 0) {\n            RoundDeposit memory roundDeposit = vaultBatchingState.roundDeposits[userDeposit.round];\n            shares += userDeposit.assetBalance.mulDiv(roundDeposit.totalShares, roundDeposit.totalAssets).toUint128();\n        }\n    }\n\n    /// @notice get the glp balance for current active round\n    function roundAssetBalance() external view returns (uint256) {\n        return vaultBatchingState.roundAssetBalance;\n    }\n\n    /// @notice get the glp balance for current active round\n    function roundGlpDeposited() external view returns (uint256) {\n        return vaultBatchingState.roundGlpDeposited;\n    }\n\n    function roundSharesMinted() external view returns (uint256) {\n        return vaultBatchingState.roundSharesMinted;\n    }\n\n    /// @notice get the vaultBatchingState of user deposits\n    /// @param account address of user\n    function userDeposits(address account) external view returns (UserDeposit memory) {\n        return vaultBatchingState.userDeposits[account];\n    }\n\n    /// @notice get the info for given vault and round\n    /// @param round address of user\n    function roundDeposits(uint256 round) external view returns (RoundDeposit memory) {\n        return vaultBatchingState.roundDeposits[round];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             INTERNAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _executeVaultUserBatchDeposit(uint256 depositAmount) internal returns (uint128 _sharesReceived) {\n        _sharesReceived = dnGmxJuniorVault.deposit(depositAmount, address(this)).toUint128();\n        vaultBatchingState.roundSharesMinted += _sharesReceived;\n\n        emit PartialBatchDeposit(vaultBatchingState.currentRound, depositAmount, _sharesReceived);\n    }\n\n    function _claim(address claimer, address receiver, uint256 amount) internal {\n        // revert for zero values\n        if (receiver == address(0)) revert InvalidInput(0x10);\n        if (amount == 0) revert InvalidInput(0x11);\n\n        UserDeposit storage userDeposit = vaultBatchingState.userDeposits[claimer];\n\n        uint128 userAssetBalance = userDeposit.assetBalance;\n        uint128 userUnclaimedShares = userDeposit.unclaimedShares;\n\n        {\n            // Convert previous round glp balance into unredeemed shares\n            uint256 userDepositRound = userDeposit.round;\n            if (userDepositRound < vaultBatchingState.currentRound && userAssetBalance > 0) {\n                RoundDeposit storage roundDeposit = vaultBatchingState.roundDeposits[userDepositRound];\n                userUnclaimedShares += userAssetBalance\n                    .mulDiv(roundDeposit.totalShares, roundDeposit.totalAssets)\n                    .toUint128();\n                userDeposit.assetBalance = 0;\n            }\n        }\n\n        if (userUnclaimedShares < amount.toUint128()) revert InsufficientShares(userUnclaimedShares);\n        userDeposit.unclaimedShares = userUnclaimedShares - amount.toUint128();\n\n        // transfer junior vault shares to user\n        dnGmxJuniorVault.transfer(receiver, amount);\n\n        emit SharesClaimed(claimer, receiver, amount);\n    }\n}\n"
    },
    "contracts/vaults/DnGmxJuniorVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IAToken } from '@aave/core-v3/contracts/interfaces/IAToken.sol';\nimport { IPool } from '@aave/core-v3/contracts/interfaces/IPool.sol';\nimport { IPoolAddressesProvider } from '@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol';\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\nimport { IRewardsController } from '@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol';\nimport { WadRayMath } from '@aave/core-v3/contracts/protocol/libraries/math/WadRayMath.sol';\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\n\nimport { FullMath } from '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\n\nimport { IBalancerVault } from '../interfaces/balancer/IBalancerVault.sol';\nimport { IDnGmxSeniorVault } from '../interfaces/IDnGmxSeniorVault.sol';\nimport { IDnGmxJuniorVault, IERC4626 } from '../interfaces/IDnGmxJuniorVault.sol';\nimport { IDebtToken } from '../interfaces/IDebtToken.sol';\nimport { IGlpManager } from '../interfaces/gmx/IGlpManager.sol';\nimport { ISglpExtended } from '../interfaces/gmx/ISglpExtended.sol';\nimport { IRewardRouterV2 } from '../interfaces/gmx/IRewardRouterV2.sol';\nimport { IRewardTracker } from '../interfaces/gmx/IRewardTracker.sol';\nimport { IVault } from '../interfaces/gmx/IVault.sol';\nimport { IVester } from '../interfaces/gmx/IVester.sol';\nimport { IDnGmxTraderHedgeStrategy } from '../interfaces/IDnGmxTraderHedgeStrategy.sol';\n\nimport { DnGmxJuniorVaultManager } from '../libraries/DnGmxJuniorVaultManager.sol';\nimport { SafeCast } from '../libraries/SafeCast.sol';\n\nimport { ERC4626Upgradeable } from '../ERC4626/ERC4626Upgradeable.sol';\n\n/**\n * @title Delta Neutral GMX Junior Tranche contract\n * @notice Implements the handling of junior tranche which maintains hedges for btc and eth\n * basis the target weights on GMX\n * @notice It is upgradable contract (via TransparentUpgradeableProxy proxy owned by ProxyAdmin)\n * @author RageTrade\n **/\ncontract DnGmxJuniorVault is IDnGmxJuniorVault, ERC4626Upgradeable, OwnableUpgradeable, PausableUpgradeable {\n    using SafeCast for uint256;\n    using FullMath for uint256;\n    using WadRayMath for uint256;\n    using SafeERC20 for IERC20Metadata;\n    using FixedPointMathLib for uint256;\n\n    using DnGmxJuniorVaultManager for DnGmxJuniorVaultManager.State;\n\n    uint256 internal constant MAX_BPS = 10_000;\n    uint256 internal constant PRICE_PRECISION = 1e30;\n\n    DnGmxJuniorVaultManager.State internal state;\n\n    // these gaps are added to allow adding new variables without shifting down inheritance chain\n    uint256[50] private __gaps;\n\n    modifier onlyKeeper() {\n        if (msg.sender != state.keeper) revert OnlyKeeperAllowed(msg.sender, state.keeper);\n        _;\n    }\n\n    modifier whenFlashloaned() {\n        if (!state.hasFlashloaned) revert FlashloanNotInitiated();\n        _;\n    }\n\n    modifier onlyBalancerVault() {\n        if (msg.sender != address(state.balancerVault)) revert NotBalancerVault();\n        _;\n    }\n\n    /* ##################################################################\n                                SYSTEM FUNCTIONS\n    ################################################################## */\n\n    /// @notice initializer\n    /// @param _name name of vault share token\n    /// @param _symbol symbol of vault share token\n    /// @param _swapRouter uniswap swap router address\n    /// @param _rewardRouter gmx reward router address\n    /// @param _tokens addresses of tokens used\n    /// @param _poolAddressesProvider add\n    function initialize(\n        string calldata _name,\n        string calldata _symbol,\n        address _swapRouter,\n        address _rewardRouter,\n        address _mintBurnRewardRouter,\n        DnGmxJuniorVaultManager.Tokens calldata _tokens,\n        IPoolAddressesProvider _poolAddressesProvider\n    ) external initializer {\n        __Ownable_init();\n        __Pausable_init();\n        __ERC4626Upgradeable_init(address(_tokens.sGlp), _name, _symbol);\n\n        state.weth = _tokens.weth;\n        state.wbtc = _tokens.wbtc;\n        state.usdc = _tokens.usdc;\n\n        state.swapRouter = ISwapRouter(_swapRouter);\n        state.rewardRouter = IRewardRouterV2(_rewardRouter);\n        state.mintBurnRewardRouter = IRewardRouterV2(_mintBurnRewardRouter);\n\n        state.poolAddressProvider = _poolAddressesProvider;\n\n        state.glp = IERC20Metadata(ISglpExtended(asset).glp());\n        state.glpManager = IGlpManager(IRewardRouterV2(_mintBurnRewardRouter).glpManager());\n        state.fsGlp = IERC20(ISglpExtended(asset).stakedGlpTracker());\n\n        state.gmxVault = IVault(state.glpManager.vault());\n\n        state.pool = IPool(state.poolAddressProvider.getPool());\n        state.oracle = IPriceOracle(state.poolAddressProvider.getPriceOracle());\n\n        state.aUsdc = IAToken(state.pool.getReserveData(address(state.usdc)).aTokenAddress);\n\n        state.vWbtc = IDebtToken(state.pool.getReserveData(address(state.wbtc)).variableDebtTokenAddress);\n        state.vWeth = IDebtToken(state.pool.getReserveData(address(state.weth)).variableDebtTokenAddress);\n    }\n\n    /* ##################################################################\n                                ADMIN FUNCTIONS\n    ################################################################## */\n\n    /// @notice grants allowances for tokens to relevant external contracts\n    /// @dev to be called once the vault is deployed\n    function grantAllowances() external onlyOwner {\n        address aavePool = address(state.pool);\n        address swapRouter = address(state.swapRouter);\n\n        // allowance to aave pool for wbtc for repay and supply\n        state.wbtc.approve(aavePool, type(uint256).max);\n        // allowance to uniswap swap router for wbtc for swap\n        state.wbtc.approve(swapRouter, type(uint256).max);\n\n        // allowance to aave pool for weth for repay and supply\n        state.weth.approve(aavePool, type(uint256).max);\n        // allowance to uniswap swap router for weth for swap\n        state.weth.approve(swapRouter, type(uint256).max);\n        // allowance to batching manager for weth\n        state.weth.approve(address(state.glpManager), type(uint256).max);\n\n        // allowance to aave pool for usdc for supply\n        state.usdc.approve(aavePool, type(uint256).max);\n        // allowance to swap router for usdc for swap\n        state.usdc.approve(address(swapRouter), type(uint256).max);\n        // allowance to batching manager for usdc deposits when rebalancing profits\n        state.usdc.approve(address(state.glpManager), type(uint256).max);\n\n        // allowance to aave pool for aUSDC transfers to senior tranche\n        state.aUsdc.approve(address(state.dnGmxSeniorVault), type(uint256).max);\n\n        // allowance for sGLP to glpManager\n        IERC20Metadata(asset).approve(address(state.glpManager), type(uint256).max);\n\n        emit AllowancesGranted();\n    }\n\n    /// @notice set admin paramters\n    /// @param newKeeper keeper address\n    /// @param dnGmxSeniorVault senior vault address\n    /// @param newDepositCap deposit cap\n    /// @param withdrawFeeBps fees bps on withdrawals and redeems\n    function setAdminParams(\n        address newKeeper,\n        address dnGmxSeniorVault,\n        uint256 newDepositCap,\n        uint16 withdrawFeeBps,\n        uint24 feeTierWethWbtcPool\n    ) external onlyOwner {\n        if (withdrawFeeBps > MAX_BPS) revert InvalidWithdrawFeeBps();\n\n        state.keeper = newKeeper;\n        state.depositCap = newDepositCap;\n        state.withdrawFeeBps = withdrawFeeBps;\n        state.feeTierWethWbtcPool = feeTierWethWbtcPool;\n\n        state.dnGmxSeniorVault = IDnGmxSeniorVault(dnGmxSeniorVault);\n\n        emit AdminParamsUpdated(newKeeper, dnGmxSeniorVault, newDepositCap, address(0), withdrawFeeBps);\n    }\n\n    /// @notice set thresholds\n    /// @param slippageThresholdSwapBtcBps (BPS) slippage threshold on btc swaps\n    /// @param slippageThresholdSwapEthBps (BPS) slippage threshold on eth swaps\n    /// @param slippageThresholdGmxBps (BPS) slippage threshold on sGlp mint and redeem\n    /// @param usdcConversionThreshold (usdc amount) threshold amount for conversion of usdc into sGlp\n    /// @param wethConversionThreshold (weth amount) threshold amount for weth fees to be compounded into sGlp\n    /// @param hedgeUsdcAmountThreshold (usdc amount) threshold amount below which ETH/BTC hedges are not executed\n    /// @param partialBtcHedgeUsdcAmountThreshold (usdc amount) threshold amount above which BTC hedge is not fully taken (gets executed in blocks over multiple rebalances)\n    /// @param partialEthHedgeUsdcAmountThreshold (usdc amount) threshold amount above which ETH hedge is not fully taken (gets executed in blocks over multiple rebalances)\n    function setThresholds(\n        uint16 slippageThresholdSwapBtcBps,\n        uint16 slippageThresholdSwapEthBps,\n        uint16 slippageThresholdGmxBps,\n        uint128 usdcConversionThreshold,\n        uint128 wethConversionThreshold,\n        uint128 hedgeUsdcAmountThreshold,\n        uint128 partialBtcHedgeUsdcAmountThreshold,\n        uint128 partialEthHedgeUsdcAmountThreshold\n    ) external onlyOwner {\n        if (slippageThresholdSwapBtcBps > MAX_BPS) revert InvalidSlippageThresholdSwapBtc();\n        if (slippageThresholdSwapEthBps > MAX_BPS) revert InvalidSlippageThresholdSwapEth();\n        if (slippageThresholdGmxBps > MAX_BPS) revert InvalidSlippageThresholdGmx();\n\n        state.slippageThresholdSwapBtcBps = slippageThresholdSwapBtcBps;\n        state.slippageThresholdSwapEthBps = slippageThresholdSwapEthBps;\n        state.slippageThresholdGmxBps = slippageThresholdGmxBps;\n        state.usdcConversionThreshold = usdcConversionThreshold;\n        state.wethConversionThreshold = wethConversionThreshold;\n        state.hedgeUsdcAmountThreshold = hedgeUsdcAmountThreshold;\n        state.partialBtcHedgeUsdcAmountThreshold = partialBtcHedgeUsdcAmountThreshold;\n        state.partialEthHedgeUsdcAmountThreshold = partialEthHedgeUsdcAmountThreshold;\n\n        emit ThresholdsUpdated(\n            slippageThresholdSwapBtcBps,\n            slippageThresholdSwapEthBps,\n            slippageThresholdGmxBps,\n            usdcConversionThreshold,\n            wethConversionThreshold,\n            hedgeUsdcAmountThreshold,\n            partialBtcHedgeUsdcAmountThreshold,\n            partialEthHedgeUsdcAmountThreshold\n        );\n    }\n\n    /// @notice set thresholds\n    /// @param rebalanceProfitUsdcAmountThreshold (BPS) slippage threshold on btc swaps\n    /// @param dnGmxTraderHedgeStrategy (BPS) slippage threshold on btc swaps\n    function setParamsV1(\n        uint128 rebalanceProfitUsdcAmountThreshold,\n        IDnGmxTraderHedgeStrategy dnGmxTraderHedgeStrategy\n    ) external onlyOwner {\n        state.rebalanceProfitUsdcAmountThreshold = rebalanceProfitUsdcAmountThreshold;\n        state.dnGmxTraderHedgeStrategy = dnGmxTraderHedgeStrategy;\n\n        emit ParamsV1Updated(rebalanceProfitUsdcAmountThreshold, dnGmxTraderHedgeStrategy);\n    }\n\n    /// @notice set rebalance paramters\n    /// @param rebalanceTimeThreshold (seconds) minimum time difference required between two rebalance calls\n    /// @dev a partial rebalance (rebalance where partial hedge gets taken) does not count.\n    /// @dev setHedgeParams should already have been called.\n    /// @param rebalanceDeltaThresholdBps (BPS) threshold difference between optimal and current token hedges for triggering a rebalance\n    /// @param rebalanceHfThresholdBps (BPS) threshold amount of health factor on AAVE below which a rebalance is triggered\n    function setRebalanceParams(\n        uint32 rebalanceTimeThreshold,\n        uint16 rebalanceDeltaThresholdBps,\n        uint16 rebalanceHfThresholdBps\n    ) external onlyOwner {\n        if (rebalanceTimeThreshold > 3 days) revert InvalidRebalanceTimeThreshold();\n        if (rebalanceDeltaThresholdBps > MAX_BPS) revert InvalidRebalanceDeltaThresholdBps();\n        if (rebalanceHfThresholdBps < MAX_BPS || rebalanceHfThresholdBps > state.targetHealthFactor)\n            revert InvalidRebalanceHfThresholdBps();\n\n        state.rebalanceTimeThreshold = rebalanceTimeThreshold;\n        state.rebalanceDeltaThresholdBps = rebalanceDeltaThresholdBps;\n        state.rebalanceHfThresholdBps = rebalanceHfThresholdBps;\n\n        emit RebalanceParamsUpdated(rebalanceTimeThreshold, rebalanceDeltaThresholdBps, rebalanceHfThresholdBps);\n    }\n\n    /// @notice set hedge parameters\n    /// @param vault balancer vault for ETH and BTC flashloans\n    /// @param swapRouter uniswap swap router for swapping ETH/BTC to USDC and viceversa\n    /// @param targetHealthFactor health factor to target on AAVE after every rebalance\n    /// @param aaveRewardsController AAVE rewards controller for handling additional reward distribution on AAVE\n    function setHedgeParams(\n        IBalancerVault vault,\n        ISwapRouter swapRouter,\n        uint256 targetHealthFactor,\n        IRewardsController aaveRewardsController\n    ) external onlyOwner {\n        if (targetHealthFactor > 20_000) revert InvalidTargetHealthFactor();\n\n        state.balancerVault = vault;\n        state.swapRouter = swapRouter;\n        state.targetHealthFactor = targetHealthFactor;\n        state.aaveRewardsController = aaveRewardsController;\n\n        // update aave pool and oracle if their addresses have updated\n        IPoolAddressesProvider poolAddressProvider = state.poolAddressProvider;\n        IPool pool = IPool(poolAddressProvider.getPool());\n        state.pool = pool;\n        IPriceOracle oracle = IPriceOracle(poolAddressProvider.getPriceOracle());\n        state.oracle = oracle;\n\n        emit HedgeParamsUpdated(vault, swapRouter, targetHealthFactor, aaveRewardsController, pool, oracle);\n    }\n\n    /// @notice set GMX parameters\n    /// @param _glpManager GMX glp manager\n    function setGmxParams(IGlpManager _glpManager) external onlyOwner {\n        state.glpManager = _glpManager;\n    }\n\n    function setDirectConversion(bool _useDirectConversion) external onlyOwner {\n        state.useDirectConversion = _useDirectConversion;\n    }\n\n    /// @notice pause deposit, mint, withdraw and redeem\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /// @notice unpause deposit, mint, withdraw and redeem\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /// @notice sets feeBps and feeRecipient\n    /// @param _feeBps the part of eth rewards earned from GMX earned deducted as protocol fees\n    /// @param _feeRecipient recipient address for protocol fees and protocol esGmx\n    function setFeeParams(uint16 _feeBps, address _feeRecipient) external onlyOwner {\n        if (state.feeRecipient != _feeRecipient) {\n            state.feeRecipient = _feeRecipient;\n        } else revert InvalidFeeRecipient();\n\n        if (_feeBps > 3000) revert InvalidFeeBps();\n        state.feeBps = _feeBps;\n\n        emit FeeParamsUpdated(_feeBps, _feeRecipient);\n    }\n\n    /// @notice withdraw accumulated WETH fees\n    function withdrawFees() external {\n        uint256 amount = state.protocolFee;\n        state.protocolFee = 0;\n        state.weth.transfer(state.feeRecipient, amount);\n        emit FeesWithdrawn(amount);\n    }\n\n    /// @notice unstakes and vest protocol esGmx to convert it to Gmx\n    function unstakeAndVestEsGmx() external onlyOwner {\n        // unstakes the protocol esGMX and starts vesting it\n        // this encumbers some glp deposits\n        // can stop vesting to enable glp withdraws\n        uint256 amount = state.protocolEsGmx;\n\n        state.rewardRouter.unstakeEsGmx(amount);\n        IVester(state.rewardRouter.glpVester()).deposit(amount);\n\n        emit EsGmxVested(amount);\n\n        state.protocolEsGmx = 0;\n    }\n\n    /// @notice claims vested gmx tokens (i.e. stops vesting esGmx so that the relevant glp amount is unlocked)\n    /// @dev when esGmx is vested some GlP tokens are locked on a pro-rata basis, in case that leads to issue in withdrawal this function can be called\n    function stopVestAndStakeEsGmx() external onlyOwner {\n        // stops vesting and stakes the remaining esGMX\n        // this enables glp withdraws\n        IVester(state.rewardRouter.glpVester()).withdraw();\n        uint256 esGmxWithdrawn = IERC20(state.rewardRouter.esGmx()).balanceOf(address(this));\n        state.rewardRouter.stakeEsGmx(esGmxWithdrawn);\n\n        emit EsGmxStaked(esGmxWithdrawn);\n\n        state.protocolEsGmx += esGmxWithdrawn;\n    }\n\n    /// @notice claims vested gmx tokens to feeRecipient\n    /// @dev vested esGmx gets converted to GMX every second, so whatever amount is vested gets claimed\n    function claimVestedGmx() external onlyOwner {\n        // stops vesting and stakes the remaining esGMX\n        // this can be used in case glp withdraws are hampered\n        uint256 gmxClaimed = IVester(state.rewardRouter.glpVester()).claim();\n\n        emit GmxClaimed(gmxClaimed);\n\n        //Transfer all of the gmx received to fee recipient\n        IERC20Metadata(state.rewardRouter.gmx()).safeTransfer(state.feeRecipient, gmxClaimed);\n    }\n\n    function rebalanceProfit() external onlyOwner {\n        (uint256 currentBtc, uint256 currentEth) = state.getCurrentBorrows();\n        uint256 totalCurrentBorrowValue = state.getBorrowValue(currentBtc, currentEth); // = total position value of current btc and eth position\n\n        // rebalance profit\n        state.rebalanceProfit(totalCurrentBorrowValue);\n    }\n\n    function harvestFees() external {\n        state.harvestFees();\n    }\n\n    /* ##################################################################\n                                KEEPER FUNCTIONS\n    ################################################################## */\n    /// @notice checks if the rebalance can be run (3 thresholds - time, hedge deviation and AAVE HF )\n    function isValidRebalance() public view returns (bool) {\n        return\n            state.isValidRebalanceHF() ||\n            state.isValidRebalanceTime() ||\n            state.isValidRebalanceDeviation() ||\n            state.isValidRebalanceDueToChangeInHedges();\n    }\n\n    /* solhint-disable not-rely-on-time */\n    /// @notice harvests glp rewards & rebalances the hedge positions, profits on AAVE and Gmx.\n    /// @notice run only if valid rebalance is true\n    function rebalance() external onlyKeeper {\n        if (!isValidRebalance()) revert InvalidRebalance();\n\n        emit Rebalanced();\n\n        (state.btcPoolAmount, state.ethPoolAmount) = state.getPoolAmounts();\n\n        (int128 currentBtcTraderOIHedge, int128 currentEthTraderOIHedge) = state.getTraderOIHedgeAmounts();\n        state.btcTraderOIHedge = currentBtcTraderOIHedge;\n        state.ethTraderOIHedge = currentEthTraderOIHedge;\n\n        (uint256 currentBtc, uint256 currentEth) = state.getCurrentBorrows();\n        uint256 totalCurrentBorrowValue = state.getBorrowValue(currentBtc, currentEth); // = total position value of current btc and eth position\n\n        _emitVaultState(0);\n\n        // harvest fees\n        state.harvestFees();\n\n        // rebalance profit\n        state.rebalanceProfit(totalCurrentBorrowValue);\n\n        // calculate current btc and eth positions in GLP\n        // get the position value and calculate the collateral needed to borrow that\n        // transfer collateral from LB vault to DN vault\n        bool isPartialHedge = state.rebalanceHedge(currentBtc, currentEth, state.totalGlp(false), true);\n\n        if (isPartialHedge) {\n            state.lastRebalanceTS = 0; // if partial hedge is happening due to delta threshold breach, next rebalance should still go through\n            if (!paused()) _pause(); // pause the contracts to prevent users from taking the slippage for updating overall hedges instead of incremental hedges\n        } else {\n            state.lastRebalanceTS = uint48(block.timestamp); // once partial hedge is completed the lastRebalanceTS gets updated\n            if (paused()) _unpause(); // since hedges are optimal now, vault can be unpaused to handle deposits and withdraws\n        }\n\n        (currentBtc, currentEth) = state.getCurrentBorrows();\n\n        _emitVaultState(1);\n    }\n\n    /* ##################################################################\n                                USER FUNCTIONS\n    ################################################################## */\n    /// @notice deposits sGlp token and returns vault shares\n    /// @param amount amount of sGlp (asset) tokens to deposit\n    /// @param to receiver address for share allocation\n    /// @return shares amount of shares allocated for deposit\n    function deposit(\n        uint256 amount,\n        address to\n    ) public virtual override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 shares) {\n        _rebalanceBeforeShareAllocation();\n        shares = super.deposit(amount, to);\n        _emitVaultState(1);\n    }\n\n    /// @notice mints \"shares\" amount of vault shares and pull relevant amount of sGlp tokens\n    /// @param shares amount of vault shares to mint\n    /// @param to receiver address for share allocation\n    /// @return amount amount of sGlp tokens required for given number of shares\n    function mint(\n        uint256 shares,\n        address to\n    ) public virtual override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 amount) {\n        _rebalanceBeforeShareAllocation();\n        amount = super.mint(shares, to);\n        _emitVaultState(1);\n    }\n\n    ///@notice withdraws \"assets\" amount of sGlp tokens and burns relevant amount of vault shares\n    ///@notice deducts some assets for the remaining shareholders to cover the cost of opening and closing of hedge\n    ///@param assets amount of assets to withdraw\n    ///@param receiver receiver address for the assets\n    ///@param owner owner address of the shares to be burnt\n    ///@return shares number of shares burnt\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 shares) {\n        _rebalanceBeforeShareAllocation();\n        shares = super.withdraw(assets, receiver, owner);\n        _emitVaultState(1);\n    }\n\n    ///@notice burns \"shares\" amount of vault shares and withdraws relevant amount of sGlp tokens\n    ///@notice deducts some assets for the remaining shareholders to cover the cost of opening and closing of hedge\n    ///@param shares amount of shares to redeem\n    ///@param receiver receiver address for the assets\n    ///@param owner owner address of the shares to be burnt\n    ///@return assets number of assets sent\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) public override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 assets) {\n        _rebalanceBeforeShareAllocation();\n        assets = super.redeem(shares, receiver, owner);\n        _emitVaultState(1);\n    }\n\n    /* ##################################################################\n                            FLASHLOAN RECEIVER\n    ################################################################## */\n\n    ///@notice flashloan receiver for balance vault\n    ///@notice receives flashloaned tokens(WETH or WBTC or USDC) from balancer, swaps on uniswap and borrows/repays on AAVE\n    ///@dev only allows balancer vault to call this\n    ///@dev only runs when _hasFlashloaned is set to true (prevents someone else from initiating flashloan to vault)\n    ///@param tokens list of tokens flashloaned\n    ///@param amounts amounts of token flashloans in same order\n    ///@param feeAmounts amounts of fee/premium charged for flashloan\n    ///@param userData data passed to balancer for flashloan (includes token amounts, token usdc value and swap direction)\n    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external onlyBalancerVault whenFlashloaned {\n        state.receiveFlashLoan(tokens, amounts, feeAmounts, userData);\n    }\n\n    /* ##################################################################\n                                VIEW FUNCTIONS\n    ################################################################## */\n\n    ///@notice gives total asset tokens available in vault\n    ///@dev some unhedged part of glp might be converted to USDC (its value in GLP is added to total glp assets)\n    function totalAssets() public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\n        return state.totalAssets();\n    }\n\n    ///@notice returns price of glp token\n    ///@param maximize specifies aum used is minimum(false) or maximum(true)\n    ///@return price of glp token in PRICE_PRECISION\n    function getPrice(bool maximize) public view returns (uint256) {\n        uint256 aum = state.glpManager.getAum(maximize);\n        uint256 totalSupply = state.glp.totalSupply();\n\n        return aum.mulDivDown(PRICE_PRECISION, totalSupply * 1e24);\n    }\n\n    ///@notice returns price of glp token\n    ///@return price of glp token in X128\n    function getPriceX128() public view returns (uint256) {\n        uint256 aum = state.glpManager.getAum(false);\n        uint256 totalSupply = state.glp.totalSupply();\n\n        return aum.mulDiv(1 << 128, totalSupply * 1e24);\n    }\n\n    ///@notice returns the minimum market value of \"assetAmount\" of asset (sGlp) tokens\n    ///@dev uses minimum price i.e. minimum AUM of glp tokens\n    ///@param assetAmount amount of sGlp tokens\n    ///@return marketValue of given amount of glp assets\n    function getMarketValue(uint256 assetAmount) public view returns (uint256 marketValue) {\n        marketValue = assetAmount.mulDivDown(state.getGlpPriceInUsdc(false), PRICE_PRECISION);\n    }\n\n    ///@notice returns vault market value (USD terms & 6 decimals) basis glp and usdc tokens in vault\n    ///@dev Part 1. adds value of glp tokens basis minimum glp aum from gmx\n    ///@dev Part 2. adds value of junior vault usdc deposit in AAVE (swap outputs + unhedged GLP)\n    ///@dev Part 3. subtracts value of WETH & WBTC borrows from AAVE\n    ///@return vaultMarketValue : market value of vault assets\n    function getVaultMarketValue() public view returns (int256 vaultMarketValue) {\n        (uint256 currentBtc, uint256 currentEth) = state.getCurrentBorrows();\n        uint256 totalCurrentBorrowValue = state.getBorrowValue(currentBtc, currentEth);\n        uint256 glpBalance = state.fsGlp.balanceOf(address(this));\n        vaultMarketValue = ((getMarketValue(glpBalance).toInt256() +\n            state.dnUsdcDeposited +\n            state.unhedgedGlpInUsdc.toInt256()) - totalCurrentBorrowValue.toInt256());\n    }\n\n    /// @notice returns total amount of usdc borrowed from senior vault\n    /// @dev all aUSDC yield from AAVE goes to the senior vault\n    /// @dev deducts junior vault usdc (swapped + unhedged glp) from overall balance\n    /// @return usdcAmount borrowed from senior tranche\n    function getUsdcBorrowed() public view returns (uint256 usdcAmount) {\n        return\n            uint256(\n                state.aUsdc.balanceOf(address(this)).toInt256() -\n                    state.dnUsdcDeposited -\n                    state.unhedgedGlpInUsdc.toInt256()\n            );\n    }\n\n    /// @notice returns maximum amount of shares that a user can deposit\n    /// @return maximum asset amount\n    function maxDeposit(address) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\n        uint256 _depositCap = state.depositCap;\n        uint256 _totalAssets = state.totalAssets(true);\n        return _depositCap > _totalAssets ? _depositCap - _totalAssets : 0;\n    }\n\n    /// @notice returns maximum amount of shares that can be minted for a given user\n    /// @param receiver address of the user\n    /// @return maximum share amount\n    function maxMint(address receiver) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\n        return convertToShares(maxDeposit(receiver));\n    }\n\n    /// @notice converts asset amount to share amount\n    /// @param assets asset amount to convert to shares\n    /// @return share amount corresponding to given asset amount\n    function convertToShares(uint256 assets) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivDown(supply, state.totalAssets(true));\n    }\n\n    /// @notice converts share amount to asset amount\n    /// @param shares asset amount to convert to assets\n    /// @return asset amount corresponding to given share amount\n    function convertToAssets(uint256 shares) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivDown(state.totalAssets(false), supply);\n    }\n\n    /// @notice preview function for using assets to mint shares\n    /// @param assets number of assets to be deposited\n    /// @return shares that would be minted to the user\n    function previewDeposit(\n        uint256 assets\n    ) public view virtual override(IERC4626, ERC4626Upgradeable) returns (uint256) {\n        uint256 netAssets = state.getSlippageAdjustedAssets({ assets: assets, isDeposit: true });\n        return convertToShares(netAssets);\n    }\n\n    /// @notice preview function for minting of shares\n    /// @param shares number of shares to mint\n    /// @return assets that would be taken from the user\n    function previewMint(uint256 shares) public view virtual override(IERC4626, ERC4626Upgradeable) returns (uint256) {\n        uint256 supply = totalSupply();\n\n        if (supply == 0) return shares;\n\n        uint256 assets = convertToAssets(shares);\n        uint256 netAssets = state.getSlippageAdjustedAssets({ assets: assets, isDeposit: true });\n\n        uint256 slippageInAssetTerms = assets - netAssets;\n\n        return assets + slippageInAssetTerms;\n    }\n\n    /// @notice preview function for withdrawal of assets\n    /// @param assets that would be given to the user\n    /// @return shares that would be burnt\n    function previewWithdraw(\n        uint256 assets\n    ) public view virtual override(IERC4626, ERC4626Upgradeable) returns (uint256) {\n        uint256 supply = totalSupply();\n\n        if (supply == 0) return assets;\n\n        uint256 netAssets = state.getSlippageAdjustedAssets({ assets: assets, isDeposit: false });\n\n        return netAssets.mulDivUp(supply * MAX_BPS, state.totalAssets(false) * (MAX_BPS - state.withdrawFeeBps));\n    }\n\n    /// @notice preview function for redeeming shares\n    /// @param shares that would be taken from the user\n    /// @return assets that user would get\n    function previewRedeem(\n        uint256 shares\n    ) public view virtual override(IERC4626, ERC4626Upgradeable) returns (uint256) {\n        uint256 supply = totalSupply();\n\n        if (supply == 0) return shares;\n\n        uint256 assets = convertToAssets(shares);\n        uint256 netAssets = state.getSlippageAdjustedAssets({ assets: assets, isDeposit: false });\n\n        return netAssets.mulDivDown(MAX_BPS - state.withdrawFeeBps, MAX_BPS);\n    }\n\n    /// @notice returns deposit cap in terms of asset tokens\n    function depositCap() external view returns (uint256) {\n        return state.depositCap;\n    }\n\n    /// @notice returns current borrows for BTC and ETH respectively\n    /// @return currentBtcBorrow amount of btc borrowed from AAVE\n    /// @return currentEthBorrow amount of eth borrowed from AAVE\n    function getCurrentBorrows() external view returns (uint256 currentBtcBorrow, uint256 currentEthBorrow) {\n        return state.getCurrentBorrows();\n    }\n\n    /// @notice returns optimal borrows for BTC and ETH respectively basis glpDeposited amount\n    /// @param glpDeposited amount of glp for which optimal borrow needs to be calculated\n    /// @return optimalBtcBorrow optimal amount of btc borrowed from AAVE\n    /// @return optimalEthBorrow optimal amount of eth borrowed from AAVE\n    function getOptimalBorrows(\n        uint256 glpDeposited,\n        bool withUpdatedPoolAmounts\n    ) external view returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) {\n        return state.getOptimalBorrows(glpDeposited, withUpdatedPoolAmounts);\n    }\n\n    /// @notice returns junior vault share of usdc deposited to AAVE\n    function dnUsdcDeposited() external view returns (int256) {\n        return state.dnUsdcDeposited;\n    }\n\n    function getAdminParams()\n        external\n        view\n        returns (\n            address keeper,\n            IDnGmxSeniorVault dnGmxSeniorVault,\n            uint256 depositCap_,\n            uint16 withdrawFeeBps,\n            uint24 feeTierWethWbtcPool\n        )\n    {\n        return (\n            state.keeper,\n            state.dnGmxSeniorVault,\n            state.depositCap,\n            state.withdrawFeeBps,\n            state.feeTierWethWbtcPool\n        );\n    }\n\n    function getThresholds()\n        external\n        view\n        returns (\n            uint16 slippageThresholdSwapBtcBps,\n            uint16 slippageThresholdSwapEthBps,\n            uint16 slippageThresholdGmxBps,\n            uint128 usdcConversionThreshold,\n            uint128 wethConversionThreshold,\n            uint128 hedgeUsdcAmountThreshold,\n            uint128 partialBtcHedgeUsdcAmountThreshold,\n            uint128 partialEthHedgeUsdcAmountThreshold\n        )\n    {\n        return (\n            state.slippageThresholdSwapBtcBps,\n            state.slippageThresholdSwapEthBps,\n            state.slippageThresholdGmxBps,\n            state.usdcConversionThreshold,\n            state.wethConversionThreshold,\n            state.hedgeUsdcAmountThreshold,\n            state.partialBtcHedgeUsdcAmountThreshold,\n            state.partialEthHedgeUsdcAmountThreshold\n        );\n    }\n\n    function getRebalanceParams()\n        external\n        view\n        returns (uint32 rebalanceTimeThreshold, uint16 rebalanceDeltaThresholdBps, uint16 rebalanceHfThresholdBps)\n    {\n        return (state.rebalanceTimeThreshold, state.rebalanceDeltaThresholdBps, state.rebalanceHfThresholdBps);\n    }\n\n    function getHedgeParams()\n        external\n        view\n        returns (\n            IBalancerVault balancerVault,\n            ISwapRouter swapRouter,\n            uint256 targetHealthFactor,\n            IRewardsController aaveRewardsController\n        )\n    {\n        return (state.balancerVault, state.swapRouter, state.targetHealthFactor, state.aaveRewardsController);\n    }\n\n    /* ##################################################################\n                            INTERNAL FUNCTIONS\n    ################################################################## */\n\n    function _emitVaultState(uint256 eventType) internal {\n        state.emitVaultState(eventType);\n    }\n\n    /*\n        DEPOSIT/WITHDRAW HELPERS\n    */\n\n    /// @notice harvests fees and rebalances profits before deposits and withdrawals\n    /// @dev called first on any deposit/withdrawals\n    function _rebalanceBeforeShareAllocation() internal {\n        if (state.btcPoolAmount == 0)\n            state.btcPoolAmount = (state.gmxVault.poolAmounts(address(state.wbtc))).toUint128();\n        if (state.ethPoolAmount == 0)\n            state.ethPoolAmount = (state.gmxVault.poolAmounts(address(state.weth))).toUint128();\n\n        (uint256 currentBtc, uint256 currentEth) = state.getCurrentBorrows();\n        uint256 totalCurrentBorrowValue = state.getBorrowValue(currentBtc, currentEth); // = total position value of current btc and eth position\n\n        _emitVaultState(0);\n\n        // harvest fees\n        state.harvestFees();\n\n        // rebalance profit\n        state.rebalanceProfit(totalCurrentBorrowValue);\n    }\n\n    function beforeWithdraw(uint256 assets, uint256, address) internal override {\n        (uint256 currentBtc, uint256 currentEth) = state.getCurrentBorrows();\n\n        //rebalance of hedge based on assets after withdraw (before withdraw assets - withdrawn assets)\n        state.rebalanceHedge(currentBtc, currentEth, state.totalGlp(false) - assets, false);\n    }\n\n    function afterDeposit(uint256, uint256, address) internal override {\n        if (totalAssets() > state.depositCap) revert DepositCapExceeded();\n        (uint256 currentBtc, uint256 currentEth) = state.getCurrentBorrows();\n\n        //rebalance of hedge based on assets after deposit (after deposit assets)\n        state.rebalanceHedge(currentBtc, currentEth, state.totalGlp(false), false);\n    }\n}\n"
    },
    "contracts/vaults/DnGmxSeniorVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IAToken } from '@aave/core-v3/contracts/interfaces/IAToken.sol';\nimport { IPool } from '@aave/core-v3/contracts/interfaces/IPool.sol';\nimport { IPoolAddressesProvider } from '@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol';\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\n\nimport { FullMath } from '@uniswap/v3-core/contracts/libraries/FullMath.sol';\n\nimport { IBorrower } from '../interfaces/IBorrower.sol';\nimport { IDnGmxSeniorVault } from '../interfaces/IDnGmxSeniorVault.sol';\nimport { IERC4626 } from '../interfaces/IERC4626.sol';\n\nimport { ERC4626Upgradeable } from '../ERC4626/ERC4626Upgradeable.sol';\nimport { FeeSplitStrategy } from '../libraries/FeeSplitStrategy.sol';\n\n/**\n * @title Delta Neutral GMX Senior Tranche contract\n * @notice Implements the handling of senior tranche which acts as a lender of aUSDC for junior tranche to\n * borrow and hedge tokens using AAVE\n * @notice It is upgradable contract (via TransparentUpgradeableProxy proxy owned by ProxyAdmin)\n * @author RageTrade\n **/\ncontract DnGmxSeniorVault is IDnGmxSeniorVault, ERC4626Upgradeable, OwnableUpgradeable, PausableUpgradeable {\n    using FullMath for uint256;\n    using FeeSplitStrategy for FeeSplitStrategy.Info;\n\n    uint16 internal constant MAX_BPS = 10_000;\n\n    // maximum assets(usdc) that can be deposited into the vault\n    uint256 public depositCap;\n    // maximum utilizqtion that the vault can go upto due to a withdrawal\n    uint256 public maxUtilizationBps;\n\n    // leverage pool which can take usdc from senior tranche to lend against junior tranche shares\n    IBorrower public leveragePool;\n\n    // junior tranche which can take usdc from senior tranche against the GLP assets deposited to borrow for taking hedges on AAVE\n    IBorrower public dnGmxJuniorVault;\n\n    // fee split vs utilization curve\n    // two sloped curve similar to the one used by AAVE\n    FeeSplitStrategy.Info public feeStrategy;\n\n    // AAVE pool\n    IPool internal pool;\n    // AAVE usdc supply token\n    IAToken internal aUsdc;\n    // AAVE oracle\n    IPriceOracle internal oracle;\n    // AAVE pool address provider\n    IPoolAddressesProvider internal poolAddressProvider;\n    // Borrow caps on leverage pool and junior tranche\n    mapping(address borrower => uint256 cap) public borrowCaps;\n\n    // these gaps are added to allow adding new variables without shifting down inheritance chain\n    uint256[50] private __gaps;\n\n    // ensures caller is valid borrower\n    modifier onlyBorrower() {\n        if (msg.sender != address(dnGmxJuniorVault) && msg.sender != address(leveragePool)) revert CallerNotBorrower();\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            INIT FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice initializer\n    /// @param _name name of vault share token\n    /// @param _symbol symbol of vault share token\n    /// @param _usdc address of usdc token\n    /// @param _poolAddressesProvider add\n    function initialize(\n        address _usdc,\n        string calldata _name,\n        string calldata _symbol,\n        address _poolAddressesProvider\n    ) external initializer {\n        __Ownable_init();\n        __Pausable_init();\n        __ERC4626Upgradeable_init(_usdc, _name, _symbol);\n\n        poolAddressProvider = IPoolAddressesProvider(_poolAddressesProvider);\n\n        pool = IPool(poolAddressProvider.getPool());\n        aUsdc = IAToken(pool.getReserveData(_usdc).aTokenAddress);\n        oracle = IPriceOracle(poolAddressProvider.getPriceOracle());\n\n        aUsdc.approve(address(pool), type(uint256).max);\n        IERC20(asset).approve(address(pool), type(uint256).max);\n    }\n\n    /// @notice grants allowances for tokens to relevant external contracts\n    /// @dev to be called once the vault is deployed\n    function grantAllowances() external onlyOwner {\n        address aavePool = address(pool);\n\n        // allow aave lending pool to spend asset\n        IERC20(asset).approve(aavePool, type(uint256).max);\n        // allow aave lending pool to spend interest bearing token\n        aUsdc.approve(aavePool, type(uint256).max);\n\n        emit AllowancesGranted();\n    }\n\n    /// @notice pause deposit, mint, withdraw and redeem\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /// @notice unpause deposit, mint, withdraw and redeem\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             ADMIN SETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice sets deposit cap (6 decimals)\n    /// @param _newDepositCap: updated deposit cap\n    /// @dev depositCap = limit on the asset amount (usdc) that can be deposited into the vault\n    function setDepositCap(uint256 _newDepositCap) external onlyOwner {\n        depositCap = _newDepositCap;\n        emit DepositCapUpdated(_newDepositCap);\n    }\n\n    /// @notice sets leverage pool address\n    /// @param _leveragePool: updated deposit cap\n    function setLeveragePool(IBorrower _leveragePool) external onlyOwner {\n        leveragePool = _leveragePool;\n        emit LeveragePoolUpdated(_leveragePool);\n    }\n\n    /// @notice sets junior tranche address\n    /// @param _dnGmxJuniorVault: updated deposit cap\n    function setDnGmxJuniorVault(IBorrower _dnGmxJuniorVault) external onlyOwner {\n        dnGmxJuniorVault = _dnGmxJuniorVault;\n        emit DnGmxJuniorVaultUpdated(_dnGmxJuniorVault);\n    }\n\n    /// @notice sets max utilization bps\n    /// @dev maximum utilization that vault is allowed to go upto on withdrawals (beyond this withdrawals would fail)\n    /// @param _maxUtilizationBps: updated max utilization bps\n    function setMaxUtilizationBps(uint256 _maxUtilizationBps) external onlyOwner {\n        if (_maxUtilizationBps > MAX_BPS) revert InvalidMaxUtilizationBps();\n        maxUtilizationBps = _maxUtilizationBps;\n        emit MaxUtilizationBpsUpdated(_maxUtilizationBps);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                      STRATEGY PARAMETERS SETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice updates borrow cap for junior tranche or leverage pool\n    /// @notice borrowCap = max amount a borrower can take from senior tranche\n    /// @param borrowerAddress: address of borrower for whom cap needs to be updated\n    /// @param cap: new cap for the borrower\n    function updateBorrowCap(address borrowerAddress, uint256 cap) external onlyOwner {\n        if (borrowerAddress != address(dnGmxJuniorVault) && borrowerAddress != address(leveragePool))\n            revert InvalidBorrowerAddress();\n\n        if (IBorrower(borrowerAddress).getUsdcBorrowed() >= cap) revert InvalidCapUpdate();\n\n        borrowCaps[borrowerAddress] = cap;\n        // give allowance to borrower to pull whenever required\n        aUsdc.approve(borrowerAddress, cap);\n\n        emit BorrowCapUpdated(borrowerAddress, cap);\n    }\n\n    /// @notice updates fee split strategy\n    /// @notice this determines how eth rewards should be split between junior and senior tranche\n    /// @notice basis the utilization of senior tranche\n    /// @param _feeStrategy: new fee strategy\n    function updateFeeStrategyParams(FeeSplitStrategy.Info calldata _feeStrategy) external onlyOwner {\n        feeStrategy = _feeStrategy;\n        emit FeeStrategyUpdated(\n            _feeStrategy.optimalUtilizationRate,\n            _feeStrategy.baseVariableBorrowRate,\n            _feeStrategy.variableRateSlope1,\n            _feeStrategy.variableRateSlope2\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            PROTOCOL FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice borrow aUSDC\n    /// @dev harvests fees from junior tranche since utilization changes\n    /// @param amount amount of aUSDC to transfer from senior tranche to borrower\n    function borrow(uint256 amount) external onlyBorrower {\n        // revert on invalid borrow amount\n        if (amount == 0 || amount > availableBorrow(msg.sender)) revert InvalidBorrowAmount();\n\n        // lazily harvest fees (harvest would return early if not enough rewards accrued)\n        dnGmxJuniorVault.harvestFees();\n\n        // transfers aUsdc to borrower\n        // but doesn't reduce totalAssets of vault since borrwed amounts are factored in\n        aUsdc.transfer(msg.sender, amount);\n    }\n\n    /// @notice repay aUSDC\n    /// @dev harvests fees from junior tranche since utilization changes\n    /// @param amount amount of aUSDC to transfer from borrower to senior tranche\n    function repay(uint256 amount) external onlyBorrower {\n        dnGmxJuniorVault.harvestFees();\n\n        // borrower should have given allowance to spend aUsdc\n        aUsdc.transferFrom(msg.sender, address(this), amount);\n    }\n\n    /// @notice deposit usdc\n    /// @dev harvests fees from junior tranche since utilization changes\n    /// @param amount amount of usdc to be deposited\n    /// @param to receiver of shares\n    /// @return shares minted to receiver\n    function deposit(\n        uint256 amount,\n        address to\n    ) public virtual override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 shares) {\n        _emitVaultState(0);\n        // harvesting fees so asset to shares conversion rate is not stale\n        dnGmxJuniorVault.harvestFees();\n        shares = super.deposit(amount, to);\n\n        _emitVaultState(1);\n    }\n\n    /// @notice deposit usdc\n    /// @dev harvests fees from junior tranche since utilization changes\n    /// @param shares amount of shares to be minted\n    /// @param to receiver of shares\n    /// @return amount of asset used to mint shares\n    function mint(\n        uint256 shares,\n        address to\n    ) public virtual override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 amount) {\n        _emitVaultState(0);\n\n        // harvesting fees so asset to shares conversion rate is not stale\n        dnGmxJuniorVault.harvestFees();\n        amount = super.mint(shares, to);\n\n        _emitVaultState(1);\n    }\n\n    /// @notice withdraw usdc\n    /// @dev harvests fees from junior tranche since utilization changes\n    /// @param assets amount of usdc to be transferred\n    /// @param receiver receiver of assets\n    /// @param owner owner of the shares to be burnt\n    /// @return shares amount of shares burned\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 shares) {\n        // harvesting fees so asset to shares conversion rate is not stale\n        _emitVaultState(0);\n\n        dnGmxJuniorVault.harvestFees();\n        shares = super.withdraw(assets, receiver, owner);\n\n        _emitVaultState(1);\n    }\n\n    /// @notice withdraw usdc\n    /// @dev harvests fees from junior tranche since utilization changes\n    /// @param shares amount of shares to be burnt\n    /// @param receiver receiver of assets\n    /// @param owner owner of the shares to be burnt\n    /// @return assets amount of assets received by receiver\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) public override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 assets) {\n        _emitVaultState(0);\n        // harvesting fees so asset to shares conversion rate is not stale\n        dnGmxJuniorVault.harvestFees();\n        assets = super.redeem(shares, receiver, owner);\n\n        _emitVaultState(1);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC4626 HOOKS OVERRIDE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice converts aUSDC to USDC before assets are withdrawn to receiver\n    /// @notice also check if the maxUtilization is not being breached (reverts if it does)\n    function beforeWithdraw(uint256 assets, uint256, address) internal override {\n        /// @dev withdrawal will fail if the utilization goes above maxUtilization value due to a withdrawal\n        // totalUsdcBorrowed will reduce when borrower (junior vault) repays\n        if (totalUsdcBorrowed() > ((totalAssets() - assets) * maxUtilizationBps) / MAX_BPS)\n            revert MaxUtilizationBreached();\n\n        // take out required assets from aave lending pool\n        pool.withdraw(address(asset), assets, address(this));\n    }\n\n    /// @notice converts USDC to aUSDC after assets are taken from depositor\n    /// @notice also check if the depositCap is not being breached (reverts if it does)\n    function afterDeposit(uint256 assets, uint256, address) internal override {\n        // assets are not counted in 'totalAssets' yet because they are not supplied to aave pool\n        if ((totalAssets() + assets) > depositCap) revert DepositCapExceeded();\n\n        // usdc is direclty supplied to lending pool and earns interest\n        // and hence increasing totalAssets of the vault\n        pool.supply(address(asset), assets, address(this), 0);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                GETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice returns price of a single asset token in X128\n    /// @dev only for external / frontend use, not used within contract\n    /// @return Q128 price of asset\n    function getPriceX128() public view returns (uint256) {\n        uint256 price = oracle.getAssetPrice(address(asset));\n\n        // @dev aave returns from same source as chainlink (which is 8 decimals)\n        // usdc decimals - (chainlink decimals + asset decimals) = 6-8-6 = 8\n        return price.mulDiv(1 << 128, 1e8);\n    }\n\n    /// @notice returns overall vault market value for the vault by valueing the underlying assets\n    /// @return Q128 price of asset\n    function getVaultMarketValue() public view returns (uint256) {\n        // use aave's oracle to get price of usdc\n        uint256 price = oracle.getAssetPrice(address(asset));\n\n        // chainlink returns USD denomiated oracles in 1e8\n        return totalAssets().mulDiv(price, 1e8);\n    }\n\n    /// @notice query amount of assset borrwed by all borrowers combined\n    /// @return usdcBorrowed total usdc borrowed\n    function totalUsdcBorrowed() public view returns (uint256 usdcBorrowed) {\n        /// @dev only call getUsdcBorrowed if address is set\n        if (address(leveragePool) != address(0)) usdcBorrowed += leveragePool.getUsdcBorrowed();\n        if (address(dnGmxJuniorVault) != address(0)) usdcBorrowed += dnGmxJuniorVault.getUsdcBorrowed();\n    }\n\n    /// @notice returns eth reward split rate basis utilization in E30\n    /// @return feeSplitRate part that should go to the senior tranche and remaining to junior tranche\n    function getEthRewardsSplitRate() public view returns (uint256 feeSplitRate) {\n        // feeSplitRate would adjust automatically depending upon utilization\n        feeSplitRate = feeStrategy.calculateFeeSplit(aUsdc.balanceOf(address(this)), totalUsdcBorrowed());\n    }\n\n    /// @notice return the available borrow amount for a given borrower address\n    /// @param borrower allowed borrower address\n    /// @return availableAUsdc max aUsdc which given borrower can borrow\n    function availableBorrow(address borrower) public view returns (uint256 availableAUsdc) {\n        uint256 borrowCap = borrowCaps[borrower];\n        uint256 borrowed = IBorrower(borrower).getUsdcBorrowed();\n\n        if (borrowed > borrowCap) return 0;\n\n        uint256 availableBasisCap = borrowCap - borrowed;\n        uint256 availableBasisBalance = aUsdc.balanceOf(address(this));\n\n        availableAUsdc = availableBasisCap < availableBasisBalance ? availableBasisCap : availableBasisBalance;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                       ERC4626 GETTERS OVERRIDES\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice decimals of vault shares (= usdc decimals)\n    /// @dev overriding because default decimals are 18\n    /// @return decimals (6)\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n\n    /// @notice derive total assets managed by senior vault\n    /// @return amount total usdc under management\n    function totalAssets() public view override(IERC4626, ERC4626Upgradeable) returns (uint256 amount) {\n        amount = aUsdc.balanceOf(address(this));\n        amount += totalUsdcBorrowed();\n    }\n\n    /// @notice max no. of assets which a user can deposit in single call\n    /// @return max no. of assets\n    function maxDeposit(address) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\n        uint256 cap = depositCap;\n        uint256 total = totalAssets();\n\n        // if cap is not reached, user can deposit the difference\n        // otherwise, user can deposit 0 assets\n        return total < cap ? cap - total : 0;\n    }\n\n    /// @notice max no. of shares which a user can mint in single call\n    /// @return max no. of shares\n    function maxMint(address) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\n        return convertToShares(maxDeposit(address(0)));\n    }\n\n    /// @notice max no. of assets which a user can withdraw in single call\n    /// @dev checks the max amount basis user balance and maxUtilizationBps and gives the minimum of the two\n    /// @param owner address whose maximum withdrawable assets needs to be computed\n    /// @return max no. of assets\n    function maxWithdraw(address owner) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\n        uint256 total = totalAssets();\n        uint256 borrowed = totalUsdcBorrowed();\n\n        // checks the max withdrawable amount until which the vault remains below max utilization\n        uint256 scaledBorrow = (borrowed * MAX_BPS) / maxUtilizationBps;\n        uint256 maxAvailable = total > scaledBorrow ? total - scaledBorrow : 0;\n\n        // checks the balance of the user\n        uint256 maxOfUser = convertToAssets(balanceOf(owner));\n\n        // user can withdraw all assets (of owned shares) by if vault has enough\n        // else, user can withdraw whatever is left with vault (non-borrowed)\n        return maxOfUser < maxAvailable ? maxOfUser : maxAvailable;\n    }\n\n    /// @notice max no. of shares which a user can burn in single call\n    /// @param owner address whose maximum redeemable shares needs to be computed\n    /// @return max no. of shares\n    function maxRedeem(address owner) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\n        return convertToShares(maxWithdraw(owner));\n    }\n\n    function _emitVaultState(uint256 eventType) internal {\n        emit VaultState(eventType, aUsdc.balanceOf(address(dnGmxJuniorVault)), aUsdc.balanceOf(address(this)));\n    }\n}\n"
    },
    "contracts/vaults/DnGmxTraderHedgeStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IVault } from '../interfaces/gmx/IVault.sol';\n\nimport { SafeCast } from '../libraries/SafeCast.sol';\nimport { IGlpManager } from '../interfaces/gmx/IGlpManager.sol';\nimport { IDnGmxTraderHedgeStrategy } from '../interfaces/IDnGmxTraderHedgeStrategy.sol';\n\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\n\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\nimport { IDnGmxJuniorVault } from '../interfaces/IDnGmxJuniorVault.sol';\n\nimport { SignedFixedPointMathLib } from '../libraries/SignedFixedPointMathLib.sol';\nimport { SignedMathUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol';\n\ncontract DnGmxTraderHedgeStrategy is OwnableUpgradeable, IDnGmxTraderHedgeStrategy {\n    using FixedPointMathLib for uint256;\n    using SafeCast for int256;\n    using SafeCast for uint256;\n    using SignedFixedPointMathLib for int256;\n    using SignedMathUpgradeable for int256;\n\n    uint256 internal constant MAX_BPS = 10_000;\n    uint256 internal constant PRICE_PRECISION = 1e30;\n\n    uint16 public traderOIHedgeBps;\n    address public keeper;\n\n    IVault public gmxVault;\n\n    IGlpManager public glpManager;\n\n    IDnGmxJuniorVault public juniorVault;\n\n    IERC20Metadata public glp;\n\n    IERC20Metadata public weth;\n\n    IERC20Metadata public wbtc;\n\n    int128 public btcTraderOIHedge; // wbtc token decimals (8 decimals)\n    int128 public ethTraderOIHedge; // weth token deceimals (18 decimals)\n\n    // these gaps are added to allow adding new variables without shifting down inheritance chain\n    uint256[50] private __gaps;\n\n    error InvalidTraderOIHedgeBps(uint256 traderOIHedgeBps);\n    error InvalidTraderOIHedges(int128 btcTraderOIHedge, int128 ethTraderOIHedge);\n    error OnlyKeeperAllowed(address msgSender, address authorisedKeeperAddress);\n\n    event TraderOIHedgeBpsUpdated(uint256 traderOIHedgeBps);\n    event TraderOIHedgesUpdated(int256 btcTraderOIHedge, int256 ethTraderOIHedge);\n\n    event KeeperUpdated(address indexed oldKeeper, address indexed newKeeper);\n\n    modifier onlyKeeper() {\n        if (msg.sender != keeper) revert OnlyKeeperAllowed(msg.sender, keeper);\n        _;\n    }\n\n    /// @notice initialize hedge strategy contract\n    /// @param _keeper keeper address\n    /// @param _gmxVault gmxVault address\n    /// @param _glpManager glpManager address\n    /// @param _juniorVault juniorVault address\n    /// @param _glp glp address\n    /// @param _weth weth address\n    /// @param _wbtc wbtc address\n    function initialize(\n        address _keeper,\n        IVault _gmxVault,\n        IGlpManager _glpManager,\n        IDnGmxJuniorVault _juniorVault,\n        IERC20Metadata _glp,\n        IERC20Metadata _weth,\n        IERC20Metadata _wbtc\n    ) external initializer {\n        __Ownable_init();\n        __DnGmxTraderHedgeStrategy_init(_keeper, _gmxVault, _glpManager, _juniorVault, _glp, _weth, _wbtc);\n    }\n\n    /// @notice initialize hedge strategy params\n    /// @param _keeper keeper address\n    /// @param _gmxVault gmxVault address\n    /// @param _glpManager glpManager address\n    /// @param _juniorVault juniorVault address\n    /// @param _glp glp address\n    /// @param _weth weth address\n    /// @param _wbtc wbtc address\n    function __DnGmxTraderHedgeStrategy_init(\n        address _keeper,\n        IVault _gmxVault,\n        IGlpManager _glpManager,\n        IDnGmxJuniorVault _juniorVault,\n        IERC20Metadata _glp,\n        IERC20Metadata _weth,\n        IERC20Metadata _wbtc\n    ) internal onlyInitializing {\n        keeper = _keeper;\n        gmxVault = _gmxVault;\n        glpManager = _glpManager;\n        juniorVault = _juniorVault;\n        glp = _glp;\n        weth = _weth;\n        wbtc = _wbtc;\n    }\n\n    /// @notice set keeper address\n    /// @param _keeper keeper address\n    function setKeeper(address _keeper) external onlyOwner {\n        emit KeeperUpdated(keeper, _keeper);\n        keeper = _keeper;\n    }\n\n    /// @notice set hedge adjustments basis trader OIs for whole of glp supply (this is scaled to required by vault in juniorVaultManager)\n    /// @param _btcTraderOIHedge btc trader OI hedge for whole glp supply\n    /// @param _ethTraderOIHedge eth trader OI hedge for whole glp supply\n    function overrideTraderOIHedges(int128 _btcTraderOIHedge, int128 _ethTraderOIHedge) external onlyKeeper {\n        if (!_checkHedgeAmounts(_btcTraderOIHedge, _ethTraderOIHedge))\n            revert InvalidTraderOIHedges(_btcTraderOIHedge, _ethTraderOIHedge);\n        btcTraderOIHedge = _btcTraderOIHedge;\n        ethTraderOIHedge = _ethTraderOIHedge;\n\n        emit TraderOIHedgesUpdated(_btcTraderOIHedge, _ethTraderOIHedge);\n    }\n\n    /// @notice set trader OI hedge bps\n    /// @param _traderOIHedgeBps trader OI hedge bps\n    function setTraderOIHedgeBps(uint16 _traderOIHedgeBps) external onlyKeeper {\n        if (_traderOIHedgeBps > MAX_BPS) revert InvalidTraderOIHedgeBps(_traderOIHedgeBps);\n        traderOIHedgeBps = _traderOIHedgeBps;\n        emit TraderOIHedgeBpsUpdated(_traderOIHedgeBps);\n    }\n\n    /// @notice set hedge adjustments basis trader OIs\n    function setTraderOIHedges() external onlyKeeper {\n        int128 _btcTraderOIHedge = _getTokenHedgeAmount(address(wbtc), traderOIHedgeBps).toInt128();\n        int128 _ethTraderOIHedge = _getTokenHedgeAmount(address(weth), traderOIHedgeBps).toInt128();\n\n        btcTraderOIHedge = _btcTraderOIHedge;\n        ethTraderOIHedge = _ethTraderOIHedge;\n\n        emit TraderOIHedgesUpdated(_btcTraderOIHedge, _ethTraderOIHedge);\n    }\n\n    ///@notice returns token amount to hedge underlying glp amount deposited\n    ///@param token address of token\n    ///@param _traderOIHedgeBps % of trader OI to hedge\n    ///@return amount of tokens of the supplied address underlying the given amount of glp\n    function _getTokenHedgeAmount(address token, uint16 _traderOIHedgeBps) internal view returns (int256) {\n        uint256 tokenPrecision = 10 ** IERC20Metadata(token).decimals();\n\n        uint256 globalShort = gmxVault.globalShortSizes(token);\n        uint256 globalAveragePrice = glpManager.getGlobalShortAveragePrice(token);\n        uint256 reservedAmount = gmxVault.reservedAmounts(token);\n\n        int256 tokenReserve = (reservedAmount.mulDivDown(PRICE_PRECISION, tokenPrecision)).toInt256() -\n            globalShort.mulDivDown(PRICE_PRECISION, globalAveragePrice).toInt256();\n\n        return tokenReserve.mulDivDown(_traderOIHedgeBps * tokenPrecision, PRICE_PRECISION * MAX_BPS);\n    }\n\n    ///@notice checks if the hedge amounts are within the correct bounds\n    ///@param _btcTraderOIHedge trader OI hedge for BTC\n    ///@param _ethTraderOIHedge trader OI hedge for ETH\n    function _checkHedgeAmounts(int128 _btcTraderOIHedge, int128 _ethTraderOIHedge) internal view returns (bool) {\n        int256 btcTraderOIMax = _getMaxTokenHedgeAmount(address(wbtc));\n        int256 ethTraderOIMax = _getMaxTokenHedgeAmount(address(weth));\n\n        if (\n            !(_checkTokenHedgeAmount(_btcTraderOIHedge, btcTraderOIMax) &&\n                _checkTokenHedgeAmount(_ethTraderOIHedge, ethTraderOIMax))\n        ) return false;\n\n        return true;\n    }\n\n    ///@notice checks if the hedge amounts are within the correct bounds\n    ///@param tokenTraderOIHedge token trader OI hedge for token\n    ///@param tokenTraderOIMax token trader OI hedge maximum amount\n    function _checkTokenHedgeAmount(int256 tokenTraderOIHedge, int256 tokenTraderOIMax) internal pure returns (bool) {\n        if (tokenTraderOIHedge.sign() * tokenTraderOIMax.sign() < 0) return false;\n        if (tokenTraderOIHedge.abs() > tokenTraderOIMax.abs()) return false;\n\n        return true;\n    }\n\n    ///@notice returns token amount underlying glp amount deposited\n    ///@param token address of token\n    ///@return amount of tokens of the supplied address underlying the given amount of glp\n    function _getMaxTokenHedgeAmount(address token) internal view returns (int256) {\n        uint256 tokenPrecision = 10 ** IERC20Metadata(token).decimals();\n\n        uint256 globalShort = gmxVault.globalShortSizes(token);\n        uint256 globalAveragePrice = glpManager.getGlobalShortAveragePrice(token);\n        uint256 reservedAmount = gmxVault.reservedAmounts(token);\n        // uint256 poolAmount = gmxVault.poolAmounts(token);\n\n        int256 tokenReserve = (reservedAmount.mulDivDown(PRICE_PRECISION, tokenPrecision)).toInt256() -\n            globalShort.mulDivDown(PRICE_PRECISION, globalAveragePrice).toInt256();\n\n        return tokenReserve.mulDivDown(tokenPrecision, PRICE_PRECISION);\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 256
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}