{
  "address": "0x46e2880a3b6E4613Be967eb9C159A3C64FF18f7C",
  "abi": [
    {
      "inputs": [],
      "name": "ArraysLengthMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "glpQuantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcQuantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "fromGlpToUsdc",
          "type": "bool"
        }
      ],
      "name": "GlpSwapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wethHarvested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "esGmxStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "juniorVaultWeth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seniorVaultWeth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "juniorVaultGlp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seniorVaultAUsdc",
          "type": "uint256"
        }
      ],
      "name": "RewardsHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromQuantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toQuantity",
          "type": "uint256"
        }
      ],
      "name": "TokenSwapped",
      "type": "event"
    }
  ],
  "transactionHash": "0x37dd8876be3193ed83e7069223f0ca28e8de5700fe5348853643779d62c0497a",
  "receipt": {
    "to": null,
    "from": "0x134dD282b7b3De06d4f5916c5e801a605b8854C3",
    "contractAddress": "0x46e2880a3b6E4613Be967eb9C159A3C64FF18f7C",
    "transactionIndex": 1,
    "gasUsed": "19721522",
    "logsBloom": "0x
    "blockHash": "0x4edfe9cbae60d4748aed90cacf75eb76bd3369fd7e0989f1d8fc713347a39e2d",
    "transactionHash": "0x37dd8876be3193ed83e7069223f0ca28e8de5700fe5348853643779d62c0497a",
    "logs": [],
    "blockNumber": 41926497,
    "cumulativeGasUsed": "19721522",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "effbdb96d4707fe9176b192b648a27e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ArraysLengthMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"glpQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromGlpToUsdc\",\"type\":\"bool\"}],\"name\":\"GlpSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethHarvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"esGmxStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"juniorVaultWeth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seniorVaultWeth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"juniorVaultGlp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seniorVaultAUsdc\",\"type\":\"uint256\"}],\"name\":\"RewardsHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toQuantity\",\"type\":\"uint256\"}],\"name\":\"TokenSwapped\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"RageTrade\",\"details\":\"junior vault delegates calls to this library for logic\",\"kind\":\"dev\",\"methods\":{\"flashloanAmounts(DnGmxJuniorVaultManager.State storage,address,uint256,uint256)\":{\"params\":{\"currentBorrow\":\"curret token borrow from AAVE\",\"optimalBorrow\":\"optimal token borrow to completely hedge sGlp\",\"state\":\"set of all state variables of vault\",\"token\":\"address of token\"},\"returns\":{\"repayDebt\":\"true then reduce token hedge, false then increase token hedge\",\"tokenAmount\":\"amount of tokens to be swapped\",\"usdcAmount\":\"minimum/maximum amount of usdc basis swap direction\"}},\"getBorrowValue(DnGmxJuniorVaultManager.State storage,uint256,uint256)\":{\"params\":{\"btcAmount\":\"amount of btc\",\"ethAmount\":\"amount of eth\",\"state\":\"set of all state variables of vault\"},\"returns\":{\"borrowValue\":\"value of the given token amounts\"}},\"getCurrentBorrows(DnGmxJuniorVaultManager.State storage)\":{\"params\":{\"state\":\"set of all state variables of vault\"},\"returns\":{\"currentBtcBorrow\":\"amount of btc currently borrowed from AAVE\",\"currentEthBorrow\":\"amount of eth currently borrowed from AAVE\"}},\"getGlpPrice(DnGmxJuniorVaultManager.State storage,bool)\":{\"params\":{\"maximize\":\"true to get maximum price and flase to get minimum\",\"state\":\"set of all state variables of vault\"},\"returns\":{\"_0\":\"glp price in usd\"}},\"getGlpPriceInUsdc(DnGmxJuniorVaultManager.State storage,bool)\":{\"params\":{\"maximize\":\"true to get maximum price and flase to get minimum\",\"state\":\"set of all state variables of vault\"},\"returns\":{\"_0\":\"glp price in usd\"}},\"getLiquidationThreshold(DnGmxJuniorVaultManager.State storage,address)\":{\"params\":{\"asset\":\"address of asset to check liquidation threshold for\",\"state\":\"set of all state variables of vault\"},\"returns\":{\"_0\":\"liquidation threshold\"}},\"getOptimalBorrows(DnGmxJuniorVaultManager.State storage,uint256)\":{\"params\":{\"glpDeposited\":\"amount of glp for which optimal borrow needs to be calculated\",\"state\":\"set of all state variables of vault\"},\"returns\":{\"optimalBtcBorrow\":\"optimal amount of btc borrowed from AAVE\",\"optimalEthBorrow\":\"optimal amount of eth borrowed from AAVE\"}},\"getOptimalCappedBorrows(DnGmxJuniorVaultManager.State storage,uint256,uint256)\":{\"params\":{\"availableBorrowAmount\":\"available borrow amount from senior vault\",\"state\":\"set of all state variables of vault\",\"usdcLiquidationThreshold\":\"the usdc liquidation threshold on AAVE\"},\"returns\":{\"optimalBtcBorrow\":\"optimal amount of btc borrowed from AAVE\",\"optimalEthBorrow\":\"optimal amount of eth borrowed from AAVE\"}},\"getTokenPrice(DnGmxJuniorVaultManager.State storage,IERC20Metadata)\":{\"params\":{\"state\":\"set of all state variables of vault\",\"token\":\"the token for which price is expected\"},\"returns\":{\"_0\":\"token price in usd\"}},\"getTokenPriceInUsdc(DnGmxJuniorVaultManager.State storage,IERC20Metadata)\":{\"params\":{\"state\":\"set of all state variables of vault\",\"token\":\"the token for which price is expected\"},\"returns\":{\"scaledPrice\":\"token price in usdc\"}},\"getTokenReservesInGlp(DnGmxJuniorVaultManager.State storage,address,uint256)\":{\"params\":{\"glpDeposited\":\"amount of glp for which underlying token amount is being calculated\",\"state\":\"set of all state variables of vault\",\"token\":\"address of token\"},\"returns\":{\"_0\":\"amount of tokens of the supplied address underlying the given amount of glp\"}},\"isValidRebalanceDeviation(DnGmxJuniorVaultManager.State storage)\":{\"params\":{\"state\":\"set of all state variables of vault\"},\"returns\":{\"_0\":\"true if the rebalance is valid basis diffeence (current and optimal) threshold\"}},\"isValidRebalanceHF(DnGmxJuniorVaultManager.State storage)\":{\"params\":{\"state\":\"set of all state variables of vault\"},\"returns\":{\"_0\":\"true if the rebalance is valid basis AAVE health factor\"}},\"isValidRebalanceTime(DnGmxJuniorVaultManager.State storage)\":{\"params\":{\"state\":\"set of all state variables of vault\"},\"returns\":{\"_0\":\"true if the rebalance is valid basis time threshold\"}},\"isWithinAllowedDelta(DnGmxJuniorVaultManager.State storage,uint256,uint256)\":{\"params\":{\"currentBorrow\":\"current borrow amount from AAVE\",\"optimalBorrow\":\"optimal borrow amount basis glp deposits\",\"state\":\"set of all state variables of vault\"},\"returns\":{\"_0\":\"true if the difference is below allowed threshold else false\"}},\"rebalanceBorrow(DnGmxJuniorVaultManager.State storage,uint256,uint256,uint256,uint256)\":{\"params\":{\"currentBtcBorrow\":\"current btc amount borrowed from AAVE\",\"currentEthBorrow\":\"current eth amount borrowed from AAVE\",\"optimalBtcBorrow\":\"optimal btc amount to hedge sGLP btc underlying completely\",\"optimalEthBorrow\":\"optimal eth amount to hedge sGLP btc underlying completely\",\"state\":\"set of all state variables of vault\"}},\"rebalanceHedge(DnGmxJuniorVaultManager.State storage,uint256,uint256,uint256,bool)\":{\"details\":\"to be called after settle profits only (since vaultMarketValue if after settlement of profits)\",\"params\":{\"currentBtcBorrow\":\"The amount of USDC collateral token deposited to LB Protocol\",\"currentEthBorrow\":\"The market value of ETH/BTC part in sGLP\",\"glpDeposited\":\"amount of glp deposited into the vault\",\"isPartialAllowed\":\"true if partial hedge is allowed\",\"state\":\"set of all state variables of vault\"},\"returns\":{\"isPartialHedge\":\"true if partial hedge is executed\"}},\"rebalanceProfit(DnGmxJuniorVaultManager.State storage,uint256)\":{\"params\":{\"borrowValue\":\"value of the borrowed assests(ETH + BTC) from AAVE in USDC\",\"state\":\"set of all state variables of vault\"}},\"receiveFlashLoan(DnGmxJuniorVaultManager.State storage,IERC20[],uint256[],uint256[],bytes)\":{\"details\":\"only allows balancer vault to call thisonly runs when _hasFlashloaned is set to true (prevents someone else from initiating flashloan to vault)\",\"params\":{\"amounts\":\"amounts of token flashloans in same order\",\"feeAmounts\":\"amounts of fee/premium charged for flashloan\",\"tokens\":\"list of tokens flashloaned\",\"userData\":\"data passed to balancer for flashloan (includes token amounts, token usdc value and swap direction)\"}},\"totalAssets(DnGmxJuniorVaultManager.State storage)\":{\"params\":{\"state\":\"set of all state variables of vault\"},\"returns\":{\"_0\":\"total asset amount (glp + usdc (in glp terms))\"}},\"totalAssets(DnGmxJuniorVaultManager.State storage,bool)\":{\"params\":{\"maximize\":\"true for maximizing the total assets value and false to minimize\",\"state\":\"set of all state variables of vault\"},\"returns\":{\"_0\":\"total asset amount (glp + usdc (in glp terms))\"}}},\"title\":\"Helper library for junior vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"flashloanAmounts(DnGmxJuniorVaultManager.State storage,address,uint256,uint256)\":{\"notice\":\"returns the amount of flashloan for a given tokenif token amount needs to be increased then usdcAmount is minimum amountif token amount needs to be decreased then usdcAmount is maximum amount\"},\"getBorrowValue(DnGmxJuniorVaultManager.State storage,uint256,uint256)\":{\"notice\":\"returns the borrow value for a given amount of tokens\"},\"getCurrentBorrows(DnGmxJuniorVaultManager.State storage)\":{\"notice\":\"returns the amount of current borrows of btc and eth token from AAVE\"},\"getGlpPrice(DnGmxJuniorVaultManager.State storage,bool)\":{\"notice\":\"returns the price of glp token\"},\"getGlpPriceInUsdc(DnGmxJuniorVaultManager.State storage,bool)\":{\"notice\":\"returns the price of glp token in usdc\"},\"getLiquidationThreshold(DnGmxJuniorVaultManager.State storage,address)\":{\"notice\":\"returns liquidation threshold of the selected asset's AAVE pool\"},\"getOptimalBorrows(DnGmxJuniorVaultManager.State storage,uint256)\":{\"notice\":\"returns optimal borrows for BTC and ETH respectively basis glpDeposited amount\"},\"getOptimalCappedBorrows(DnGmxJuniorVaultManager.State storage,uint256,uint256)\":{\"notice\":\"returns optimal borrows for BTC and ETH respectively basis available borrow amount\"},\"getTokenPrice(DnGmxJuniorVaultManager.State storage,IERC20Metadata)\":{\"notice\":\"returns the price of given token basis AAVE oracle\"},\"getTokenPriceInUsdc(DnGmxJuniorVaultManager.State storage,IERC20Metadata)\":{\"notice\":\"returns the price of given token in USDC using AAVE oracle\"},\"getTokenReservesInGlp(DnGmxJuniorVaultManager.State storage,address,uint256)\":{\"notice\":\"returns token amount underlying glp amount deposited\"},\"harvestFees(DnGmxJuniorVaultManager.State storage)\":{\"notice\":\"stakes the rewards from the staked Glp and claims WETH to buy glpalso update protocolEsGmx fees which can be vested and claimeddivides the fees between senior and junior tranches based on senior tranche utilfor junior tranche weth is deposited to batching manager which handles conversion to sGLPfor senior tranche weth is converted into usdc and deposited on AAVE which increases the borrowed amount\"},\"isValidRebalanceDeviation(DnGmxJuniorVaultManager.State storage)\":{\"notice\":\"returns if the rebalance is valid basis the difference between the current and optimal hedges of tokens(ETH/BTC)\"},\"isValidRebalanceHF(DnGmxJuniorVaultManager.State storage)\":{\"notice\":\"returns if the rebalance is valid basis health factor on AAVEretunrs true if current health factor < threshold\"},\"isValidRebalanceTime(DnGmxJuniorVaultManager.State storage)\":{\"notice\":\"returns if the rebalance is valid basis last rebalance time and rebalanceTimeThreshold\"},\"isWithinAllowedDelta(DnGmxJuniorVaultManager.State storage,uint256,uint256)\":{\"notice\":\"returns token amount underlying glp amount deposited\"},\"rebalanceBorrow(DnGmxJuniorVaultManager.State storage,uint256,uint256,uint256,uint256)\":{\"notice\":\"rebalances the assets borrowed from AAVE to hedge ETH and BTC underlying the assets\"},\"rebalanceHedge(DnGmxJuniorVaultManager.State storage,uint256,uint256,uint256,bool)\":{\"notice\":\"rebalances btc and eth hedges according to underlying glp token weightsupdates the borrowed amount from senior tranche basis the target health factorif the amount of swap for a token > theshold then a partial hedge is taken and remaining is taken separatelyif the amount of swap for a token < threshold complete hedge is takenin case there is not enough money in senior tranche then relevant amount of glp is converted into usdc\"},\"rebalanceProfit(DnGmxJuniorVaultManager.State storage,uint256)\":{\"notice\":\"rebalances pnl on AAVE againts the sGLP assets\"},\"receiveFlashLoan(DnGmxJuniorVaultManager.State storage,IERC20[],uint256[],uint256[],bytes)\":{\"notice\":\"flashloan receiver for balance vaultreceives flashloaned tokens(WETH or WBTC or USDC) from balancer, swaps on uniswap and borrows/repays on AAVE\"},\"totalAssets(DnGmxJuniorVaultManager.State storage)\":{\"notice\":\"returns the total assets deposited to the vault (in glp amount)\"},\"totalAssets(DnGmxJuniorVaultManager.State storage,bool)\":{\"notice\":\"returns the total assets deposited to the vault (in glp amount)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/DnGmxJuniorVaultManager.sol\":\"DnGmxJuniorVaultManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":340},\"remappings\":[]},\"sources\":{\"@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6fdde76d62d0772bbf8c579e7990013034509a99abbb661d8b5a8e8c42f7afb5\",\"license\":\"agpl-3.0\"},\"@aave/core-v3/contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableAToken} from './IInitializableAToken.sol';\\n\\n/**\\n * @title IAToken\\n * @author Aave\\n * @notice Defines the basic interface for an AToken.\\n **/\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @notice Mints `amount` aTokens to `user`\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted aTokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address caller,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @dev In some instances, the mint event could be emitted from a burn transaction\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param from The address from which the aTokens will be burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  function burn(\\n    address from,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @notice Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @notice Transfers the underlying asset to `target`.\\n   * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external;\\n\\n  /**\\n   * @notice Handles the underlying received by the aToken after the transfer has been completed.\\n   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\\n   * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\\n   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\n   * @param user The user executing the repayment\\n   * @param amount The amount getting repaid\\n   **/\\n  function handleRepayment(address user, uint256 amount) external;\\n\\n  /**\\n   * @notice Allow passing a signed message to approve spending\\n   * @dev implements the permit function as for\\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner The owner of the funds\\n   * @param spender The spender\\n   * @param value The amount\\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n   * @param v Signature param\\n   * @param s Signature param\\n   * @param r Signature param\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @return The address of the underlying asset\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.\\n   * @return Address of the Aave treasury\\n   **/\\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Get the domain separator for the token\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n   * @return The domain separator of the token at current chain\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the nonce for owner.\\n   * @param owner The address of the owner\\n   * @return The nonce of the owner\\n   **/\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc4760b005b3b5e12eb91c5b7486976a36d9f568ef9a409c8534ee8c12e256ec8\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAaveIncentivesController\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\n **/\\ninterface IAaveIncentivesController {\\n  /**\\n   * @dev Emitted during `handleAction`, `claimRewards` and `claimRewardsOnBehalf`\\n   * @param user The user that accrued rewards\\n   * @param amount The amount of accrued rewards\\n   */\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted during `claimRewards` and `claimRewardsOnBehalf`\\n   * @param user The address that accrued rewards\\n   *\\u00a0@param to The address that will be receiving the rewards\\n   * @param claimer The address that performed the claim\\n   * @param amount The amount of rewards\\n   */\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted during `setClaimer`\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @notice Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index\\n   * @return The emission per second\\n   * @return The last updated timestamp\\n   **/\\n  function getAssetData(address asset)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * LEGACY **************************\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function assets(address asset)\\n    external\\n    view\\n    returns (\\n      uint128,\\n      uint128,\\n      uint256\\n    );\\n\\n  /**\\n   * @notice Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @notice Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @notice Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n  /**\\n   * @notice Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the pool\\n   * @param totalSupply The total supply of the asset in the pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @notice Returns the total of rewards of a user, already accrued + not yet accrued\\n   * @param assets The assets to accumulate rewards for\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Claims reward for a user, on the assets of the pool, accumulating the pending rewards\\n   * @param assets The assets to accumulate rewards for\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Claims reward for a user on its behalf, on the assets of the pool, accumulating the pending rewards.\\n   * @dev The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The assets to accumulate rewards for\\n   * @param amount The amount of rewards to claim\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the unclaimed rewards of the user\\n   * @param user The address of the user\\n   * @return The unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the user index for a specific asset\\n   * @param user The address of the user\\n   * @param asset The asset to incentivize\\n   * @return The user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice for backward compatibility with previous implementation of the Incentives controller\\n   * @return The address of the reward token\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @notice for backward compatibility with previous implementation of the Incentives controller\\n   * @return The precision used in the incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n\\n  /**\\n   * @dev Gets the distribution end timestamp of the emissions\\n   */\\n  function DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x15a3f9887545112721e45312b3453115729d6c9870b10cba61da627a35c189bd\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IInitializableAToken\\n * @author Aave\\n * @notice Interface for the initialize function on AToken\\n **/\\ninterface IInitializableAToken {\\n  /**\\n   * @dev Emitted when an aToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param treasury The address of the treasury\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param aTokenDecimals The decimals of the underlying\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    address incentivesController,\\n    uint8 aTokenDecimals,\\n    string aTokenName,\\n    string aTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @notice Initializes the aToken\\n   * @param pool The pool contract that is initializing this contract\\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  function initialize(\\n    IPool pool,\\n    address treasury,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 aTokenDecimals,\\n    string calldata aTokenName,\\n    string calldata aTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0x771ccf0ea983cb3b466d83e6f4db0cf268df791e87c2c8c2ec66d6088613b67c\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IInitializableDebtToken\\n * @author Aave\\n * @notice Interface for the initialize function common between debt tokens\\n **/\\ninterface IInitializableDebtToken {\\n  /**\\n   * @dev Emitted when a debt token is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param debtTokenDecimals The decimals of the debt token\\n   * @param debtTokenName The name of the debt token\\n   * @param debtTokenSymbol The symbol of the debt token\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address incentivesController,\\n    uint8 debtTokenDecimals,\\n    string debtTokenName,\\n    string debtTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @notice Initializes the debt token.\\n   * @param pool The pool contract that is initializing this contract\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n   * @param debtTokenName The name of the token\\n   * @param debtTokenSymbol The symbol of the token\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  function initialize(\\n    IPool pool,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 debtTokenDecimals,\\n    string memory debtTokenName,\\n    string memory debtTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0x78f14c84b714dcc8adba99fc86b5e0d23568a0ad57578b1601c1d0b5e2db4b9e\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   **/\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   **/\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   **/\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   **/\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   **/\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   **/\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   **/\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   **/\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   **/\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   **/\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   **/\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   **/\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\",\"keccak256\":\"0xad2946be653bb9395f906614a0c62f37f8a44f3963e62f63f18a409dfbea51f2\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   **/\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   **/\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   **/\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   **/\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   **/\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   **/\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   **/\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x2f70daa98416d61fd3128b1ee05f96852d84074689a2c2132a7fd587c5c9e3f0\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracle\\n * @author Aave\\n * @notice Defines the basic interface for a Price oracle.\\n **/\\ninterface IPriceOracle {\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   **/\\n  function getAssetPrice(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Set the price of the asset\\n   * @param asset The address of the asset\\n   * @param price The price of the asset\\n   **/\\n  function setAssetPrice(address asset, uint256 price) external;\\n}\\n\",\"keccak256\":\"0xa420be12e8e5402380204e0456189880e495892dd32fd9283df6d77c6fc25b23\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaledbalance token.\\n **/\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted scaled balance tokens\\n   * @param value The amount being minted (user entered amount + balance increase from interest)\\n   * @param balanceIncrease The increase in balance since the last action of the user\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  event Mint(\\n    address indexed caller,\\n    address indexed onBehalfOf,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted after scaled balance tokens are burned\\n   * @param from The address from which the scaled tokens will be burned\\n   * @param target The address that will receive the underlying, if any\\n   * @param value The amount being burned (user entered amount - balance increase from interest)\\n   * @param balanceIncrease The increase in balance since the last action of the user\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  event Burn(\\n    address indexed from,\\n    address indexed target,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @notice Returns the scaled balance of the user.\\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n   * at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns last index interest was accrued to the user's balance\\n   * @param user The address of the user\\n   * @return The last index interest was accrued to the user's balance, expressed in ray\\n   **/\\n  function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcfecd4a44d5cb97162e99d83120fdfc631e1dd7161cc0ec9338c5c076e796a3c\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableDebtToken} from './IInitializableDebtToken.sol';\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n  /**\\n   * @notice Mints debt token to the `onBehalfOf` address\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\n   * @param onBehalfOf The address receiving the debt tokens\\n   * @param amount The amount of debt being minted\\n   * @param index The variable debt index of the reserve\\n   * @return True if the previous balance of the user is 0, false otherwise\\n   * @return The scaled total debt of the reserve\\n   **/\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool, uint256);\\n\\n  /**\\n   * @notice Burns user variable debt\\n   * @dev In some instances, a burn transaction will emit a mint event\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param from The address from which the debt will be burned\\n   * @param amount The amount getting burned\\n   * @param index The variable debt index of the reserve\\n   * @return The scaled total debt of the reserve\\n   **/\\n  function burn(\\n    address from,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)\\n   * @return The address of the underlying asset\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd704126de135b8fa7cd1acc72e47e5ef1b1a7dcdd479875df52f28b8c8342f6a\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n  uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n  uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n  /// @dev bit 63 reserved\\n\\n  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\n  uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\n  uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\n  uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\n\\n  uint256 internal constant MAX_VALID_LTV = 65535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n  uint256 internal constant MAX_VALID_DECIMALS = 255;\\n  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\n  uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\n  uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\n  uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\n\\n  uint256 public constant DEBT_CEILING_DECIMALS = 2;\\n  uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n  /**\\n   * @notice Sets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @param ltv The new ltv\\n   **/\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n    require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\n\\n    self.data = (self.data & LTV_MASK) | ltv;\\n  }\\n\\n  /**\\n   * @notice Gets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @return The loan to value\\n   **/\\n  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return self.data & ~LTV_MASK;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @param threshold The new liquidation threshold\\n   **/\\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold)\\n    internal\\n    pure\\n  {\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.INVALID_LIQ_THRESHOLD);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n      (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation threshold\\n   **/\\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @param bonus The new liquidation bonus\\n   **/\\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus)\\n    internal\\n    pure\\n  {\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_BONUS_MASK) |\\n      (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation bonus\\n   **/\\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @param decimals The decimals\\n   **/\\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals)\\n    internal\\n    pure\\n  {\\n    require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\n\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @return The decimals of the asset\\n   **/\\n  function getDecimals(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @param active The active state\\n   **/\\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n    self.data =\\n      (self.data & ACTIVE_MASK) |\\n      (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @return The active state\\n   **/\\n  function getActive(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~ACTIVE_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @param frozen The frozen state\\n   **/\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n    self.data =\\n      (self.data & FROZEN_MASK) |\\n      (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @return The frozen state\\n   **/\\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~FROZEN_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @param paused The paused state\\n   **/\\n  function setPaused(DataTypes.ReserveConfigurationMap memory self, bool paused) internal pure {\\n    self.data =\\n      (self.data & PAUSED_MASK) |\\n      (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @return The paused state\\n   **/\\n  function getPaused(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~PAUSED_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the borrowable in isolation flag for the reserve.\\n   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\n   * amount will be accumulated in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @param borrowable True if the asset is borrowable\\n   **/\\n  function setBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self, bool borrowable)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\n      (uint256(borrowable ? 1 : 0) << BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowable in isolation flag for the reserve.\\n   * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\n   * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @return The borrowable in isolation flag\\n   **/\\n  function getBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @param siloed True if the asset is siloed\\n   **/\\n  function setSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self, bool siloed)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & SILOED_BORROWING_MASK) |\\n      (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @return The siloed borrowing flag\\n   **/\\n  function getSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~SILOED_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\n   **/\\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrowing state\\n   **/\\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables stable rate borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n   **/\\n  function setStableRateBorrowingEnabled(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool enabled\\n  ) internal pure {\\n    self.data =\\n      (self.data & STABLE_BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the stable rate borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The stable rate borrowing state\\n   **/\\n  function getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @param reserveFactor The reserve factor\\n   **/\\n  function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor)\\n    internal\\n    pure\\n  {\\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.INVALID_RESERVE_FACTOR);\\n\\n    self.data =\\n      (self.data & RESERVE_FACTOR_MASK) |\\n      (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @return The reserve factor\\n   **/\\n  function getReserveFactor(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @param borrowCap The borrow cap\\n   **/\\n  function setBorrowCap(DataTypes.ReserveConfigurationMap memory self, uint256 borrowCap)\\n    internal\\n    pure\\n  {\\n    require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\n\\n    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrow cap\\n   **/\\n  function getBorrowCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @param supplyCap The supply cap\\n   **/\\n  function setSupplyCap(DataTypes.ReserveConfigurationMap memory self, uint256 supplyCap)\\n    internal\\n    pure\\n  {\\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\n\\n    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The supply cap\\n   **/\\n  function getSupplyCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the debt ceiling in isolation mode for the asset\\n   * @param self The reserve configuration\\n   * @param ceiling The maximum debt ceiling for the asset\\n   **/\\n  function setDebtCeiling(DataTypes.ReserveConfigurationMap memory self, uint256 ceiling)\\n    internal\\n    pure\\n  {\\n    require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\n\\n    self.data = (self.data & DEBT_CEILING_MASK) | (ceiling << DEBT_CEILING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\n   * @param self The reserve configuration\\n   * @return The debt ceiling (0 = isolation mode disabled)\\n   **/\\n  function getDebtCeiling(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation protocol fee of the reserve\\n   * @param self The reserve configuration\\n   * @param liquidationProtocolFee The liquidation protocol fee\\n   **/\\n  function setLiquidationProtocolFee(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 liquidationProtocolFee\\n  ) internal pure {\\n    require(\\n      liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\n      Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\n    );\\n\\n    self.data =\\n      (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\n      (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the liquidation protocol fee\\n   * @param self The reserve configuration\\n   * @return The liquidation protocol fee\\n   **/\\n  function getLiquidationProtocolFee(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return\\n      (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >> LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @param unbackedMintCap The unbacked mint cap\\n   **/\\n  function setUnbackedMintCap(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 unbackedMintCap\\n  ) internal pure {\\n    require(unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP, Errors.INVALID_UNBACKED_MINT_CAP);\\n\\n    self.data =\\n      (self.data & UNBACKED_MINT_CAP_MASK) |\\n      (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The unbacked mint cap\\n   **/\\n  function getUnbackedMintCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~UNBACKED_MINT_CAP_MASK) >> UNBACKED_MINT_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the eMode asset category\\n   * @param self The reserve configuration\\n   * @param category The asset category when the user selects the eMode\\n   **/\\n  function setEModeCategory(DataTypes.ReserveConfigurationMap memory self, uint256 category)\\n    internal\\n    pure\\n  {\\n    require(category <= MAX_VALID_EMODE_CATEGORY, Errors.INVALID_EMODE_CATEGORY);\\n\\n    self.data = (self.data & EMODE_CATEGORY_MASK) | (category << EMODE_CATEGORY_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the eMode asset category\\n   * @param self The reserve configuration\\n   * @return The eMode category for the asset\\n   **/\\n  function getEModeCategory(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Gets the configuration flags of the reserve\\n   * @param self The reserve configuration\\n   * @return The state flag representing active\\n   * @return The state flag representing frozen\\n   * @return The state flag representing borrowing enabled\\n   * @return The state flag representing stableRateBorrowing enabled\\n   * @return The state flag representing paused\\n   **/\\n  function getFlags(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      bool,\\n      bool,\\n      bool,\\n      bool,\\n      bool\\n    )\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~ACTIVE_MASK) != 0,\\n      (dataLocal & ~FROZEN_MASK) != 0,\\n      (dataLocal & ~BORROWING_MASK) != 0,\\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\n      (dataLocal & ~PAUSED_MASK) != 0\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the configuration parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing ltv\\n   * @return The state param representing liquidation threshold\\n   * @return The state param representing liquidation bonus\\n   * @return The state param representing reserve decimals\\n   * @return The state param representing reserve factor\\n   * @return The state param representing eMode category\\n   **/\\n  function getParams(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      dataLocal & ~LTV_MASK,\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION,\\n      (dataLocal & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the caps parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing borrow cap\\n   * @return The state param representing supply cap.\\n   **/\\n  function getCaps(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256, uint256)\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\n      (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x24ac246ad26f88923762131f07657a54594ce7cb5342de3f47b0ed6ce908d42a\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\n  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\n  string public constant SAME_BLOCK_BORROW_REPAY = '48'; // 'Borrow and repay in same block is not allowed'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\n  string public constant ATOKEN_SUPPLY_NOT_ZERO = '54'; // 'AToken supply is not zero'\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\n  string public constant USER_IN_ISOLATION_MODE = '62'; // 'User is in isolation mode'\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\n}\\n\",\"keccak256\":\"0x3378cb9e8c58e121f10e9d2022c50984331621217281e11f1bb3dc79b3d77706\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0xf3acc235689aae1094d33bfdf90e60b0c3ae1f12c5f095b8cffb69bc6880765c\",\"license\":\"BUSL-1.1\"},\"@aave/periphery-v3/contracts/misc/interfaces/IEACAggregatorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\ninterface IEACAggregatorProxy {\\n  function decimals() external view returns (uint8);\\n\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\\n}\\n\",\"keccak256\":\"0xc6e0656205d26ce3ad1c14f647ee70ced21640522d06ef380ed7c35dad7c22e3\",\"license\":\"agpl-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport {IRewardsDistributor} from './IRewardsDistributor.sol';\\nimport {ITransferStrategyBase} from './ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\nimport {RewardsDataTypes} from '../libraries/RewardsDataTypes.sol';\\n\\n/**\\n * @title IRewardsController\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Controller.\\n */\\ninterface IRewardsController is IRewardsDistributor {\\n  /**\\n   * @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @dev Emitted when rewards are claimed\\n   * @param user The address of the user rewards has been claimed on behalf of\\n   * @param reward The address of the token reward is claimed\\n   * @param to The address of the receiver of the rewards\\n   * @param claimer The address of the claimer\\n   * @param amount The amount of rewards claimed\\n   */\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed reward,\\n    address indexed to,\\n    address claimer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted when a transfer strategy is installed for the reward distribution\\n   * @param reward The address of the token reward\\n   * @param transferStrategy The address of TransferStrategy contract\\n   */\\n  event TransferStrategyInstalled(address indexed reward, address indexed transferStrategy);\\n\\n  /**\\n   * @dev Emitted when the reward oracle is updated\\n   * @param reward The address of the token reward\\n   * @param rewardOracle The address of oracle\\n   */\\n  event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\\n   * @param reward The address of the reward token\\n   * @param transferStrategy The address of the TransferStrategy logic contract\\n   */\\n  function setTransferStrategy(address reward, ITransferStrategyBase transferStrategy) external;\\n\\n  /**\\n   * @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n   * @notice At the moment of reward configuration, the Incentives Controller performs\\n   * a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\n   * This check is enforced for integrators to be able to show incentives at\\n   * the current Aave UI without the need to setup an external price registry\\n   * @param reward The address of the reward to set the price aggregator\\n   * @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\n   */\\n  function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\n\\n  /**\\n   * @dev Get the price aggregator oracle address\\n   * @param reward The address of the reward\\n   * @return The price oracle of the reward\\n   */\\n  function getRewardOracle(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Returns the Transfer Strategy implementation contract address being used for a reward address\\n   * @param reward The address of the reward\\n   * @return The address of the TransferStrategy contract\\n   */\\n  function getTransferStrategy(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n   * @param config The assets configuration input, the list of structs contains the following fields:\\n   *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n   *   uint256 totalSupply: The total supply of the asset to incentivize\\n   *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n   *   address asset: The asset address to incentivize\\n   *   address reward: The reward token address\\n   *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\\n   *   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n   *                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n   */\\n  function configureAssets(RewardsDataTypes.RewardsConfigInput[] memory config) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   * @param userBalance The user balance of the asset\\n   * @param totalSupply The total supply of the asset\\n   **/\\n  function handleAction(\\n    address user,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param to The address that will be receiving the rewards\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The\\n   * caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsToSelf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n   **/\\n  function claimAllRewards(address[] calldata assets, address to)\\n    external\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsOnBehalf(\\n    address[] calldata assets,\\n    address user,\\n    address to\\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsToSelf(address[] calldata assets)\\n    external\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n}\\n\",\"keccak256\":\"0xbaaa2c6aa9eea166d41ac39751ee1a14f57ece37bfcc0a7420a2b116a0a6fa37\",\"license\":\"agpl-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IRewardsDistributor\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Distributor.\\n */\\ninterface IRewardsDistributor {\\n  /**\\n   * @dev Emitted when the configuration of the rewards of an asset is updated.\\n   * @param asset The address of the incentivized asset\\n   * @param reward The address of the reward token\\n   * @param oldEmission The old emissions per second value of the reward distribution\\n   * @param newEmission The new emissions per second value of the reward distribution\\n   * @param oldDistributionEnd The old end timestamp of the reward distribution\\n   * @param newDistributionEnd The new end timestamp of the reward distribution\\n   * @param assetIndex The index of the asset distribution\\n   */\\n  event AssetConfigUpdated(\\n    address indexed asset,\\n    address indexed reward,\\n    uint256 oldEmission,\\n    uint256 newEmission,\\n    uint256 oldDistributionEnd,\\n    uint256 newDistributionEnd,\\n    uint256 assetIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when rewards of an asset are accrued on behalf of a user.\\n   * @param asset The address of the incentivized asset\\n   * @param reward The address of the reward token\\n   * @param user The address of the user that rewards are accrued on behalf of\\n   * @param assetIndex The index of the asset distribution\\n   * @param userIndex The index of the asset distribution on behalf of the user\\n   * @param rewardsAccrued The amount of rewards accrued\\n   */\\n  event Accrued(\\n    address indexed asset,\\n    address indexed reward,\\n    address indexed user,\\n    uint256 assetIndex,\\n    uint256 userIndex,\\n    uint256 rewardsAccrued\\n  );\\n\\n  /**\\n   * @dev Emitted when the emission manager address is updated.\\n   * @param oldEmissionManager The address of the old emission manager\\n   * @param newEmissionManager The address of the new emission manager\\n   */\\n  event EmissionManagerUpdated(\\n    address indexed oldEmissionManager,\\n    address indexed newEmissionManager\\n  );\\n\\n  /**\\n   * @dev Sets the end date for the distribution\\n   * @param asset The asset to incentivize\\n   * @param reward The reward token that incentives the asset\\n   * @param newDistributionEnd The end date of the incentivization, in unix time format\\n   **/\\n  function setDistributionEnd(\\n    address asset,\\n    address reward,\\n    uint32 newDistributionEnd\\n  ) external;\\n\\n  /**\\n   * @dev Sets the emission per second of a set of reward distributions\\n   * @param asset The asset is being incentivized\\n   * @param rewards List of reward addresses are being distributed\\n   * @param newEmissionsPerSecond List of new reward emissions per second\\n   */\\n  function setEmissionPerSecond(\\n    address asset,\\n    address[] calldata rewards,\\n    uint88[] calldata newEmissionsPerSecond\\n  ) external;\\n\\n  /**\\n   * @dev Gets the end date for the distribution\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The timestamp with the end of the distribution, in unix time format\\n   **/\\n  function getDistributionEnd(address asset, address reward) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the index of a user on a reward distribution\\n   * @param user Address of the user\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The current user asset index, not including new distributions\\n   **/\\n  function getUserAssetIndex(\\n    address user,\\n    address asset,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configuration of the distribution reward for a certain asset\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The index of the asset distribution\\n   * @return The emission per second of the reward distribution\\n   * @return The timestamp of the last update of the index\\n   * @return The timestamp of the distribution end\\n   **/\\n  function getRewardsData(address asset, address reward)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Returns the list of available reward token addresses of an incentivized asset\\n   * @param asset The incentivized asset\\n   * @return List of rewards addresses of the input asset\\n   **/\\n  function getRewardsByAsset(address asset) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the list of available reward addresses\\n   * @return List of rewards supported in this contract\\n   **/\\n  function getRewardsList() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return Unclaimed rewards, not including new distributions\\n   **/\\n  function getUserAccruedRewards(address user, address reward) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return The rewards amount\\n   **/\\n  function getUserRewards(\\n    address[] calldata assets,\\n    address user,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @return The list of reward addresses\\n   * @return The list of unclaimed amount of rewards\\n   **/\\n  function getAllUserRewards(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n\\n  /**\\n   * @dev Returns the decimals of an asset to calculate the distribution delta\\n   * @param asset The address to retrieve decimals\\n   * @return The decimals of an underlying asset\\n   */\\n  function getAssetDecimals(address asset) external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the address of the emission manager\\n   * @return The address of the EmissionManager\\n   */\\n  function getEmissionManager() external view returns (address);\\n\\n  /**\\n   * @dev Updates the address of the emission manager\\n   * @param emissionManager The address of the new EmissionManager\\n   */\\n  function setEmissionManager(address emissionManager) external;\\n}\\n\",\"keccak256\":\"0xfdbb964120445be67bfaafed33faad54ea8f9e51c2965dbb72252ab3adbafee5\",\"license\":\"agpl-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/ITransferStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\ninterface ITransferStrategyBase {\\n  event EmergencyWithdrawal(\\n    address indexed caller,\\n    address indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\\n   * @param to Account to transfer rewards\\n   * @param reward Address of the reward token\\n   * @param amount Amount to transfer to the \\\"to\\\" address parameter\\n   * @return Returns true bool if transfer logic succeeds\\n   */\\n  function performTransfer(\\n    address to,\\n    address reward,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @return Returns the address of the Incentives Controller\\n   */\\n  function getIncentivesController() external view returns (address);\\n\\n  /**\\n   * @return Returns the address of the Rewards admin\\n   */\\n  function getRewardsAdmin() external view returns (address);\\n\\n  /**\\n   * @dev Perform an emergency token withdrawal only callable by the Rewards admin\\n   * @param token Address of the token to withdraw funds from this contract\\n   * @param to Address of the recipient of the withdrawal\\n   * @param amount Amount of the withdrawal\\n   */\\n  function emergencyWithdrawal(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x693a03ea4ff01373ef102c6a558bcfa8e54a6be6e53de7a022b923f2108cd250\",\"license\":\"AGPL-3.0\"},\"@aave/periphery-v3/contracts/rewards/libraries/RewardsDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport {ITransferStrategyBase} from '../interfaces/ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\n\\nlibrary RewardsDataTypes {\\n  struct RewardsConfigInput {\\n    uint88 emissionPerSecond;\\n    uint256 totalSupply;\\n    uint32 distributionEnd;\\n    address asset;\\n    address reward;\\n    ITransferStrategyBase transferStrategy;\\n    IEACAggregatorProxy rewardOracle;\\n  }\\n\\n  struct UserAssetBalance {\\n    address asset;\\n    uint256 userBalance;\\n    uint256 totalSupply;\\n  }\\n\\n  struct UserData {\\n    uint104 index; // matches reward index\\n    uint128 accrued;\\n  }\\n\\n  struct RewardData {\\n    uint104 index;\\n    uint88 emissionPerSecond;\\n    uint32 lastUpdateTimestamp;\\n    uint32 distributionEnd;\\n    mapping(address => UserData) usersData;\\n  }\\n\\n  struct AssetData {\\n    mapping(address => RewardData) rewards;\\n    mapping(uint128 => address) availableRewards;\\n    uint128 availableRewardsCount;\\n    uint8 decimals;\\n  }\\n}\\n\",\"keccak256\":\"0x93632dbb39e8cce89098bc29ee786123cd2b2b8532a2077392966b8e86ceed39\",\"license\":\"agpl-3.0\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ab2a92fbac88a704270b039691afb363c5a1ef1170fb0c955043e4da84b987\",\"license\":\"AGPL-3.0-only\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7825565a4bb2a34a1dc96bbfead755785dfb0df8ef81bd934c43023689685645\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBorrower {\\n    function harvestFees() external;\\n\\n    function getUsdcBorrowed() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x48c1d26b7a809ead2186d20ba9d638e161d9df864d3632884eb759df20d8da47\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IVariableDebtToken } from '@aave/core-v3/contracts/interfaces/IVariableDebtToken.sol';\\n\\ninterface IDebtToken is IVariableDebtToken {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xeec7ce9ef4d9a819231c37dbdf4342f59f4b2b4d36cbd21f830f66b626192c0d\",\"license\":\"MIT\"},\"contracts/interfaces/IDnGmxBatchingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport { IERC4626 } from './IERC4626.sol';\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDnGmxBatchingManager {\\n    error NoUsdcBalance();\\n\\n    error CallerNotVault();\\n    error CallerNotKeeper();\\n\\n    error InvalidInput(uint256 errorCode);\\n    error InsufficientShares(uint256 balance);\\n\\n    error DepositCapBreached();\\n\\n    event DepositToken(\\n        uint256 indexed round,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount,\\n        uint256 glpStaked\\n    );\\n\\n    event VaultDeposit(uint256 vaultGlpAmount);\\n\\n    event KeeperUpdated(address newKeeper);\\n    event ThresholdsUpdated(uint256 newSlippageThresholdGmx, uint256 newGlpDepositPendingThreshold);\\n\\n    event BatchStake(uint256 indexed round, uint256 userUsdcAmount, uint256 userGlpAmount);\\n    event SharesClaimed(address indexed from, address indexed receiver, uint256 claimAmount);\\n    event BatchDeposit(uint256 indexed round, uint256 userUsdcAmount, uint256 userGlpAmount, uint256 userShareAmount);\\n\\n    event ClaimedAndRedeemed(address indexed claimer, address indexed receiver, uint256 shares, uint256 assetsReceived);\\n    event DepositCapUpdated(uint256 newDepositCap);\\n    event PartialBatchDeposit(uint256 indexed round, uint256 partialGlpAmount, uint256 partialShareAmount);\\n\\n    struct UserDeposit {\\n        uint256 round;\\n        uint128 usdcBalance;\\n        uint128 unclaimedShares;\\n    }\\n    struct RoundDeposit {\\n        uint128 totalUsdc;\\n        uint128 totalShares;\\n    }\\n\\n    function depositToken(\\n        address token,\\n        uint256 amount,\\n        uint256 minUSDG\\n    ) external returns (uint256 glpStaked);\\n\\n    function executeBatchStake() external;\\n\\n    function executeBatchDeposit(uint256 depositAmount) external;\\n\\n    function currentRound() external view returns (uint256);\\n\\n    function claim(address receiver, uint256 amount) external;\\n\\n    function usdcBalance(address account) external view returns (uint256 balance);\\n\\n    function dnGmxJuniorVaultGlpBalance() external view returns (uint256 balance);\\n\\n    function unclaimedShares(address account) external view returns (uint256 shares);\\n\\n    function roundDeposits(uint256 round) external view returns (RoundDeposit memory);\\n\\n    function depositUsdc(uint256 amount, address receiver) external;\\n}\\n\",\"keccak256\":\"0xaa3b1474dd5ca1f6b6154d465815f76b973ad88cb5c6f8c7327acc676e26c563\",\"license\":\"MIT\"},\"contracts/interfaces/IDnGmxJuniorVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IRewardsController } from '@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol';\\nimport { IPoolAddressesProvider } from '@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol';\\nimport { IPool } from '@aave/core-v3/contracts/interfaces/IPool.sol';\\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\n\\nimport { IERC4626 } from './IERC4626.sol';\\nimport { IBorrower } from './IBorrower.sol';\\nimport { IBalancerVault } from './balancer/IBalancerVault.sol';\\n\\ninterface IDnGmxJuniorVault is IERC4626, IBorrower {\\n    error InvalidWithdrawFeeBps();\\n    error InvalidSlippageThresholdSwapBtc();\\n    error InvalidSlippageThresholdSwapEth();\\n    error InvalidSlippageThresholdGmx();\\n    error InvalidRebalanceTimeThreshold();\\n    error InvalidRebalanceDeltaThresholdBps();\\n    error InvalidRebalanceHfThresholdBps();\\n    error InvalidTargetHealthFactor();\\n\\n    error InvalidRebalance();\\n    error DepositCapExceeded();\\n    error OnlyKeeperAllowed(address msgSender, address authorisedKeeperAddress);\\n\\n    error NotDnGmxSeniorVault();\\n    error NotBalancerVault();\\n\\n    error ArraysLengthMismatch();\\n    error FlashloanNotInitiated();\\n\\n    error InvalidFeeRecipient();\\n    error InvalidFeeBps();\\n\\n    event Rebalanced();\\n    event AllowancesGranted();\\n\\n    event DnGmxSeniorVaultUpdated(address _dnGmxSeniorVault);\\n    event KeeperUpdated(address _newKeeper);\\n    event FeeParamsUpdated(uint256 feeBps, address _newFeeRecipient);\\n    event WithdrawFeeUpdated(uint256 _withdrawFeeBps);\\n    event FeesWithdrawn(uint256 feeAmount);\\n\\n    event DepositCapUpdated(uint256 _newDepositCap);\\n    event BatchingManagerUpdated(address _batchingManager);\\n\\n    event AdminParamsUpdated(\\n        address newKeeper,\\n        address dnGmxSeniorVault,\\n        uint256 newDepositCap,\\n        address batchingManager,\\n        uint16 withdrawFeeBps\\n    );\\n    event ThresholdsUpdated(\\n        uint16 slippageThresholdSwapBtcBps,\\n        uint16 slippageThresholdSwapEthBps,\\n        uint16 slippageThresholdGmxBps,\\n        uint128 usdcConversionThreshold,\\n        uint128 wethConversionThreshold,\\n        uint128 hedgeUsdcAmountThreshold,\\n        uint128 partialBtcHedgeUsdcAmountThreshold,\\n        uint128 partialEthHedgeUsdcAmountThreshold\\n    );\\n    event RebalanceParamsUpdated(\\n        uint32 rebalanceTimeThreshold,\\n        uint16 rebalanceDeltaThresholdBps,\\n        uint16 rebalanceHfThresholdBps\\n    );\\n\\n    event HedgeParamsUpdated(\\n        IBalancerVault vault,\\n        ISwapRouter swapRouter,\\n        uint256 targetHealthFactor,\\n        IRewardsController aaveRewardsController,\\n        IPool pool,\\n        IPriceOracle oracle\\n    );\\n\\n    function harvestFees() external;\\n\\n    function depositCap() external view returns (uint256);\\n\\n    function getPriceX128() external view returns (uint256);\\n\\n    function getVaultMarketValue() external view returns (int256);\\n\\n    function getMarketValue(uint256 assetAmount) external view returns (uint256 marketValue);\\n}\\n\",\"keccak256\":\"0xf6c2794226e445e2e60debab83f646cfcc07dfeb8f679670075fee6fcd16e3cc\",\"license\":\"MIT\"},\"contracts/interfaces/IDnGmxSeniorVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IBorrower } from './IBorrower.sol';\\nimport { IERC4626 } from './IERC4626.sol';\\n\\ninterface IDnGmxSeniorVault is IERC4626 {\\n    error InvalidMaxUtilizationBps();\\n\\n    error CallerNotBorrower();\\n\\n    error InvalidCapUpdate();\\n    error InvalidBorrowAmount();\\n    error InvalidBorrowerAddress();\\n\\n    error DepositCapExceeded();\\n    error MaxUtilizationBreached();\\n\\n    event AllowancesGranted();\\n    event DepositCapUpdated(uint256 _newDepositCap);\\n    event BorrowCapUpdated(address vault, uint256 newCap);\\n\\n    event LeveragePoolUpdated(IBorrower leveragePool);\\n    event DnGmxJuniorVaultUpdated(IBorrower dnGmxJuniorVault);\\n    event MaxUtilizationBpsUpdated(uint256 maxUtilizationBps);\\n\\n    function borrow(uint256 amount) external;\\n\\n    function repay(uint256 amount) external;\\n\\n    function depositCap() external view returns (uint256);\\n\\n    function getPriceX128() external view returns (uint256);\\n\\n    function getEthRewardsSplitRate() external returns (uint256);\\n\\n    function getVaultMarketValue() external view returns (uint256);\\n\\n    function availableBorrow(address borrower) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ce6efd47f5ebec1b2c865d301aa32d185a0fbec3e7cc4b4c36e496a40d63287\",\"license\":\"MIT\"},\"contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\n\\ninterface IERC4626 is IERC20Upgradeable {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x37d8c03e10ddebdc2316e27ccda12f53ac585908aa123e1774ec58a7c5849478\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IBalancerVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBalancerVault {\\n    event FlashLoan(address indexed recipient, address indexed token, uint256 amount, uint256 feeAmount);\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa1875dfe6d61fcfa0bccf8f9760b08bb7704d812b9a4b7d5fe67f280548f47ea\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/IGlpManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGlpManager {\\n    function cooldownDuration() external returns (uint256);\\n\\n    function lastAddedAt(address _account) external returns (uint256);\\n\\n    function addLiquidity(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp\\n    ) external returns (uint256);\\n\\n    function addLiquidityForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        address _tokenOut,\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function removeLiquidityForAccount(\\n        address _account,\\n        address _tokenOut,\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function getAums() external view returns (uint256[] memory);\\n\\n    function vault() external view returns (address);\\n\\n    function getAumInUsdg(bool maximise) external view returns (uint256);\\n\\n    function getAum(bool maximise) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcadd845dbdce20a138aff2228eb273ab3b0818cc087a5b0e89ba1535755ecc75\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/IRewardRouterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRewardRouterV2 {\\n    event StakeGmx(address account, address token, uint256 amount);\\n    event UnstakeGmx(address account, address token, uint256 amount);\\n\\n    event StakeGlp(address account, uint256 amount);\\n    event UnstakeGlp(address account, uint256 amount);\\n\\n    function stakedGmxTracker() external view returns (address);\\n\\n    function gmx() external view returns (address);\\n\\n    function esGmx() external view returns (address);\\n\\n    function glpVester() external view returns (address);\\n\\n    function batchStakeGmxForAccount(address[] memory _accounts, uint256[] memory _amounts) external;\\n\\n    function stakeGmxForAccount(address _account, uint256 _amount) external;\\n\\n    function stakeGmx(uint256 _amount) external;\\n\\n    function stakeEsGmx(uint256 _amount) external;\\n\\n    function unstakeGmx(uint256 _amount) external;\\n\\n    function unstakeEsGmx(uint256 _amount) external;\\n\\n    function mintAndStakeGlp(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp\\n    ) external returns (uint256);\\n\\n    function mintAndStakeGlpETH(uint256 _minUsdg, uint256 _minGlp) external payable returns (uint256);\\n\\n    function unstakeAndRedeemGlp(\\n        address _tokenOut,\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function unstakeAndRedeemGlpETH(\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address payable _receiver\\n    ) external returns (uint256);\\n\\n    function claim() external;\\n\\n    function claimEsGmx() external;\\n\\n    function claimFees() external;\\n\\n    function compound() external;\\n\\n    function compoundForAccount(address _account) external;\\n\\n    function handleRewards(\\n        bool shouldClaimGmx,\\n        bool shouldStakeGmx,\\n        bool shouldClaimEsGmx,\\n        bool shouldStakeEsGmx,\\n        bool shouldStakeMultiplierPoints,\\n        bool shouldClaimWeth,\\n        bool shouldConvertWethToEth\\n    ) external;\\n\\n    function batchCompoundForAccounts(address[] memory _accounts) external;\\n\\n    function signalTransfer(address _receiver) external;\\n\\n    function acceptTransfer(address _sender) external;\\n}\\n\",\"keccak256\":\"0x3644a7af2511eec487f19305b58b655e97cc355e9add820f0626bd3d61063461\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/IRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n\\n    function stakedAmounts(address _account) external view returns (uint256);\\n\\n    function updateRewards() external;\\n\\n    function stake(address _depositToken, uint256 _amount) external;\\n\\n    function stakeForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(address _depositToken, uint256 _amount) external;\\n\\n    function unstakeForAccount(\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount,\\n        address _receiver\\n    ) external;\\n\\n    function tokensPerInterval() external view returns (uint256);\\n\\n    function claim(address _receiver) external returns (uint256);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x476112acc4547dfaab4b61bf37e2655f220af23afac5e92e4e52ce0d045a2fdb\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n\\n    function isSwapEnabled() external view returns (bool);\\n\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n\\n    function usdg() external view returns (address);\\n\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n\\n    function hasDynamicFees() external view returns (bool);\\n\\n    function fundingInterval() external view returns (uint256);\\n\\n    function totalTokenWeights() external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n\\n    function isLiquidator(address _account) external view returns (bool);\\n\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n\\n    function tokenBalances(address _token) external view returns (uint256);\\n\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setInManagerMode(bool _inManagerMode) external;\\n\\n    function setManager(address _manager, bool _isManager) external;\\n\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n\\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\\n\\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function increasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function fundingRateFactor() external view returns (uint256);\\n\\n    function stableFundingRateFactor() external view returns (uint256);\\n\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdgDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function stableTaxBasisPoints() external view returns (uint256);\\n\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n\\n    function whitelistedTokens(address _token) external view returns (bool);\\n\\n    function stableTokens(address _token) external view returns (bool);\\n\\n    function shortableTokens(address _token) external view returns (bool);\\n\\n    function feeReserves(address _token) external view returns (uint256);\\n\\n    function globalShortSizes(address _token) external view returns (uint256);\\n\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n\\n    function tokenDecimals(address _token) external view returns (uint256);\\n\\n    function tokenWeights(address _token) external view returns (uint256);\\n\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n\\n    function poolAmounts(address _token) external view returns (uint256);\\n\\n    function bufferAmounts(address _token) external view returns (uint256);\\n\\n    function reservedAmounts(address _token) external view returns (uint256);\\n\\n    function usdgAmounts(address _token) external view returns (uint256);\\n\\n    function maxUsdgAmounts(address _token) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) external view returns (bool, uint256);\\n\\n    function getPosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0xfeb43dd05f2ea0cb41c1545d26d3e62ed4a5f3ee89ff4ab6e18b0767049809e6\",\"license\":\"MIT\"},\"contracts/libraries/DnGmxJuniorVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IVault } from '../interfaces/gmx/IVault.sol';\\nimport { IGlpManager } from '../interfaces/gmx/IGlpManager.sol';\\nimport { IRewardTracker } from '../interfaces/gmx/IRewardTracker.sol';\\nimport { IRewardRouterV2 } from '../interfaces/gmx/IRewardRouterV2.sol';\\n\\nimport { IDebtToken } from '../interfaces/IDebtToken.sol';\\nimport { IPool } from '@aave/core-v3/contracts/interfaces/IPool.sol';\\nimport { IAToken } from '@aave/core-v3/contracts/interfaces/IAToken.sol';\\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\\nimport { DataTypes } from '@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol';\\nimport { IPoolAddressesProvider } from '@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol';\\nimport { IRewardsController } from '@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol';\\nimport { ReserveConfiguration } from '@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol';\\n\\nimport { IBalancerVault } from '../interfaces/balancer/IBalancerVault.sol';\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\n\\nimport { IDnGmxJuniorVault } from '../interfaces/IDnGmxJuniorVault.sol';\\nimport { IDnGmxSeniorVault } from '../interfaces/IDnGmxSeniorVault.sol';\\nimport { IDnGmxBatchingManager } from '../interfaces/IDnGmxBatchingManager.sol';\\nimport { SafeCast } from '../libraries/SafeCast.sol';\\nimport { FeeSplitStrategy } from '../libraries/FeeSplitStrategy.sol';\\n\\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\\n\\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\n\\n/**\\n * @title Helper library for junior vault\\n * @dev junior vault delegates calls to this library for logic\\n * @author RageTrade\\n */\\n\\nlibrary DnGmxJuniorVaultManager {\\n    event RewardsHarvested(\\n        uint256 wethHarvested,\\n        uint256 esGmxStaked,\\n        uint256 juniorVaultWeth,\\n        uint256 seniorVaultWeth,\\n        uint256 juniorVaultGlp,\\n        uint256 seniorVaultAUsdc\\n    );\\n\\n    event GlpSwapped(uint256 glpQuantity, uint256 usdcQuantity, bool fromGlpToUsdc);\\n\\n    event TokenSwapped(address indexed fromToken, address indexed toToken, uint256 fromQuantity, uint256 toQuantity);\\n\\n    using DnGmxJuniorVaultManager for State;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    using FixedPointMathLib for uint256;\\n    using SafeCast for uint256;\\n\\n    uint256 internal constant MAX_BPS = 10_000;\\n\\n    uint256 internal constant PRICE_PRECISION = 1e30;\\n    uint256 internal constant VARIABLE_INTEREST_MODE = 2;\\n\\n    struct Tokens {\\n        IERC20Metadata weth;\\n        IERC20Metadata wbtc;\\n        IERC20Metadata sGlp;\\n        IERC20Metadata usdc;\\n    }\\n\\n    // prettier-ignore\\n    struct State {\\n        // core protocol roles\\n        address keeper;\\n        address feeRecipient;\\n\\n        // accounting\\n        // amount of usdc deposited by junior tranche into AAVE\\n        int256 dnUsdcDeposited;\\n        // amount of asset which is in usdc (due to borrow limits / availability issue some glp might remain unhedged)\\n        uint256 unhedgedGlpInUsdc;\\n        // health factor to be targetted on AAVE\\n        uint256 targetHealthFactor;\\n\\n        // accumulators\\n        // protocol fee taken from ETH rewards\\n        uint256 protocolFee;\\n        // protocol fee taken from esGMX rewards\\n        uint256 protocolEsGmx;\\n        // senior tranche part of eth rewards which is not converted to usdc\\n        uint256 seniorVaultWethRewards;\\n\\n        // locks\\n        // true if a flashloan has been initiated by the vault\\n        bool hasFlashloaned;\\n        // ensures that the rebalance can be run only after certain intervals\\n        uint48 lastRebalanceTS;\\n\\n        // fees\\n        // protocol fees charged on the eth and esGmx rewards\\n        uint16 feeBps;\\n        // fees on the withdrawn assets\\n        uint16 withdrawFeeBps;\\n        // fee tier for uniswap path\\n        uint24 feeTierWethWbtcPool;\\n\\n        // thresholds\\n        uint256 depositCap;\\n\\n        // slippage threshold on asset conversion into glp\\n        uint16 slippageThresholdGmxBps; // bps\\n        // slippage threshold on btc swap on uniswap\\n        uint16 slippageThresholdSwapBtcBps; // bps\\n        // slippage threshold on eth swap on uniswap\\n        uint16 slippageThresholdSwapEthBps; // bps\\n        // health factor treshold below which rebalance can be called\\n        uint16 rebalanceHfThresholdBps; // bps\\n        // time threshold beyond which on top of last rebalance, rebalance can be called\\n        uint32 rebalanceTimeThreshold; // seconds between rebalance\\n        // difference between current and optimal amounts beyond which rebalance can be called\\n        uint16 rebalanceDeltaThresholdBps; // bps\\n        // eth amount of weth rewards accrued beyond which they can be compounded\\n        uint128 wethConversionThreshold; // eth amount\\n\\n        // usdc amount beyond which usdc can be converted to assets\\n        uint128 usdcConversionThreshold; // usdc amount\\n        // usdc value of token hedges below which hedges are not taken\\n        uint128 hedgeUsdcAmountThreshold; // usdc amount\\n\\n        // usdc amount of btc hedge beyond which partial hedges are taken over multiple rebalances\\n        uint128 partialBtcHedgeUsdcAmountThreshold; // usdc amount\\n        // usdc amount of eth hedge beyond which partial hedges are taken over multiple rebalances\\n        uint128 partialEthHedgeUsdcAmountThreshold; // usdc amount\\n\\n        // token addrs\\n        IERC20 fsGlp;\\n        IERC20Metadata glp;\\n        IERC20Metadata usdc;\\n        IERC20Metadata weth;\\n        IERC20Metadata wbtc;\\n\\n        // aave protocol addrs\\n        // lending pool for liqudity market\\n        IPool pool;\\n        // aave interest bearing usdc\\n        IAToken aUsdc;\\n        // variable-rate debt accruing btc\\n        IDebtToken vWbtc;\\n        // variable-rate debt accruing eth\\n        IDebtToken vWeth;\\n        // cannocial oracle used by aave\\n        IPriceOracle oracle;\\n        // rewards controller to claim any emissions (for future use)\\n        IRewardsController aaveRewardsController;\\n        // immutable address provider to obtain various addresses\\n        IPoolAddressesProvider poolAddressProvider;\\n\\n        // gmx protocol addrs\\n        // core gmx vault\\n        IVault gmxVault;\\n        // staked gmx\\n        IRewardTracker sGmx;\\n        // glp manager (for giving assets allowance and fetching AUM)\\n        IGlpManager glpManager;\\n        // rewardRouter to stake & unstake glp\\n        IRewardRouterV2 rewardRouter;\\n\\n        // other external protocols\\n        // uniswap swap router for token swaps\\n        ISwapRouter swapRouter;\\n        // balancer vault for flashloans\\n        IBalancerVault balancerVault;\\n\\n        // core protocol addrs\\n        // senior tranche address\\n        IDnGmxSeniorVault dnGmxSeniorVault;\\n        // batching manager address\\n        IDnGmxBatchingManager batchingManager;\\n\\n        // gaps for extending struct (if required during upgrade)\\n        uint256[50] __gaps;\\n    }\\n\\n    /// @notice stakes the rewards from the staked Glp and claims WETH to buy glp\\n    /// @notice also update protocolEsGmx fees which can be vested and claimed\\n    /// @notice divides the fees between senior and junior tranches based on senior tranche util\\n    /// @notice for junior tranche weth is deposited to batching manager which handles conversion to sGLP\\n    /// @notice for senior tranche weth is converted into usdc and deposited on AAVE which increases the borrowed amount\\n    function harvestFees(State storage state) public {\\n        uint256 sGmxHarvested;\\n        {\\n            address esGmx = state.rewardRouter.esGmx();\\n            IRewardTracker sGmx = IRewardTracker(state.rewardRouter.stakedGmxTracker());\\n\\n            // existing staked gmx balance\\n            uint256 sGmxPrevBalance = sGmx.depositBalances(address(this), esGmx);\\n\\n            // handles claiming and staking of esGMX, staking of multiplier points and claim of WETH rewards on GMX\\n            state.rewardRouter.handleRewards({\\n                shouldClaimGmx: false,\\n                shouldStakeGmx: false,\\n                shouldClaimEsGmx: true,\\n                shouldStakeEsGmx: true,\\n                shouldStakeMultiplierPoints: true,\\n                shouldClaimWeth: true,\\n                shouldConvertWethToEth: false\\n            });\\n\\n            // harvested staked gmx\\n            sGmxHarvested = sGmx.depositBalances(address(this), esGmx) - sGmxPrevBalance;\\n        }\\n        // protocol esGMX fees\\n        state.protocolEsGmx += sGmxHarvested.mulDivDown(state.feeBps, MAX_BPS);\\n\\n        // total weth harvested which is not compounded\\n        // its possible that this is accumulated value over multiple rebalance if in all of those it was below threshold\\n        uint256 wethHarvested = state.weth.balanceOf(address(this)) - state.protocolFee - state.seniorVaultWethRewards;\\n\\n        if (wethHarvested > state.wethConversionThreshold) {\\n            // weth harvested > conversion threshold\\n            uint256 protocolFeeHarvested = (wethHarvested * state.feeBps) / MAX_BPS;\\n            // protocol fee incremented\\n            state.protocolFee += protocolFeeHarvested;\\n\\n            // protocol fee to be kept in weth\\n            // remaining amount needs to be compounded\\n            uint256 wethToCompound = wethHarvested - protocolFeeHarvested;\\n\\n            // share of the wethToCompound that belongs to senior tranche\\n            uint256 dnGmxSeniorVaultWethShare = state.dnGmxSeniorVault.getEthRewardsSplitRate().mulDivDown(\\n                wethToCompound,\\n                FeeSplitStrategy.RATE_PRECISION\\n            );\\n            // share of the wethToCompound that belongs to junior tranche\\n            uint256 dnGmxWethShare = wethToCompound - dnGmxSeniorVaultWethShare;\\n\\n            // total senior tranche weth which is not compounded\\n            uint256 _seniorVaultWethRewards = state.seniorVaultWethRewards + dnGmxSeniorVaultWethShare;\\n\\n            uint256 glpReceived;\\n            {\\n                // converts junior tranche share of weth into glp using batching manager\\n                // we need to use batching manager since there is a cooldown period on sGLP\\n                // if deposited directly for next 15mins withdrawals would fail\\n                uint256 price = state.gmxVault.getMinPrice(address(state.weth));\\n\\n                uint256 usdgAmount = dnGmxWethShare.mulDivDown(\\n                    price * (MAX_BPS - state.slippageThresholdGmxBps),\\n                    PRICE_PRECISION * MAX_BPS\\n                );\\n\\n                // deposits weth into batching manager which handles the conversion into glp\\n                // can be taken back through batch execution\\n                glpReceived = state.batchingManager.depositToken(address(state.weth), dnGmxWethShare, usdgAmount);\\n            }\\n\\n            if (_seniorVaultWethRewards > state.wethConversionThreshold) {\\n                // converts senior tranche share of weth into usdc and deposit into AAVE\\n                // Deposit aave vault share to AAVE in usdc\\n                uint256 minUsdcAmount = _getTokenPriceInUsdc(state, state.weth).mulDivDown(\\n                    _seniorVaultWethRewards * (MAX_BPS - state.slippageThresholdSwapEthBps),\\n                    MAX_BPS * PRICE_PRECISION\\n                );\\n                // swaps weth into usdc\\n                (uint256 aaveUsdcAmount, ) = state._swapToken(\\n                    address(state.weth),\\n                    _seniorVaultWethRewards,\\n                    minUsdcAmount\\n                );\\n\\n                // supplies usdc into AAVE\\n                state._executeSupply(address(state.usdc), aaveUsdcAmount);\\n\\n                // resets senior tranche rewards\\n                state.seniorVaultWethRewards = 0;\\n\\n                emit RewardsHarvested(\\n                    wethHarvested,\\n                    sGmxHarvested,\\n                    dnGmxWethShare,\\n                    dnGmxSeniorVaultWethShare,\\n                    glpReceived,\\n                    aaveUsdcAmount\\n                );\\n            } else {\\n                state.seniorVaultWethRewards = _seniorVaultWethRewards;\\n                emit RewardsHarvested(\\n                    wethHarvested,\\n                    sGmxHarvested,\\n                    dnGmxWethShare,\\n                    dnGmxSeniorVaultWethShare,\\n                    glpReceived,\\n                    0\\n                );\\n            }\\n        } else {\\n            emit RewardsHarvested(wethHarvested, sGmxHarvested, 0, 0, 0, 0);\\n        }\\n    }\\n\\n    /* ##################################################################\\n                            REBALANCE HELPERS\\n    ################################################################## */\\n\\n    ///@notice rebalances pnl on AAVE againts the sGLP assets\\n    ///@param state set of all state variables of vault\\n    ///@param borrowValue value of the borrowed assests(ETH + BTC) from AAVE in USDC\\n    function rebalanceProfit(State storage state, uint256 borrowValue) external {\\n        return _rebalanceProfit(state, borrowValue);\\n    }\\n\\n    ///@notice rebalances pnl on AAVE againts the sGLP assets\\n    ///@dev converts assets into usdc and deposits to AAVE if profit on GMX and loss on AAVE\\n    ///@dev withdraws usdc from aave and converts to GLP if loss on GMX and profits on AAVE\\n    ///@param state set of all state variables of vault\\n    ///@param borrowValue value of the borrowed assests(ETH + BTC) from AAVE in USDC\\n    function _rebalanceProfit(State storage state, uint256 borrowValue) private {\\n        int256 borrowVal = borrowValue.toInt256();\\n\\n        if (borrowVal > state.dnUsdcDeposited) {\\n            // If glp goes up - there is profit on GMX and loss on AAVE\\n            // So convert some glp to usdc and deposit to AAVE\\n            state.dnUsdcDeposited += _convertAssetToAUsdc(state, uint256(borrowVal - state.dnUsdcDeposited)).toInt256();\\n        } else if (borrowVal < state.dnUsdcDeposited) {\\n            // If glp goes down - there is profit on AAVE and loss on GMX\\n            // So withdraw some aave usdc and convert to glp\\n            _convertAUsdcToAsset(state, uint256(state.dnUsdcDeposited - borrowVal));\\n            state.dnUsdcDeposited = borrowVal;\\n        }\\n    }\\n\\n    ///@notice rebalances the assets borrowed from AAVE to hedge ETH and BTC underlying the assets\\n    ///@param state set of all state variables of vault\\n    ///@param optimalBtcBorrow optimal btc amount to hedge sGLP btc underlying completely\\n    ///@param currentBtcBorrow current btc amount borrowed from AAVE\\n    ///@param optimalEthBorrow optimal eth amount to hedge sGLP btc underlying completely\\n    ///@param currentEthBorrow current eth amount borrowed from AAVE\\n    function rebalanceBorrow(\\n        State storage state,\\n        uint256 optimalBtcBorrow,\\n        uint256 currentBtcBorrow,\\n        uint256 optimalEthBorrow,\\n        uint256 currentEthBorrow\\n    ) external {\\n        return _rebalanceBorrow(state, optimalBtcBorrow, currentBtcBorrow, optimalEthBorrow, currentEthBorrow);\\n    }\\n\\n    ///@notice rebalances the assets borrowed from AAVE to hedge ETH and BTC underlying the assets\\n    ///@param state set of all state variables of vault\\n    ///@param optimalBtcBorrow optimal btc amount to hedge sGLP btc underlying completely\\n    ///@param currentBtcBorrow current btc amount borrowed from AAVE\\n    ///@param optimalEthBorrow optimal eth amount to hedge sGLP btc underlying completely\\n    ///@param currentEthBorrow current eth amount borrowed from AAVE\\n    function _rebalanceBorrow(\\n        State storage state,\\n        uint256 optimalBtcBorrow,\\n        uint256 currentBtcBorrow,\\n        uint256 optimalEthBorrow,\\n        uint256 currentEthBorrow\\n    ) private {\\n        address[] memory assets;\\n        uint256[] memory amounts;\\n\\n        // calculate the token/usdc amount to be flashloaned from balancer\\n        (uint256 btcTokenAmount, uint256 btcUsdcAmount, bool repayDebtBtc) = _flashloanAmounts(\\n            state,\\n            address(state.wbtc),\\n            optimalBtcBorrow,\\n            currentBtcBorrow\\n        );\\n        (uint256 ethTokenAmount, uint256 ethUsdcAmount, bool repayDebtEth) = _flashloanAmounts(\\n            state,\\n            address(state.weth),\\n            optimalEthBorrow,\\n            currentEthBorrow\\n        );\\n\\n        // no swap needs to happen if the amount to hedge < threshold\\n        if (btcUsdcAmount < state.hedgeUsdcAmountThreshold) {\\n            btcTokenAmount = 0;\\n            btcUsdcAmount = 0;\\n        }\\n        if (ethUsdcAmount < state.hedgeUsdcAmountThreshold) {\\n            ethTokenAmount = 0;\\n            ethUsdcAmount = 0;\\n        }\\n\\n        // get asset amount basis increase/decrease of token amounts\\n        uint256 btcAssetAmount = repayDebtBtc ? btcUsdcAmount : btcTokenAmount;\\n        uint256 ethAssetAmount = repayDebtEth ? ethUsdcAmount : ethTokenAmount;\\n\\n        // If both eth and btc swap amounts are not beyond the threshold then no flashloan needs to be executed | case 1\\n        if (btcAssetAmount == 0 && ethAssetAmount == 0) return;\\n\\n        if (repayDebtBtc && repayDebtEth) {\\n            // case where both the token assets are USDC\\n            // only one entry required which is combined asset amount for both tokens\\n            assets = new address[](1);\\n            amounts = new uint256[](1);\\n\\n            assets[0] = address(state.usdc);\\n            amounts[0] = (btcAssetAmount + ethAssetAmount);\\n        } else if (btcAssetAmount == 0 || ethAssetAmount == 0) {\\n            // Exactly one would be true since case-1 excluded (both false) | case-2\\n            // One token amount = 0 and other token amount > 0\\n            // only one entry required for the non-zero amount token\\n            assets = new address[](1);\\n            amounts = new uint256[](1);\\n\\n            if (btcAssetAmount != 0) {\\n                assets[0] = (repayDebtBtc ? address(state.usdc) : address(state.wbtc));\\n                amounts[0] = btcAssetAmount;\\n            } else {\\n                assets[0] = (repayDebtEth ? address(state.usdc) : address(state.weth));\\n                amounts[0] = ethAssetAmount;\\n            }\\n        } else {\\n            // Both are true | case-3\\n            assets = new address[](2);\\n            amounts = new uint256[](2);\\n\\n            assets[0] = repayDebtBtc ? address(state.usdc) : address(state.wbtc);\\n\\n            assets[1] = repayDebtEth ? address(state.usdc) : address(state.weth);\\n\\n            // ensure that assets and amount tuples are in sorted order of addresses\\n            // (required for balancer flashloans)\\n            if (assets[0] > assets[1]) {\\n                // if the order is descending\\n                // switch the order for assets tupe\\n                // assign amounts in opposite order\\n                address tempAsset = assets[0];\\n                assets[0] = assets[1];\\n                assets[1] = tempAsset;\\n\\n                amounts[0] = ethAssetAmount;\\n\\n                amounts[1] = btcAssetAmount;\\n            } else {\\n                // if the order is ascending\\n                // assign amount in same order\\n                amounts[0] = btcAssetAmount;\\n\\n                amounts[1] = ethAssetAmount;\\n            }\\n        }\\n        // execute the flashloan\\n        _executeFlashloan(\\n            state,\\n            assets,\\n            amounts,\\n            btcTokenAmount,\\n            btcUsdcAmount,\\n            ethTokenAmount,\\n            ethUsdcAmount,\\n            repayDebtBtc,\\n            repayDebtEth\\n        );\\n    }\\n\\n    ///@notice returns the optimal borrow amounts based on a swap threshold\\n    ///@dev if the swap amount is less than threshold then that is returned\\n    ///@dev if the swap amount is greater than threshold then threshold amount is returned\\n    ///@param state set of all state variables of vault\\n    ///@param token ETH / BTC token\\n    ///@param optimalTokenBorrow optimal btc amount to hedge sGLP btc underlying completely\\n    ///@param currentTokenBorrow current btc amount borrowed from AAVE\\n    ///@return optimalPartialTokenBorrow optimal token hedge if threshold is breached\\n    ///@return isPartialTokenHedge true if partial hedge needs to be executed for token\\n    function _getOptimalPartialBorrows(\\n        State storage state,\\n        IERC20Metadata token,\\n        uint256 optimalTokenBorrow,\\n        uint256 currentTokenBorrow\\n    ) internal view returns (uint256 optimalPartialTokenBorrow, bool isPartialTokenHedge) {\\n        // checks if token hedge needs to be increased or decreased\\n        bool isOptimalHigher = optimalTokenBorrow > currentTokenBorrow;\\n        // difference = amount of swap to be done for complete hedge\\n        uint256 diff = isOptimalHigher\\n            ? optimalTokenBorrow - currentTokenBorrow\\n            : currentTokenBorrow - optimalTokenBorrow;\\n\\n        // get the correct threshold basis the token\\n        uint256 threshold = address(token) == address(state.wbtc)\\n            ? state.partialBtcHedgeUsdcAmountThreshold\\n            : state.partialEthHedgeUsdcAmountThreshold;\\n\\n        // convert usdc threshold into token amount threshold\\n        uint256 tokenThreshold = threshold.mulDivDown(PRICE_PRECISION, _getTokenPriceInUsdc(state, token));\\n\\n        if (diff > tokenThreshold) {\\n            // amount to swap > threshold\\n            // swap only the threshold amount in this rebalance (partial hedge)\\n            optimalPartialTokenBorrow = isOptimalHigher\\n                ? currentTokenBorrow + tokenThreshold\\n                : currentTokenBorrow - tokenThreshold;\\n            isPartialTokenHedge = true;\\n        } else {\\n            // amount to swap < threshold\\n            // swap the full amount in this rebalance (complete hedge)\\n            optimalPartialTokenBorrow = optimalTokenBorrow;\\n        }\\n    }\\n\\n    ///@notice rebalances btc and eth hedges according to underlying glp token weights\\n    ///@notice updates the borrowed amount from senior tranche basis the target health factor\\n    ///@notice if the amount of swap for a token > theshold then a partial hedge is taken and remaining is taken separately\\n    ///@notice if the amount of swap for a token < threshold complete hedge is taken\\n    ///@notice in case there is not enough money in senior tranche then relevant amount of glp is converted into usdc\\n    ///@dev to be called after settle profits only (since vaultMarketValue if after settlement of profits)\\n    ///@param state set of all state variables of vault\\n    ///@param currentBtcBorrow The amount of USDC collateral token deposited to LB Protocol\\n    ///@param currentEthBorrow The market value of ETH/BTC part in sGLP\\n    ///@param glpDeposited amount of glp deposited into the vault\\n    ///@param isPartialAllowed true if partial hedge is allowed\\n    ///@return isPartialHedge true if partial hedge is executed\\n    function rebalanceHedge(\\n        State storage state,\\n        uint256 currentBtcBorrow,\\n        uint256 currentEthBorrow,\\n        uint256 glpDeposited,\\n        bool isPartialAllowed\\n    ) external returns (bool isPartialHedge) {\\n        // optimal btc and eth borrows\\n        // calculated basis the underlying token weights in glp\\n        (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) = _getOptimalBorrows(state, glpDeposited);\\n\\n        if (isPartialAllowed) {\\n            // if partial hedges are allowed (i.e. rebalance call and not deposit/withdraw)\\n            // check if swap amounts>threshold then basis that do a partial hedge\\n            bool isPartialBtcHedge;\\n            bool isPartialEthHedge;\\n            // get optimal borrows basis hedge thresholds\\n            (optimalBtcBorrow, isPartialBtcHedge) = _getOptimalPartialBorrows(\\n                state,\\n                state.wbtc,\\n                optimalBtcBorrow,\\n                currentBtcBorrow\\n            );\\n            (optimalEthBorrow, isPartialEthHedge) = _getOptimalPartialBorrows(\\n                state,\\n                state.weth,\\n                optimalEthBorrow,\\n                currentEthBorrow\\n            );\\n            // if some token is partially hedged then set that this rebalance is partial\\n            // lastRebalanceTime not updated in this case so a rebalance can be called again\\n            isPartialHedge = isPartialBtcHedge || isPartialEthHedge;\\n        }\\n\\n        // calculate usdc value of optimal borrows\\n        uint256 optimalBorrowValue = _getBorrowValue(state, optimalBtcBorrow, optimalEthBorrow);\\n\\n        // get liquidation threshold of usdc on AAVE\\n        uint256 usdcLiquidationThreshold = _getLiquidationThreshold(state, address(state.usdc));\\n\\n        // Settle net change in market value and deposit/withdraw collateral tokens\\n        // Vault market value is just the collateral value since profit has been settled\\n        // AAVE target health factor = (usdc supply value * usdc liquidation threshold)/borrow value\\n        // whatever tokens we borrow from AAVE (ETH/BTC) we sell for usdc and deposit that usdc into AAVE\\n        // assuming 0 slippage borrow value of tokens = usdc deposit value (this leads to very small variation in hf)\\n        // usdc supply value = usdc borrowed from senior tranche + borrow value\\n        // replacing usdc supply value formula above in AAVE target health factor formula\\n        // we can derive usdc amount to borrow from senior tranche i.e. targetDnGmxSeniorVaultAmount\\n        uint256 targetDnGmxSeniorVaultAmount = (state.targetHealthFactor - usdcLiquidationThreshold).mulDivDown(\\n            optimalBorrowValue,\\n            usdcLiquidationThreshold\\n        );\\n\\n        // current usdc borrowed from senior tranche\\n        uint256 currentDnGmxSeniorVaultAmount = _getUsdcBorrowed(state);\\n\\n        if (targetDnGmxSeniorVaultAmount > currentDnGmxSeniorVaultAmount) {\\n            // case where we need to borrow more usdc\\n            // To get more usdc from senior tranche, so usdc is borrowed first and then hedge is updated on AAVE\\n            {\\n                uint256 amountToBorrow = targetDnGmxSeniorVaultAmount - currentDnGmxSeniorVaultAmount;\\n                uint256 availableBorrow = state.dnGmxSeniorVault.availableBorrow(address(this));\\n                if (amountToBorrow > availableBorrow) {\\n                    // if amount to borrow > available borrow amount\\n                    // we won't be able to hedge glp completely\\n                    // convert some glp into usdc to keep the vault delta neutral\\n                    // hedge the btc/eth of remaining amount\\n                    uint256 optimalUncappedEthBorrow = optimalEthBorrow;\\n\\n                    // optimal btc and eth borrows basis the hedged part of glp\\n                    (optimalBtcBorrow, optimalEthBorrow) = _getOptimalCappedBorrows(\\n                        state,\\n                        currentDnGmxSeniorVaultAmount + availableBorrow,\\n                        usdcLiquidationThreshold\\n                    );\\n\\n                    // rebalance the unhedged glp (increase/decrease basis the capped optimal token hedges)\\n                    _rebalanceUnhedgedGlp(state, optimalUncappedEthBorrow, optimalEthBorrow);\\n\\n                    if (availableBorrow > 0) {\\n                        // borrow whatever is available since required > available\\n                        state.dnGmxSeniorVault.borrow(availableBorrow);\\n                    }\\n                } else {\\n                    //No unhedged glp remaining so just pass same value in capped and uncapped (should convert back any ausdc back to sglp)\\n                    _rebalanceUnhedgedGlp(state, optimalEthBorrow, optimalEthBorrow);\\n\\n                    // Take from LB Vault\\n                    state.dnGmxSeniorVault.borrow(targetDnGmxSeniorVaultAmount - currentDnGmxSeniorVaultAmount);\\n                }\\n            }\\n\\n            // Rebalance Position\\n            // Executes a flashloan from balancer and btc/eth borrow updates on AAVE\\n            _rebalanceBorrow(state, optimalBtcBorrow, currentBtcBorrow, optimalEthBorrow, currentEthBorrow);\\n        } else {\\n            // Executes a flashloan from balancer and btc/eth borrow updates on AAVE\\n            // To repay usdc to senior tranche so update the hedges on AAVE first\\n            // then remove usdc to pay back to senior tranche\\n            _rebalanceBorrow(state, optimalBtcBorrow, currentBtcBorrow, optimalEthBorrow, currentEthBorrow);\\n            uint256 totalCurrentBorrowValue;\\n            {\\n                (uint256 currentBtc, uint256 currentEth) = _getCurrentBorrows(state);\\n                totalCurrentBorrowValue = _getBorrowValue(state, currentBtc, currentEth);\\n            }\\n            _rebalanceProfit(state, totalCurrentBorrowValue);\\n            // Deposit to LB Vault\\n\\n            state.dnGmxSeniorVault.repay(currentDnGmxSeniorVaultAmount - targetDnGmxSeniorVaultAmount);\\n        }\\n    }\\n\\n    ///@notice withdraws LP tokens from gauge, sells LP token for usdc\\n    ///@param state set of all state variables of vault\\n    ///@param usdcAmountDesired amount of USDC desired\\n    ///@return usdcAmountOut usdc amount returned by gmx\\n    function _convertAssetToAUsdc(State storage state, uint256 usdcAmountDesired)\\n        internal\\n        returns (uint256 usdcAmountOut)\\n    {\\n        ///@dev if usdcAmountDesired < 10, then there is precision issue in gmx contracts while redeeming for usdg\\n\\n        if (usdcAmountDesired < state.usdcConversionThreshold) return 0;\\n        address _usdc = address(state.usdc);\\n\\n        // @dev using max price of usdc becausing buying usdc for glp\\n        uint256 usdcPrice = state.gmxVault.getMaxPrice(_usdc);\\n\\n        // calculate the minimum required amount basis the set slippage param\\n        // uses current usdc max price from GMX and adds slippage on top\\n        uint256 minUsdcOut = usdcAmountDesired.mulDivDown((MAX_BPS - state.slippageThresholdGmxBps), MAX_BPS);\\n\\n        // calculate the amount of glp to be converted to get the desired usdc amount\\n        uint256 glpAmountInput = usdcAmountDesired.mulDivDown(PRICE_PRECISION, _getGlpPriceInUsdc(state, false));\\n\\n        usdcAmountOut = state.rewardRouter.unstakeAndRedeemGlp(_usdc, glpAmountInput, minUsdcOut, address(this));\\n\\n        emit GlpSwapped(glpAmountInput, usdcAmountOut, true);\\n\\n        _executeSupply(state, _usdc, usdcAmountOut);\\n    }\\n\\n    ///@notice sells usdc for LP tokens and then stakes LP tokens\\n    ///@param state set of all state variables of vault\\n    ///@param amount amount of usdc\\n    function _convertAUsdcToAsset(State storage state, uint256 amount) internal {\\n        _executeWithdraw(state, address(state.usdc), amount, address(this));\\n\\n        uint256 price = state.gmxVault.getMinPrice(address(state.usdc));\\n\\n        // USDG has 18 decimals and usdc has 6 decimals => 18-6 = 12\\n        uint256 usdgAmount = amount.mulDivDown(\\n            price * (MAX_BPS - state.slippageThresholdGmxBps) * 1e12,\\n            PRICE_PRECISION * MAX_BPS\\n        );\\n\\n        // conversion of token into glp using batching manager\\n        // batching manager handles the conversion due to the cooldown\\n        // glp transferred to the vault on batch execution\\n        uint256 glpReceived = state.batchingManager.depositToken(address(state.usdc), amount, usdgAmount);\\n\\n        emit GlpSwapped(glpReceived, amount, false);\\n    }\\n\\n    ///@notice rebalances unhedged glp amount\\n    ///@notice converts some glp into usdc if there is lesser amount of usdc to back the hedges than required\\n    ///@notice converts some usdc into glp if some part of the unhedged glp can be hedged\\n    ///@notice used when there is not enough usdc available in senior tranche\\n    ///@param state set of all state variables of vault\\n    ///@param uncappedTokenHedge token hedge if there was no asset cap\\n    ///@param cappedTokenHedge token hedge if given there is limited about of assets available in senior tranche\\n    function _rebalanceUnhedgedGlp(\\n        State storage state,\\n        uint256 uncappedTokenHedge,\\n        uint256 cappedTokenHedge\\n    ) private {\\n        // part of glp assets to be kept unhedged\\n        // calculated basis the uncapped amount (assumes unlimited borrow availability)\\n        // and capped amount (basis available borrow)\\n\\n        // uncappedTokenHedge is required to hedge totalAssets\\n        // cappedTokenHedge can be taken basis available borrow\\n        // so basis what % if hedge cannot be taken, same % of glp is converted to usdc\\n        uint256 unhedgedGlp = _totalAssets(state, false).mulDivDown(\\n            uncappedTokenHedge - cappedTokenHedge,\\n            uncappedTokenHedge\\n        );\\n\\n        // usdc value of unhedged glp assets\\n        uint256 unhedgedGlpUsdcAmount = unhedgedGlp.mulDivDown(_getGlpPriceInUsdc(state, false), PRICE_PRECISION);\\n\\n        if (unhedgedGlpUsdcAmount > state.unhedgedGlpInUsdc) {\\n            // if target unhedged amount > current unhedged amount\\n            // convert glp to aUSDC\\n            uint256 glpToUsdcAmount = unhedgedGlpUsdcAmount - state.unhedgedGlpInUsdc;\\n            state.unhedgedGlpInUsdc += _convertAssetToAUsdc(state, glpToUsdcAmount);\\n        } else if (unhedgedGlpUsdcAmount < state.unhedgedGlpInUsdc) {\\n            // if target unhedged amount < current unhedged amount\\n            // convert aUSDC to glp\\n            uint256 usdcToGlpAmount = state.unhedgedGlpInUsdc - unhedgedGlpUsdcAmount;\\n            state.unhedgedGlpInUsdc -= usdcToGlpAmount;\\n            _convertAUsdcToAsset(state, usdcToGlpAmount);\\n        }\\n    }\\n\\n    /* ##################################################################\\n                            FLASHLOAN RECEIVER\\n    ################################################################## */\\n\\n    ///@notice flashloan receiver for balance vault\\n    ///@notice receives flashloaned tokens(WETH or WBTC or USDC) from balancer, swaps on uniswap and borrows/repays on AAVE\\n    ///@dev only allows balancer vault to call this\\n    ///@dev only runs when _hasFlashloaned is set to true (prevents someone else from initiating flashloan to vault)\\n    ///@param tokens list of tokens flashloaned\\n    ///@param amounts amounts of token flashloans in same order\\n    ///@param feeAmounts amounts of fee/premium charged for flashloan\\n    ///@param userData data passed to balancer for flashloan (includes token amounts, token usdc value and swap direction)\\n    function receiveFlashLoan(\\n        State storage state,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external {\\n        // Decode user data containing btc/eth token & usdc amount\\n        // RepayDebt true means we need to reduce token hedge else we need to increase hedge\\n        (\\n            uint256 btcTokenAmount,\\n            uint256 btcUsdcAmount,\\n            uint256 ethTokenAmount,\\n            uint256 ethUsdcAmount,\\n            bool repayDebtBtc,\\n            bool repayDebtEth\\n        ) = abi.decode(userData, (uint256, uint256, uint256, uint256, bool, bool));\\n\\n        // Asset premium charged for taking the flashloan from balancer\\n        uint256 btcAssetPremium;\\n        uint256 ethAssetPremium;\\n\\n        // adjust asset amounts for premiums (zero for balancer at the time of dev)\\n        if (repayDebtBtc && repayDebtEth) {\\n            // Both token amounts are non zero\\n            // The assets are same (usdc only)\\n            // Here amounts[0] should be equal to btcTokenAmount+ethTokenAmount\\n            // Total premium on USDC is divided on a prorata basis for btc and eth usdc amounts\\n            btcAssetPremium = feeAmounts[0].mulDivDown(btcUsdcAmount, amounts[0]);\\n\\n            ethAssetPremium = (feeAmounts[0] - btcAssetPremium);\\n        } else if (btcTokenAmount != 0 && ethTokenAmount != 0) {\\n            // Both token amounts are non zero\\n            // The assets are different (either usdc/btc, usdc/eth, btc/eth)\\n            // Here amounts[0] should be equal to btcTokenAmount and amounts[1] should be equal to ethTokenAmount\\n            bool btcFirst = false;\\n\\n            // Checks if btc or eth is first since they are sorted basis token address when taking flashloan\\n            if (repayDebtBtc ? tokens[0] == state.usdc : tokens[0] == state.wbtc) btcFirst = true;\\n\\n            // Premiums are assigned basis the token amount orders\\n            btcAssetPremium = feeAmounts[btcFirst ? 0 : 1];\\n            ethAssetPremium = feeAmounts[btcFirst ? 1 : 0];\\n        } else {\\n            // One of the token amounts is zero\\n            // The asset for non zero token can be both token or usdc\\n            // Premium is assigned to the non-zero amount token\\n            if (btcTokenAmount != 0) btcAssetPremium = feeAmounts[0];\\n            else ethAssetPremium = feeAmounts[0];\\n        }\\n\\n        // Execute the token swap (usdc to token / token to usdc) and repay the debt\\n        if (btcTokenAmount > 0)\\n            _executeOperationToken(\\n                state,\\n                address(state.wbtc),\\n                btcTokenAmount,\\n                btcUsdcAmount,\\n                btcAssetPremium,\\n                repayDebtBtc\\n            );\\n        if (ethTokenAmount > 0)\\n            _executeOperationToken(\\n                state,\\n                address(state.weth),\\n                ethTokenAmount,\\n                ethUsdcAmount,\\n                ethAssetPremium,\\n                repayDebtEth\\n            );\\n    }\\n\\n    /* ##################################################################\\n                            AAVE HELPERS\\n    ################################################################## */\\n\\n    ///@notice executes borrow of \\\"token\\\" of \\\"amount\\\" quantity to AAVE at variable interest rate\\n    ///@param state set of all state variables of vault\\n    ///@param token address of token to borrow\\n    ///@param amount amount of token to borrow\\n    function _executeBorrow(\\n        State storage state,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        state.pool.borrow(token, amount, VARIABLE_INTEREST_MODE, 0, address(this));\\n    }\\n\\n    ///@notice executes repay of \\\"token\\\" of \\\"amount\\\" quantity to AAVE at variable interest rate\\n    ///@param state set of all state variables of vault\\n    ///@param token address of token to borrow\\n    ///@param amount amount of token to borrow\\n    function _executeRepay(\\n        State storage state,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        state.pool.repay(token, amount, VARIABLE_INTEREST_MODE, address(this));\\n    }\\n\\n    ///@notice executes supply of \\\"token\\\" of \\\"amount\\\" quantity to AAVE\\n    ///@param state set of all state variables of vault\\n    ///@param token address of token to borrow\\n    ///@param amount amount of token to borrow\\n    function _executeSupply(\\n        State storage state,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        state.pool.supply(token, amount, address(this), 0);\\n    }\\n\\n    ///@notice executes withdraw of \\\"token\\\" of \\\"amount\\\" quantity to AAVE\\n    ///@param state set of all state variables of vault\\n    ///@param token address of token to borrow\\n    ///@param amount amount of token to borrow\\n    ///@param receiver address to which withdrawn tokens should be sent\\n    function _executeWithdraw(\\n        State storage state,\\n        address token,\\n        uint256 amount,\\n        address receiver\\n    ) internal {\\n        state.pool.withdraw(token, amount, receiver);\\n    }\\n\\n    ///@notice returns liquidation threshold of the selected asset's AAVE pool\\n    ///@param state set of all state variables of vault\\n    ///@param asset address of asset to check liquidation threshold for\\n    function _getLiquidationThreshold(State storage state, address asset) private view returns (uint256) {\\n        DataTypes.ReserveConfigurationMap memory config = state.pool.getConfiguration(asset);\\n        (, uint256 liquidationThreshold, , , , ) = config.getParams();\\n\\n        return liquidationThreshold;\\n    }\\n\\n    /* ##################################################################\\n                            BALANCER HELPERS\\n    ################################################################## */\\n\\n    ///@notice executes flashloan from balancer\\n    ///@dev assets should be ordered in ascending order of addresses\\n    ///@param assets list of token addresses\\n    ///@param amounts amount of tokens to be flashloaned in same order as assets\\n    ///@param _btcTokenAmount token amount of btc token by which hedge amount should be increased (if repayDebt false) or decreased (if repayDebt true)\\n    ///@param _btcUsdcAmount usdc value of btc token considering swap slippage. Minimum amount (if repayDebt false) or maximum amount (if repayDebt true)\\n    ///@param _ethTokenAmount token amount of eth token by which hedge amount should be increased (if repayDebt false) or decreased (if repayDebt true)\\n    ///@param _ethUsdcAmount usdc value of eth token considering swap slippage. Minimum amount (if repayDebt false) or maximum amount (if repayDebt true)\\n    ///@param _repayDebtBtc repay debt for btc token\\n    ///@param _repayDebtEth repay debt for eth token\\n    function _executeFlashloan(\\n        State storage state,\\n        address[] memory assets,\\n        uint256[] memory amounts,\\n        uint256 _btcTokenAmount,\\n        uint256 _btcUsdcAmount,\\n        uint256 _ethTokenAmount,\\n        uint256 _ethUsdcAmount,\\n        bool _repayDebtBtc,\\n        bool _repayDebtEth\\n    ) internal {\\n        if (assets.length != amounts.length) revert IDnGmxJuniorVault.ArraysLengthMismatch();\\n\\n        // to ensure that only vault originated flashloans should be able to work with receive flashloan\\n        state.hasFlashloaned = true;\\n\\n        state.balancerVault.flashLoan(\\n            address(this),\\n            assets,\\n            amounts,\\n            abi.encode(_btcTokenAmount, _btcUsdcAmount, _ethTokenAmount, _ethUsdcAmount, _repayDebtBtc, _repayDebtEth)\\n        );\\n\\n        // receive flashloan has passed so the variable can be made false again\\n        state.hasFlashloaned = false;\\n    }\\n\\n    ///@notice executes relevant token hedge update on receiving the flashloan from Balancer\\n    ///@dev if \\\"repayDebt = true\\\" then usdc flashloaned, swapped for token, repay token debt, withdraw usdc from AAVE and pay back usdc with premium\\n    ///@dev if \\\"repayDebt = false\\\" then token flashloaned, swapped for usdc, supply usdc, borrow tokens from AAVE and pay back tokens with premium\\n    ///@param token address of token to increase/decrease hedge by\\n    ///@param tokenAmount amount of tokens to swap\\n    ///@param usdcAmount if \\\"repayDebt = false\\\" then = minimum amount of usdc | if \\\"repayDebt = true\\\" then = maximum amount of usdc\\n    ///@param premium additional tokens/usdc to be repaid to balancer to cover flashloan fees\\n    ///@param repayDebt true if token hedge needs to be reduced\\n    function _executeOperationToken(\\n        State storage state,\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 usdcAmount,\\n        uint256 premium,\\n        bool repayDebt\\n    ) internal {\\n        if (!repayDebt) {\\n            // increase token hedge amount\\n            // add premium to token amount (to be paid back to balancer)\\n            uint256 amountWithPremium = tokenAmount + premium;\\n\\n            // swap token to usdc\\n            (uint256 usdcReceived, ) = state._swapToken(token, tokenAmount, usdcAmount);\\n\\n            // supply received usdc to AAVE\\n            state._executeSupply(address(state.usdc), usdcReceived);\\n\\n            // borrow amount with premium amount of tokens from AAVE\\n            state._executeBorrow(token, amountWithPremium);\\n\\n            // increase junior tranche usdc deposits by usdc received\\n            state.dnUsdcDeposited += usdcReceived.toInt256();\\n\\n            // transfer token amount borrowed with premium back to balancer pool\\n            IERC20(token).transfer(address(state.balancerVault), amountWithPremium);\\n        } else {\\n            // decrease token hedge amount\\n            // usdcAmount = amount flashloaned from balancer\\n            // usdcPaid = amount paid for receiving given token amount\\n            // usdcAmount-usdcPaid = amount of usdc remaining after the swap\\n            // so we just need to withdraw usdcPaid to transfer usdcAmount\\n\\n            // swap usdc amount to token\\n            (uint256 usdcPaid, uint256 tokensReceived) = state._swapUSDC(token, tokenAmount, usdcAmount);\\n\\n            // amount of usdc that got charged for the token required\\n            uint256 amountWithPremium = usdcPaid + premium;\\n\\n            // reduce delta neutral usdc amount by amount with premium\\n            state.dnUsdcDeposited -= amountWithPremium.toInt256();\\n\\n            // repay token debt on AAVE\\n            state._executeRepay(token, tokensReceived);\\n\\n            // withdraw amount with premium supplied to AAVE\\n            state._executeWithdraw(address(state.usdc), amountWithPremium, address(this));\\n\\n            // transfer usdc amount flashloaned + premium back to balancer\\n            state.usdc.transfer(address(state.balancerVault), usdcAmount + premium);\\n        }\\n    }\\n\\n    /* ##################################################################\\n                            VIEW FUNCTIONS\\n    ################################################################## */\\n\\n    ///@notice returns the usdc amount borrowed by junior tranche from senior tranche\\n    ///@param state set of all state variables of vault\\n    ///@return usdcAmount amount of usdc borrowed by junior tranche\\n    function _getUsdcBorrowed(State storage state) private view returns (uint256 usdcAmount) {\\n        // all the aave interest goes to senior tranche\\n        // so, usdc borrowed from senior tranche =\\n        // total aUSDC balance - (usdc deposited by delta neutral vault into AAVE) - (unhedged amount of glp in usdc)\\n        return\\n            uint256(\\n                state.aUsdc.balanceOf(address(this)).toInt256() -\\n                    state.dnUsdcDeposited -\\n                    state.unhedgedGlpInUsdc.toInt256()\\n            );\\n    }\\n\\n    ///@notice returns the total assets deposited to the vault (in glp amount)\\n    ///@param state set of all state variables of vault\\n    ///@return total asset amount (glp + usdc (in glp terms))\\n    function totalAssets(State storage state) external view returns (uint256) {\\n        return _totalAssets(state, false);\\n    }\\n\\n    ///@notice returns the total assets deposited to the vault (in glp amount)\\n    ///@param state set of all state variables of vault\\n    ///@param maximize true for maximizing the total assets value and false to minimize\\n    ///@return total asset amount (glp + usdc (in glp terms))\\n    function totalAssets(State storage state, bool maximize) external view returns (uint256) {\\n        return _totalAssets(state, maximize);\\n    }\\n\\n    ///@notice returns the total assets deposited to the vault (in glp amount)\\n    ///@param state set of all state variables of vault\\n    ///@param maximize true for maximizing the total assets value and false to minimize\\n    ///@return total asset amount (glp + usdc (in glp terms))\\n    function _totalAssets(State storage state, bool maximize) private view returns (uint256) {\\n        // usdc deposited by junior tranche (can be negative)\\n        int256 dnUsdcDeposited = state.dnUsdcDeposited;\\n\\n        // convert int into two uints basis the sign\\n        uint256 dnUsdcDepositedPos = dnUsdcDeposited > int256(0) ? uint256(dnUsdcDeposited) : 0;\\n        uint256 dnUsdcDepositedNeg = dnUsdcDeposited < int256(0) ? uint256(-dnUsdcDeposited) : 0;\\n\\n        // add positive part to unhedgedGlp which will be added at the end\\n        // convert usdc amount into glp amount\\n        uint256 unhedgedGlp = (state.unhedgedGlpInUsdc + dnUsdcDepositedPos).mulDivDown(\\n            PRICE_PRECISION,\\n            _getGlpPriceInUsdc(state, !maximize)\\n        );\\n\\n        // calculate current borrow amounts\\n        (uint256 currentBtc, uint256 currentEth) = _getCurrentBorrows(state);\\n        uint256 totalCurrentBorrowValue = _getBorrowValue(state, currentBtc, currentEth);\\n\\n        // add negative part to current borrow value which will be subtracted at the end\\n        // convert usdc amount into glp amount\\n        uint256 borrowValueGlp = (totalCurrentBorrowValue + dnUsdcDepositedNeg).mulDivDown(\\n            PRICE_PRECISION,\\n            _getGlpPriceInUsdc(state, maximize)\\n        );\\n\\n        // if we need to minimize then add additional slippage\\n        if (!maximize) unhedgedGlp = unhedgedGlp.mulDivDown(MAX_BPS - state.slippageThresholdGmxBps, MAX_BPS);\\n        if (!maximize) borrowValueGlp = borrowValueGlp.mulDivDown(MAX_BPS + state.slippageThresholdGmxBps, MAX_BPS);\\n\\n        // total assets considers 3 parts\\n        // part1: glp balance in vault\\n        // part2: glp balance in batching manager\\n        // part3: pnl on AAVE (usdc deposit by junior tranche (i.e. dnUsdcDeposited) - current borrow value)\\n        return\\n            state.fsGlp.balanceOf(address(this)) +\\n            state.batchingManager.dnGmxJuniorVaultGlpBalance() +\\n            unhedgedGlp -\\n            borrowValueGlp;\\n    }\\n\\n    ///@notice returns if the rebalance is valid basis last rebalance time and rebalanceTimeThreshold\\n    ///@param state set of all state variables of vault\\n    ///@return true if the rebalance is valid basis time threshold\\n    /* solhint-disable not-rely-on-time */\\n    function isValidRebalanceTime(State storage state) external view returns (bool) {\\n        // check if rebalanceTimeThreshold has passed since last rebalance time\\n        return (block.timestamp - state.lastRebalanceTS) > state.rebalanceTimeThreshold;\\n    }\\n\\n    ///@notice returns if the rebalance is valid basis health factor on AAVE\\n    ///@notice retunrs true if current health factor < threshold\\n    ///@param state set of all state variables of vault\\n    ///@return true if the rebalance is valid basis AAVE health factor\\n    function isValidRebalanceHF(State storage state) external view returns (bool) {\\n        // check if health factor on AAVE is below rebalanceHfThreshold\\n        (, , , , , uint256 healthFactor) = state.pool.getUserAccountData(address(this));\\n\\n        return healthFactor < (uint256(state.rebalanceHfThresholdBps) * 1e14);\\n    }\\n\\n    ///@notice returns if the rebalance is valid basis the difference between the current and optimal hedges of tokens(ETH/BTC)\\n    ///@param state set of all state variables of vault\\n    ///@return true if the rebalance is valid basis diffeence (current and optimal) threshold\\n    function isValidRebalanceDeviation(State storage state) external view returns (bool) {\\n        (uint256 currentBtcBorrow, uint256 currentEthBorrow) = _getCurrentBorrows(state);\\n\\n        (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) = _getOptimalBorrows(state, _totalAssets(state, false));\\n\\n        return\\n            !(_isWithinAllowedDelta(state, optimalBtcBorrow, currentBtcBorrow) &&\\n                _isWithinAllowedDelta(state, optimalEthBorrow, currentEthBorrow));\\n    }\\n\\n    ///@notice returns the price of given token basis AAVE oracle\\n    ///@param state set of all state variables of vault\\n    ///@param token the token for which price is expected\\n    ///@return token price in usd\\n    function getTokenPrice(State storage state, IERC20Metadata token) external view returns (uint256) {\\n        return _getTokenPrice(state, token);\\n    }\\n\\n    ///@notice returns the price of given token basis AAVE oracle\\n    ///@param state set of all state variables of vault\\n    ///@param token the token for which price is expected\\n    ///@return token price in usd\\n    function _getTokenPrice(State storage state, IERC20Metadata token) private view returns (uint256) {\\n        uint256 decimals = token.decimals();\\n\\n        // AAVE oracle\\n        uint256 price = state.oracle.getAssetPrice(address(token));\\n\\n        // @dev aave returns from same source as chainlink (which is 8 decimals)\\n        return price.mulDivDown(PRICE_PRECISION, 10**(decimals + 2));\\n    }\\n\\n    ///@notice returns the price of glp token\\n    ///@param state set of all state variables of vault\\n    ///@param maximize true to get maximum price and flase to get minimum\\n    ///@return glp price in usd\\n    function getGlpPrice(State storage state, bool maximize) external view returns (uint256) {\\n        return _getGlpPrice(state, maximize);\\n    }\\n\\n    ///@notice returns the price of glp token\\n    ///@param state set of all state variables of vault\\n    ///@param maximize true to get maximum price and flase to get minimum\\n    ///@return glp price in usd\\n    function _getGlpPrice(State storage state, bool maximize) private view returns (uint256) {\\n        uint256 aum = state.glpManager.getAum(maximize);\\n        uint256 totalSupply = state.glp.totalSupply();\\n\\n        // price per glp token = (total AUM / total supply)\\n        return aum.mulDivDown(PRICE_PRECISION, totalSupply * 1e24);\\n    }\\n\\n    ///@notice returns the price of glp token in usdc\\n    ///@param state set of all state variables of vault\\n    ///@param maximize true to get maximum price and flase to get minimum\\n    ///@return glp price in usd\\n    function getGlpPriceInUsdc(State storage state, bool maximize) external view returns (uint256) {\\n        return _getGlpPriceInUsdc(state, maximize);\\n    }\\n\\n    ///@notice returns the price of glp token in usdc\\n    ///@param state set of all state variables of vault\\n    ///@param maximize true to get maximum price and flase to get minimum\\n    ///@return glp price in usd\\n    function _getGlpPriceInUsdc(State storage state, bool maximize) private view returns (uint256) {\\n        uint256 aum = state.glpManager.getAum(maximize);\\n        uint256 totalSupply = state.glp.totalSupply();\\n\\n        // @dev aave returns from same source as chainlink (which is 8 decimals)\\n        uint256 quotePrice = state.oracle.getAssetPrice(address(state.usdc));\\n\\n        // price per glp token = (total AUM / total supply)\\n        // scaling factor = 30(aum) -18(totalSupply) -8(quotePrice) +18(glp) -6(usdc) = 16\\n        return aum.mulDivDown(PRICE_PRECISION, totalSupply * quotePrice * 1e16);\\n    }\\n\\n    ///@notice returns the price of given token in USDC using AAVE oracle\\n    ///@param state set of all state variables of vault\\n    ///@param token the token for which price is expected\\n    ///@return scaledPrice token price in usdc\\n    function getTokenPriceInUsdc(State storage state, IERC20Metadata token)\\n        external\\n        view\\n        returns (uint256 scaledPrice)\\n    {\\n        return _getTokenPriceInUsdc(state, token);\\n    }\\n\\n    ///@notice returns the price of given token in USDC using AAVE oracle\\n    ///@param state set of all state variables of vault\\n    ///@param token the token for which price is expected\\n    ///@return scaledPrice token price in usdc\\n    function _getTokenPriceInUsdc(State storage state, IERC20Metadata token)\\n        private\\n        view\\n        returns (uint256 scaledPrice)\\n    {\\n        uint256 decimals = token.decimals();\\n        uint256 price = state.oracle.getAssetPrice(address(token));\\n\\n        // @dev aave returns from same source as chainlink (which is 8 decimals)\\n        uint256 quotePrice = state.oracle.getAssetPrice(address(state.usdc));\\n\\n        // token price / usdc price\\n        scaledPrice = price.mulDivDown(PRICE_PRECISION, quotePrice * 10**(decimals - 6));\\n    }\\n\\n    ///@notice returns liquidation threshold of the selected asset's AAVE pool\\n    ///@param state set of all state variables of vault\\n    ///@param asset address of asset to check liquidation threshold for\\n    ///@return liquidation threshold\\n    function getLiquidationThreshold(State storage state, address asset) external view returns (uint256) {\\n        return _getLiquidationThreshold(state, asset);\\n    }\\n\\n    ///@notice returns the borrow value for a given amount of tokens\\n    ///@param state set of all state variables of vault\\n    ///@param btcAmount amount of btc\\n    ///@param ethAmount amount of eth\\n    ///@return borrowValue value of the given token amounts\\n    function getBorrowValue(\\n        State storage state,\\n        uint256 btcAmount,\\n        uint256 ethAmount\\n    ) external view returns (uint256 borrowValue) {\\n        return _getBorrowValue(state, btcAmount, ethAmount);\\n    }\\n\\n    ///@notice returns the borrow value for a given amount of tokens\\n    ///@param state set of all state variables of vault\\n    ///@param btcAmount amount of btc\\n    ///@param ethAmount amount of eth\\n    ///@return borrowValue value of the given token amounts\\n    function _getBorrowValue(\\n        State storage state,\\n        uint256 btcAmount,\\n        uint256 ethAmount\\n    ) private view returns (uint256 borrowValue) {\\n        borrowValue =\\n            btcAmount.mulDivDown(_getTokenPrice(state, state.wbtc), PRICE_PRECISION) +\\n            ethAmount.mulDivDown(_getTokenPrice(state, state.weth), PRICE_PRECISION);\\n        borrowValue = borrowValue.mulDivDown(PRICE_PRECISION, _getTokenPrice(state, state.usdc));\\n    }\\n\\n    ///@notice returns the amount of flashloan for a given token\\n    ///@notice if token amount needs to be increased then usdcAmount is minimum amount\\n    ///@notice if token amount needs to be decreased then usdcAmount is maximum amount\\n    ///@param state set of all state variables of vault\\n    ///@param token address of token\\n    ///@param optimalBorrow optimal token borrow to completely hedge sGlp\\n    ///@param currentBorrow curret token borrow from AAVE\\n    ///@return tokenAmount amount of tokens to be swapped\\n    ///@return usdcAmount minimum/maximum amount of usdc basis swap direction\\n    ///@return repayDebt true then reduce token hedge, false then increase token hedge\\n    function flashloanAmounts(\\n        State storage state,\\n        address token,\\n        uint256 optimalBorrow,\\n        uint256 currentBorrow\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 tokenAmount,\\n            uint256 usdcAmount,\\n            bool repayDebt\\n        )\\n    {\\n        return _flashloanAmounts(state, token, optimalBorrow, currentBorrow);\\n    }\\n\\n    ///@notice returns the amount of flashloan for a given token\\n    ///@notice if token amount needs to be increased then usdcAmount is minimum amount\\n    ///@notice if token amount needs to be decreased then usdcAmount is maximum amount\\n    ///@param state set of all state variables of vault\\n    ///@param token address of token\\n    ///@param optimalBorrow optimal token borrow to completely hedge sGlp\\n    ///@param currentBorrow curret token borrow from AAVE\\n    ///@return tokenAmount amount of tokens to be swapped\\n    ///@return usdcAmount minimum/maximum amount of usdc basis swap direction\\n    ///@return repayDebt true then reduce token hedge, false then increase token hedge\\n    function _flashloanAmounts(\\n        State storage state,\\n        address token,\\n        uint256 optimalBorrow,\\n        uint256 currentBorrow\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 tokenAmount,\\n            uint256 usdcAmount,\\n            bool repayDebt\\n        )\\n    {\\n        uint256 slippageThresholdSwap = token == address(state.wbtc)\\n            ? state.slippageThresholdSwapBtcBps\\n            : state.slippageThresholdSwapEthBps;\\n        // check the delta between optimal position and actual position in token terms\\n        // take that position using swap\\n        // To Increase\\n        if (optimalBorrow > currentBorrow) {\\n            tokenAmount = optimalBorrow - currentBorrow;\\n            // To swap with the amount in specified hence usdcAmount should be the min amount out\\n            usdcAmount = _getTokenPriceInUsdc(state, IERC20Metadata(token)).mulDivDown(\\n                tokenAmount * (MAX_BPS - slippageThresholdSwap),\\n                MAX_BPS * PRICE_PRECISION\\n            );\\n\\n            repayDebt = false;\\n            // Flash loan ETH/BTC from AAVE\\n            // In callback: Sell loan for USDC and repay debt\\n        } else {\\n            // To Decrease\\n            tokenAmount = (currentBorrow - optimalBorrow);\\n            // To swap with amount out specified hence usdcAmount should be the max amount in\\n            usdcAmount = _getTokenPriceInUsdc(state, IERC20Metadata(token)).mulDivDown(\\n                tokenAmount * (MAX_BPS + slippageThresholdSwap),\\n                MAX_BPS * PRICE_PRECISION\\n            );\\n\\n            repayDebt = true;\\n            // In callback: Swap to ETH/BTC and deposit to AAVE\\n            // Send back some aUSDC to LB vault\\n        }\\n    }\\n\\n    ///@notice returns the amount of current borrows of btc and eth token from AAVE\\n    ///@param state set of all state variables of vault\\n    ///@return currentBtcBorrow amount of btc currently borrowed from AAVE\\n    ///@return currentEthBorrow amount of eth currently borrowed from AAVE\\n    function getCurrentBorrows(State storage state)\\n        external\\n        view\\n        returns (uint256 currentBtcBorrow, uint256 currentEthBorrow)\\n    {\\n        return _getCurrentBorrows(state);\\n    }\\n\\n    ///@notice returns the amount of current borrows of btc and eth token from AAVE\\n    ///@param state set of all state variables of vault\\n    ///@return currentBtcBorrow amount of btc currently borrowed from AAVE\\n    ///@return currentEthBorrow amount of eth currently borrowed from AAVE\\n    function _getCurrentBorrows(State storage state)\\n        private\\n        view\\n        returns (uint256 currentBtcBorrow, uint256 currentEthBorrow)\\n    {\\n        return (state.vWbtc.balanceOf(address(this)), state.vWeth.balanceOf(address(this)));\\n    }\\n\\n    ///@notice returns optimal borrows for BTC and ETH respectively basis glpDeposited amount\\n    ///@param state set of all state variables of vault\\n    ///@param glpDeposited amount of glp for which optimal borrow needs to be calculated\\n    ///@return optimalBtcBorrow optimal amount of btc borrowed from AAVE\\n    ///@return optimalEthBorrow optimal amount of eth borrowed from AAVE\\n    function getOptimalBorrows(State storage state, uint256 glpDeposited)\\n        external\\n        view\\n        returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow)\\n    {\\n        return _getOptimalBorrows(state, glpDeposited);\\n    }\\n\\n    ///@notice returns optimal borrows for BTC and ETH respectively basis glpDeposited amount\\n    ///@param state set of all state variables of vault\\n    ///@param glpDeposited amount of glp for which optimal borrow needs to be calculated\\n    ///@return optimalBtcBorrow optimal amount of btc borrowed from AAVE\\n    ///@return optimalEthBorrow optimal amount of eth borrowed from AAVE\\n    function _getOptimalBorrows(State storage state, uint256 glpDeposited)\\n        private\\n        view\\n        returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow)\\n    {\\n        optimalBtcBorrow = _getTokenReservesInGlp(state, address(state.wbtc), glpDeposited);\\n        optimalEthBorrow = _getTokenReservesInGlp(state, address(state.weth), glpDeposited);\\n    }\\n\\n    ///@notice returns optimal borrows for BTC and ETH respectively basis available borrow amount\\n    ///@param state set of all state variables of vault\\n    ///@param availableBorrowAmount available borrow amount from senior vault\\n    ///@param usdcLiquidationThreshold the usdc liquidation threshold on AAVE\\n    ///@return optimalBtcBorrow optimal amount of btc borrowed from AAVE\\n    ///@return optimalEthBorrow optimal amount of eth borrowed from AAVE\\n    function getOptimalCappedBorrows(\\n        State storage state,\\n        uint256 availableBorrowAmount,\\n        uint256 usdcLiquidationThreshold\\n    ) external view returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) {\\n        return _getOptimalCappedBorrows(state, availableBorrowAmount, usdcLiquidationThreshold);\\n    }\\n\\n    ///@notice returns optimal borrows for BTC and ETH respectively basis available borrow amount\\n    ///@param state set of all state variables of vault\\n    ///@param availableBorrowAmount available borrow amount from senior vault\\n    ///@param usdcLiquidationThreshold the usdc liquidation threshold on AAVE\\n    ///@return optimalBtcBorrow optimal amount of btc borrowed from AAVE\\n    ///@return optimalEthBorrow optimal amount of eth borrowed from AAVE\\n    function _getOptimalCappedBorrows(\\n        State storage state,\\n        uint256 availableBorrowAmount,\\n        uint256 usdcLiquidationThreshold\\n    ) private view returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) {\\n        // The value of max possible value of ETH+BTC borrow\\n        // calculated basis available borrow amount, liqudation threshold and target health factor\\n        // AAVE target health factor = (usdc supply value * usdc liquidation threshold)/borrow value\\n        // whatever tokens we borrow from AAVE (ETH/BTC) we sell for usdc and deposit that usdc into AAVE\\n        // assuming 0 slippage borrow value of tokens = usdc deposit value (this leads to very small variation in hf)\\n        // usdc supply value = usdc borrowed from senior tranche + borrow value\\n        // replacing usdc supply value formula above in AAVE target health factor formula\\n        // we can replace usdc borrowed from senior tranche with available borrow amount\\n        // we can derive max borrow value of tokens possible i.e. maxBorrowValue\\n        uint256 maxBorrowValue = availableBorrowAmount.mulDivDown(\\n            usdcLiquidationThreshold,\\n            state.targetHealthFactor - usdcLiquidationThreshold\\n        );\\n\\n        // calculate the borrow value of eth & btc using their weights\\n        uint256 btcWeight = state.gmxVault.tokenWeights(address(state.wbtc));\\n        uint256 ethWeight = state.gmxVault.tokenWeights(address(state.weth));\\n\\n        // get eth and btc price in usdc\\n        uint256 btcPrice = _getTokenPriceInUsdc(state, state.wbtc);\\n        uint256 ethPrice = _getTokenPriceInUsdc(state, state.weth);\\n\\n        // get token amounts from usdc amount\\n        // total borrow should be divided basis the token weights\\n        // using that we can calculate the borrow value for each token\\n        // dividing that with token prices we can calculate the optimal token borrow amounts\\n        optimalBtcBorrow = maxBorrowValue.mulDivDown(btcWeight * PRICE_PRECISION, (btcWeight + ethWeight) * btcPrice);\\n        optimalEthBorrow = maxBorrowValue.mulDivDown(ethWeight * PRICE_PRECISION, (btcWeight + ethWeight) * ethPrice);\\n    }\\n\\n    ///@notice returns token amount underlying glp amount deposited\\n    ///@param state set of all state variables of vault\\n    ///@param token address of token\\n    ///@param glpDeposited amount of glp for which underlying token amount is being calculated\\n    ///@return amount of tokens of the supplied address underlying the given amount of glp\\n    function getTokenReservesInGlp(\\n        State storage state,\\n        address token,\\n        uint256 glpDeposited\\n    ) external view returns (uint256) {\\n        return _getTokenReservesInGlp(state, token, glpDeposited);\\n    }\\n\\n    ///@notice returns token amount underlying glp amount deposited\\n    ///@param state set of all state variables of vault\\n    ///@param token address of token\\n    ///@param glpDeposited amount of glp for which underlying token amount is being calculated\\n    ///@return amount of tokens of the supplied address underlying the given amount of glp\\n    function _getTokenReservesInGlp(\\n        State storage state,\\n        address token,\\n        uint256 glpDeposited\\n    ) private view returns (uint256) {\\n        // target weight of token in GLP\\n        uint256 targetWeight = state.gmxVault.tokenWeights(token);\\n        // total weight of all tokens combined in GLP\\n        uint256 totalTokenWeights = state.gmxVault.totalTokenWeights();\\n\\n        // glp price in usd\\n        uint256 glpPrice = _getGlpPrice(state, false);\\n        // token price in usd\\n        uint256 tokenPrice = _getTokenPrice(state, IERC20Metadata(token));\\n\\n        // underlying tokens in glp = (glp deposit value in usd) * targetWeight / totalTokenWeights / tokenPriceUsd\\n        return targetWeight.mulDivDown(glpDeposited * glpPrice, totalTokenWeights * tokenPrice);\\n    }\\n\\n    ///@notice returns token amount underlying glp amount deposited\\n    ///@param state set of all state variables of vault\\n    ///@param optimalBorrow optimal borrow amount basis glp deposits\\n    ///@param currentBorrow current borrow amount from AAVE\\n    ///@return true if the difference is below allowed threshold else false\\n    function isWithinAllowedDelta(\\n        State storage state,\\n        uint256 optimalBorrow,\\n        uint256 currentBorrow\\n    ) external view returns (bool) {\\n        return _isWithinAllowedDelta(state, optimalBorrow, currentBorrow);\\n    }\\n\\n    ///@notice returns token amount underlying glp amount deposited\\n    ///@param state set of all state variables of vault\\n    ///@param optimalBorrow optimal borrow amount basis glp deposits\\n    ///@param currentBorrow current borrow amount from AAVE\\n    ///@return true if the difference is below allowed threshold else false\\n    function _isWithinAllowedDelta(\\n        State storage state,\\n        uint256 optimalBorrow,\\n        uint256 currentBorrow\\n    ) private view returns (bool) {\\n        // calcualte the absolute difference between the optimal and current borrows\\n        // optimal borrow is what we should borrow from AAVE\\n        // curret borrow is what is already borrowed from AAVE\\n        uint256 diff = optimalBorrow > currentBorrow ? optimalBorrow - currentBorrow : currentBorrow - optimalBorrow;\\n\\n        // if absolute diff < threshold return true\\n        // if absolute diff > threshold return false\\n        return diff <= uint256(state.rebalanceDeltaThresholdBps).mulDivDown(currentBorrow, MAX_BPS);\\n    }\\n\\n    // ISwapRouter internal constant swapRouter = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n    ///@notice swaps token into usdc\\n    ///@param state set of all state variables of vault\\n    ///@param token address of token\\n    ///@param tokenAmount token amount to be sold\\n    ///@param minUsdcAmount minimum amount of usdc required\\n    ///@return usdcReceived amount of usdc received on swap\\n    ///@return tokensUsed amount of tokens paid for swap\\n    function _swapToken(\\n        State storage state,\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 minUsdcAmount\\n    ) internal returns (uint256 usdcReceived, uint256 tokensUsed) {\\n        ISwapRouter swapRouter = state.swapRouter;\\n\\n        // path of the token swap\\n        bytes memory path = token == address(state.weth) ? WETH_TO_USDC(state) : WBTC_TO_USDC(state);\\n\\n        // executes the swap on uniswap pool\\n        // exact input swap to convert exact amount of tokens into usdc\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: path,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountIn: tokenAmount,\\n            amountOutMinimum: minUsdcAmount\\n        });\\n\\n        // since exact input swap tokens used = token amount passed\\n        tokensUsed = tokenAmount;\\n        usdcReceived = swapRouter.exactInput(params);\\n\\n        emit TokenSwapped(token, address(state.usdc), tokenAmount, usdcReceived);\\n    }\\n\\n    ///@notice swaps usdc into token\\n    ///@param state set of all state variables of vault\\n    ///@param token address of token\\n    ///@param tokenAmount token amount to be bought\\n    ///@param maxUsdcAmount maximum amount of usdc that can be sold\\n    ///@return usdcPaid amount of usdc paid for swap\\n    ///@return tokensReceived amount of tokens received on swap\\n    function _swapUSDC(\\n        State storage state,\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 maxUsdcAmount\\n    ) internal returns (uint256 usdcPaid, uint256 tokensReceived) {\\n        ISwapRouter swapRouter = state.swapRouter;\\n\\n        bytes memory path = token == address(state.weth) ? USDC_TO_WETH(state) : USDC_TO_WBTC(state);\\n\\n        // exact output swap to ensure exact amount of tokens are received\\n        ISwapRouter.ExactOutputParams memory params = ISwapRouter.ExactOutputParams({\\n            path: path,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountOut: tokenAmount,\\n            amountInMaximum: maxUsdcAmount\\n        });\\n\\n        // since exact output swap tokensReceived = tokenAmount passed\\n        tokensReceived = tokenAmount;\\n        usdcPaid = swapRouter.exactOutput(params);\\n\\n        emit TokenSwapped(address(state.usdc), token, usdcPaid, tokensReceived);\\n    }\\n\\n    /* solhint-disable func-name-mixedcase */\\n    ///@notice returns usdc to weth swap path\\n    ///@param state set of all state variables of vault\\n    ///@return the path bytes\\n    function USDC_TO_WETH(State storage state) internal view returns (bytes memory) {\\n        return abi.encodePacked(state.weth, uint24(500), state.usdc);\\n    }\\n\\n    ///@notice returns usdc to wbtc swap path\\n    ///@param state set of all state variables of vault\\n    ///@return the path bytes\\n    function USDC_TO_WBTC(State storage state) internal view returns (bytes memory) {\\n        return abi.encodePacked(state.wbtc, state.feeTierWethWbtcPool, state.weth, uint24(500), state.usdc);\\n    }\\n\\n    ///@notice returns weth to usdc swap path\\n    ///@param state set of all state variables of vault\\n    ///@return the path bytes\\n    function WETH_TO_USDC(State storage state) internal view returns (bytes memory) {\\n        return abi.encodePacked(state.weth, uint24(500), state.usdc);\\n    }\\n\\n    ///@notice returns wbtc to usdc swap path\\n    ///@param state set of all state variables of vault\\n    ///@return the path bytes\\n    function WBTC_TO_USDC(State storage state) internal view returns (bytes memory) {\\n        return abi.encodePacked(state.wbtc, state.feeTierWethWbtcPool, state.weth, uint24(500), state.usdc);\\n    }\\n}\\n\",\"keccak256\":\"0x805ab1eb3d731bc8d741df69349be4bce3cc1e5f8e45ec70b02d17b3b61aca1f\",\"license\":\"MIT\"},\"contracts/libraries/FeeSplitStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\n\\n/**\\n * @title FeeSplitStrategy library\\n * @notice Implements the calculation of the eth reward split depending on the utilization of reserve\\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE`\\n * point of utilization and another from that one to 100%\\n * @author adapted from https://github.com/aave/protocol-v2/blob/6f57232358af0fd41d9dcf9309d7a8c0b9aa3912/contracts/protocol/lendingpool/DefaultReserveInterestRateStrategy.sol\\n **/\\n\\nlibrary FeeSplitStrategy {\\n    using FullMath for uint128;\\n    using FullMath for uint256;\\n\\n    uint256 internal constant RATE_PRECISION = 1e30;\\n\\n    struct Info {\\n        /**\\n         * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\\n         * Expressed in ray\\n         **/\\n        uint128 optimalUtilizationRate;\\n        // Base variable borrow rate when Utilization rate = 0. Expressed in ray\\n        uint128 baseVariableBorrowRate;\\n        // Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint128 variableRateSlope1;\\n        // Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint128 variableRateSlope2;\\n    }\\n\\n    function getMaxVariableBorrowRate(Info storage feeStrategyInfo) internal view returns (uint256) {\\n        return\\n            feeStrategyInfo.baseVariableBorrowRate +\\n            feeStrategyInfo.variableRateSlope1 +\\n            feeStrategyInfo.variableRateSlope2;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * NOTE This function is kept for compatibility with the previous DefaultInterestRateStrategy interface.\\n     * New protocol implementation uses the new calculateInterestRates() interface\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param usedLiquidity The total borrowed from the reserve at a variable rate\\n     **/\\n    function calculateFeeSplit(\\n        Info storage feeStrategy,\\n        uint256 availableLiquidity,\\n        uint256 usedLiquidity\\n    ) internal view returns (uint256 feeSplitRate) {\\n        uint256 utilizationRate = usedLiquidity == 0\\n            ? 0\\n            : usedLiquidity.mulDiv(RATE_PRECISION, availableLiquidity + usedLiquidity);\\n\\n        uint256 excessUtilizationRate = RATE_PRECISION - feeStrategy.optimalUtilizationRate;\\n\\n        if (utilizationRate > feeStrategy.optimalUtilizationRate) {\\n            uint256 excessUtilizationRateRatio = (utilizationRate - feeStrategy.optimalUtilizationRate).mulDiv(\\n                RATE_PRECISION,\\n                excessUtilizationRate\\n            );\\n\\n            feeSplitRate =\\n                feeStrategy.baseVariableBorrowRate +\\n                feeStrategy.variableRateSlope1 +\\n                feeStrategy.variableRateSlope2.mulDiv(excessUtilizationRateRatio, RATE_PRECISION);\\n        } else {\\n            feeSplitRate =\\n                feeStrategy.baseVariableBorrowRate +\\n                utilizationRate.mulDiv(feeStrategy.variableRateSlope1, feeStrategy.optimalUtilizationRate);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe0b4852d0ca9b5b8127df7ac2a7637956e11afaacaea0769e76a74f28d2aed9a\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @title safe casting methods\\n/// @notice contains methods for safely casting between types\\n/// @author adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n */\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint128, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\\n        unchecked {\\n            /* solhint-disable reason-string */\\n            require((z = uint128(y)) == y);\\n        }\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            require(y < 2**255, 'Overflow');\\n            z = int256(y);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1c096653a0fa39f378ee55669147725d48fe029eb187d3104baeff97efba0a52\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x613e4161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061016c5760003560e01c8063a07ae7bb116100d2578063c6444b0711610096578063e01baf4f11610070578063e01baf4f14610372578063e491c7da14610385578063e784a93a1461039857600080fd5b8063c6444b0714610339578063d4a118f41461034c578063deaaf6be1461035f57600080fd5b8063a07ae7bb146102c0578063a999987d146102e0578063ab42ed5714610300578063b4e4ef8714610313578063bead085c1461032657600080fd5b806335c5382511610134578063666a859c1161010e578063666a859c1461027a5780637f65b4a91461028d57806395caf168146102ad57600080fd5b806335c53825146102245780634ea69491146102475780635941106d1461025a57600080fd5b8063029d6ad814610171578063108a7fa0146101a65780631b22edb9146101c8578063316e3332146101e9578063359ac86214610211575b600080fd5b61018461017f366004613527565b6103ab565b6040805193845260208401929092521515908201526060015b60405180910390f35b8180156101b257600080fd5b506101c66101c13660046136aa565b6103cc565b005b6101db6101d63660046137cf565b61060f565b60405190815260200161019d565b6101fc6101f73660046137ff565b610624565b6040805192835260208301919091520161019d565b6101db61021f3660046137cf565b61063c565b610237610232366004613821565b610648565b604051901515815260200161019d565b610237610255366004613821565b6106f0565b81801561026657600080fd5b506101c66102753660046137ff565b610745565b6101db61028836600461383a565b610753565b81801561029957600080fd5b506101c66102a8366004613866565b610768565b6101db6102bb3660046138a1565b61077c565b8180156102cc57600080fd5b506101c66102db366004613821565b610789565b8180156102ec57600080fd5b506102376102fb3660046138d9565b610f34565b6101db61030e366004613821565b61125d565b6101db6103213660046137cf565b61126a565b6101db610334366004613926565b611276565b6101fc61034736600461383a565b611282565b6101db61035a366004613926565b61129c565b61023761036d36600461383a565b6112a8565b610237610380366004613821565b6112b5565b6101db610393366004613926565b6112ec565b6101fc6103a6366004613821565b6112f8565b60008060006103bc8787878761130d565b9250925092509450945094915050565b600080600080600080868060200190518101906103e9919061394b565b9550955095509550955095506000808380156104025750825b1561047f57610450878c60008151811061041e5761041e6139aa565b60200260200101518c600081518110610439576104396139aa565b60200260200101516113e09092919063ffffffff16565b9150818a600081518110610466576104666139aa565b602002602001015161047891906139d6565b90506105ba565b871580159061048d57508515155b15610574576000846104d45760118e01548d516001600160a01b03909116908e906000906104bd576104bd6139aa565b60200260200101516001600160a01b03161461050b565b600f8e01548d516001600160a01b03909116908e906000906104f8576104f86139aa565b60200260200101516001600160a01b0316145b15610514575060015b8a81610521576001610524565b60005b60ff1681518110610537576105376139aa565b602002602001015192508a8161054e576000610551565b60015b60ff1681518110610564576105646139aa565b60200260200101519150506105ba565b871561059c578960008151811061058d5761058d6139aa565b602002602001015191506105ba565b896000815181106105af576105af6139aa565b602002602001015190505b87156105dd5760118d01546105dd908e906001600160a01b03168a8a86896113ff565b85156106005760108d0154610600908e906001600160a01b0316888885886113ff565b50505050505050505050505050565b600061061b8383611610565b90505b92915050565b600080610631848461181b565b915091509250929050565b600061061b8383611860565b6012810154604051632fe4a15f60e21b815230600482015260009182916001600160a01b039091169063bf92857c9060240160c060405180830381865afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb91906139ed565b600a8901549096506106e995506601000000000000900461ffff169350655af3107a40009250613a37915050565b1192915050565b60008060006106fe84611a0b565b9150915060008061071986610714886000611610565b61181b565b91509150610728868386611aec565b801561073a575061073a868285611aec565b159695505050505050565b61074f8282611b42565b5050565b6000610760848484611bcb565b949350505050565b6107758585858585611c70565b5050505050565b60006107608484846121e5565b60008082601c0160009054906101000a90046001600160a01b03166001600160a01b0316636a192a786040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108059190613a56565b9050600083601c0160009054906101000a90046001600160a01b03166001600160a01b0316630ce4018a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561085e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108829190613a56565b604051637aeceb1f60e11b81523060048201526001600160a01b03848116602483015291925060009183169063f5d9d63e90604401602060405180830381865afa1580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f89190613a7a565b601c86015460405163185b800160e11b815260006004820181905260248201819052600160448301819052606483018190526084830181905260a483015260c48201529192506001600160a01b0316906330b700029060e401600060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b5050604051637aeceb1f60e11b81523060048201526001600160a01b0386811660248301528493508516915063f5d9d63e90604401602060405180830381865afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f59190613a7a565b6109ff91906139d6565b6008860154909450610a289350849250670100000000000000900461ffff1690506127106113e0565b826006016000828254610a3b9190613a93565b90915550506007820154600583015460108401546040516370a0823160e01b815230600482015260009392916001600160a01b0316906370a0823190602401602060405180830381865afa158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb9190613a7a565b610ac591906139d6565b610acf91906139d6565b600a840154909150600160701b90046001600160801b0316811115610ed957600883015460009061271090610b1390670100000000000000900461ffff1684613a37565b610b1d9190613aab565b905080846005016000828254610b339190613a93565b9091555060009050610b4582846139d6565b90506000610bdc8268327cb2734119d3b7a9601e1b88601f0160009054906101000a90046001600160a01b03166001600160a01b031663e3696edd6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd59190613a7a565b91906113e0565b90506000610bea82846139d6565b90506000828860070154610bfe9190613a93565b601989015460108a01546040516340d3096b60e11b81526001600160a01b039182166004820152929350600092839291909116906381a612d690602401602060405180830381865afa158015610c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7c9190613a7a565b600a8b0154909150600090610cc590610c9b9061ffff166127106139d6565b610ca59084613a37565b610cbd61271068327cb2734119d3b7a9601e1b613a37565b8791906113e0565b60208c015460108d0154604051634ce3696f60e11b81526001600160a01b039182166004820152602481018990526044810184905292935016906399c6d2de906064016020604051808303816000875af1158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190613a7a565b600a8c0154909350600160701b90046001600160801b03168411159150610e70905057600a890154600090610dcd90610d9290640100000000900461ffff166127106139d6565b610d9c9085613a37565b610db468327cb2734119d3b7a9601e1b612710613a37565b60108d0154610bd5908e906001600160a01b0316612320565b60108b0154909150600090610dee908c906001600160a01b031686856124b4565b50600f8c0154909150610e0c908c906001600160a01b0316836125eb565b600060078c0155604080518a8152602081018c9052908101869052606081018790526080810184905260a081018290527f158c029cea1e3fee2bbf8bd978c70589b9698ea9c382e6ce92bb481622a06db49060c00160405180910390a15050610ece565b6007890182905560408051888152602081018a90529081018490526060810185905260808101829052600060a08201527f158c029cea1e3fee2bbf8bd978c70589b9698ea9c382e6ce92bb481622a06db49060c00160405180910390a15b505050505050505050565b60408051828152602081018490526000818301819052606082018190526080820181905260a082015290517f158c029cea1e3fee2bbf8bd978c70589b9698ea9c382e6ce92bb481622a06db49181900360c00190a15b505050565b6000806000610f43888661181b565b915091508315610fa05760118801546000908190610f6d908b906001600160a01b0316868c612666565b60108c01549195509250610f8d908b906001600160a01b0316858b612666565b90935090508180610f9b5750805b945050505b6000610fad898484611bcb565b600f8a0154909150600090610fcc908b906001600160a01b031661273c565b90506000610fe58383848e60040154610bd591906139d6565b90506000610ff28c6127c0565b9050808211156111a757600061100882846139d6565b601f8e015460405163150ef26160e21b81523060048201529192506000916001600160a01b039091169063543bc984906024016020604051808303816000875af115801561105a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107e9190613a7a565b90508082111561111a578661109d8f6110978487613a93565b88612858565b90995097506110ad8f828a612a08565b811561111457601f8f015460405163317afabb60e21b8152600481018490526001600160a01b039091169063c5ebeaec90602401600060405180830381600087803b1580156110fb57600080fd5b505af115801561110f573d6000803e3d6000fd5b505050505b50611193565b6111258e8889612a08565b601f8e01546001600160a01b031663c5ebeaec61114285876139d6565b6040518263ffffffff1660e01b815260040161116091815260200190565b600060405180830381600087803b15801561117a57600080fd5b505af115801561118e573d6000803e3d6000fd5b505050505b50506111a28c878d888e611c70565b61124e565b6111b48c878d888e611c70565b60008060006111c28f611a0b565b915091506111d18f8383611bcb565b925050506111df8d82611b42565b601f8d01546001600160a01b031663371fd8e66111fc85856139d6565b6040518263ffffffff1660e01b815260040161121a91815260200190565b600060405180830381600087803b15801561123457600080fd5b505af1158015611248573d6000803e3d6000fd5b50505050505b50505050505095945050505050565b600061061e826000611610565b600061061b8383612ac4565b600061061b838361273c565b600080611290858585612858565b91509150935093915050565b600061061b8383612320565b6000610760848484611aec565b600a810154600882015460009168010000000000000000900463ffffffff16906106e990610100900465ffffffffffff16426139d6565b600061061b8383612be5565b60008061130483611a0b565b91509150915091565b60118401546000908190819081906001600160a01b0388811691161461134357600a880154640100000000900461ffff16611353565b600a88015462010000900461ffff165b61ffff169050848611156113b35761136b85876139d6565b93506113a861137c826127106139d6565b6113869086613a37565b61139e68327cb2734119d3b7a9601e1b612710613a37565b610bd58b8b612320565b9250600091506113d5565b6113bd86866139d6565b93506113ce61137c82612710613a93565b9250600191505b509450945094915050565b8282028115158415858304851417166113f857600080fd5b0492915050565b806114eb5760006114108386613a93565b90506000611420888888886124b4565b50600f89015490915061143e9089906001600160a01b0316836125eb565b611449888884612ced565b61145281612d3c565b8860020160008282546114659190613acd565b9091555050601e88015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529088169063a9059cbb906044016020604051808303816000875af11580156114bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e39190613b0e565b505050611608565b6000806114fa88888888612d84565b9092509050600061150b8584613a93565b905061151681612d3c565b8960020160008282546115299190613b2b565b9091555061153a9050898984612eaa565b600f890154611555908a906001600160a01b03168330612f36565b600f890154601e8a01546001600160a01b039182169163a9059cbb911661157c888a613a93565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156115df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116039190613b0e565b505050505b505050505050565b600282015460009081808213611627576000611629565b815b9050600080831261163b576000611644565b61164483613b6a565b9050600061167368327cb2734119d3b7a9601e1b611663898915611860565b858a60030154610bd59190613a93565b905060008061168189611a0b565b9150915060006116928a8484611bcb565b905060006116ba68327cb2734119d3b7a9601e1b6116b08d8d611860565b610bd58986613a93565b9050896116e757600a8b01546116e4906116da9061ffff166127106139d6565b86906127106113e0565b94505b8961171257600a8b015461170f906117059061ffff16612710613a93565b82906127106113e0565b90505b6020808c015460408051635841507560e01b81529051849389936001600160a01b031692635841507592600480830193928290030181865afa15801561175c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117809190613a7a565b600d8e01546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156117ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ee9190613a7a565b6117f89190613a93565b6118029190613a93565b61180c91906139d6565b9b9a5050505050505050505050565b6011820154600090819061183a9085906001600160a01b0316856121e5565b60108501549092506118579085906001600160a01b0316856121e5565b90509250929050565b601b82015460405163019c8a3b60e11b8152821515600482015260009182916001600160a01b0390911690630339147690602401602060405180830381865afa1580156118b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d59190613a7a565b9050600084600e0160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561192e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119529190613a7a565b6016860154600f87015460405163b3596f0760e01b81526001600160a01b03918216600482015292935060009291169063b3596f0790602401602060405180830381865afa1580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190613a7a565b9050611a0168327cb2734119d3b7a9601e1b6119e88385613a37565b6119f990662386f26fc10000613a37565b8591906113e0565b9695505050505050565b60148101546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7e9190613a7a565b60158401546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611ac8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113049190613a7a565b600080828411611b0557611b0084846139d6565b611b0f565b611b0f83856139d6565b600a860154909150611b38906c01000000000000000000000000900461ffff16846127106113e0565b1015949350505050565b6000611b4d82612d3c565b90508260020154811315611b9a57611b7c611b7784856002015484611b729190613b2b565b612fb7565b612d3c565b836002016000828254611b8f9190613acd565b90915550610f2f9050565b8260020154811215610f2f57611bbf83828560020154611bba9190613b2b565b613177565b60028301819055505050565b6010830154600090611bff90611beb9086906001600160a01b0316612be5565b839068327cb2734119d3b7a9601e1b6113e0565b6011850154611c3090611c1c9087906001600160a01b0316612be5565b859068327cb2734119d3b7a9601e1b6113e0565b611c3a9190613a93565b600f8501549091506107609068327cb2734119d3b7a9601e1b90611c689087906001600160a01b0316612be5565b8391906113e0565b6060806000806000611c9b8a8b60110160009054906101000a90046001600160a01b03168b8b61130d565b9250925092506000806000611cc98d8e60100160009054906101000a90046001600160a01b03168c8c61130d565b9250925092508c600b0160109054906101000a90046001600160801b03166001600160801b0316851015611d005760009550600094505b600b8d0154600160801b90046001600160801b0316821015611d255760009250600091505b600084611d325786611d34565b855b9050600082611d435784611d45565b835b905081158015611d53575080155b15611d675750505050505050505050610775565b858015611d715750825b15611e275760408051600180825281830190925290602080830190803683375050604080516001808252818301909252929c509050602080830190803683370190505098508e600f0160009054906101000a90046001600160a01b03168a600081518110611de157611de16139aa565b6001600160a01b0390921660209283029190910190910152611e038183613a93565b89600081518110611e1657611e166139aa565b6020026020010181815250506121c3565b811580611e32575080155b15611f595760408051600180825281830190925290602080830190803683375050604080516001808252818301909252929c509050602080830190803683370190505098508115611eeb5785611e955760118f01546001600160a01b0316611ea4565b600f8f01546001600160a01b03165b8a600081518110611eb757611eb76139aa565b60200260200101906001600160a01b031690816001600160a01b0316815250508189600081518110611e1657611e166139aa565b82611f035760108f01546001600160a01b0316611f12565b600f8f01546001600160a01b03165b8a600081518110611f2557611f256139aa565b60200260200101906001600160a01b031690816001600160a01b0316815250508089600081518110611e1657611e166139aa565b60408051600280825260608201835290916020830190803683375050604080516002808252606082018352939d5092915060208301908036833701905050985085611fb15760118f01546001600160a01b0316611fc0565b600f8f01546001600160a01b03165b8a600081518110611fd357611fd36139aa565b60200260200101906001600160a01b031690816001600160a01b0316815250508261200b5760108f01546001600160a01b031661201a565b600f8f01546001600160a01b03165b8a60018151811061202d5761202d6139aa565b60200260200101906001600160a01b031690816001600160a01b03168152505089600181518110612060576120606139aa565b60200260200101516001600160a01b03168a600081518110612084576120846139aa565b60200260200101516001600160a01b031611156121825760008a6000815181106120b0576120b06139aa565b602002602001015190508a6001815181106120cd576120cd6139aa565b60200260200101518b6000815181106120e8576120e86139aa565b60200260200101906001600160a01b031690816001600160a01b031681525050808b60018151811061211c5761211c6139aa565b60200260200101906001600160a01b031690816001600160a01b031681525050818a600081518110612150576121506139aa565b602002602001018181525050828a600181518110612170576121706139aa565b602002602001018181525050506121c3565b8189600081518110612196576121966139aa565b60200260200101818152505080896001815181106121b6576121b66139aa565b6020026020010181815250505b6121d48f8b8b8b8b8a8a8d8b613330565b505050505050505050505050505050565b6019830154604051632acbceb560e21b81526001600160a01b038481166004830152600092839291169063ab2f3ad490602401602060405180830381865afa158015612235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122599190613a7a565b905060008560190160009054906101000a90046001600160a01b03166001600160a01b031663dc8f5fac6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d69190613a7a565b905060006122e5876000612ac4565b905060006122f38888612be5565b90506123146123028388613a37565b61230c8386613a37565b8691906113e0565b98975050505050505050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123859190613b87565b601685015460405163b3596f0760e01b81526001600160a01b03868116600483015260ff9390931693506000929091169063b3596f0790602401602060405180830381865afa1580156123dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124009190613a7a565b6016860154600f87015460405163b3596f0760e01b81526001600160a01b03918216600482015292935060009291169063b3596f0790602401602060405180830381865afa158015612456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247a9190613a7a565b9050611a0168327cb2734119d3b7a9601e1b6124976006866139d6565b6124a290600a613c8e565b6124ac9084613a37565b8491906113e0565b601d840154601085015460009182916001600160a01b039182169183918882169116146124e9576124e488613427565b6124f2565b6124f2886134cb565b6040805160a08101825282815230602082015242818301526060810189905260808101889052905163c04b8d5960e01b8152889550919250906001600160a01b0384169063c04b8d599061254a908490600401613d39565b6020604051808303816000875af1158015612569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258d9190613a7a565b600f8a0154604080518a8152602081018490529297506001600160a01b0391821692918b16917f30b60ee4dc75c0fb04420331b13e9ad7f8ff8fc51eac9c97d36fb20ccbe09d6691015b60405180910390a350505094509492505050565b601283015460405163617ba03760e01b81526001600160a01b03848116600483015260248201849052306044830152600060648301529091169063617ba037906084015b600060405180830381600087803b15801561264957600080fd5b505af115801561265d573d6000803e3d6000fd5b50505050505050565b60008082841181816126815761267c86866139d6565b61268b565b61268b85876139d6565b60118901549091506000906001600160a01b038981169116146126c257600c890154600160801b90046001600160801b03166126d1565b600c8901546001600160801b03165b6001600160801b0316905060006126f868327cb2734119d3b7a9601e1b6124ac8c8c612320565b90508083111561272b57836127165761271181886139d6565b612720565b6127208188613a93565b95506001945061272f565b8795505b5050505094509492505050565b601282015460405163c44b11f760e01b81526001600160a01b038381166004830152600092839291169063c44b11f790602401602060405180830381865afa15801561278c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b09190613d4c565b5160101c61ffff16949350505050565b60006127cf8260030154612d3c565b600283015460138401546040516370a0823160e01b8152306004820152612844916001600160a01b0316906370a0823190602401602060405180830381865afa158015612820573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b779190613a7a565b61284e9190613b2b565b61061e9190613b2b565b600080600061287184858860040154610cbd91906139d6565b60198701546011880154604051632acbceb560e21b81526001600160a01b03918216600482015292935060009291169063ab2f3ad490602401602060405180830381865afa1580156128c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128eb9190613a7a565b60198801546010890154604051632acbceb560e21b81526001600160a01b03918216600482015292935060009291169063ab2f3ad490602401602060405180830381865afa158015612941573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129659190613a7a565b6011890154909150600090612984908a906001600160a01b0316612320565b60108a01549091506000906129a3908b906001600160a01b0316612320565b90506129d36129be68327cb2734119d3b7a9601e1b86613a37565b836129c98688613a93565b610cbd9190613a37565b96506129f96129ee68327cb2734119d3b7a9601e1b85613a37565b826129c98688613a93565b95505050505050935093915050565b6000612a23612a1783856139d6565b84610bd5876000611610565b90506000612a35611beb866000611860565b90508460030154811115612a80576000856003015482612a5591906139d6565b9050612a618682612fb7565b866003016000828254612a749190613a93565b90915550610775915050565b8460030154811015610775576000818660030154612a9e91906139d6565b905080866003016000828254612ab491906139d6565b9091555061160890508682613177565b601b82015460405163019c8a3b60e11b8152821515600482015260009182916001600160a01b0390911690630339147690602401602060405180830381865afa158015612b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b399190613a7a565b9050600084600e0160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb69190613a7a565b9050612bdc68327cb2734119d3b7a9601e1b6124ac8369d3c21bcecceda1000000613a37565b95945050505050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4a9190613b87565b601685015460405163b3596f0760e01b81526001600160a01b03868116600483015260ff9390931693506000929091169063b3596f0790602401602060405180830381865afa158015612ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc59190613a7a565b9050612bdc68327cb2734119d3b7a9601e1b612ce2846002613a93565b611c6890600a613c8e565b601283015460405163a415bcad60e01b81526001600160a01b0384811660048301526024820184905260026044830152600060648301523060848301529091169063a415bcad9060a40161262f565b6000600160ff1b8210612d805760405162461bcd60e51b81526020600482015260086024820152674f766572666c6f7760c01b604482015260640160405180910390fd5b5090565b601d840154601085015460009182916001600160a01b03918216918391888216911614612db957612db488613427565b612dc2565b612dc2886134cb565b6040805160a081018252828152306020820152428183015260608101899052608081018890529051631e51809360e31b8152889550919250906001600160a01b0384169063f28c049890612e1a908490600401613d39565b6020604051808303816000875af1158015612e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5d9190613a7a565b600f8a015460408051838152602081018890529297506001600160a01b038b8116939216917f30b60ee4dc75c0fb04420331b13e9ad7f8ff8fc51eac9c97d36fb20ccbe09d6691016125d7565b601283015460405163573ade8160e01b81526001600160a01b03848116600483015260248201849052600260448301523060648301529091169063573ade81906084016020604051808303816000875af1158015612f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f309190613a7a565b50505050565b6012840154604051631a4ca37b60e21b81526001600160a01b038581166004830152602482018590528381166044830152909116906369328dec906064016020604051808303816000875af1158015612f93573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107759190613a7a565b600b8201546000906001600160801b0316821015612fd75750600061061e565b600f8301546019840154604051637092736960e11b81526001600160a01b039283166004820181905292600092169063e124e6d290602401602060405180830381865afa15801561302c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130509190613a7a565b600a86015490915060009061306f906116da9061ffff166127106139d6565b9050600061309668327cb2734119d3b7a9601e1b61308e896000611860565b8891906113e0565b601c8801546040516303cea95560e21b81526001600160a01b0387811660048301526024820184905260448201869052306064830152929350911690630f3aa554906084016020604051808303816000875af11580156130fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311e9190613a7a565b604080518381526020810183905260018183015290519196507ff4024340444cb343545bdc17f3914765a58115d058de06a9b6fa4c7091188e7d919081900360600190a161316d8785876125eb565b5050505092915050565b600f8201546131929083906001600160a01b03168330612f36565b6019820154600f8301546040516340d3096b60e11b81526001600160a01b03918216600482015260009291909116906381a612d690602401602060405180830381865afa1580156131e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320b9190613a7a565b600a84015490915060009061325b9061322a9061ffff166127106139d6565b6132349084613a37565b6132439064e8d4a51000613a37565b6119f961271068327cb2734119d3b7a9601e1b613a37565b6020850154600f860154604051634ce3696f60e11b81526001600160a01b03918216600482015260248101879052604481018490529293506000929116906399c6d2de906064016020604051808303816000875af11580156132c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e59190613a7a565b604080518281526020810187905260008183015290519192507ff4024340444cb343545bdc17f3914765a58115d058de06a9b6fa4c7091188e7d919081900360600190a15050505050565b8651885114613352576040516307e11acb60e51b815260040160405180910390fd5b60088901805460ff19166001179055601e8901546040805160208101899052908101879052606081018690526080810185905283151560a082015282151560c08201526001600160a01b0390911690635c38449e9030908b908b9060e0016040516020818303038152906040526040518563ffffffff1660e01b81526004016133de9493929190613d8e565b600060405180830381600087803b1580156133f857600080fd5b505af115801561340c573d6000803e3d6000fd5b5050506008909901805460ff19169055505050505050505050565b601181015460088201546010830154600f840154604051606094851b6bffffffffffffffffffffffff1990811660208301526b01000000000000000000000090940460e81b7fffffff000000000000000000000000000000000000000000000000000000000016603482015291841b83166037830152607d60ea1b604b830152831b909116604e8201526062015b6040516020818303038152906040529050919050565b6010810154600f8201546040516bffffffffffffffffffffffff19606093841b81166020830152607d60ea1b603483015291831b9091166037820152604b016134b5565b6001600160a01b038116811461352457600080fd5b50565b6000806000806080858703121561353d57600080fd5b84359350602085013561354f8161350f565b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156135a3576135a3613564565b604052919050565b600067ffffffffffffffff8211156135c5576135c5613564565b5060051b60200190565b600082601f8301126135e057600080fd5b813560206135f56135f0836135ab565b61357a565b82815260059290921b8401810191818101908684111561361457600080fd5b8286015b8481101561362f5780358352918301918301613618565b509695505050505050565b600082601f83011261364b57600080fd5b813567ffffffffffffffff81111561366557613665613564565b613678601f8201601f191660200161357a565b81815284602083860101111561368d57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156136c257600080fd5b8535945060208087013567ffffffffffffffff808211156136e257600080fd5b818901915089601f8301126136f657600080fd5b81356137046135f0826135ab565b81815260059190911b8301840190848101908c83111561372357600080fd5b938501935b8285101561374a57843561373b8161350f565b82529385019390850190613728565b98505050604089013592508083111561376257600080fd5b61376e8a848b016135cf565b9550606089013592508083111561378457600080fd5b6137908a848b016135cf565b945060808901359250808311156137a657600080fd5b50506137b48882890161363a565b9150509295509295909350565b801515811461352457600080fd5b600080604083850312156137e257600080fd5b8235915060208301356137f4816137c1565b809150509250929050565b6000806040838503121561381257600080fd5b50508035926020909101359150565b60006020828403121561383357600080fd5b5035919050565b60008060006060848603121561384f57600080fd5b505081359360208301359350604090920135919050565b600080600080600060a0868803121561387e57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000806000606084860312156138b657600080fd5b8335925060208401356138c88161350f565b929592945050506040919091013590565b600080600080600060a086880312156138f157600080fd5b853594506020860135935060408601359250606086013591506080860135613918816137c1565b809150509295509295909350565b6000806040838503121561393957600080fd5b8235915060208301356137f48161350f565b60008060008060008060c0878903121561396457600080fd5b86519550602087015194506040870151935060608701519250608087015161398b816137c1565b60a088015190925061399c816137c1565b809150509295509295509295565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156139e8576139e86139c0565b500390565b60008060008060008060c08789031215613a0657600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000816000190483118215151615613a5157613a516139c0565b500290565b600060208284031215613a6857600080fd5b8151613a738161350f565b9392505050565b600060208284031215613a8c57600080fd5b5051919050565b60008219821115613aa657613aa66139c0565b500190565b600082613ac857634e487b7160e01b600052601260045260246000fd5b500490565b600080821280156001600160ff1b0384900385131615613aef57613aef6139c0565b600160ff1b8390038412811615613b0857613b086139c0565b50500190565b600060208284031215613b2057600080fd5b8151613a73816137c1565b60008083128015600160ff1b850184121615613b4957613b496139c0565b6001600160ff1b0384018313811615613b6457613b646139c0565b50500390565b6000600160ff1b821415613b8057613b806139c0565b5060000390565b600060208284031215613b9957600080fd5b815160ff81168114613a7357600080fd5b600181815b80851115613be5578160001904821115613bcb57613bcb6139c0565b80851615613bd857918102915b93841c9390800290613baf565b509250929050565b600082613bfc5750600161061e565b81613c095750600061061e565b8160018114613c1f5760028114613c2957613c45565b600191505061061e565b60ff841115613c3a57613c3a6139c0565b50506001821b61061e565b5060208310610133831016604e8410600b8410161715613c68575081810a61061e565b613c728383613baa565b8060001904821115613c8657613c866139c0565b029392505050565b600061061b8383613bed565b6000815180845260005b81811015613cc057602081850181015186830182015201613ca4565b81811115613cd2576000602083870101525b50601f01601f19169290920160200192915050565b6000815160a08452613cfc60a0850182613c9a565b90506001600160a01b0360208401511660208501526040830151604085015260608301516060850152608083015160808501528091505092915050565b60208152600061061b6020830184613ce7565b600060208284031215613d5e57600080fd5b6040516020810181811067ffffffffffffffff82111715613d8157613d81613564565b6040529151825250919050565b6000608082016001600160a01b038088168452602060808186015282885180855260a087019150828a01945060005b81811015613ddb578551851683529483019491830191600101613dbd565b5050858103604087015287518082529082019350915080870160005b83811015613e1357815185529382019390820190600101613df7565b505050508281036060840152613e298185613c9a565b97965050505050505056fea164736f6c634300080a000a",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061016c5760003560e01c8063a07ae7bb116100d2578063c6444b0711610096578063e01baf4f11610070578063e01baf4f14610372578063e491c7da14610385578063e784a93a1461039857600080fd5b8063c6444b0714610339578063d4a118f41461034c578063deaaf6be1461035f57600080fd5b8063a07ae7bb146102c0578063a999987d146102e0578063ab42ed5714610300578063b4e4ef8714610313578063bead085c1461032657600080fd5b806335c5382511610134578063666a859c1161010e578063666a859c1461027a5780637f65b4a91461028d57806395caf168146102ad57600080fd5b806335c53825146102245780634ea69491146102475780635941106d1461025a57600080fd5b8063029d6ad814610171578063108a7fa0146101a65780631b22edb9146101c8578063316e3332146101e9578063359ac86214610211575b600080fd5b61018461017f366004613527565b6103ab565b6040805193845260208401929092521515908201526060015b60405180910390f35b8180156101b257600080fd5b506101c66101c13660046136aa565b6103cc565b005b6101db6101d63660046137cf565b61060f565b60405190815260200161019d565b6101fc6101f73660046137ff565b610624565b6040805192835260208301919091520161019d565b6101db61021f3660046137cf565b61063c565b610237610232366004613821565b610648565b604051901515815260200161019d565b610237610255366004613821565b6106f0565b81801561026657600080fd5b506101c66102753660046137ff565b610745565b6101db61028836600461383a565b610753565b81801561029957600080fd5b506101c66102a8366004613866565b610768565b6101db6102bb3660046138a1565b61077c565b8180156102cc57600080fd5b506101c66102db366004613821565b610789565b8180156102ec57600080fd5b506102376102fb3660046138d9565b610f34565b6101db61030e366004613821565b61125d565b6101db6103213660046137cf565b61126a565b6101db610334366004613926565b611276565b6101fc61034736600461383a565b611282565b6101db61035a366004613926565b61129c565b61023761036d36600461383a565b6112a8565b610237610380366004613821565b6112b5565b6101db610393366004613926565b6112ec565b6101fc6103a6366004613821565b6112f8565b60008060006103bc8787878761130d565b9250925092509450945094915050565b600080600080600080868060200190518101906103e9919061394b565b9550955095509550955095506000808380156104025750825b1561047f57610450878c60008151811061041e5761041e6139aa565b60200260200101518c600081518110610439576104396139aa565b60200260200101516113e09092919063ffffffff16565b9150818a600081518110610466576104666139aa565b602002602001015161047891906139d6565b90506105ba565b871580159061048d57508515155b15610574576000846104d45760118e01548d516001600160a01b03909116908e906000906104bd576104bd6139aa565b60200260200101516001600160a01b03161461050b565b600f8e01548d516001600160a01b03909116908e906000906104f8576104f86139aa565b60200260200101516001600160a01b0316145b15610514575060015b8a81610521576001610524565b60005b60ff1681518110610537576105376139aa565b602002602001015192508a8161054e576000610551565b60015b60ff1681518110610564576105646139aa565b60200260200101519150506105ba565b871561059c578960008151811061058d5761058d6139aa565b602002602001015191506105ba565b896000815181106105af576105af6139aa565b602002602001015190505b87156105dd5760118d01546105dd908e906001600160a01b03168a8a86896113ff565b85156106005760108d0154610600908e906001600160a01b0316888885886113ff565b50505050505050505050505050565b600061061b8383611610565b90505b92915050565b600080610631848461181b565b915091509250929050565b600061061b8383611860565b6012810154604051632fe4a15f60e21b815230600482015260009182916001600160a01b039091169063bf92857c9060240160c060405180830381865afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb91906139ed565b600a8901549096506106e995506601000000000000900461ffff169350655af3107a40009250613a37915050565b1192915050565b60008060006106fe84611a0b565b9150915060008061071986610714886000611610565b61181b565b91509150610728868386611aec565b801561073a575061073a868285611aec565b159695505050505050565b61074f8282611b42565b5050565b6000610760848484611bcb565b949350505050565b6107758585858585611c70565b5050505050565b60006107608484846121e5565b60008082601c0160009054906101000a90046001600160a01b03166001600160a01b0316636a192a786040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108059190613a56565b9050600083601c0160009054906101000a90046001600160a01b03166001600160a01b0316630ce4018a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561085e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108829190613a56565b604051637aeceb1f60e11b81523060048201526001600160a01b03848116602483015291925060009183169063f5d9d63e90604401602060405180830381865afa1580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f89190613a7a565b601c86015460405163185b800160e11b815260006004820181905260248201819052600160448301819052606483018190526084830181905260a483015260c48201529192506001600160a01b0316906330b700029060e401600060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b5050604051637aeceb1f60e11b81523060048201526001600160a01b0386811660248301528493508516915063f5d9d63e90604401602060405180830381865afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f59190613a7a565b6109ff91906139d6565b6008860154909450610a289350849250670100000000000000900461ffff1690506127106113e0565b826006016000828254610a3b9190613a93565b90915550506007820154600583015460108401546040516370a0823160e01b815230600482015260009392916001600160a01b0316906370a0823190602401602060405180830381865afa158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb9190613a7a565b610ac591906139d6565b610acf91906139d6565b600a840154909150600160701b90046001600160801b0316811115610ed957600883015460009061271090610b1390670100000000000000900461ffff1684613a37565b610b1d9190613aab565b905080846005016000828254610b339190613a93565b9091555060009050610b4582846139d6565b90506000610bdc8268327cb2734119d3b7a9601e1b88601f0160009054906101000a90046001600160a01b03166001600160a01b031663e3696edd6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd59190613a7a565b91906113e0565b90506000610bea82846139d6565b90506000828860070154610bfe9190613a93565b601989015460108a01546040516340d3096b60e11b81526001600160a01b039182166004820152929350600092839291909116906381a612d690602401602060405180830381865afa158015610c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7c9190613a7a565b600a8b0154909150600090610cc590610c9b9061ffff166127106139d6565b610ca59084613a37565b610cbd61271068327cb2734119d3b7a9601e1b613a37565b8791906113e0565b60208c015460108d0154604051634ce3696f60e11b81526001600160a01b039182166004820152602481018990526044810184905292935016906399c6d2de906064016020604051808303816000875af1158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190613a7a565b600a8c0154909350600160701b90046001600160801b03168411159150610e70905057600a890154600090610dcd90610d9290640100000000900461ffff166127106139d6565b610d9c9085613a37565b610db468327cb2734119d3b7a9601e1b612710613a37565b60108d0154610bd5908e906001600160a01b0316612320565b60108b0154909150600090610dee908c906001600160a01b031686856124b4565b50600f8c0154909150610e0c908c906001600160a01b0316836125eb565b600060078c0155604080518a8152602081018c9052908101869052606081018790526080810184905260a081018290527f158c029cea1e3fee2bbf8bd978c70589b9698ea9c382e6ce92bb481622a06db49060c00160405180910390a15050610ece565b6007890182905560408051888152602081018a90529081018490526060810185905260808101829052600060a08201527f158c029cea1e3fee2bbf8bd978c70589b9698ea9c382e6ce92bb481622a06db49060c00160405180910390a15b505050505050505050565b60408051828152602081018490526000818301819052606082018190526080820181905260a082015290517f158c029cea1e3fee2bbf8bd978c70589b9698ea9c382e6ce92bb481622a06db49181900360c00190a15b505050565b6000806000610f43888661181b565b915091508315610fa05760118801546000908190610f6d908b906001600160a01b0316868c612666565b60108c01549195509250610f8d908b906001600160a01b0316858b612666565b90935090508180610f9b5750805b945050505b6000610fad898484611bcb565b600f8a0154909150600090610fcc908b906001600160a01b031661273c565b90506000610fe58383848e60040154610bd591906139d6565b90506000610ff28c6127c0565b9050808211156111a757600061100882846139d6565b601f8e015460405163150ef26160e21b81523060048201529192506000916001600160a01b039091169063543bc984906024016020604051808303816000875af115801561105a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107e9190613a7a565b90508082111561111a578661109d8f6110978487613a93565b88612858565b90995097506110ad8f828a612a08565b811561111457601f8f015460405163317afabb60e21b8152600481018490526001600160a01b039091169063c5ebeaec90602401600060405180830381600087803b1580156110fb57600080fd5b505af115801561110f573d6000803e3d6000fd5b505050505b50611193565b6111258e8889612a08565b601f8e01546001600160a01b031663c5ebeaec61114285876139d6565b6040518263ffffffff1660e01b815260040161116091815260200190565b600060405180830381600087803b15801561117a57600080fd5b505af115801561118e573d6000803e3d6000fd5b505050505b50506111a28c878d888e611c70565b61124e565b6111b48c878d888e611c70565b60008060006111c28f611a0b565b915091506111d18f8383611bcb565b925050506111df8d82611b42565b601f8d01546001600160a01b031663371fd8e66111fc85856139d6565b6040518263ffffffff1660e01b815260040161121a91815260200190565b600060405180830381600087803b15801561123457600080fd5b505af1158015611248573d6000803e3d6000fd5b50505050505b50505050505095945050505050565b600061061e826000611610565b600061061b8383612ac4565b600061061b838361273c565b600080611290858585612858565b91509150935093915050565b600061061b8383612320565b6000610760848484611aec565b600a810154600882015460009168010000000000000000900463ffffffff16906106e990610100900465ffffffffffff16426139d6565b600061061b8383612be5565b60008061130483611a0b565b91509150915091565b60118401546000908190819081906001600160a01b0388811691161461134357600a880154640100000000900461ffff16611353565b600a88015462010000900461ffff165b61ffff169050848611156113b35761136b85876139d6565b93506113a861137c826127106139d6565b6113869086613a37565b61139e68327cb2734119d3b7a9601e1b612710613a37565b610bd58b8b612320565b9250600091506113d5565b6113bd86866139d6565b93506113ce61137c82612710613a93565b9250600191505b509450945094915050565b8282028115158415858304851417166113f857600080fd5b0492915050565b806114eb5760006114108386613a93565b90506000611420888888886124b4565b50600f89015490915061143e9089906001600160a01b0316836125eb565b611449888884612ced565b61145281612d3c565b8860020160008282546114659190613acd565b9091555050601e88015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529088169063a9059cbb906044016020604051808303816000875af11580156114bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e39190613b0e565b505050611608565b6000806114fa88888888612d84565b9092509050600061150b8584613a93565b905061151681612d3c565b8960020160008282546115299190613b2b565b9091555061153a9050898984612eaa565b600f890154611555908a906001600160a01b03168330612f36565b600f890154601e8a01546001600160a01b039182169163a9059cbb911661157c888a613a93565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156115df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116039190613b0e565b505050505b505050505050565b600282015460009081808213611627576000611629565b815b9050600080831261163b576000611644565b61164483613b6a565b9050600061167368327cb2734119d3b7a9601e1b611663898915611860565b858a60030154610bd59190613a93565b905060008061168189611a0b565b9150915060006116928a8484611bcb565b905060006116ba68327cb2734119d3b7a9601e1b6116b08d8d611860565b610bd58986613a93565b9050896116e757600a8b01546116e4906116da9061ffff166127106139d6565b86906127106113e0565b94505b8961171257600a8b015461170f906117059061ffff16612710613a93565b82906127106113e0565b90505b6020808c015460408051635841507560e01b81529051849389936001600160a01b031692635841507592600480830193928290030181865afa15801561175c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117809190613a7a565b600d8e01546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156117ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ee9190613a7a565b6117f89190613a93565b6118029190613a93565b61180c91906139d6565b9b9a5050505050505050505050565b6011820154600090819061183a9085906001600160a01b0316856121e5565b60108501549092506118579085906001600160a01b0316856121e5565b90509250929050565b601b82015460405163019c8a3b60e11b8152821515600482015260009182916001600160a01b0390911690630339147690602401602060405180830381865afa1580156118b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d59190613a7a565b9050600084600e0160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561192e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119529190613a7a565b6016860154600f87015460405163b3596f0760e01b81526001600160a01b03918216600482015292935060009291169063b3596f0790602401602060405180830381865afa1580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190613a7a565b9050611a0168327cb2734119d3b7a9601e1b6119e88385613a37565b6119f990662386f26fc10000613a37565b8591906113e0565b9695505050505050565b60148101546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7e9190613a7a565b60158401546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611ac8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113049190613a7a565b600080828411611b0557611b0084846139d6565b611b0f565b611b0f83856139d6565b600a860154909150611b38906c01000000000000000000000000900461ffff16846127106113e0565b1015949350505050565b6000611b4d82612d3c565b90508260020154811315611b9a57611b7c611b7784856002015484611b729190613b2b565b612fb7565b612d3c565b836002016000828254611b8f9190613acd565b90915550610f2f9050565b8260020154811215610f2f57611bbf83828560020154611bba9190613b2b565b613177565b60028301819055505050565b6010830154600090611bff90611beb9086906001600160a01b0316612be5565b839068327cb2734119d3b7a9601e1b6113e0565b6011850154611c3090611c1c9087906001600160a01b0316612be5565b859068327cb2734119d3b7a9601e1b6113e0565b611c3a9190613a93565b600f8501549091506107609068327cb2734119d3b7a9601e1b90611c689087906001600160a01b0316612be5565b8391906113e0565b6060806000806000611c9b8a8b60110160009054906101000a90046001600160a01b03168b8b61130d565b9250925092506000806000611cc98d8e60100160009054906101000a90046001600160a01b03168c8c61130d565b9250925092508c600b0160109054906101000a90046001600160801b03166001600160801b0316851015611d005760009550600094505b600b8d0154600160801b90046001600160801b0316821015611d255760009250600091505b600084611d325786611d34565b855b9050600082611d435784611d45565b835b905081158015611d53575080155b15611d675750505050505050505050610775565b858015611d715750825b15611e275760408051600180825281830190925290602080830190803683375050604080516001808252818301909252929c509050602080830190803683370190505098508e600f0160009054906101000a90046001600160a01b03168a600081518110611de157611de16139aa565b6001600160a01b0390921660209283029190910190910152611e038183613a93565b89600081518110611e1657611e166139aa565b6020026020010181815250506121c3565b811580611e32575080155b15611f595760408051600180825281830190925290602080830190803683375050604080516001808252818301909252929c509050602080830190803683370190505098508115611eeb5785611e955760118f01546001600160a01b0316611ea4565b600f8f01546001600160a01b03165b8a600081518110611eb757611eb76139aa565b60200260200101906001600160a01b031690816001600160a01b0316815250508189600081518110611e1657611e166139aa565b82611f035760108f01546001600160a01b0316611f12565b600f8f01546001600160a01b03165b8a600081518110611f2557611f256139aa565b60200260200101906001600160a01b031690816001600160a01b0316815250508089600081518110611e1657611e166139aa565b60408051600280825260608201835290916020830190803683375050604080516002808252606082018352939d5092915060208301908036833701905050985085611fb15760118f01546001600160a01b0316611fc0565b600f8f01546001600160a01b03165b8a600081518110611fd357611fd36139aa565b60200260200101906001600160a01b031690816001600160a01b0316815250508261200b5760108f01546001600160a01b031661201a565b600f8f01546001600160a01b03165b8a60018151811061202d5761202d6139aa565b60200260200101906001600160a01b031690816001600160a01b03168152505089600181518110612060576120606139aa565b60200260200101516001600160a01b03168a600081518110612084576120846139aa565b60200260200101516001600160a01b031611156121825760008a6000815181106120b0576120b06139aa565b602002602001015190508a6001815181106120cd576120cd6139aa565b60200260200101518b6000815181106120e8576120e86139aa565b60200260200101906001600160a01b031690816001600160a01b031681525050808b60018151811061211c5761211c6139aa565b60200260200101906001600160a01b031690816001600160a01b031681525050818a600081518110612150576121506139aa565b602002602001018181525050828a600181518110612170576121706139aa565b602002602001018181525050506121c3565b8189600081518110612196576121966139aa565b60200260200101818152505080896001815181106121b6576121b66139aa565b6020026020010181815250505b6121d48f8b8b8b8b8a8a8d8b613330565b505050505050505050505050505050565b6019830154604051632acbceb560e21b81526001600160a01b038481166004830152600092839291169063ab2f3ad490602401602060405180830381865afa158015612235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122599190613a7a565b905060008560190160009054906101000a90046001600160a01b03166001600160a01b031663dc8f5fac6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d69190613a7a565b905060006122e5876000612ac4565b905060006122f38888612be5565b90506123146123028388613a37565b61230c8386613a37565b8691906113e0565b98975050505050505050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123859190613b87565b601685015460405163b3596f0760e01b81526001600160a01b03868116600483015260ff9390931693506000929091169063b3596f0790602401602060405180830381865afa1580156123dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124009190613a7a565b6016860154600f87015460405163b3596f0760e01b81526001600160a01b03918216600482015292935060009291169063b3596f0790602401602060405180830381865afa158015612456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247a9190613a7a565b9050611a0168327cb2734119d3b7a9601e1b6124976006866139d6565b6124a290600a613c8e565b6124ac9084613a37565b8491906113e0565b601d840154601085015460009182916001600160a01b039182169183918882169116146124e9576124e488613427565b6124f2565b6124f2886134cb565b6040805160a08101825282815230602082015242818301526060810189905260808101889052905163c04b8d5960e01b8152889550919250906001600160a01b0384169063c04b8d599061254a908490600401613d39565b6020604051808303816000875af1158015612569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258d9190613a7a565b600f8a0154604080518a8152602081018490529297506001600160a01b0391821692918b16917f30b60ee4dc75c0fb04420331b13e9ad7f8ff8fc51eac9c97d36fb20ccbe09d6691015b60405180910390a350505094509492505050565b601283015460405163617ba03760e01b81526001600160a01b03848116600483015260248201849052306044830152600060648301529091169063617ba037906084015b600060405180830381600087803b15801561264957600080fd5b505af115801561265d573d6000803e3d6000fd5b50505050505050565b60008082841181816126815761267c86866139d6565b61268b565b61268b85876139d6565b60118901549091506000906001600160a01b038981169116146126c257600c890154600160801b90046001600160801b03166126d1565b600c8901546001600160801b03165b6001600160801b0316905060006126f868327cb2734119d3b7a9601e1b6124ac8c8c612320565b90508083111561272b57836127165761271181886139d6565b612720565b6127208188613a93565b95506001945061272f565b8795505b5050505094509492505050565b601282015460405163c44b11f760e01b81526001600160a01b038381166004830152600092839291169063c44b11f790602401602060405180830381865afa15801561278c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b09190613d4c565b5160101c61ffff16949350505050565b60006127cf8260030154612d3c565b600283015460138401546040516370a0823160e01b8152306004820152612844916001600160a01b0316906370a0823190602401602060405180830381865afa158015612820573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b779190613a7a565b61284e9190613b2b565b61061e9190613b2b565b600080600061287184858860040154610cbd91906139d6565b60198701546011880154604051632acbceb560e21b81526001600160a01b03918216600482015292935060009291169063ab2f3ad490602401602060405180830381865afa1580156128c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128eb9190613a7a565b60198801546010890154604051632acbceb560e21b81526001600160a01b03918216600482015292935060009291169063ab2f3ad490602401602060405180830381865afa158015612941573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129659190613a7a565b6011890154909150600090612984908a906001600160a01b0316612320565b60108a01549091506000906129a3908b906001600160a01b0316612320565b90506129d36129be68327cb2734119d3b7a9601e1b86613a37565b836129c98688613a93565b610cbd9190613a37565b96506129f96129ee68327cb2734119d3b7a9601e1b85613a37565b826129c98688613a93565b95505050505050935093915050565b6000612a23612a1783856139d6565b84610bd5876000611610565b90506000612a35611beb866000611860565b90508460030154811115612a80576000856003015482612a5591906139d6565b9050612a618682612fb7565b866003016000828254612a749190613a93565b90915550610775915050565b8460030154811015610775576000818660030154612a9e91906139d6565b905080866003016000828254612ab491906139d6565b9091555061160890508682613177565b601b82015460405163019c8a3b60e11b8152821515600482015260009182916001600160a01b0390911690630339147690602401602060405180830381865afa158015612b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b399190613a7a565b9050600084600e0160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb69190613a7a565b9050612bdc68327cb2734119d3b7a9601e1b6124ac8369d3c21bcecceda1000000613a37565b95945050505050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4a9190613b87565b601685015460405163b3596f0760e01b81526001600160a01b03868116600483015260ff9390931693506000929091169063b3596f0790602401602060405180830381865afa158015612ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc59190613a7a565b9050612bdc68327cb2734119d3b7a9601e1b612ce2846002613a93565b611c6890600a613c8e565b601283015460405163a415bcad60e01b81526001600160a01b0384811660048301526024820184905260026044830152600060648301523060848301529091169063a415bcad9060a40161262f565b6000600160ff1b8210612d805760405162461bcd60e51b81526020600482015260086024820152674f766572666c6f7760c01b604482015260640160405180910390fd5b5090565b601d840154601085015460009182916001600160a01b03918216918391888216911614612db957612db488613427565b612dc2565b612dc2886134cb565b6040805160a081018252828152306020820152428183015260608101899052608081018890529051631e51809360e31b8152889550919250906001600160a01b0384169063f28c049890612e1a908490600401613d39565b6020604051808303816000875af1158015612e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5d9190613a7a565b600f8a015460408051838152602081018890529297506001600160a01b038b8116939216917f30b60ee4dc75c0fb04420331b13e9ad7f8ff8fc51eac9c97d36fb20ccbe09d6691016125d7565b601283015460405163573ade8160e01b81526001600160a01b03848116600483015260248201849052600260448301523060648301529091169063573ade81906084016020604051808303816000875af1158015612f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f309190613a7a565b50505050565b6012840154604051631a4ca37b60e21b81526001600160a01b038581166004830152602482018590528381166044830152909116906369328dec906064016020604051808303816000875af1158015612f93573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107759190613a7a565b600b8201546000906001600160801b0316821015612fd75750600061061e565b600f8301546019840154604051637092736960e11b81526001600160a01b039283166004820181905292600092169063e124e6d290602401602060405180830381865afa15801561302c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130509190613a7a565b600a86015490915060009061306f906116da9061ffff166127106139d6565b9050600061309668327cb2734119d3b7a9601e1b61308e896000611860565b8891906113e0565b601c8801546040516303cea95560e21b81526001600160a01b0387811660048301526024820184905260448201869052306064830152929350911690630f3aa554906084016020604051808303816000875af11580156130fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311e9190613a7a565b604080518381526020810183905260018183015290519196507ff4024340444cb343545bdc17f3914765a58115d058de06a9b6fa4c7091188e7d919081900360600190a161316d8785876125eb565b5050505092915050565b600f8201546131929083906001600160a01b03168330612f36565b6019820154600f8301546040516340d3096b60e11b81526001600160a01b03918216600482015260009291909116906381a612d690602401602060405180830381865afa1580156131e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320b9190613a7a565b600a84015490915060009061325b9061322a9061ffff166127106139d6565b6132349084613a37565b6132439064e8d4a51000613a37565b6119f961271068327cb2734119d3b7a9601e1b613a37565b6020850154600f860154604051634ce3696f60e11b81526001600160a01b03918216600482015260248101879052604481018490529293506000929116906399c6d2de906064016020604051808303816000875af11580156132c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e59190613a7a565b604080518281526020810187905260008183015290519192507ff4024340444cb343545bdc17f3914765a58115d058de06a9b6fa4c7091188e7d919081900360600190a15050505050565b8651885114613352576040516307e11acb60e51b815260040160405180910390fd5b60088901805460ff19166001179055601e8901546040805160208101899052908101879052606081018690526080810185905283151560a082015282151560c08201526001600160a01b0390911690635c38449e9030908b908b9060e0016040516020818303038152906040526040518563ffffffff1660e01b81526004016133de9493929190613d8e565b600060405180830381600087803b1580156133f857600080fd5b505af115801561340c573d6000803e3d6000fd5b5050506008909901805460ff19169055505050505050505050565b601181015460088201546010830154600f840154604051606094851b6bffffffffffffffffffffffff1990811660208301526b01000000000000000000000090940460e81b7fffffff000000000000000000000000000000000000000000000000000000000016603482015291841b83166037830152607d60ea1b604b830152831b909116604e8201526062015b6040516020818303038152906040529050919050565b6010810154600f8201546040516bffffffffffffffffffffffff19606093841b81166020830152607d60ea1b603483015291831b9091166037820152604b016134b5565b6001600160a01b038116811461352457600080fd5b50565b6000806000806080858703121561353d57600080fd5b84359350602085013561354f8161350f565b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156135a3576135a3613564565b604052919050565b600067ffffffffffffffff8211156135c5576135c5613564565b5060051b60200190565b600082601f8301126135e057600080fd5b813560206135f56135f0836135ab565b61357a565b82815260059290921b8401810191818101908684111561361457600080fd5b8286015b8481101561362f5780358352918301918301613618565b509695505050505050565b600082601f83011261364b57600080fd5b813567ffffffffffffffff81111561366557613665613564565b613678601f8201601f191660200161357a565b81815284602083860101111561368d57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156136c257600080fd5b8535945060208087013567ffffffffffffffff808211156136e257600080fd5b818901915089601f8301126136f657600080fd5b81356137046135f0826135ab565b81815260059190911b8301840190848101908c83111561372357600080fd5b938501935b8285101561374a57843561373b8161350f565b82529385019390850190613728565b98505050604089013592508083111561376257600080fd5b61376e8a848b016135cf565b9550606089013592508083111561378457600080fd5b6137908a848b016135cf565b945060808901359250808311156137a657600080fd5b50506137b48882890161363a565b9150509295509295909350565b801515811461352457600080fd5b600080604083850312156137e257600080fd5b8235915060208301356137f4816137c1565b809150509250929050565b6000806040838503121561381257600080fd5b50508035926020909101359150565b60006020828403121561383357600080fd5b5035919050565b60008060006060848603121561384f57600080fd5b505081359360208301359350604090920135919050565b600080600080600060a0868803121561387e57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000806000606084860312156138b657600080fd5b8335925060208401356138c88161350f565b929592945050506040919091013590565b600080600080600060a086880312156138f157600080fd5b853594506020860135935060408601359250606086013591506080860135613918816137c1565b809150509295509295909350565b6000806040838503121561393957600080fd5b8235915060208301356137f48161350f565b60008060008060008060c0878903121561396457600080fd5b86519550602087015194506040870151935060608701519250608087015161398b816137c1565b60a088015190925061399c816137c1565b809150509295509295509295565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156139e8576139e86139c0565b500390565b60008060008060008060c08789031215613a0657600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000816000190483118215151615613a5157613a516139c0565b500290565b600060208284031215613a6857600080fd5b8151613a738161350f565b9392505050565b600060208284031215613a8c57600080fd5b5051919050565b60008219821115613aa657613aa66139c0565b500190565b600082613ac857634e487b7160e01b600052601260045260246000fd5b500490565b600080821280156001600160ff1b0384900385131615613aef57613aef6139c0565b600160ff1b8390038412811615613b0857613b086139c0565b50500190565b600060208284031215613b2057600080fd5b8151613a73816137c1565b60008083128015600160ff1b850184121615613b4957613b496139c0565b6001600160ff1b0384018313811615613b6457613b646139c0565b50500390565b6000600160ff1b821415613b8057613b806139c0565b5060000390565b600060208284031215613b9957600080fd5b815160ff81168114613a7357600080fd5b600181815b80851115613be5578160001904821115613bcb57613bcb6139c0565b80851615613bd857918102915b93841c9390800290613baf565b509250929050565b600082613bfc5750600161061e565b81613c095750600061061e565b8160018114613c1f5760028114613c2957613c45565b600191505061061e565b60ff841115613c3a57613c3a6139c0565b50506001821b61061e565b5060208310610133831016604e8410600b8410161715613c68575081810a61061e565b613c728383613baa565b8060001904821115613c8657613c866139c0565b029392505050565b600061061b8383613bed565b6000815180845260005b81811015613cc057602081850181015186830182015201613ca4565b81811115613cd2576000602083870101525b50601f01601f19169290920160200192915050565b6000815160a08452613cfc60a0850182613c9a565b90506001600160a01b0360208401511660208501526040830151604085015260608301516060850152608083015160808501528091505092915050565b60208152600061061b6020830184613ce7565b600060208284031215613d5e57600080fd5b6040516020810181811067ffffffffffffffff82111715613d8157613d81613564565b6040529151825250919050565b6000608082016001600160a01b038088168452602060808186015282885180855260a087019150828a01945060005b81811015613ddb578551851683529483019491830191600101613dbd565b5050858103604087015287518082529082019350915080870160005b83811015613e1357815185529382019390820190600101613df7565b505050508281036060840152613e298185613c9a565b97965050505050505056fea164736f6c634300080a000a",
  "devdoc": {
    "author": "RageTrade",
    "details": "junior vault delegates calls to this library for logic",
    "kind": "dev",
    "methods": {
      "flashloanAmounts(DnGmxJuniorVaultManager.State storage,address,uint256,uint256)": {
        "params": {
          "currentBorrow": "curret token borrow from AAVE",
          "optimalBorrow": "optimal token borrow to completely hedge sGlp",
          "state": "set of all state variables of vault",
          "token": "address of token"
        },
        "returns": {
          "repayDebt": "true then reduce token hedge, false then increase token hedge",
          "tokenAmount": "amount of tokens to be swapped",
          "usdcAmount": "minimum/maximum amount of usdc basis swap direction"
        }
      },
      "getBorrowValue(DnGmxJuniorVaultManager.State storage,uint256,uint256)": {
        "params": {
          "btcAmount": "amount of btc",
          "ethAmount": "amount of eth",
          "state": "set of all state variables of vault"
        },
        "returns": {
          "borrowValue": "value of the given token amounts"
        }
      },
      "getCurrentBorrows(DnGmxJuniorVaultManager.State storage)": {
        "params": {
          "state": "set of all state variables of vault"
        },
        "returns": {
          "currentBtcBorrow": "amount of btc currently borrowed from AAVE",
          "currentEthBorrow": "amount of eth currently borrowed from AAVE"
        }
      },
      "getGlpPrice(DnGmxJuniorVaultManager.State storage,bool)": {
        "params": {
          "maximize": "true to get maximum price and flase to get minimum",
          "state": "set of all state variables of vault"
        },
        "returns": {
          "_0": "glp price in usd"
        }
      },
      "getGlpPriceInUsdc(DnGmxJuniorVaultManager.State storage,bool)": {
        "params": {
          "maximize": "true to get maximum price and flase to get minimum",
          "state": "set of all state variables of vault"
        },
        "returns": {
          "_0": "glp price in usd"
        }
      },
      "getLiquidationThreshold(DnGmxJuniorVaultManager.State storage,address)": {
        "params": {
          "asset": "address of asset to check liquidation threshold for",
          "state": "set of all state variables of vault"
        },
        "returns": {
          "_0": "liquidation threshold"
        }
      },
      "getOptimalBorrows(DnGmxJuniorVaultManager.State storage,uint256)": {
        "params": {
          "glpDeposited": "amount of glp for which optimal borrow needs to be calculated",
          "state": "set of all state variables of vault"
        },
        "returns": {
          "optimalBtcBorrow": "optimal amount of btc borrowed from AAVE",
          "optimalEthBorrow": "optimal amount of eth borrowed from AAVE"
        }
      },
      "getOptimalCappedBorrows(DnGmxJuniorVaultManager.State storage,uint256,uint256)": {
        "params": {
          "availableBorrowAmount": "available borrow amount from senior vault",
          "state": "set of all state variables of vault",
          "usdcLiquidationThreshold": "the usdc liquidation threshold on AAVE"
        },
        "returns": {
          "optimalBtcBorrow": "optimal amount of btc borrowed from AAVE",
          "optimalEthBorrow": "optimal amount of eth borrowed from AAVE"
        }
      },
      "getTokenPrice(DnGmxJuniorVaultManager.State storage,IERC20Metadata)": {
        "params": {
          "state": "set of all state variables of vault",
          "token": "the token for which price is expected"
        },
        "returns": {
          "_0": "token price in usd"
        }
      },
      "getTokenPriceInUsdc(DnGmxJuniorVaultManager.State storage,IERC20Metadata)": {
        "params": {
          "state": "set of all state variables of vault",
          "token": "the token for which price is expected"
        },
        "returns": {
          "scaledPrice": "token price in usdc"
        }
      },
      "getTokenReservesInGlp(DnGmxJuniorVaultManager.State storage,address,uint256)": {
        "params": {
          "glpDeposited": "amount of glp for which underlying token amount is being calculated",
          "state": "set of all state variables of vault",
          "token": "address of token"
        },
        "returns": {
          "_0": "amount of tokens of the supplied address underlying the given amount of glp"
        }
      },
      "isValidRebalanceDeviation(DnGmxJuniorVaultManager.State storage)": {
        "params": {
          "state": "set of all state variables of vault"
        },
        "returns": {
          "_0": "true if the rebalance is valid basis diffeence (current and optimal) threshold"
        }
      },
      "isValidRebalanceHF(DnGmxJuniorVaultManager.State storage)": {
        "params": {
          "state": "set of all state variables of vault"
        },
        "returns": {
          "_0": "true if the rebalance is valid basis AAVE health factor"
        }
      },
      "isValidRebalanceTime(DnGmxJuniorVaultManager.State storage)": {
        "params": {
          "state": "set of all state variables of vault"
        },
        "returns": {
          "_0": "true if the rebalance is valid basis time threshold"
        }
      },
      "isWithinAllowedDelta(DnGmxJuniorVaultManager.State storage,uint256,uint256)": {
        "params": {
          "currentBorrow": "current borrow amount from AAVE",
          "optimalBorrow": "optimal borrow amount basis glp deposits",
          "state": "set of all state variables of vault"
        },
        "returns": {
          "_0": "true if the difference is below allowed threshold else false"
        }
      },
      "rebalanceBorrow(DnGmxJuniorVaultManager.State storage,uint256,uint256,uint256,uint256)": {
        "params": {
          "currentBtcBorrow": "current btc amount borrowed from AAVE",
          "currentEthBorrow": "current eth amount borrowed from AAVE",
          "optimalBtcBorrow": "optimal btc amount to hedge sGLP btc underlying completely",
          "optimalEthBorrow": "optimal eth amount to hedge sGLP btc underlying completely",
          "state": "set of all state variables of vault"
        }
      },
      "rebalanceHedge(DnGmxJuniorVaultManager.State storage,uint256,uint256,uint256,bool)": {
        "details": "to be called after settle profits only (since vaultMarketValue if after settlement of profits)",
        "params": {
          "currentBtcBorrow": "The amount of USDC collateral token deposited to LB Protocol",
          "currentEthBorrow": "The market value of ETH/BTC part in sGLP",
          "glpDeposited": "amount of glp deposited into the vault",
          "isPartialAllowed": "true if partial hedge is allowed",
          "state": "set of all state variables of vault"
        },
        "returns": {
          "isPartialHedge": "true if partial hedge is executed"
        }
      },
      "rebalanceProfit(DnGmxJuniorVaultManager.State storage,uint256)": {
        "params": {
          "borrowValue": "value of the borrowed assests(ETH + BTC) from AAVE in USDC",
          "state": "set of all state variables of vault"
        }
      },
      "receiveFlashLoan(DnGmxJuniorVaultManager.State storage,IERC20[],uint256[],uint256[],bytes)": {
        "details": "only allows balancer vault to call thisonly runs when _hasFlashloaned is set to true (prevents someone else from initiating flashloan to vault)",
        "params": {
          "amounts": "amounts of token flashloans in same order",
          "feeAmounts": "amounts of fee/premium charged for flashloan",
          "tokens": "list of tokens flashloaned",
          "userData": "data passed to balancer for flashloan (includes token amounts, token usdc value and swap direction)"
        }
      },
      "totalAssets(DnGmxJuniorVaultManager.State storage)": {
        "params": {
          "state": "set of all state variables of vault"
        },
        "returns": {
          "_0": "total asset amount (glp + usdc (in glp terms))"
        }
      },
      "totalAssets(DnGmxJuniorVaultManager.State storage,bool)": {
        "params": {
          "maximize": "true for maximizing the total assets value and false to minimize",
          "state": "set of all state variables of vault"
        },
        "returns": {
          "_0": "total asset amount (glp + usdc (in glp terms))"
        }
      }
    },
    "title": "Helper library for junior vault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "flashloanAmounts(DnGmxJuniorVaultManager.State storage,address,uint256,uint256)": {
        "notice": "returns the amount of flashloan for a given tokenif token amount needs to be increased then usdcAmount is minimum amountif token amount needs to be decreased then usdcAmount is maximum amount"
      },
      "getBorrowValue(DnGmxJuniorVaultManager.State storage,uint256,uint256)": {
        "notice": "returns the borrow value for a given amount of tokens"
      },
      "getCurrentBorrows(DnGmxJuniorVaultManager.State storage)": {
        "notice": "returns the amount of current borrows of btc and eth token from AAVE"
      },
      "getGlpPrice(DnGmxJuniorVaultManager.State storage,bool)": {
        "notice": "returns the price of glp token"
      },
      "getGlpPriceInUsdc(DnGmxJuniorVaultManager.State storage,bool)": {
        "notice": "returns the price of glp token in usdc"
      },
      "getLiquidationThreshold(DnGmxJuniorVaultManager.State storage,address)": {
        "notice": "returns liquidation threshold of the selected asset's AAVE pool"
      },
      "getOptimalBorrows(DnGmxJuniorVaultManager.State storage,uint256)": {
        "notice": "returns optimal borrows for BTC and ETH respectively basis glpDeposited amount"
      },
      "getOptimalCappedBorrows(DnGmxJuniorVaultManager.State storage,uint256,uint256)": {
        "notice": "returns optimal borrows for BTC and ETH respectively basis available borrow amount"
      },
      "getTokenPrice(DnGmxJuniorVaultManager.State storage,IERC20Metadata)": {
        "notice": "returns the price of given token basis AAVE oracle"
      },
      "getTokenPriceInUsdc(DnGmxJuniorVaultManager.State storage,IERC20Metadata)": {
        "notice": "returns the price of given token in USDC using AAVE oracle"
      },
      "getTokenReservesInGlp(DnGmxJuniorVaultManager.State storage,address,uint256)": {
        "notice": "returns token amount underlying glp amount deposited"
      },
      "harvestFees(DnGmxJuniorVaultManager.State storage)": {
        "notice": "stakes the rewards from the staked Glp and claims WETH to buy glpalso update protocolEsGmx fees which can be vested and claimeddivides the fees between senior and junior tranches based on senior tranche utilfor junior tranche weth is deposited to batching manager which handles conversion to sGLPfor senior tranche weth is converted into usdc and deposited on AAVE which increases the borrowed amount"
      },
      "isValidRebalanceDeviation(DnGmxJuniorVaultManager.State storage)": {
        "notice": "returns if the rebalance is valid basis the difference between the current and optimal hedges of tokens(ETH/BTC)"
      },
      "isValidRebalanceHF(DnGmxJuniorVaultManager.State storage)": {
        "notice": "returns if the rebalance is valid basis health factor on AAVEretunrs true if current health factor < threshold"
      },
      "isValidRebalanceTime(DnGmxJuniorVaultManager.State storage)": {
        "notice": "returns if the rebalance is valid basis last rebalance time and rebalanceTimeThreshold"
      },
      "isWithinAllowedDelta(DnGmxJuniorVaultManager.State storage,uint256,uint256)": {
        "notice": "returns token amount underlying glp amount deposited"
      },
      "rebalanceBorrow(DnGmxJuniorVaultManager.State storage,uint256,uint256,uint256,uint256)": {
        "notice": "rebalances the assets borrowed from AAVE to hedge ETH and BTC underlying the assets"
      },
      "rebalanceHedge(DnGmxJuniorVaultManager.State storage,uint256,uint256,uint256,bool)": {
        "notice": "rebalances btc and eth hedges according to underlying glp token weightsupdates the borrowed amount from senior tranche basis the target health factorif the amount of swap for a token > theshold then a partial hedge is taken and remaining is taken separatelyif the amount of swap for a token < threshold complete hedge is takenin case there is not enough money in senior tranche then relevant amount of glp is converted into usdc"
      },
      "rebalanceProfit(DnGmxJuniorVaultManager.State storage,uint256)": {
        "notice": "rebalances pnl on AAVE againts the sGLP assets"
      },
      "receiveFlashLoan(DnGmxJuniorVaultManager.State storage,IERC20[],uint256[],uint256[],bytes)": {
        "notice": "flashloan receiver for balance vaultreceives flashloaned tokens(WETH or WBTC or USDC) from balancer, swaps on uniswap and borrows/repays on AAVE"
      },
      "totalAssets(DnGmxJuniorVaultManager.State storage)": {
        "notice": "returns the total assets deposited to the vault (in glp amount)"
      },
      "totalAssets(DnGmxJuniorVaultManager.State storage,bool)": {
        "notice": "returns the total assets deposited to the vault (in glp amount)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}