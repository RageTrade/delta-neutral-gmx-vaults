{
  "address": "0x06c89eF14ED8D69044b3B04619a683828754F0d8",
  "abi": [
    {
      "inputs": [],
      "name": "ArraysLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositCapExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashloanNotInitiated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRebalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotBalancerVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDnGmxSeniorVault",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorisedKeeperAddress",
          "type": "address"
        }
      ],
      "name": "OnlyKeeperAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AllowancesGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_batchingManager",
          "type": "address"
        }
      ],
      "name": "BatchingManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newDepositCap",
          "type": "uint256"
        }
      ],
      "name": "DepositCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_dnGmxSeniorVault",
          "type": "address"
        }
      ],
      "name": "DnGmxSeniorVaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "FeeRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newKeeper",
          "type": "address"
        }
      ],
      "name": "KeeperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "rebalanceTimeThreshold",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "rebalanceDeltaThreshold",
          "type": "uint16"
        }
      ],
      "name": "RebalanceParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Rebalanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalEthAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "juniorVaultShare",
          "type": "uint256"
        }
      ],
      "name": "RewardsHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawFeeBps",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "usdcRedeemSlippage",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint240",
          "name": "usdcConversionThreshold",
          "type": "uint240"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seniorVaultWethConversionThreshold",
          "type": "uint256"
        }
      ],
      "name": "YieldParamsUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        }
      ],
      "name": "getMarketValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marketValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceX128",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdcBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultMarketValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "vaultMarketValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "grantAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tricryptoPool",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Metadata",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Metadata",
              "name": "wbtc",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Metadata",
              "name": "sGlp",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Metadata",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Metadata",
              "name": "usdt",
              "type": "address"
            }
          ],
          "internalType": "struct DnGmxJuniorVaultStorage.Tokens",
          "name": "_tokens",
          "type": "tuple"
        },
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "_poolAddressesProvider",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isValidRebalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "receiveFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_batchingManager",
          "type": "address"
        }
      ],
      "name": "setBatchingManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newDepositCap",
          "type": "uint256"
        }
      ],
      "name": "setDepositCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dnGmxSeniorVault",
          "type": "address"
        }
      ],
      "name": "setDnGmxSeniorVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IBalancerVault",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "contract ISwapRouter",
              "name": "swapRouter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "targetHealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "contract IRewardsController",
              "name": "aaveRewardsController",
              "type": "address"
            }
          ],
          "internalType": "struct DnGmxJuniorVaultStorage.HedgeStrategyParams",
          "name": "_hedgeParams",
          "type": "tuple"
        }
      ],
      "name": "setHedgeParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newKeeper",
          "type": "address"
        }
      ],
      "name": "setKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "rebalanceTimeThreshold",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "rebalanceDeltaThreshold",
              "type": "uint16"
            }
          ],
          "internalType": "struct DnGmxJuniorVaultStorage.RebalanceStrategyParams",
          "name": "_rsParams",
          "type": "tuple"
        }
      ],
      "name": "setRebalanceParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "usdcRedeemSlippage",
              "type": "uint16"
            },
            {
              "internalType": "uint240",
              "name": "usdcConversionThreshold",
              "type": "uint240"
            },
            {
              "internalType": "uint256",
              "name": "seniorVaultWethConversionThreshold",
              "type": "uint256"
            }
          ],
          "internalType": "struct DnGmxJuniorVaultStorage.YieldStrategyParams",
          "name": "_ysParams",
          "type": "tuple"
        }
      ],
      "name": "setThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawFeeBps",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b0d51a1038d0ed3fe5635315f7ac58de588071372158b132ef5c595e4d9400d",
  "receipt": {
    "to": null,
    "from": "0x4ec0dda0430A54b4796109913545F715B2d89F34",
    "contractAddress": "0x06c89eF14ED8D69044b3B04619a683828754F0d8",
    "transactionIndex": 1,
    "gasUsed": "8084689",
    "logsBloom": "0x
    "blockHash": "0x6d3a22ccd117cd2917a2a11cbceb138dd137a7183d67cbd1701c10dc761eb940",
    "transactionHash": "0x6b0d51a1038d0ed3fe5635315f7ac58de588071372158b132ef5c595e4d9400d",
    "logs": [],
    "blockNumber": 621956,
    "cumulativeGasUsed": "8084689",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e3ead9d9b47cf5bb595297a5af6dff39",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ArraysLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositCapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashloanNotInitiated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRebalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBalancerVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDnGmxSeniorVault\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorisedKeeperAddress\",\"type\":\"address\"}],\"name\":\"OnlyKeeperAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowancesGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_batchingManager\",\"type\":\"address\"}],\"name\":\"BatchingManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDepositCap\",\"type\":\"uint256\"}],\"name\":\"DepositCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_dnGmxSeniorVault\",\"type\":\"address\"}],\"name\":\"DnGmxSeniorVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newKeeper\",\"type\":\"address\"}],\"name\":\"KeeperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"rebalanceTimeThreshold\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"rebalanceDeltaThreshold\",\"type\":\"uint16\"}],\"name\":\"RebalanceParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Rebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"juniorVaultShare\",\"type\":\"uint256\"}],\"name\":\"RewardsHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawFeeBps\",\"type\":\"uint256\"}],\"name\":\"WithdrawFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"usdcRedeemSlippage\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint240\",\"name\":\"usdcConversionThreshold\",\"type\":\"uint240\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seniorVaultWethConversionThreshold\",\"type\":\"uint256\"}],\"name\":\"YieldParamsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"getMarketValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceX128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdcBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultMarketValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"vaultMarketValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grantAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tricryptoPool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"wbtc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"sGlp\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"usdt\",\"type\":\"address\"}],\"internalType\":\"struct DnGmxJuniorVaultStorage.Tokens\",\"name\":\"_tokens\",\"type\":\"tuple\"},{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"_poolAddressesProvider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isValidRebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_batchingManager\",\"type\":\"address\"}],\"name\":\"setBatchingManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDepositCap\",\"type\":\"uint256\"}],\"name\":\"setDepositCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dnGmxSeniorVault\",\"type\":\"address\"}],\"name\":\"setDnGmxSeniorVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IBalancerVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewardsController\",\"name\":\"aaveRewardsController\",\"type\":\"address\"}],\"internalType\":\"struct DnGmxJuniorVaultStorage.HedgeStrategyParams\",\"name\":\"_hedgeParams\",\"type\":\"tuple\"}],\"name\":\"setHedgeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newKeeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"rebalanceTimeThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"rebalanceDeltaThreshold\",\"type\":\"uint16\"}],\"internalType\":\"struct DnGmxJuniorVaultStorage.RebalanceStrategyParams\",\"name\":\"_rsParams\",\"type\":\"tuple\"}],\"name\":\"setRebalanceParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"usdcRedeemSlippage\",\"type\":\"uint16\"},{\"internalType\":\"uint240\",\"name\":\"usdcConversionThreshold\",\"type\":\"uint240\"},{\"internalType\":\"uint256\",\"name\":\"seniorVaultWethConversionThreshold\",\"type\":\"uint256\"}],\"internalType\":\"struct DnGmxJuniorVaultStorage.YieldStrategyParams\",\"name\":\"_ysParams\",\"type\":\"tuple\"}],\"name\":\"setThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeBps\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"harvestFees()\":{\"notice\":\"stakes the rewards from the staked Glp and claims WETH to buy glp\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/DnGmxJuniorVault.sol\":\"DnGmxJuniorVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":340},\"remappings\":[]},\"sources\":{\"@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6fdde76d62d0772bbf8c579e7990013034509a99abbb661d8b5a8e8c42f7afb5\",\"license\":\"agpl-3.0\"},\"@aave/core-v3/contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableAToken} from './IInitializableAToken.sol';\\n\\n/**\\n * @title IAToken\\n * @author Aave\\n * @notice Defines the basic interface for an AToken.\\n **/\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @notice Mints `amount` aTokens to `user`\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted aTokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address caller,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @dev In some instances, the mint event could be emitted from a burn transaction\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param from The address from which the aTokens will be burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  function burn(\\n    address from,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @notice Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @notice Transfers the underlying asset to `target`.\\n   * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external;\\n\\n  /**\\n   * @notice Handles the underlying received by the aToken after the transfer has been completed.\\n   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\\n   * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\\n   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\n   * @param user The user executing the repayment\\n   * @param amount The amount getting repaid\\n   **/\\n  function handleRepayment(address user, uint256 amount) external;\\n\\n  /**\\n   * @notice Allow passing a signed message to approve spending\\n   * @dev implements the permit function as for\\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner The owner of the funds\\n   * @param spender The spender\\n   * @param value The amount\\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n   * @param v Signature param\\n   * @param s Signature param\\n   * @param r Signature param\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @return The address of the underlying asset\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.\\n   * @return Address of the Aave treasury\\n   **/\\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Get the domain separator for the token\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n   * @return The domain separator of the token at current chain\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the nonce for owner.\\n   * @param owner The address of the owner\\n   * @return The nonce of the owner\\n   **/\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc4760b005b3b5e12eb91c5b7486976a36d9f568ef9a409c8534ee8c12e256ec8\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAaveIncentivesController\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\n **/\\ninterface IAaveIncentivesController {\\n  /**\\n   * @dev Emitted during `handleAction`, `claimRewards` and `claimRewardsOnBehalf`\\n   * @param user The user that accrued rewards\\n   * @param amount The amount of accrued rewards\\n   */\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted during `claimRewards` and `claimRewardsOnBehalf`\\n   * @param user The address that accrued rewards\\n   *\\u00a0@param to The address that will be receiving the rewards\\n   * @param claimer The address that performed the claim\\n   * @param amount The amount of rewards\\n   */\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted during `setClaimer`\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @notice Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index\\n   * @return The emission per second\\n   * @return The last updated timestamp\\n   **/\\n  function getAssetData(address asset)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * LEGACY **************************\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function assets(address asset)\\n    external\\n    view\\n    returns (\\n      uint128,\\n      uint128,\\n      uint256\\n    );\\n\\n  /**\\n   * @notice Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @notice Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @notice Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n  /**\\n   * @notice Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the pool\\n   * @param totalSupply The total supply of the asset in the pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @notice Returns the total of rewards of a user, already accrued + not yet accrued\\n   * @param assets The assets to accumulate rewards for\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Claims reward for a user, on the assets of the pool, accumulating the pending rewards\\n   * @param assets The assets to accumulate rewards for\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Claims reward for a user on its behalf, on the assets of the pool, accumulating the pending rewards.\\n   * @dev The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The assets to accumulate rewards for\\n   * @param amount The amount of rewards to claim\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the unclaimed rewards of the user\\n   * @param user The address of the user\\n   * @return The unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the user index for a specific asset\\n   * @param user The address of the user\\n   * @param asset The asset to incentivize\\n   * @return The user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice for backward compatibility with previous implementation of the Incentives controller\\n   * @return The address of the reward token\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @notice for backward compatibility with previous implementation of the Incentives controller\\n   * @return The precision used in the incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n\\n  /**\\n   * @dev Gets the distribution end timestamp of the emissions\\n   */\\n  function DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x15a3f9887545112721e45312b3453115729d6c9870b10cba61da627a35c189bd\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IInitializableAToken\\n * @author Aave\\n * @notice Interface for the initialize function on AToken\\n **/\\ninterface IInitializableAToken {\\n  /**\\n   * @dev Emitted when an aToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param treasury The address of the treasury\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param aTokenDecimals The decimals of the underlying\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    address incentivesController,\\n    uint8 aTokenDecimals,\\n    string aTokenName,\\n    string aTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @notice Initializes the aToken\\n   * @param pool The pool contract that is initializing this contract\\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  function initialize(\\n    IPool pool,\\n    address treasury,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 aTokenDecimals,\\n    string calldata aTokenName,\\n    string calldata aTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0x771ccf0ea983cb3b466d83e6f4db0cf268df791e87c2c8c2ec66d6088613b67c\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IInitializableDebtToken\\n * @author Aave\\n * @notice Interface for the initialize function common between debt tokens\\n **/\\ninterface IInitializableDebtToken {\\n  /**\\n   * @dev Emitted when a debt token is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param debtTokenDecimals The decimals of the debt token\\n   * @param debtTokenName The name of the debt token\\n   * @param debtTokenSymbol The symbol of the debt token\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address incentivesController,\\n    uint8 debtTokenDecimals,\\n    string debtTokenName,\\n    string debtTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @notice Initializes the debt token.\\n   * @param pool The pool contract that is initializing this contract\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n   * @param debtTokenName The name of the token\\n   * @param debtTokenSymbol The symbol of the token\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  function initialize(\\n    IPool pool,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 debtTokenDecimals,\\n    string memory debtTokenName,\\n    string memory debtTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0x78f14c84b714dcc8adba99fc86b5e0d23568a0ad57578b1601c1d0b5e2db4b9e\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   **/\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   **/\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   **/\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   **/\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   **/\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   **/\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   **/\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   **/\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   **/\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   **/\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   **/\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   **/\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\",\"keccak256\":\"0xad2946be653bb9395f906614a0c62f37f8a44f3963e62f63f18a409dfbea51f2\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   **/\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   **/\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   **/\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   **/\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   **/\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   **/\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   **/\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x2f70daa98416d61fd3128b1ee05f96852d84074689a2c2132a7fd587c5c9e3f0\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracle\\n * @author Aave\\n * @notice Defines the basic interface for a Price oracle.\\n **/\\ninterface IPriceOracle {\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   **/\\n  function getAssetPrice(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Set the price of the asset\\n   * @param asset The address of the asset\\n   * @param price The price of the asset\\n   **/\\n  function setAssetPrice(address asset, uint256 price) external;\\n}\\n\",\"keccak256\":\"0xa420be12e8e5402380204e0456189880e495892dd32fd9283df6d77c6fc25b23\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaledbalance token.\\n **/\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted scaled balance tokens\\n   * @param value The amount being minted (user entered amount + balance increase from interest)\\n   * @param balanceIncrease The increase in balance since the last action of the user\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  event Mint(\\n    address indexed caller,\\n    address indexed onBehalfOf,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted after scaled balance tokens are burned\\n   * @param from The address from which the scaled tokens will be burned\\n   * @param target The address that will receive the underlying, if any\\n   * @param value The amount being burned (user entered amount - balance increase from interest)\\n   * @param balanceIncrease The increase in balance since the last action of the user\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  event Burn(\\n    address indexed from,\\n    address indexed target,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @notice Returns the scaled balance of the user.\\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n   * at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns last index interest was accrued to the user's balance\\n   * @param user The address of the user\\n   * @return The last index interest was accrued to the user's balance, expressed in ray\\n   **/\\n  function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcfecd4a44d5cb97162e99d83120fdfc631e1dd7161cc0ec9338c5c076e796a3c\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableDebtToken} from './IInitializableDebtToken.sol';\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n  /**\\n   * @notice Mints debt token to the `onBehalfOf` address\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\n   * @param onBehalfOf The address receiving the debt tokens\\n   * @param amount The amount of debt being minted\\n   * @param index The variable debt index of the reserve\\n   * @return True if the previous balance of the user is 0, false otherwise\\n   * @return The scaled total debt of the reserve\\n   **/\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool, uint256);\\n\\n  /**\\n   * @notice Burns user variable debt\\n   * @dev In some instances, a burn transaction will emit a mint event\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param from The address from which the debt will be burned\\n   * @param amount The amount getting burned\\n   * @param index The variable debt index of the reserve\\n   * @return The scaled total debt of the reserve\\n   **/\\n  function burn(\\n    address from,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)\\n   * @return The address of the underlying asset\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd704126de135b8fa7cd1acc72e47e5ef1b1a7dcdd479875df52f28b8c8342f6a\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n  uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n  uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n  /// @dev bit 63 reserved\\n\\n  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\n  uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\n  uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\n  uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\n\\n  uint256 internal constant MAX_VALID_LTV = 65535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n  uint256 internal constant MAX_VALID_DECIMALS = 255;\\n  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\n  uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\n  uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\n  uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\n\\n  uint256 public constant DEBT_CEILING_DECIMALS = 2;\\n  uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n  /**\\n   * @notice Sets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @param ltv The new ltv\\n   **/\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n    require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\n\\n    self.data = (self.data & LTV_MASK) | ltv;\\n  }\\n\\n  /**\\n   * @notice Gets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @return The loan to value\\n   **/\\n  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return self.data & ~LTV_MASK;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @param threshold The new liquidation threshold\\n   **/\\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold)\\n    internal\\n    pure\\n  {\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.INVALID_LIQ_THRESHOLD);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n      (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation threshold\\n   **/\\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @param bonus The new liquidation bonus\\n   **/\\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus)\\n    internal\\n    pure\\n  {\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_BONUS_MASK) |\\n      (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation bonus\\n   **/\\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @param decimals The decimals\\n   **/\\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals)\\n    internal\\n    pure\\n  {\\n    require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\n\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @return The decimals of the asset\\n   **/\\n  function getDecimals(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @param active The active state\\n   **/\\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n    self.data =\\n      (self.data & ACTIVE_MASK) |\\n      (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @return The active state\\n   **/\\n  function getActive(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~ACTIVE_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @param frozen The frozen state\\n   **/\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n    self.data =\\n      (self.data & FROZEN_MASK) |\\n      (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @return The frozen state\\n   **/\\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~FROZEN_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @param paused The paused state\\n   **/\\n  function setPaused(DataTypes.ReserveConfigurationMap memory self, bool paused) internal pure {\\n    self.data =\\n      (self.data & PAUSED_MASK) |\\n      (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @return The paused state\\n   **/\\n  function getPaused(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~PAUSED_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the borrowable in isolation flag for the reserve.\\n   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\n   * amount will be accumulated in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @param borrowable True if the asset is borrowable\\n   **/\\n  function setBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self, bool borrowable)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\n      (uint256(borrowable ? 1 : 0) << BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowable in isolation flag for the reserve.\\n   * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\n   * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @return The borrowable in isolation flag\\n   **/\\n  function getBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @param siloed True if the asset is siloed\\n   **/\\n  function setSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self, bool siloed)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & SILOED_BORROWING_MASK) |\\n      (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @return The siloed borrowing flag\\n   **/\\n  function getSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~SILOED_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\n   **/\\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrowing state\\n   **/\\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables stable rate borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n   **/\\n  function setStableRateBorrowingEnabled(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool enabled\\n  ) internal pure {\\n    self.data =\\n      (self.data & STABLE_BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the stable rate borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The stable rate borrowing state\\n   **/\\n  function getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @param reserveFactor The reserve factor\\n   **/\\n  function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor)\\n    internal\\n    pure\\n  {\\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.INVALID_RESERVE_FACTOR);\\n\\n    self.data =\\n      (self.data & RESERVE_FACTOR_MASK) |\\n      (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @return The reserve factor\\n   **/\\n  function getReserveFactor(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @param borrowCap The borrow cap\\n   **/\\n  function setBorrowCap(DataTypes.ReserveConfigurationMap memory self, uint256 borrowCap)\\n    internal\\n    pure\\n  {\\n    require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\n\\n    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrow cap\\n   **/\\n  function getBorrowCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @param supplyCap The supply cap\\n   **/\\n  function setSupplyCap(DataTypes.ReserveConfigurationMap memory self, uint256 supplyCap)\\n    internal\\n    pure\\n  {\\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\n\\n    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The supply cap\\n   **/\\n  function getSupplyCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the debt ceiling in isolation mode for the asset\\n   * @param self The reserve configuration\\n   * @param ceiling The maximum debt ceiling for the asset\\n   **/\\n  function setDebtCeiling(DataTypes.ReserveConfigurationMap memory self, uint256 ceiling)\\n    internal\\n    pure\\n  {\\n    require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\n\\n    self.data = (self.data & DEBT_CEILING_MASK) | (ceiling << DEBT_CEILING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\n   * @param self The reserve configuration\\n   * @return The debt ceiling (0 = isolation mode disabled)\\n   **/\\n  function getDebtCeiling(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation protocol fee of the reserve\\n   * @param self The reserve configuration\\n   * @param liquidationProtocolFee The liquidation protocol fee\\n   **/\\n  function setLiquidationProtocolFee(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 liquidationProtocolFee\\n  ) internal pure {\\n    require(\\n      liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\n      Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\n    );\\n\\n    self.data =\\n      (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\n      (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the liquidation protocol fee\\n   * @param self The reserve configuration\\n   * @return The liquidation protocol fee\\n   **/\\n  function getLiquidationProtocolFee(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return\\n      (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >> LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @param unbackedMintCap The unbacked mint cap\\n   **/\\n  function setUnbackedMintCap(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 unbackedMintCap\\n  ) internal pure {\\n    require(unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP, Errors.INVALID_UNBACKED_MINT_CAP);\\n\\n    self.data =\\n      (self.data & UNBACKED_MINT_CAP_MASK) |\\n      (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The unbacked mint cap\\n   **/\\n  function getUnbackedMintCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~UNBACKED_MINT_CAP_MASK) >> UNBACKED_MINT_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the eMode asset category\\n   * @param self The reserve configuration\\n   * @param category The asset category when the user selects the eMode\\n   **/\\n  function setEModeCategory(DataTypes.ReserveConfigurationMap memory self, uint256 category)\\n    internal\\n    pure\\n  {\\n    require(category <= MAX_VALID_EMODE_CATEGORY, Errors.INVALID_EMODE_CATEGORY);\\n\\n    self.data = (self.data & EMODE_CATEGORY_MASK) | (category << EMODE_CATEGORY_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the eMode asset category\\n   * @param self The reserve configuration\\n   * @return The eMode category for the asset\\n   **/\\n  function getEModeCategory(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Gets the configuration flags of the reserve\\n   * @param self The reserve configuration\\n   * @return The state flag representing active\\n   * @return The state flag representing frozen\\n   * @return The state flag representing borrowing enabled\\n   * @return The state flag representing stableRateBorrowing enabled\\n   * @return The state flag representing paused\\n   **/\\n  function getFlags(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      bool,\\n      bool,\\n      bool,\\n      bool,\\n      bool\\n    )\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~ACTIVE_MASK) != 0,\\n      (dataLocal & ~FROZEN_MASK) != 0,\\n      (dataLocal & ~BORROWING_MASK) != 0,\\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\n      (dataLocal & ~PAUSED_MASK) != 0\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the configuration parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing ltv\\n   * @return The state param representing liquidation threshold\\n   * @return The state param representing liquidation bonus\\n   * @return The state param representing reserve decimals\\n   * @return The state param representing reserve factor\\n   * @return The state param representing eMode category\\n   **/\\n  function getParams(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      dataLocal & ~LTV_MASK,\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION,\\n      (dataLocal & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the caps parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing borrow cap\\n   * @return The state param representing supply cap.\\n   **/\\n  function getCaps(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256, uint256)\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\n      (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x24ac246ad26f88923762131f07657a54594ce7cb5342de3f47b0ed6ce908d42a\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\n  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\n  string public constant SAME_BLOCK_BORROW_REPAY = '48'; // 'Borrow and repay in same block is not allowed'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\n  string public constant ATOKEN_SUPPLY_NOT_ZERO = '54'; // 'AToken supply is not zero'\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\n  string public constant USER_IN_ISOLATION_MODE = '62'; // 'User is in isolation mode'\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\n}\\n\",\"keccak256\":\"0x3378cb9e8c58e121f10e9d2022c50984331621217281e11f1bb3dc79b3d77706\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0xf3acc235689aae1094d33bfdf90e60b0c3ae1f12c5f095b8cffb69bc6880765c\",\"license\":\"BUSL-1.1\"},\"@aave/periphery-v3/contracts/misc/interfaces/IEACAggregatorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\ninterface IEACAggregatorProxy {\\n  function decimals() external view returns (uint8);\\n\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\\n}\\n\",\"keccak256\":\"0xc6e0656205d26ce3ad1c14f647ee70ced21640522d06ef380ed7c35dad7c22e3\",\"license\":\"agpl-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport {IRewardsDistributor} from './IRewardsDistributor.sol';\\nimport {ITransferStrategyBase} from './ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\nimport {RewardsDataTypes} from '../libraries/RewardsDataTypes.sol';\\n\\n/**\\n * @title IRewardsController\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Controller.\\n */\\ninterface IRewardsController is IRewardsDistributor {\\n  /**\\n   * @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @dev Emitted when rewards are claimed\\n   * @param user The address of the user rewards has been claimed on behalf of\\n   * @param reward The address of the token reward is claimed\\n   * @param to The address of the receiver of the rewards\\n   * @param claimer The address of the claimer\\n   * @param amount The amount of rewards claimed\\n   */\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed reward,\\n    address indexed to,\\n    address claimer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted when a transfer strategy is installed for the reward distribution\\n   * @param reward The address of the token reward\\n   * @param transferStrategy The address of TransferStrategy contract\\n   */\\n  event TransferStrategyInstalled(address indexed reward, address indexed transferStrategy);\\n\\n  /**\\n   * @dev Emitted when the reward oracle is updated\\n   * @param reward The address of the token reward\\n   * @param rewardOracle The address of oracle\\n   */\\n  event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\\n   * @param reward The address of the reward token\\n   * @param transferStrategy The address of the TransferStrategy logic contract\\n   */\\n  function setTransferStrategy(address reward, ITransferStrategyBase transferStrategy) external;\\n\\n  /**\\n   * @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n   * @notice At the moment of reward configuration, the Incentives Controller performs\\n   * a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\n   * This check is enforced for integrators to be able to show incentives at\\n   * the current Aave UI without the need to setup an external price registry\\n   * @param reward The address of the reward to set the price aggregator\\n   * @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\n   */\\n  function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\n\\n  /**\\n   * @dev Get the price aggregator oracle address\\n   * @param reward The address of the reward\\n   * @return The price oracle of the reward\\n   */\\n  function getRewardOracle(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Returns the Transfer Strategy implementation contract address being used for a reward address\\n   * @param reward The address of the reward\\n   * @return The address of the TransferStrategy contract\\n   */\\n  function getTransferStrategy(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n   * @param config The assets configuration input, the list of structs contains the following fields:\\n   *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n   *   uint256 totalSupply: The total supply of the asset to incentivize\\n   *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n   *   address asset: The asset address to incentivize\\n   *   address reward: The reward token address\\n   *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\\n   *   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n   *                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n   */\\n  function configureAssets(RewardsDataTypes.RewardsConfigInput[] memory config) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   * @param userBalance The user balance of the asset\\n   * @param totalSupply The total supply of the asset\\n   **/\\n  function handleAction(\\n    address user,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param to The address that will be receiving the rewards\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The\\n   * caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsToSelf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n   **/\\n  function claimAllRewards(address[] calldata assets, address to)\\n    external\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsOnBehalf(\\n    address[] calldata assets,\\n    address user,\\n    address to\\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsToSelf(address[] calldata assets)\\n    external\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n}\\n\",\"keccak256\":\"0xbaaa2c6aa9eea166d41ac39751ee1a14f57ece37bfcc0a7420a2b116a0a6fa37\",\"license\":\"agpl-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IRewardsDistributor\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Distributor.\\n */\\ninterface IRewardsDistributor {\\n  /**\\n   * @dev Emitted when the configuration of the rewards of an asset is updated.\\n   * @param asset The address of the incentivized asset\\n   * @param reward The address of the reward token\\n   * @param oldEmission The old emissions per second value of the reward distribution\\n   * @param newEmission The new emissions per second value of the reward distribution\\n   * @param oldDistributionEnd The old end timestamp of the reward distribution\\n   * @param newDistributionEnd The new end timestamp of the reward distribution\\n   * @param assetIndex The index of the asset distribution\\n   */\\n  event AssetConfigUpdated(\\n    address indexed asset,\\n    address indexed reward,\\n    uint256 oldEmission,\\n    uint256 newEmission,\\n    uint256 oldDistributionEnd,\\n    uint256 newDistributionEnd,\\n    uint256 assetIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when rewards of an asset are accrued on behalf of a user.\\n   * @param asset The address of the incentivized asset\\n   * @param reward The address of the reward token\\n   * @param user The address of the user that rewards are accrued on behalf of\\n   * @param assetIndex The index of the asset distribution\\n   * @param userIndex The index of the asset distribution on behalf of the user\\n   * @param rewardsAccrued The amount of rewards accrued\\n   */\\n  event Accrued(\\n    address indexed asset,\\n    address indexed reward,\\n    address indexed user,\\n    uint256 assetIndex,\\n    uint256 userIndex,\\n    uint256 rewardsAccrued\\n  );\\n\\n  /**\\n   * @dev Emitted when the emission manager address is updated.\\n   * @param oldEmissionManager The address of the old emission manager\\n   * @param newEmissionManager The address of the new emission manager\\n   */\\n  event EmissionManagerUpdated(\\n    address indexed oldEmissionManager,\\n    address indexed newEmissionManager\\n  );\\n\\n  /**\\n   * @dev Sets the end date for the distribution\\n   * @param asset The asset to incentivize\\n   * @param reward The reward token that incentives the asset\\n   * @param newDistributionEnd The end date of the incentivization, in unix time format\\n   **/\\n  function setDistributionEnd(\\n    address asset,\\n    address reward,\\n    uint32 newDistributionEnd\\n  ) external;\\n\\n  /**\\n   * @dev Sets the emission per second of a set of reward distributions\\n   * @param asset The asset is being incentivized\\n   * @param rewards List of reward addresses are being distributed\\n   * @param newEmissionsPerSecond List of new reward emissions per second\\n   */\\n  function setEmissionPerSecond(\\n    address asset,\\n    address[] calldata rewards,\\n    uint88[] calldata newEmissionsPerSecond\\n  ) external;\\n\\n  /**\\n   * @dev Gets the end date for the distribution\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The timestamp with the end of the distribution, in unix time format\\n   **/\\n  function getDistributionEnd(address asset, address reward) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the index of a user on a reward distribution\\n   * @param user Address of the user\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The current user asset index, not including new distributions\\n   **/\\n  function getUserAssetIndex(\\n    address user,\\n    address asset,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configuration of the distribution reward for a certain asset\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The index of the asset distribution\\n   * @return The emission per second of the reward distribution\\n   * @return The timestamp of the last update of the index\\n   * @return The timestamp of the distribution end\\n   **/\\n  function getRewardsData(address asset, address reward)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Returns the list of available reward token addresses of an incentivized asset\\n   * @param asset The incentivized asset\\n   * @return List of rewards addresses of the input asset\\n   **/\\n  function getRewardsByAsset(address asset) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the list of available reward addresses\\n   * @return List of rewards supported in this contract\\n   **/\\n  function getRewardsList() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return Unclaimed rewards, not including new distributions\\n   **/\\n  function getUserAccruedRewards(address user, address reward) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return The rewards amount\\n   **/\\n  function getUserRewards(\\n    address[] calldata assets,\\n    address user,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @return The list of reward addresses\\n   * @return The list of unclaimed amount of rewards\\n   **/\\n  function getAllUserRewards(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n\\n  /**\\n   * @dev Returns the decimals of an asset to calculate the distribution delta\\n   * @param asset The address to retrieve decimals\\n   * @return The decimals of an underlying asset\\n   */\\n  function getAssetDecimals(address asset) external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the address of the emission manager\\n   * @return The address of the EmissionManager\\n   */\\n  function getEmissionManager() external view returns (address);\\n\\n  /**\\n   * @dev Updates the address of the emission manager\\n   * @param emissionManager The address of the new EmissionManager\\n   */\\n  function setEmissionManager(address emissionManager) external;\\n}\\n\",\"keccak256\":\"0xfdbb964120445be67bfaafed33faad54ea8f9e51c2965dbb72252ab3adbafee5\",\"license\":\"agpl-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/ITransferStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\ninterface ITransferStrategyBase {\\n  event EmergencyWithdrawal(\\n    address indexed caller,\\n    address indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\\n   * @param to Account to transfer rewards\\n   * @param reward Address of the reward token\\n   * @param amount Amount to transfer to the \\\"to\\\" address parameter\\n   * @return Returns true bool if transfer logic succeeds\\n   */\\n  function performTransfer(\\n    address to,\\n    address reward,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @return Returns the address of the Incentives Controller\\n   */\\n  function getIncentivesController() external view returns (address);\\n\\n  /**\\n   * @return Returns the address of the Rewards admin\\n   */\\n  function getRewardsAdmin() external view returns (address);\\n\\n  /**\\n   * @dev Perform an emergency token withdrawal only callable by the Rewards admin\\n   * @param token Address of the token to withdraw funds from this contract\\n   * @param to Address of the recipient of the withdrawal\\n   * @param amount Amount of the withdrawal\\n   */\\n  function emergencyWithdrawal(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x693a03ea4ff01373ef102c6a558bcfa8e54a6be6e53de7a022b923f2108cd250\",\"license\":\"AGPL-3.0\"},\"@aave/periphery-v3/contracts/rewards/libraries/RewardsDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport {ITransferStrategyBase} from '../interfaces/ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\n\\nlibrary RewardsDataTypes {\\n  struct RewardsConfigInput {\\n    uint88 emissionPerSecond;\\n    uint256 totalSupply;\\n    uint32 distributionEnd;\\n    address asset;\\n    address reward;\\n    ITransferStrategyBase transferStrategy;\\n    IEACAggregatorProxy rewardOracle;\\n  }\\n\\n  struct UserAssetBalance {\\n    address asset;\\n    uint256 userBalance;\\n    uint256 totalSupply;\\n  }\\n\\n  struct UserData {\\n    uint104 index; // matches reward index\\n    uint128 accrued;\\n  }\\n\\n  struct RewardData {\\n    uint104 index;\\n    uint88 emissionPerSecond;\\n    uint32 lastUpdateTimestamp;\\n    uint32 distributionEnd;\\n    mapping(address => UserData) usersData;\\n  }\\n\\n  struct AssetData {\\n    mapping(address => RewardData) rewards;\\n    mapping(uint128 => address) availableRewards;\\n    uint128 availableRewardsCount;\\n    uint8 decimals;\\n  }\\n}\\n\",\"keccak256\":\"0x93632dbb39e8cce89098bc29ee786123cd2b2b8532a2077392966b8e86ceed39\",\"license\":\"agpl-3.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ab2a92fbac88a704270b039691afb363c5a1ef1170fb0c955043e4da84b987\",\"license\":\"AGPL-3.0-only\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7825565a4bb2a34a1dc96bbfead755785dfb0df8ef81bd934c43023689685645\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/ERC4626/ERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport { ERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Copied and modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626Upgradeable is ERC20Upgradeable {\\n    using SafeERC20 for IERC20Metadata;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               STATE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    IERC20Metadata public asset;\\n\\n    /* solhint-disable func-name-mixedcase */\\n    function __ERC4626Upgradeable_init(\\n        IERC20Metadata _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) internal {\\n        __ERC20_init(_name, _symbol);\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, 'ZERO_SHARES');\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares, receiver);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares, receiver);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\\n        }\\n\\n        beforeWithdraw(assets, shares, receiver);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, 'ZERO_ASSETS');\\n\\n        beforeWithdraw(assets, shares, receiver);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf(owner));\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /* solhint-disable no-empty-blocks */\\n    function beforeWithdraw(\\n        uint256 assets,\\n        uint256 shares,\\n        address receiver\\n    ) internal virtual {}\\n\\n    /* solhint-disable no-empty-blocks */\\n    function afterDeposit(\\n        uint256 assets,\\n        uint256 shares,\\n        address receiver\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x173c06e50110d74bb347c8f00f6804adfd7910b9ed2449c7de8a6f4ae62250c8\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IDnGmxBatchingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport { IERC4626 } from './IERC4626.sol';\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDnGmxBatchingManager {\\n    error InvalidVault(address vault);\\n    error InvalidInput(uint256 errorCode);\\n    error InsufficientShares(uint256 balance);\\n    error InvalidSetDepositPaused(bool currentValue);\\n\\n    error ZeroBalance();\\n\\n    error VaultAlreadyAdded();\\n    error VaultsLimitExceeded();\\n\\n    error CallerNotKeeper();\\n    error CallerNotVault();\\n    error NoUsdcBalance();\\n\\n    event DepositToken(\\n        uint256 indexed round,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount,\\n        uint256 glpStaked\\n    );\\n\\n    event VaultAdded(address vault);\\n    event VaultDeposit(uint256 vaultGlpAmount);\\n\\n    event KeeperUpdated(address newKeeper);\\n\\n    event SharesClaimed(address indexed from, address indexed receiver, uint256 claimAmount);\\n    event BatchStake(uint256 indexed round, uint256 userUsdcAmount, uint256 userGlpAmount);\\n    event BatchDeposit(uint256 indexed round, uint256 userUsdcAmount, uint256 userGlpAmount, uint256 userShareAmount);\\n\\n    struct UserDeposit {\\n        uint256 round;\\n        uint128 usdcBalance;\\n        uint128 unclaimedShares;\\n    }\\n    struct RoundDeposit {\\n        uint128 totalUsdc;\\n        uint128 totalShares;\\n    }\\n\\n    function depositToken(\\n        address token,\\n        uint256 amount,\\n        uint256 minUSDG\\n    ) external returns (uint256 glpStaked);\\n\\n    function depositUsdc(uint256 amount, address receiver) external returns (uint256 glpStaked);\\n\\n    function executeBatchStake() external;\\n\\n    function executeBatchDeposit() external;\\n\\n    function dnGmxJuniorVaultGlpBalance() external view returns (uint256 balance);\\n\\n    function usdcBalance(address account) external view returns (uint256 balance);\\n\\n    function unclaimedShares(address account) external view returns (uint256 shares);\\n\\n    function claim(address receiver, uint256 amount) external;\\n\\n    function currentRound() external view returns (uint256);\\n\\n    function roundDeposits(uint256 round) external view returns (RoundDeposit memory);\\n}\\n\",\"keccak256\":\"0xf7c614f54652c7e054f70df723d820d6eff9ab7ed5d5db1eab0a1d7921940b0d\",\"license\":\"MIT\"},\"contracts/interfaces/IDnGmxSeniorVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC4626 } from './IERC4626.sol';\\n\\ninterface IDnGmxSeniorVault is IERC4626 {\\n    function borrow(uint256 amount) external;\\n\\n    function repay(uint256 amount) external;\\n\\n    function getEthRewardsSplitRate() external returns (uint256);\\n\\n    function getPriceX128() external view returns (uint256);\\n\\n    function getVaultMarketValue() external view returns (uint256);\\n\\n    function depositCap() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdfb5c37dc6805a5c9bcd49c67abc37f2e730a1b8810273ad892ee208185e745c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\n\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0xc66c17058b5874379d9a8c47082c72e4c0baa37811d3f73ce71ec3412fb35a32\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IBalancerVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBalancerVault {\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x146a0eac2c1110d36f9721707792de59e82747234bc214595704b506db4bf130\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IExchange {\\n    function get_exchange_amount(\\n        address _pool,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        address _pool,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _expected\\n    ) external returns (uint256);\\n\\n    function get_best_rate(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        address[8] calldata _exclude_pools\\n    ) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xc1a94f757a5cab6ef007bb023024ebf0425313fcbaace42d6b07807f327a368a\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStableSwap {\\n    ///@dev Get the amount of coin j one would receive for swapping _dx of coin i.\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external returns (uint256);\\n\\n    /**\\n    Perform an exchange between two coins.\\n\\n    i: Index value for the coin to send\\n    j: Index value of the coin to receive\\n    _dx: Amount of i being exchanged\\n    _min_dy: Minimum amount of j to receive\\n\\n    Returns the actual amount of coin j received. Index values can be found via the coins public getter method.\\n    */\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool use_eth\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x3c0cbce9d2f997cebc3b11de35c7d85d1123cfc8dca76f70e1dd34523a5b0759\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/IGlpManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGlpManager {\\n    function cooldownDuration() external returns (uint256);\\n\\n    function lastAddedAt(address _account) external returns (uint256);\\n\\n    function addLiquidity(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp\\n    ) external returns (uint256);\\n\\n    function addLiquidityForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        address _tokenOut,\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function removeLiquidityForAccount(\\n        address _account,\\n        address _tokenOut,\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function getAums() external view returns (uint256[] memory);\\n\\n    function vault() external view returns (address);\\n\\n    function getAumInUsdg(bool maximise) external view returns (uint256);\\n\\n    function getAum(bool maximise) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcadd845dbdce20a138aff2228eb273ab3b0818cc087a5b0e89ba1535755ecc75\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/IRewardRouterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRewardRouterV2 {\\n    event StakeGmx(address account, address token, uint256 amount);\\n    event UnstakeGmx(address account, address token, uint256 amount);\\n\\n    event StakeGlp(address account, uint256 amount);\\n    event UnstakeGlp(address account, uint256 amount);\\n\\n    function batchStakeGmxForAccount(address[] memory _accounts, uint256[] memory _amounts) external;\\n\\n    function stakeGmxForAccount(address _account, uint256 _amount) external;\\n\\n    function stakeGmx(uint256 _amount) external;\\n\\n    function stakeEsGmx(uint256 _amount) external;\\n\\n    function unstakeGmx(uint256 _amount) external;\\n\\n    function unstakeEsGmx(uint256 _amount) external;\\n\\n    function mintAndStakeGlp(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp\\n    ) external returns (uint256);\\n\\n    function mintAndStakeGlpETH(uint256 _minUsdg, uint256 _minGlp) external payable returns (uint256);\\n\\n    function unstakeAndRedeemGlp(\\n        address _tokenOut,\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function unstakeAndRedeemGlpETH(\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address payable _receiver\\n    ) external returns (uint256);\\n\\n    function claim() external;\\n\\n    function claimEsGmx() external;\\n\\n    function claimFees() external;\\n\\n    function compound() external;\\n\\n    function compoundForAccount(address _account) external;\\n\\n    function handleRewards(\\n        bool _shouldClaimGmx,\\n        bool _shouldStakeGmx,\\n        bool _shouldClaimEsGmx,\\n        bool _shouldStakeEsGmx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth\\n    ) external;\\n\\n    function batchCompoundForAccounts(address[] memory _accounts) external;\\n\\n    function signalTransfer(address _receiver) external;\\n\\n    function acceptTransfer(address _sender) external;\\n}\\n\",\"keccak256\":\"0x414d62e10ccd158c6d4505922a51c2bb528aae9d7f33110c21304ee246171cc5\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/ISGLPExtended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISGLPExtended {\\n    function glp() external view returns (address);\\n\\n    function glpManager() external view returns (address);\\n\\n    function feeGlpTracker() external view returns (address);\\n\\n    function stakedGlpTracker() external view returns (address);\\n}\\n\",\"keccak256\":\"0x0c9e277710a09007979184016f25d68ca1c026490020a355feae398313307dcd\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n\\n    function isSwapEnabled() external view returns (bool);\\n\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n\\n    function usdg() external view returns (address);\\n\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n\\n    function hasDynamicFees() external view returns (bool);\\n\\n    function fundingInterval() external view returns (uint256);\\n\\n    function totalTokenWeights() external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n\\n    function isLiquidator(address _account) external view returns (bool);\\n\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n\\n    function tokenBalances(address _token) external view returns (uint256);\\n\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setInManagerMode(bool _inManagerMode) external;\\n\\n    function setManager(address _manager, bool _isManager) external;\\n\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n\\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\\n\\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function increasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function fundingRateFactor() external view returns (uint256);\\n\\n    function stableFundingRateFactor() external view returns (uint256);\\n\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdgDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function stableTaxBasisPoints() external view returns (uint256);\\n\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n\\n    function whitelistedTokens(address _token) external view returns (bool);\\n\\n    function stableTokens(address _token) external view returns (bool);\\n\\n    function shortableTokens(address _token) external view returns (bool);\\n\\n    function feeReserves(address _token) external view returns (uint256);\\n\\n    function globalShortSizes(address _token) external view returns (uint256);\\n\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n\\n    function tokenDecimals(address _token) external view returns (uint256);\\n\\n    function tokenWeights(address _token) external view returns (uint256);\\n\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n\\n    function poolAmounts(address _token) external view returns (uint256);\\n\\n    function bufferAmounts(address _token) external view returns (uint256);\\n\\n    function reservedAmounts(address _token) external view returns (uint256);\\n\\n    function usdgAmounts(address _token) external view returns (uint256);\\n\\n    function maxUsdgAmounts(address _token) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) external view returns (bool, uint256);\\n\\n    function getPosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0xfeb43dd05f2ea0cb41c1545d26d3e62ed4a5f3ee89ff4ab6e18b0767049809e6\",\"license\":\"MIT\"},\"contracts/libraries/FeeSplitStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\n\\n/**\\n * @title FeeSplitStrategy contract\\n * @notice Implements the calculation of the eth reward split depending on the utilization of reserve\\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE`\\n * point of utilization and another from that one to 100%\\n * @author Rage\\n **/\\nlibrary FeeSplitStrategy {\\n    using FullMath for uint256;\\n\\n    uint256 internal constant RATE_PRECISION = 1e30;\\n\\n    struct Info {\\n        /**\\n         * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\\n         * Expressed in ray\\n         **/\\n        uint256 optimalUtilizationRate;\\n        // Base variable borrow rate when Utilization rate = 0. Expressed in ray\\n        uint256 baseVariableBorrowRate;\\n        // Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint256 variableRateSlope1;\\n        // Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint256 variableRateSlope2;\\n    }\\n\\n    function getMaxVariableBorrowRate(Info storage feeStrategyInfo) internal view returns (uint256) {\\n        return\\n            feeStrategyInfo.baseVariableBorrowRate +\\n            feeStrategyInfo.variableRateSlope1 +\\n            feeStrategyInfo.variableRateSlope2;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * NOTE This function is kept for compatibility with the previous DefaultInterestRateStrategy interface.\\n     * New protocol implementation uses the new calculateInterestRates() interface\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param usedLiquidity The total borrowed from the reserve at a variable rate\\n     **/\\n    function calculateFeeSplit(\\n        Info storage feeStrategy,\\n        uint256 availableLiquidity,\\n        uint256 usedLiquidity\\n    ) internal view returns (uint256 feeSplitRate) {\\n        uint256 utilizationRate = usedLiquidity == 0\\n            ? 0\\n            : usedLiquidity.mulDiv(RATE_PRECISION, availableLiquidity + usedLiquidity);\\n\\n        uint256 excessUtilizationRate = RATE_PRECISION - feeStrategy.optimalUtilizationRate;\\n\\n        if (utilizationRate > feeStrategy.optimalUtilizationRate) {\\n            uint256 excessUtilizationRateRatio = (utilizationRate - feeStrategy.optimalUtilizationRate).mulDiv(\\n                RATE_PRECISION,\\n                excessUtilizationRate\\n            );\\n\\n            feeSplitRate =\\n                feeStrategy.baseVariableBorrowRate +\\n                feeStrategy.variableRateSlope1 +\\n                feeStrategy.variableRateSlope2.mulDiv(excessUtilizationRateRatio, RATE_PRECISION);\\n        } else {\\n            feeSplitRate =\\n                feeStrategy.baseVariableBorrowRate +\\n                utilizationRate.mulDiv(feeStrategy.variableRateSlope1, feeStrategy.optimalUtilizationRate);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5cd4d1f0b70d147e50d08c4acea42c72a96265c46e4fb20958ba49fee27177c4\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        unchecked {\\n            require((z = uint160(y)) == y, 'Overflow');\\n        }\\n    }\\n\\n    /// @notice Cast a uint256 to a uint128, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\\n        unchecked {\\n            /* solhint-disable reason-string */\\n            require((z = uint128(y)) == y);\\n        }\\n    }\\n\\n    /// @notice Cast a uint128 to a int128, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt128(uint128 y) internal pure returns (int128 z) {\\n        unchecked {\\n            require(y < 2**127, 'Overflow');\\n            z = int128(y);\\n        }\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        unchecked {\\n            require((z = int128(y)) == y, 'Overflow');\\n        }\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            require(y < 2**255, 'Overflow');\\n            z = int256(y);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa92c99d01da478590c879d65570e9f206e12b49df250129d1b537f80c3e1986\",\"license\":\"GPL-2.0-or-later\"},\"contracts/vaults/DnGmxJuniorVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\nimport { IPool } from '@aave/core-v3/contracts/interfaces/IPool.sol';\\nimport { IAToken } from '@aave/core-v3/contracts/interfaces/IAToken.sol';\\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\\nimport { DataTypes } from '@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol';\\nimport { IPoolAddressesProvider } from '@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol';\\nimport { ReserveConfiguration } from '@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol';\\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport { FeeSplitStrategy } from '../libraries/FeeSplitStrategy.sol';\\nimport { IVault } from '../interfaces/gmx/IVault.sol';\\nimport { IGlpManager } from '../interfaces/gmx/IGlpManager.sol';\\nimport { IStableSwap } from '../interfaces/curve/IStableSwap.sol';\\nimport { ISGLPExtended } from '../interfaces/gmx/ISGLPExtended.sol';\\nimport { IRewardRouterV2 } from '../interfaces/gmx/IRewardRouterV2.sol';\\nimport { IBalancerVault } from '../interfaces/balancer/IBalancerVault.sol';\\nimport { ERC4626Upgradeable } from '../ERC4626/ERC4626Upgradeable.sol';\\nimport { DnGmxJuniorVaultStorage, IDebtToken } from '../vaults/DnGmxJuniorVaultStorage.sol';\\nimport { IDnGmxSeniorVault } from '../interfaces/IDnGmxSeniorVault.sol';\\nimport { SafeCast } from '../libraries/SafeCast.sol';\\nimport { IDnGmxBatchingManager } from '../interfaces/IDnGmxBatchingManager.sol';\\n\\n// import 'hardhat/console.sol';\\n\\ncontract DnGmxJuniorVault is ERC4626Upgradeable, OwnableUpgradeable, DnGmxJuniorVaultStorage {\\n    using FullMath for uint256;\\n    using SafeCast for uint256;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using SafeERC20 for IERC20Metadata;\\n\\n    error InvalidRebalance();\\n    error DepositCapExceeded();\\n    error OnlyKeeperAllowed(address msgSender, address authorisedKeeperAddress);\\n\\n    error NotDnGmxSeniorVault();\\n    error NotBalancerVault();\\n\\n    error ArraysLengthMismatch();\\n    error FlashloanNotInitiated();\\n\\n    error InvalidFeeRecipient();\\n\\n    event Rebalanced();\\n    event AllowancesGranted();\\n\\n    event DnGmxSeniorVaultUpdated(address _dnGmxSeniorVault);\\n    event KeeperUpdated(address _newKeeper);\\n    event FeeRecipientUpdated(address _newFeeRecipient);\\n    event WithdrawFeeUpdated(uint256 _withdrawFeeBps);\\n    event FeesWithdrawn(uint256 feeAmount);\\n    event RewardsHarvested(uint256 totalEthAmount, uint256 juniorVaultShare);\\n    event DepositCapUpdated(uint256 _newDepositCap);\\n    event BatchingManagerUpdated(address _batchingManager);\\n\\n    event YieldParamsUpdated(\\n        uint16 indexed usdcRedeemSlippage,\\n        uint240 indexed usdcConversionThreshold,\\n        uint256 indexed seniorVaultWethConversionThreshold\\n    );\\n    event RebalanceParamsUpdated(uint32 indexed rebalanceTimeThreshold, uint16 indexed rebalanceDeltaThreshold);\\n\\n    modifier onlyKeeper() {\\n        if (msg.sender != keeper) revert OnlyKeeperAllowed(msg.sender, keeper);\\n        _;\\n    }\\n\\n    modifier onlyDnGmxSeniorVault() {\\n        if (msg.sender != address(dnGmxSeniorVault)) revert NotDnGmxSeniorVault();\\n        _;\\n    }\\n\\n    modifier whenFlashloaned() {\\n        if (!_hasFlashloaned) revert FlashloanNotInitiated();\\n        _;\\n    }\\n\\n    modifier onlyBalancerVault() {\\n        if (msg.sender != address(balancerVault)) revert NotBalancerVault();\\n        _;\\n    }\\n\\n    /* ##################################################################\\n                                SYSTEM FUNCTIONS\\n    ################################################################## */\\n\\n    function initialize(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _swapRouter,\\n        address _rewardRouter,\\n        address _tricryptoPool,\\n        Tokens calldata _tokens,\\n        IPoolAddressesProvider _poolAddressesProvider\\n    ) external initializer {\\n        __Ownable_init();\\n        // __Pausable_init();\\n        __ERC4626Upgradeable_init(_tokens.sGlp, _name, _symbol);\\n\\n        weth = _tokens.weth;\\n        wbtc = _tokens.wbtc;\\n        usdc = _tokens.usdc;\\n        usdt = _tokens.usdt;\\n\\n        swapRouter = ISwapRouter(_swapRouter);\\n        rewardRouter = IRewardRouterV2(_rewardRouter);\\n\\n        poolAddressProvider = _poolAddressesProvider;\\n\\n        glp = IERC20Metadata(ISGLPExtended(address(asset)).glp());\\n        glpManager = IGlpManager(ISGLPExtended(address(asset)).glpManager());\\n        fsGlp = IERC20(ISGLPExtended(address(asset)).stakedGlpTracker());\\n\\n        gmxVault = IVault(glpManager.vault());\\n        tricryptoPool = IStableSwap(_tricryptoPool);\\n\\n        pool = IPool(poolAddressProvider.getPool());\\n        oracle = IPriceOracle(poolAddressProvider.getPriceOracle());\\n\\n        aUsdc = IAToken(pool.getReserveData(address(usdc)).aTokenAddress);\\n\\n        vWbtc = IDebtToken(pool.getReserveData(address(wbtc)).variableDebtTokenAddress);\\n        vWeth = IDebtToken(pool.getReserveData(address(weth)).variableDebtTokenAddress);\\n    }\\n\\n    /* ##################################################################\\n                                ADMIN FUNCTIONS\\n    ################################################################## */\\n\\n    function grantAllowances() external onlyOwner {\\n        address aavePool = address(pool);\\n        address swapRouter = address(swapRouter);\\n        address tricrypto = address(tricryptoPool);\\n\\n        wbtc.approve(aavePool, type(uint256).max);\\n        wbtc.approve(tricrypto, type(uint256).max);\\n\\n        weth.approve(aavePool, type(uint256).max);\\n        weth.approve(swapRouter, type(uint256).max);\\n        weth.approve(address(batchingManager), type(uint256).max);\\n\\n        usdc.approve(aavePool, type(uint256).max);\\n        usdc.approve(address(swapRouter), type(uint256).max);\\n        usdc.approve(address(batchingManager), type(uint256).max);\\n\\n        usdt.approve(tricrypto, 0);\\n        usdt.approve(swapRouter, 0);\\n        usdt.approve(tricrypto, type(uint256).max);\\n        usdt.approve(swapRouter, type(uint256).max);\\n\\n        aUsdc.approve(address(dnGmxSeniorVault), type(uint256).max);\\n\\n        asset.approve(address(glpManager), type(uint256).max);\\n\\n        emit AllowancesGranted();\\n    }\\n\\n    function setKeeper(address _newKeeper) external onlyOwner {\\n        keeper = _newKeeper;\\n        emit KeeperUpdated(_newKeeper);\\n    }\\n\\n    function setDnGmxSeniorVault(address _dnGmxSeniorVault) external onlyOwner {\\n        dnGmxSeniorVault = IDnGmxSeniorVault(_dnGmxSeniorVault);\\n        emit DnGmxSeniorVaultUpdated(_dnGmxSeniorVault);\\n    }\\n\\n    function setDepositCap(uint256 _newDepositCap) external onlyOwner {\\n        depositCap = _newDepositCap;\\n        emit DepositCapUpdated(_newDepositCap);\\n    }\\n\\n    function setBatchingManager(address _batchingManager) external onlyOwner {\\n        batchingManager = IDnGmxBatchingManager(_batchingManager);\\n        emit BatchingManagerUpdated(_batchingManager);\\n    }\\n\\n    function setWithdrawFee(uint256 _withdrawFeeBps) external onlyOwner {\\n        withdrawFeeBps = _withdrawFeeBps;\\n        emit WithdrawFeeUpdated(_withdrawFeeBps);\\n    }\\n\\n    function setThresholds(YieldStrategyParams calldata _ysParams) external onlyOwner {\\n        usdcRedeemSlippage = _ysParams.usdcRedeemSlippage;\\n        usdcConversionThreshold = _ysParams.usdcConversionThreshold;\\n        seniorVaultWethConversionThreshold = _ysParams.seniorVaultWethConversionThreshold;\\n        emit YieldParamsUpdated(\\n            _ysParams.usdcRedeemSlippage,\\n            _ysParams.usdcConversionThreshold,\\n            _ysParams.seniorVaultWethConversionThreshold\\n        );\\n    }\\n\\n    function setRebalanceParams(RebalanceStrategyParams calldata _rsParams) external onlyOwner {\\n        rebalanceTimeThreshold = _rsParams.rebalanceTimeThreshold;\\n        rebalanceDeltaThreshold = _rsParams.rebalanceDeltaThreshold;\\n        emit RebalanceParamsUpdated(_rsParams.rebalanceTimeThreshold, _rsParams.rebalanceDeltaThreshold);\\n    }\\n\\n    function setHedgeParams(HedgeStrategyParams calldata _hedgeParams) external onlyOwner {\\n        balancerVault = _hedgeParams.vault;\\n        swapRouter = _hedgeParams.swapRouter;\\n        targetHealthFactor = _hedgeParams.targetHealthFactor;\\n        aaveRewardsController = _hedgeParams.aaveRewardsController;\\n    }\\n\\n    // function pause() external onlyOwner {\\n    //     // _pause();\\n    // }\\n\\n    // function unpause() external onlyOwner {\\n    //     // _unpause();\\n    // }\\n\\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\\n        if (feeRecipient != _feeRecipient) {\\n            feeRecipient = _feeRecipient;\\n        } else revert InvalidFeeRecipient();\\n\\n        emit FeeRecipientUpdated(_feeRecipient);\\n    }\\n\\n    // /// @notice withdraw accumulated WETH fees\\n    // function withdrawFees() external {\\n    //     uint256 amount = protocolFee;\\n    //     protocolFee = 0;\\n    //     weth.transfer(feeRecipient, amount);\\n    //     emit FeesWithdrawn(amount);\\n    // }\\n\\n    /// @notice stakes the rewards from the staked Glp and claims WETH to buy glp\\n    function harvestFees() public {\\n        rewardRouter.handleRewards(\\n            false, // _shouldClaimGmx\\n            false, // _shouldStakeGmx\\n            true, // _shouldClaimEsGmx\\n            true, // _shouldStakeEsGmx\\n            true, // _shouldStakeMultiplierPoints\\n            true, // _shouldClaimWeth\\n            false // _shouldConvertWethToEth\\n        );\\n\\n        uint256 wethHarvested = weth.balanceOf(address(this)) - protocolFee - seniorVaultWethRewards;\\n        if (wethHarvested > wethThreshold) {\\n            uint256 protocolFeeHarvested = (wethHarvested * FEE) / MAX_BPS;\\n            protocolFee += protocolFeeHarvested;\\n\\n            uint256 wethToCompound = wethHarvested - protocolFeeHarvested;\\n\\n            uint256 dnGmxSeniorVaultWethShare = dnGmxSeniorVault.getEthRewardsSplitRate().mulDiv(\\n                wethToCompound,\\n                FeeSplitStrategy.RATE_PRECISION\\n            );\\n            uint256 dnGmxWethShare = wethToCompound - dnGmxSeniorVaultWethShare;\\n\\n            uint256 _seniorVaultWethRewards = seniorVaultWethRewards + dnGmxSeniorVaultWethShare;\\n\\n            // console.log('ethRewardsSplitRate', dnGmxSeniorVault.getEthRewardsSplitRate());\\n            // console.log('wethToCompound', wethToCompound);\\n            // console.log('dnGmxWethShare', dnGmxWethShare);\\n            // console.log('dnGmxSeniorVaultWethShare', dnGmxSeniorVaultWethShare);\\n\\n            uint256 price = gmxVault.getMinPrice(address(weth));\\n\\n            uint256 usdgAmount = dnGmxWethShare.mulDiv(\\n                price * (MAX_BPS - slippageThreshold),\\n                PRICE_PRECISION * MAX_BPS\\n            );\\n\\n            usdgAmount = usdgAmount.mulDiv(10**USDG_DECIMALS, 10**WETH_DECIMALS);\\n\\n            batchingManager.depositToken(address(weth), dnGmxWethShare, usdgAmount);\\n\\n            // console.log('_seniorVaultWethRewards', _seniorVaultWethRewards);\\n            if (_seniorVaultWethRewards > seniorVaultWethConversionThreshold) {\\n                // Deposit aave vault share to AAVE in usdc\\n                uint256 minUsdcAmount = _getPrice(weth, true).mulDiv(\\n                    _seniorVaultWethRewards * (MAX_BPS - usdcRedeemSlippage),\\n                    MAX_BPS * PRICE_PRECISION\\n                );\\n                uint256 aaveUsdcAmount = _swapToken(address(weth), _seniorVaultWethRewards, minUsdcAmount);\\n                _executeSupply(address(usdc), aaveUsdcAmount);\\n                seniorVaultWethRewards = 0;\\n            } else {\\n                seniorVaultWethRewards = _seniorVaultWethRewards;\\n            }\\n\\n            emit RewardsHarvested(wethToCompound, dnGmxWethShare);\\n        }\\n    }\\n\\n    /* ##################################################################\\n                                KEEPER FUNCTIONS\\n    ################################################################## */\\n\\n    function isValidRebalance() public view returns (bool) {\\n        // console.log('_isValidRebalanceTime', _isValidRebalanceTime());\\n        // console.log('_isValidRebalanceDeviation', _isValidRebalanceDeviation());\\n        return _isValidRebalanceTime() || _isValidRebalanceDeviation();\\n    }\\n\\n    /* solhint-disable not-rely-on-time */\\n    function rebalance() external onlyKeeper {\\n        if (!isValidRebalance()) revert InvalidRebalance();\\n\\n        // harvest fees\\n        harvestFees();\\n\\n        (uint256 currentBtc, uint256 currentEth) = _getCurrentBorrows();\\n        uint256 totalCurrentBorrowValue = _getBorrowValue(currentBtc, currentEth); // = total position value of current btc and eth position\\n\\n        // rebalance profit\\n        _rebalanceProfit(totalCurrentBorrowValue);\\n\\n        // calculate current btc and eth positions in GLP\\n        // get the position value and calculate the collateral needed to borrow that\\n        // transfer collateral from LB vault to DN vault\\n        _rebalanceHedge(currentBtc, currentEth, totalAssets());\\n\\n        lastRebalanceTS = uint64(block.timestamp);\\n        emit Rebalanced();\\n    }\\n\\n    /* ##################################################################\\n                                USER FUNCTIONS\\n    ################################################################## */\\n\\n    function deposit(uint256 amount, address to) public virtual override returns (uint256 shares) {\\n        _rebalanceBeforeShareAllocation();\\n        shares = super.deposit(amount, to);\\n    }\\n\\n    function mint(uint256 shares, address to) public virtual override returns (uint256 amount) {\\n        _rebalanceBeforeShareAllocation();\\n        amount = super.mint(shares, to);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public override returns (uint256 shares) {\\n        // _rebalanceBeforeShareAllocation();\\n        // shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n        // if (msg.sender != owner) {\\n        //     uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\\n        //     if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\\n        // }\\n        // uint256 assetsAfterFees = assets.mulDiv(MAX_BPS - withdrawFeeBps, MAX_BPS);\\n        // beforeWithdraw(assetsAfterFees, shares, receiver);\\n        // _burn(owner, shares);\\n        // emit Withdraw(msg.sender, receiver, owner, assetsAfterFees, shares);\\n        // asset.safeTransfer(receiver, assetsAfterFees);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public override returns (uint256 assets) {\\n        _rebalanceBeforeShareAllocation();\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, 'ZERO_ASSETS');\\n\\n        uint256 assetsAfterFees = assets.mulDiv(MAX_BPS - withdrawFeeBps, MAX_BPS);\\n\\n        beforeWithdraw(assetsAfterFees, shares, receiver);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assetsAfterFees, shares);\\n\\n        asset.safeTransfer(receiver, assetsAfterFees);\\n    }\\n\\n    //TODO: add withdrawToken and redeemToken functions\\n\\n    /* ##################################################################\\n                            FLASHLOAN RECEIVER\\n    ################################################################## */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external onlyBalancerVault whenFlashloaned {\\n        (\\n            uint256 btcTokenAmount,\\n            uint256 btcUsdcAmount,\\n            uint256 ethTokenAmount,\\n            uint256 ethUsdcAmount,\\n            bool repayDebtBtc,\\n            bool repayDebtEth\\n        ) = abi.decode(userData, (uint256, uint256, uint256, uint256, bool, bool));\\n\\n        // console.log('btcTokenAmount', btcTokenAmount);\\n        // console.log('ethTokenAmount', ethTokenAmount);\\n        // console.log('btcUsdcAmount', btcUsdcAmount);\\n        // console.log('ethUsdcAmount', ethUsdcAmount);\\n        // console.log('repayDebtBtc', repayDebtBtc);\\n        // console.log('repayDebtEth', repayDebtEth);\\n\\n        uint256 btcAssetPremium;\\n        uint256 ethAssetPremium;\\n        // adjust asset amounts for premiums (zero for balancer at the time of dev)\\n        if (repayDebtBtc && repayDebtEth) {\\n            // Here amounts[0] should be equal to btcTokenAmount+ethTokenAmount\\n            btcAssetPremium = feeAmounts[0].mulDiv(btcTokenAmount, amounts[0]);\\n            // console.log('btcAssetPremium', btcAssetPremium);\\n            ethAssetPremium = (feeAmounts[0] - btcAssetPremium);\\n            // console.log('ethAssetPremium', ethAssetPremium);\\n        } else {\\n            // Here amounts[0] should be equal to btcTokenAmount and amounts[1] should be equal to ethTokenAmount\\n            bool btcFirst = false;\\n            if (repayDebtBtc ? tokens[0] == usdc : tokens[0] == wbtc) btcFirst = true;\\n            btcAssetPremium = feeAmounts[btcFirst ? 0 : 1];\\n            ethAssetPremium = feeAmounts[btcFirst ? 1 : 0];\\n        }\\n\\n        _executeOperationToken(address(wbtc), btcTokenAmount, btcUsdcAmount, btcAssetPremium, repayDebtBtc);\\n        _executeOperationToken(address(weth), ethTokenAmount, ethUsdcAmount, ethAssetPremium, repayDebtEth);\\n    }\\n\\n    /* ##################################################################\\n                                VIEW FUNCTIONS\\n    ################################################################## */\\n\\n    function totalAssets() public view override returns (uint256) {\\n        return fsGlp.balanceOf(address(this)) + batchingManager.dnGmxJuniorVaultGlpBalance();\\n    }\\n\\n    function getPrice() internal view returns (uint256) {\\n        uint256 aum = glpManager.getAum(false);\\n        uint256 totalSupply = glp.totalSupply();\\n\\n        return aum.mulDiv(PRICE_PRECISION, totalSupply * 1e24);\\n    }\\n\\n    function getPriceX128() public view returns (uint256) {\\n        uint256 aum = glpManager.getAum(false);\\n        uint256 totalSupply = glp.totalSupply();\\n\\n        return aum.mulDiv(1 << 128, totalSupply * 1e24);\\n    }\\n\\n    function getMarketValue(uint256 assetAmount) public view returns (uint256 marketValue) {\\n        marketValue = assetAmount.mulDiv(getPrice(), PRICE_PRECISION);\\n    }\\n\\n    function getVaultMarketValue() public view returns (int256 vaultMarketValue) {\\n        (uint256 currentBtc, uint256 currentEth) = _getCurrentBorrows();\\n        uint256 totalCurrentBorrowValue = _getBorrowValue(currentBtc, currentEth);\\n        vaultMarketValue = ((getMarketValue(totalAssets()).toInt256() + dnUsdcDeposited) -\\n            totalCurrentBorrowValue.toInt256());\\n    }\\n\\n    function getUsdcBorrowed() public view returns (uint256 usdcAmount) {\\n        return uint256(aUsdc.balanceOf(address(this)).toInt256() - dnUsdcDeposited);\\n    }\\n\\n    /* ##################################################################\\n                            INTERNAL FUNCTIONS\\n    ################################################################## */\\n\\n    /*\\n        DEPOSIT/WITHDRAW HELPERS\\n    */\\n\\n    function _rebalanceBeforeShareAllocation() internal {\\n        // harvest fees\\n        harvestFees();\\n\\n        (uint256 currentBtc, uint256 currentEth) = _getCurrentBorrows();\\n        uint256 totalCurrentBorrowValue = _getBorrowValue(currentBtc, currentEth); // = total position value of current btc and eth position\\n\\n        // rebalance profit\\n        _rebalanceProfit(totalCurrentBorrowValue);\\n    }\\n\\n    function beforeWithdraw(\\n        uint256 assets,\\n        uint256,\\n        address\\n    ) internal override {\\n        (uint256 currentBtc, uint256 currentEth) = _getCurrentBorrows();\\n\\n        //rebalance of hedge based on assets after withdraw (before withdraw assets - withdrawn assets)\\n        _rebalanceHedge(currentBtc, currentEth, totalAssets() - assets);\\n    }\\n\\n    function afterDeposit(\\n        uint256,\\n        uint256,\\n        address\\n    ) internal override {\\n        if (totalAssets() > depositCap) revert DepositCapExceeded();\\n        (uint256 currentBtc, uint256 currentEth) = _getCurrentBorrows();\\n\\n        //rebalance of hedge based on assets after deposit (after deposit assets)\\n        _rebalanceHedge(currentBtc, currentEth, totalAssets());\\n    }\\n\\n    /*\\n        REBALANCE HELPERS\\n    */\\n\\n    function _rebalanceProfit(uint256 borrowValue) internal {\\n        int256 borrowVal = borrowValue.toInt256();\\n\\n        // console.log('borrowVal');\\n        // console.logInt(borrowVal);\\n        // console.log('dnUsdcDeposited');\\n        // console.logInt(dnUsdcDeposited);\\n\\n        if (borrowVal > dnUsdcDeposited) {\\n            // If glp goes up - there is profit on GMX and loss on AAVE\\n            // So convert some glp to usdc and deposit to AAVE\\n            dnUsdcDeposited += _convertAssetToAUsdc(uint256(borrowVal - dnUsdcDeposited)).toInt256();\\n        } else if (borrowVal < dnUsdcDeposited) {\\n            // If glp goes down - there is profit on AAVE and loss on GMX\\n            // So withdraw some aave usdc and convert to glp\\n            _convertAUsdcToAsset(uint256(dnUsdcDeposited - borrowVal));\\n            dnUsdcDeposited = borrowVal;\\n        }\\n    }\\n\\n    function _rebalanceBorrow(\\n        uint256 optimalBtcBorrow,\\n        uint256 currentBtcBorrow,\\n        uint256 optimalEthBorrow,\\n        uint256 currentEthBorrow\\n    ) internal {\\n        address[] memory assets;\\n        uint256[] memory amounts;\\n\\n        (uint256 btcTokenAmount, uint256 btcUsdcAmount, bool repayDebtBtc) = _flashloanAmounts(\\n            address(wbtc),\\n            optimalBtcBorrow,\\n            currentBtcBorrow\\n        );\\n        (uint256 ethTokenAmount, uint256 ethUsdcAmount, bool repayDebtEth) = _flashloanAmounts(\\n            address(weth),\\n            optimalEthBorrow,\\n            currentEthBorrow\\n        );\\n\\n        // console.log('btcTokenAmount', btcTokenAmount);\\n        // console.log('ethTokenAmount', ethTokenAmount);\\n\\n        if (btcTokenAmount == 0 && ethTokenAmount == 0) return;\\n\\n        uint256 btcAssetAmount = repayDebtBtc ? btcUsdcAmount : btcTokenAmount;\\n        uint256 ethAssetAmount = repayDebtEth ? ethUsdcAmount : ethTokenAmount;\\n\\n        if (repayDebtBtc && repayDebtEth) {\\n            assets = new address[](1);\\n            amounts = new uint256[](1);\\n\\n            assets[0] = address(usdc);\\n            amounts[0] = (btcAssetAmount + ethAssetAmount);\\n            // console.log('asset[0] from if', assets[0]);\\n            // console.log('amounts[0] from if', amounts[0]);\\n        } else {\\n            assets = new address[](2);\\n            amounts = new uint256[](2);\\n\\n            assets[0] = repayDebtBtc ? address(usdc) : address(wbtc);\\n            // console.log('assets[0]', assets[0]);\\n            assets[1] = repayDebtEth ? address(usdc) : address(weth);\\n            // console.log('assets[1]', assets[1]);\\n\\n            // ensure that assets and amount tuples are in sorted order of addresses\\n            if (assets[0] > assets[1]) {\\n                address tempAsset = assets[0];\\n                assets[0] = assets[1];\\n                assets[1] = tempAsset;\\n\\n                amounts[0] = ethAssetAmount;\\n                // console.log('amounts[0]', amounts[0]);\\n                amounts[1] = btcAssetAmount;\\n                // console.log('amounts[1]', amounts[1]);\\n            } else {\\n                amounts[0] = btcAssetAmount;\\n                // console.log('amounts[0]*', amounts[0]);\\n                amounts[1] = ethAssetAmount;\\n                // console.log('amounts[1]*', amounts[1]);\\n            }\\n        }\\n        _executeFlashloan(\\n            assets,\\n            amounts,\\n            btcTokenAmount,\\n            btcUsdcAmount,\\n            ethTokenAmount,\\n            ethUsdcAmount,\\n            repayDebtBtc,\\n            repayDebtEth\\n        );\\n    }\\n\\n    /// @notice settles collateral for the vault\\n    /// @dev to be called after settle profits only (since vaultMarketValue if after settlement of profits)\\n    /// @param currentBtcBorrow The amount of USDC collateral token deposited to LB Protocol\\n    /// @param currentEthBorrow The market value of ETH/BTC part in sGLP\\n    function _rebalanceHedge(\\n        uint256 currentBtcBorrow,\\n        uint256 currentEthBorrow,\\n        uint256 glpDeposited\\n    ) internal {\\n        // console.log('totalAssets()', totalAssets());\\n        (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) = _getOptimalBorrows(glpDeposited);\\n        // console.log('optimalBtcBorrow', optimalBtcBorrow);\\n        // console.log('optimalEthBorrow', optimalEthBorrow);\\n\\n        uint256 optimalBorrowValue = _getBorrowValue(optimalBtcBorrow, optimalEthBorrow);\\n        // console.log('optimalBorrowValue', optimalBorrowValue);\\n\\n        uint256 usdcLiquidationThreshold = _getLiquidationThreshold(address(usdc));\\n\\n        // Settle net change in market value and deposit/withdraw collateral tokens\\n        // Vault market value is just the collateral value since profit has been settled\\n        uint256 targetDnGmxSeniorVaultAmount = (targetHealthFactor - usdcLiquidationThreshold).mulDiv(\\n            optimalBorrowValue,\\n            usdcLiquidationThreshold\\n        );\\n\\n        uint256 currentDnGmxSeniorVaultAmount = uint256(aUsdc.balanceOf(address(this)).toInt256() - dnUsdcDeposited);\\n\\n        // console.log('targetDnGmxSeniorVaultAmount', targetDnGmxSeniorVaultAmount);\\n        // console.log('currentDnGmxSeniorVaultAmount', currentDnGmxSeniorVaultAmount);\\n\\n        if (targetDnGmxSeniorVaultAmount > currentDnGmxSeniorVaultAmount) {\\n            // Take from LB Vault\\n            dnGmxSeniorVault.borrow(targetDnGmxSeniorVaultAmount - currentDnGmxSeniorVaultAmount);\\n            // Rebalance Position\\n            _rebalanceBorrow(optimalBtcBorrow, currentBtcBorrow, optimalEthBorrow, currentEthBorrow);\\n        } else {\\n            // Rebalance Position\\n            _rebalanceBorrow(optimalBtcBorrow, currentBtcBorrow, optimalEthBorrow, currentEthBorrow);\\n            _rebalanceProfit(optimalBorrowValue);\\n            // Deposit to LB Vault\\n            // console.log('dnUsdcDeposited');\\n            // console.logInt(dnUsdcDeposited);\\n            // console.log('ausdc bal', aUsdc.balanceOf(address(this)));\\n            dnGmxSeniorVault.repay(currentDnGmxSeniorVaultAmount - targetDnGmxSeniorVaultAmount);\\n        }\\n    }\\n\\n    /*\\n        SWAP HELPERS\\n    */\\n\\n    function _swapToken(\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 minUsdcAmount\\n    ) internal returns (uint256 usdcAmount) {\\n        if (token == address(wbtc)) {\\n            usdcAmount = _swapWBTC(tokenAmount, minUsdcAmount);\\n            return usdcAmount;\\n        }\\n\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: token,\\n            tokenOut: address(usdc),\\n            fee: uint24(500),\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountIn: tokenAmount,\\n            amountOutMinimum: minUsdcAmount,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        usdcAmount = swapRouter.exactInputSingle(params);\\n    }\\n\\n    function _swapWBTC(uint256 tokenAmount, uint256 minUsdcAmount) internal returns (uint256 usdcAmount) {\\n        // USDT = 0, WBTC = 1, WETH = 2\\n        tricryptoPool.exchange(1, 0, tokenAmount, 0, false);\\n\\n        usdcAmount = _swapToken(address(usdt), usdt.balanceOf(address(this)), minUsdcAmount);\\n    }\\n\\n    function _swapUSDC(\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 maxUsdcAmount\\n    ) internal returns (uint256 usdcUsed, uint256 tokensReceived) {\\n        if (token == address(wbtc)) {\\n            uint256 usdtAmount = _getPrice(IERC20Metadata(token), false).mulDiv(\\n                tokenAmount * (MAX_BPS + usdcRedeemSlippage / 2),\\n                MAX_BPS * PRICE_PRECISION\\n            );\\n\\n            ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams({\\n                tokenIn: address(usdc),\\n                tokenOut: address(usdt),\\n                fee: 500,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountOut: usdtAmount,\\n                amountInMaximum: maxUsdcAmount,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n            usdcUsed = swapRouter.exactOutputSingle(params);\\n\\n            // USDT = 0, WBTC = 1, WETH = 2\\n            uint256 balanceBefore = wbtc.balanceOf(address(this));\\n            tricryptoPool.exchange(0, 1, usdt.balanceOf(address(this)), 0, false);\\n\\n            uint256 tokensReceived = wbtc.balanceOf(address(this)) - balanceBefore;\\n\\n            return (usdcUsed, tokensReceived);\\n        }\\n\\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams({\\n            tokenIn: address(usdc),\\n            tokenOut: address(weth),\\n            fee: 500,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountOut: tokenAmount,\\n            amountInMaximum: maxUsdcAmount,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        usdcUsed = swapRouter.exactOutputSingle(params);\\n        tokensReceived = tokenAmount;\\n    }\\n\\n    /// @notice withdraws LP tokens from gauge, sells LP token for usdc\\n    /// @param usdcAmountDesired amount of USDC desired\\n    function _convertAssetToAUsdc(uint256 usdcAmountDesired) internal returns (uint256 usdcAmount) {\\n        /// @dev if usdcAmountDesired < 10, then there is precision issue in gmx contracts while redeeming for usdg\\n        if (usdcAmountDesired < usdcConversionThreshold) return 0;\\n        uint256 glpAmountDesired = usdcAmountDesired.mulDiv(PRICE_PRECISION, getPrice());\\n        // USDG has 18 decimals and usdc has 6 decimals => 18-6 = 12\\n        // console.log('GLP PRICE: ', getPrice());\\n        // console.log('glpAmountDesired', glpAmountDesired);\\n        // console.log('TA', totalAssets());\\n        rewardRouter.unstakeAndRedeemGlp(\\n            address(usdc),\\n            glpAmountDesired, // glp amount\\n            usdcAmountDesired.mulDiv(MAX_BPS - usdcRedeemSlippage, MAX_BPS), // usdc\\n            address(this)\\n        );\\n\\n        usdcAmount = usdc.balanceOf(address(this));\\n\\n        _executeSupply(address(usdc), usdcAmount);\\n    }\\n\\n    /// @notice sells usdc for LP tokens and then stakes LP tokens\\n    /// @param amount amount of usdc\\n    function _convertAUsdcToAsset(uint256 amount) internal {\\n        _executeWithdraw(address(usdc), amount, address(this));\\n        // USDG has 18 decimals and usdc has 6 decimals => 18-6 = 12\\n        uint256 price = gmxVault.getMinPrice(address(usdc));\\n        uint256 usdgAmount = amount.mulDiv(price * (MAX_BPS - slippageThreshold), PRICE_PRECISION * MAX_BPS);\\n\\n        usdgAmount = usdgAmount.mulDiv(10**USDG_DECIMALS, 10**IERC20Metadata(address(usdc)).decimals());\\n\\n        batchingManager.depositToken(address(usdc), amount, usdgAmount);\\n    }\\n\\n    /*\\n        AAVE HELPERS\\n    */\\n\\n    function _executeBorrow(address token, uint256 amount) internal {\\n        pool.borrow(token, amount, VARIABLE_INTEREST_MODE, 0, address(this));\\n    }\\n\\n    function _executeRepay(address token, uint256 amount) internal {\\n        pool.repay(token, amount, VARIABLE_INTEREST_MODE, address(this));\\n    }\\n\\n    function _executeSupply(address token, uint256 amount) internal {\\n        pool.supply(token, amount, address(this), 0);\\n    }\\n\\n    function _executeWithdraw(\\n        address token,\\n        uint256 amount,\\n        address receiver\\n    ) internal {\\n        pool.withdraw(token, amount, receiver);\\n    }\\n\\n    function _getLiquidationThreshold(address asset) internal view returns (uint256) {\\n        DataTypes.ReserveConfigurationMap memory config = pool.getConfiguration(asset);\\n        (\\n            ,\\n            /** uint256 ltv **/\\n            uint256 liquidationThreshold, /** uint256 liquidationBonus */ /** uint256 decimals */ /** uint256 reserveFactor */\\n            ,\\n            ,\\n            ,\\n\\n        ) = config.getParams();\\n\\n        return liquidationThreshold;\\n    }\\n\\n    /*\\n        BALANCER HELPERS\\n    */\\n\\n    function _executeOperationToken(\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 usdcAmount,\\n        uint256 premium,\\n        bool repayDebt\\n    ) internal {\\n        if (!repayDebt) {\\n            // console.log('swapTokenToUSD');\\n            uint256 amountWithPremium = tokenAmount + premium;\\n            // console.log('amountWithPremium', amountWithPremium, token);\\n            uint256 usdcReceived = _swapToken(token, tokenAmount, usdcAmount);\\n            _executeSupply(address(usdc), usdcReceived);\\n            _executeBorrow(token, amountWithPremium);\\n            IERC20(token).transfer(address(balancerVault), amountWithPremium);\\n            dnUsdcDeposited += usdcReceived.toInt256();\\n        } else {\\n            // console.log('swapUSDCToToken');\\n            (uint256 usdcPaid, uint256 tokensReceived) = _swapUSDC(token, tokenAmount, usdcAmount);\\n            uint256 amountWithPremium = usdcPaid + premium;\\n            // console.log('amountWithPremium', amountWithPremium, token);\\n            dnUsdcDeposited -= amountWithPremium.toInt256();\\n            _executeRepay(token, tokensReceived);\\n            //withdraws to balancerVault\\n            _executeWithdraw(address(usdc), amountWithPremium, address(this));\\n            usdc.transfer(address(balancerVault), usdcAmount + premium);\\n        }\\n    }\\n\\n    function _executeFlashloan(\\n        address[] memory assets,\\n        uint256[] memory amounts,\\n        uint256 _btcTokenAmount,\\n        uint256 _btcUsdcAmount,\\n        uint256 _ethTokenAmount,\\n        uint256 _ethUsdcAmount,\\n        bool _repayDebtBtc,\\n        bool _repayDebtEth\\n    ) internal {\\n        if (assets.length != amounts.length) revert ArraysLengthMismatch();\\n\\n        _hasFlashloaned = true;\\n\\n        balancerVault.flashLoan(\\n            address(this),\\n            assets,\\n            amounts,\\n            abi.encode(_btcTokenAmount, _btcUsdcAmount, _ethTokenAmount, _ethUsdcAmount, _repayDebtBtc, _repayDebtEth)\\n        );\\n\\n        _hasFlashloaned = false;\\n    }\\n\\n    /* ##################################################################\\n                            INTERNAL VIEW FUNCTIONS\\n    ################################################################## */\\n\\n    /* solhint-disable not-rely-on-time */\\n    function _isValidRebalanceTime() internal view returns (bool) {\\n        return (block.timestamp - lastRebalanceTS) > rebalanceTimeThreshold;\\n    }\\n\\n    function _isValidRebalanceDeviation() internal view returns (bool) {\\n        (uint256 currentBtcBorrow, uint256 currentEthBorrow) = _getCurrentBorrows();\\n\\n        (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) = _getOptimalBorrows(totalAssets());\\n\\n        return\\n            !(_isWithinAllowedDelta(optimalBtcBorrow, currentBtcBorrow) &&\\n                _isWithinAllowedDelta(optimalEthBorrow, currentEthBorrow));\\n    }\\n\\n    function _getPrice(IERC20Metadata token) internal view returns (uint256) {\\n        uint256 decimals = token.decimals();\\n        uint256 price = oracle.getAssetPrice(address(token));\\n\\n        // @dev aave returns from same source as chainlink (which is 8 decimals)\\n        return price.mulDiv(PRICE_PRECISION, 10**(decimals + 2));\\n    }\\n\\n    // @dev returns price in terms of usdc\\n    function _getPrice(IERC20Metadata token, bool isUsdc) internal view returns (uint256 scaledPrice) {\\n        uint256 decimals = token.decimals();\\n        uint256 price = oracle.getAssetPrice(address(token));\\n\\n        // @dev aave returns from same source as chainlink (which is 8 decimals)\\n        uint256 quotePrice;\\n\\n        isUsdc ? quotePrice = oracle.getAssetPrice(address(usdc)) : quotePrice = oracle.getAssetPrice(address(usdt));\\n\\n        scaledPrice = price.mulDiv(PRICE_PRECISION, quotePrice * 10**(decimals - 6));\\n    }\\n\\n    /// @dev returns the borrow value in USDC\\n    function _getBorrowValue(uint256 btcAmount, uint256 ethAmount) internal view returns (uint256 borrowValue) {\\n        borrowValue =\\n            btcAmount.mulDiv(_getPrice(wbtc), PRICE_PRECISION) +\\n            ethAmount.mulDiv(_getPrice(weth), PRICE_PRECISION);\\n        borrowValue = borrowValue.mulDiv(PRICE_PRECISION, _getPrice(usdc));\\n    }\\n\\n    function _flashloanAmounts(\\n        address token,\\n        uint256 optimalBorrow,\\n        uint256 currentBorrow\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 tokenAmount,\\n            uint256 usdcAmount,\\n            bool repayDebt\\n        )\\n    {\\n        // check the delta between optimal position and actual position in token terms\\n        // take that position using swap\\n        // To Increase\\n        if (optimalBorrow > currentBorrow) {\\n            tokenAmount = optimalBorrow - currentBorrow;\\n            // To swap with the amount in specified hence usdcAmount should be the min amount out\\n            usdcAmount = _getPrice(IERC20Metadata(token), true).mulDiv(\\n                tokenAmount * (MAX_BPS - usdcRedeemSlippage),\\n                MAX_BPS * PRICE_PRECISION\\n            );\\n\\n            repayDebt = false;\\n            // Flash loan ETH/BTC from AAVE\\n            // In callback: Sell loan for USDC and repay debt\\n        } else {\\n            // To Decrease\\n            tokenAmount = (currentBorrow - optimalBorrow);\\n            // To swap with amount out specified hence usdcAmount should be the max amount in\\n            usdcAmount = _getPrice(IERC20Metadata(token), true).mulDiv(\\n                tokenAmount * (MAX_BPS + usdcRedeemSlippage),\\n                MAX_BPS * PRICE_PRECISION\\n            );\\n            repayDebt = true;\\n            // In callback: Swap to ETH/BTC and deposit to AAVE\\n            // Send back some aUSDC to LB vault\\n        }\\n    }\\n\\n    function _getCurrentBorrows() internal view returns (uint256 currentBtcBorrow, uint256 currentEthBorrow) {\\n        return (vWbtc.balanceOf(address(this)), vWeth.balanceOf(address(this)));\\n    }\\n\\n    function _getOptimalBorrows(uint256 glpDeposited)\\n        internal\\n        view\\n        returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow)\\n    {\\n        optimalBtcBorrow = _getTokenReservesInGlp(address(wbtc), glpDeposited);\\n        optimalEthBorrow = _getTokenReservesInGlp(address(weth), glpDeposited);\\n    }\\n\\n    function _getTokenReservesInGlp(address token, uint256 glpDeposited) internal view returns (uint256) {\\n        uint256 targetWeight = gmxVault.tokenWeights(token);\\n        uint256 totalTokenWeights = gmxVault.totalTokenWeights();\\n\\n        uint256 glpPrice = getPrice();\\n        uint256 tokenPrice = _getPrice(IERC20Metadata(token));\\n\\n        return targetWeight.mulDiv(glpDeposited * glpPrice, totalTokenWeights * tokenPrice);\\n    }\\n\\n    function _isWithinAllowedDelta(uint256 optimalBorrow, uint256 currentBorrow) internal view returns (bool) {\\n        // console.log('optimalBorrow', optimalBorrow);\\n        // console.log('currentBorrow', currentBorrow);\\n\\n        uint256 diff = optimalBorrow > currentBorrow ? optimalBorrow - currentBorrow : currentBorrow - optimalBorrow;\\n        // console.log('diff', diff);\\n        // console.log('RHS', uint256(rebalanceDeltaThreshold).mulDiv(currentBorrow, MAX_BPS));\\n        return diff < uint256(rebalanceDeltaThreshold).mulDiv(currentBorrow, MAX_BPS);\\n    }\\n}\\n\",\"keccak256\":\"0x640f2cc133933c92d52c508a39dc55b9e596dde3a264a9fe7b24191f5c248524\",\"license\":\"MIT\"},\"contracts/vaults/DnGmxJuniorVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport { IPool } from '@aave/core-v3/contracts/interfaces/IPool.sol';\\nimport { IAToken } from '@aave/core-v3/contracts/interfaces/IAToken.sol';\\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\\nimport { IVariableDebtToken } from '@aave/core-v3/contracts/interfaces/IVariableDebtToken.sol';\\nimport { IPoolAddressesProvider } from '@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol';\\nimport { IRewardsController } from '@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol';\\nimport { IVault } from '../interfaces/gmx/IVault.sol';\\nimport { IGlpManager } from '../interfaces/gmx/IGlpManager.sol';\\nimport { IExchange } from '../interfaces/curve/IExchange.sol';\\nimport { IStableSwap } from '../interfaces/curve/IStableSwap.sol';\\nimport { IRewardRouterV2 } from '../interfaces/gmx/IRewardRouterV2.sol';\\nimport { IDnGmxSeniorVault } from '../interfaces/IDnGmxSeniorVault.sol';\\nimport { IBalancerVault } from '../interfaces/balancer/IBalancerVault.sol';\\nimport { IDnGmxBatchingManager } from '../interfaces/IDnGmxBatchingManager.sol';\\n\\ninterface IDebtToken is IVariableDebtToken {\\n    function balanceOf(address user) external view returns (uint256);\\n}\\n\\ncontract DnGmxJuniorVaultStorage {\\n    ///@dev constants\\n\\n    uint16 constant MAX_BPS = 10_000;\\n\\n    uint256 constant USDG_DECIMALS = 18;\\n    uint256 constant WETH_DECIMALS = 18;\\n\\n    uint256 constant PRICE_PRECISION = 10e30;\\n    uint256 constant VARIABLE_INTEREST_MODE = 2;\\n\\n    ///@dev common storage\\n\\n    /* solhint-disable var-name-mixedcase */\\n    uint256 FEE = 1000;\\n\\n    address keeper;\\n    IDnGmxSeniorVault dnGmxSeniorVault;\\n    address feeRecipient;\\n    uint256 withdrawFeeBps;\\n    uint256 protocolFee;\\n    uint256 seniorVaultWethRewards;\\n    uint256 seniorVaultWethConversionThreshold;\\n    uint256 wethThreshold;\\n    uint256 slippageThreshold;\\n\\n    uint256 depositCap;\\n    int256 internal dnUsdcDeposited;\\n\\n    bool internal _hasFlashloaned;\\n\\n    uint64 lastRebalanceTS;\\n    uint32 rebalanceTimeThreshold;\\n    uint16 rebalanceDeltaThreshold;\\n\\n    ///@dev storage for hedge strategy\\n\\n    IPool internal pool;\\n    IPriceOracle internal oracle;\\n    IPoolAddressesProvider internal poolAddressProvider;\\n\\n    IAToken internal aUsdc;\\n    IDebtToken internal vWbtc;\\n    IDebtToken internal vWeth;\\n\\n    ISwapRouter internal swapRouter;\\n    IBalancerVault internal balancerVault;\\n\\n    uint256 internal targetHealthFactor;\\n    IRewardsController internal aaveRewardsController;\\n\\n    ///@dev storage for yield strategy\\n\\n    uint16 usdcRedeemSlippage;\\n    uint240 usdcConversionThreshold;\\n\\n    IERC20 internal fsGlp;\\n\\n    IERC20Metadata internal glp;\\n    IERC20Metadata internal usdc;\\n    IERC20Metadata internal usdt;\\n    IERC20Metadata internal weth;\\n    IERC20Metadata internal wbtc;\\n\\n    IVault internal gmxVault;\\n    IGlpManager internal glpManager;\\n    IRewardRouterV2 internal rewardRouter;\\n    IDnGmxBatchingManager internal batchingManager;\\n\\n    IStableSwap internal tricryptoPool;\\n\\n    /// @dev structs used to initialize\\n\\n    struct Tokens {\\n        IERC20Metadata weth;\\n        IERC20Metadata wbtc;\\n        IERC20Metadata sGlp;\\n        IERC20Metadata usdc;\\n        IERC20Metadata usdt;\\n    }\\n\\n    struct YieldStrategyParams {\\n        uint16 usdcRedeemSlippage;\\n        uint240 usdcConversionThreshold;\\n        uint256 seniorVaultWethConversionThreshold;\\n    }\\n\\n    struct HedgeStrategyParams {\\n        IBalancerVault vault;\\n        ISwapRouter swapRouter;\\n        uint256 targetHealthFactor;\\n        IRewardsController aaveRewardsController;\\n    }\\n\\n    struct RebalanceStrategyParams {\\n        uint32 rebalanceTimeThreshold;\\n        uint16 rebalanceDeltaThreshold;\\n    }\\n}\\n\",\"keccak256\":\"0x3ccb4836793717a93d30ea151fa1cb350d80ff04ac9e305468ebc275f21e18ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526103e860985534801561001657600080fd5b50615f8480620000276000396000f3fe608060405234801561001057600080fd5b506004361061032b5760003560e01c80638da5cb5b116101b2578063bf9571f1116100f9578063db021040116100a2578063ef8b30f71161007c578063ef8b30f714610676578063f04f270714610689578063f2fde38b1461069c578063f3a897c0146106af57600080fd5b8063db02104014610617578063dd62ed3e1461062a578063e74b981b1461066357600080fd5b8063ce96cb77116100d3578063ce96cb77146105e9578063d627b530146105fc578063d905777e1461060457600080fd5b8063bf9571f1146105ce578063c63d75b614610423578063c6e6f592146105d657600080fd5b8063b3d7f6b91161015b578063ba08765211610135578063ba08765214610595578063ba9e9a66146105a8578063bb594433146105bb57600080fd5b8063b3d7f6b914610558578063b460af941461056b578063b6ac642a1461058257600080fd5b806395e2da7c1161018c57806395e2da7c1461052a578063a457c2d714610532578063a9059cbb1461054557600080fd5b80638da5cb5b146104fe57806394bf804d1461050f57806395d89b411461052257600080fd5b8063402d267d11610276578063748747e61161021f57806386651203116101f957806386651203146104d05780638b229ba6146104e35780638d315d7b146104f657600080fd5b8063748747e6146104a2578063757f9396146104b55780637d7c2a1c146104c857600080fd5b80636e553f65116102505780636e553f651461045e57806370a0823114610471578063715018a61461049a57600080fd5b8063402d267d146104235780634cdad50614610438578063554070bc1461044b57600080fd5b806318160ddd116102d857806338d52e0f116102b257806338d52e0f146103dd57806339509351146104085780633d672a451461041b57600080fd5b806318160ddd146103b357806323b872dd146103bb578063313ce567146103ce57600080fd5b8063095ea7b311610309578063095ea7b3146103735780630a28a47714610396578063138cc18f146103a957600080fd5b806301e1d1141461033057806306fdde031461034b57806307a2d13a14610360575b600080fd5b6103386106c2565b6040519081526020015b60405180910390f35b6103536107ab565b60405161034291906152d7565b61033861036e3660046152ea565b61083d565b610386610381366004615318565b610872565b6040519015158152602001610342565b6103386103a43660046152ea565b61088c565b6103b16108b4565b005b603554610338565b6103866103c9366004615344565b610d26565b60405160128152602001610342565b6065546103f0906001600160a01b031681565b6040516001600160a01b039091168152602001610342565b610386610416366004615318565b610d4a565b610338610d89565b610338610431366004615385565b5060001990565b6103386104463660046152ea565b610ea3565b6103386104593660046152ea565b610eae565b61033861046c3660046153a2565b610ecf565b61033861047f366004615385565b6001600160a01b031660009081526033602052604090205490565b6103b1610ee3565b6103b16104b0366004615385565b610ef7565b6103b16104c33660046153d2565b610f54565b6103b1610ff4565b6103b16104de3660046152ea565b6110ee565b6103b16104f136600461543d565b61112b565b610338611865565b6066546001600160a01b03166103f0565b61033861051d3660046153a2565b6118bf565b6103536118d3565b6103386118e2565b610386610540366004615318565b611964565b610386610553366004615318565b6119f6565b6103386105663660046152ea565b611a04565b610338610579366004615512565b60009392505050565b6103b16105903660046152ea565b611a2b565b6103386105a3366004615512565b611a68565b6103b16105b6366004615385565b611ba7565b6103b16105c9366004615554565b611bfd565b6103b1611cdd565b6103386105e43660046152ea565b6123cb565b6103386105f7366004615385565b6123f3565b610386612415565b610338610612366004615385565b61242d565b6103b1610625366004615385565b61244b565b610338610638366004615566565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6103b1610671366004615385565b6124a1565b6103386106843660046152ea565b612530565b6103b1610697366004615704565b61253b565b6103b16106aa366004615385565b612756565b6103b16106bd36600461580f565b6127cc565b60b95460408051635841507560e01b815290516000926001600160a01b03169163584150759160048083019260209291908290030181865afa15801561070c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107309190615821565b60b0546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c9190615821565b6107a69190615850565b905090565b6060603680546107ba90615868565b80601f01602080910402602001604051908101604052809291908181526020018280546107e690615868565b80156108335780601f1061080857610100808354040283529160200191610833565b820191906000526020600020905b81548152906001019060200180831161081657829003601f168201915b5050505050905090565b60008061084960355490565b905080156108695761086461085c6106c2565b84908361289d565b61086b565b825b9392505050565b6000336108808185856128bc565b60019150505b92915050565b60008061089860355490565b9050801561086957610864816108ac6106c2565b8591906129e0565b60b85460405163185b800160e11b815260006004820181905260248201819052600160448301819052606483018190526084830181905260a483015260c48201526001600160a01b03909116906330b700029060e401600060405180830381600087803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b5050609e54609d5460b4546040516370a0823160e01b81523060048201526000955092935090916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190615821565b6109bf919061589d565b6109c9919061589d565b905060a054811115610d2357609854600090612710906109e990846158b4565b6109f391906158e9565b905080609d6000828254610a079190615850565b9091555060009050610a19828461589d565b90506000610aaf826c0c9f2c9cd04674edea40000000609a60009054906101000a90046001600160a01b03166001600160a01b031663e3696edd6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa89190615821565b9190612a0e565b90506000610abd828461589d565b9050600082609e54610acf9190615850565b60b65460b4546040516340d3096b60e11b81526001600160a01b0391821660048201529293506000929116906381a612d690602401602060405180830381865afa158015610b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b459190615821565b90506000610b8a60a15461271061ffff16610b60919061589d565b610b6a90846158b4565b610b8261271068fc6f7c40458122964d601f1b6158b4565b869190612a0e565b9050610baf610b9b6012600a6159e1565b610ba76012600a6159e1565b839190612a0e565b60b95460b454604051634ce3696f60e11b81526001600160a01b039182166004820152602481018890526044810184905292935016906399c6d2de906064016020604051808303816000875af1158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c319190615821565b50609f54831115610cdc5760ae54600090610c9a90610c5d90600160a01b900461ffff166127106159ed565b610c6b9061ffff16866158b4565b610c8368fc6f7c40458122964d601f1b6127106158b4565b60b454610aa8906001600160a01b03166001612ac1565b60b454909150600090610cb7906001600160a01b03168684612ccf565b60b254909150610cd0906001600160a01b031682612db6565b50506000609e55610ce2565b609e8390555b60408051878152602081018690527ffa5fc4e614ff1acb4e5e98dccf2a504cb9fb51a469dce5a5eca07ff5491a677b910160405180910390a1505050505050505b50565b600033610d34858285612e2e565b610d3f858585612ec0565b506001949350505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906108809082908690610d84908790615850565b6128bc565b60b75460405163019c8a3b60e11b81526000600482018190529182916001600160a01b0390911690630339147690602401602060405180830381865afa158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb9190615821565b9050600060b160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e769190615821565b9050610e9c600160801b610e948369d3c21bcecceda10000006158b4565b849190612a0e565b9250505090565b60006108868261083d565b6000610886610ebb61308e565b839068fc6f7c40458122964d601f1b612a0e565b6000610ed96131a1565b61086b83836131d4565b610eeb61328f565b610ef560006132e9565b565b610eff61328f565b609980546001600160a01b0319166001600160a01b0383169081179091556040519081527f0425bcd291db1d48816f2a98edc7ecaf6dd5c64b973d9e4b3b6b750763dc6c2e906020015b60405180910390a150565b610f5c61328f565b610f696020820182615385565b60ac80546001600160a01b0319166001600160a01b0392909216919091179055610f996040820160208301615385565b60ab80546001600160a01b0319166001600160a01b0392909216919091179055604081013560ad55610fd16080820160608301615385565b60ae80546001600160a01b0319166001600160a01b039290921691909117905550565b6099546001600160a01b03163314611039576099546040516329b7946d60e01b81523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b611041612415565b61105e5760405163a039e79960e01b815260040160405180910390fd5b6110666108b4565b60008061107161333b565b9150915060006110818383613420565b905061108c8161349d565b61109e83836110996106c2565b613513565b60a4805468ffffffffffffffff0019166101004267ffffffffffffffff16021790556040517fc741dbaad15a4f298fe8d80943fa8e005e7bcb2f5b0a0c8dec1fc35be457f14690600090a1505050565b6110f661328f565b60a28190556040518181527f333b26cca69716ad4680ddb07663f5bfb4f06045671f336af9a83690a3ae00f990602001610f49565b600054610100900460ff161580801561114b5750600054600160ff909116105b806111655750303b158015611165575060005460ff166001145b6111c85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401611030565b6000805460ff1916600117905580156111eb576000805461ff0019166101001790555b6111f36136b8565b6112766112066060850160408601615385565b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c90819084018382808284376000920191909152506136e792505050565b6112836020840184615385565b60b480546001600160a01b0319166001600160a01b03929092169190911790556112b36040840160208501615385565b60b580546001600160a01b0319166001600160a01b03929092169190911790556112e36080840160608501615385565b60b280546001600160a01b0319166001600160a01b039290921691909117905561131360a0840160808501615385565b60b380546001600160a01b03199081166001600160a01b039384161790915560ab8054821689841617905560b88054821688841617905560a7805490911684831617905560655460408051633c5103f760e11b8152905191909216916378a207ee9160048281019260209291908290030181865afa158015611399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bd9190615a1b565b60b180546001600160a01b0319166001600160a01b0392831617905560655460408051633e9b6c6f60e21b81529051919092169163fa6db1bc9160048083019260209291908290030181865afa15801561141b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143f9190615a1b565b60b780546001600160a01b0319166001600160a01b039283161790556065546040805162af394d60e81b81529051919092169163af394d009160048083019260209291908290030181865afa15801561149c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c09190615a1b565b60b080546001600160a01b0319166001600160a01b0392831617905560b7546040805163fbfa77cf60e01b81529051919092169163fbfa77cf9160048083019260209291908290030181865afa15801561151e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115429190615a1b565b60b680546001600160a01b03199081166001600160a01b039384161790915560ba805490911686831617905560a7546040805163026b1d5f60e01b81529051919092169163026b1d5f9160048083019260209291908290030181865afa1580156115b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d49190615a1b565b60a580546001600160a01b0319166001600160a01b0392831617905560a75460408051631f94a27560e31b81529051919092169163fca513a89160048083019260209291908290030181865afa158015611632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116569190615a1b565b60a680546001600160a01b0319166001600160a01b0392831617905560a55460b2546040516335ea6a7560e01b815290831660048201529116906335ea6a75906024016101e060405180830381865afa1580156116b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116db9190615aca565b610100015160a880546001600160a01b0319166001600160a01b0392831617905560a55460b5546040516335ea6a7560e01b815290831660048201529116906335ea6a75906024016101e060405180830381865afa158015611741573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117659190615aca565b610140015160a980546001600160a01b0319166001600160a01b0392831617905560a55460b4546040516335ea6a7560e01b815290831660048201529116906335ea6a75906024016101e060405180830381865afa1580156117cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ef9190615aca565b610140015160aa80546001600160a01b0319166001600160a01b039092169190911790558015611859576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b600080600061187261333b565b9150915060006118828383613420565b905061188d81613715565b60a3546118a361189e6104596106c2565b613715565b6118ad9190615bed565b6118b79190615c2e565b935050505090565b60006118c96131a1565b61086b8383613759565b6060603780546107ba90615868565b60a35460a8546040516370a0823160e01b81523060048201526000929161195a916001600160a01b03909116906370a08231906024015b602060405180830381865afa158015611936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189e9190615821565b6107a69190615c2e565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190838110156119e95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401611030565b610d3f82868684036128bc565b600033610880818585612ec0565b600080611a1060355490565b9050801561086957610864611a236106c2565b8490836129e0565b611a3361328f565b609c8190556040518181527f9a1f74aeeb037eb3d45b22a56376dadd6ba6ded25ec3727e520415f6c76768a990602001610f49565b6000611a726131a1565b336001600160a01b03831614611ac0576001600160a01b03821660009081526034602090815260408083203384529091529020546000198114611abe57611abe8333610d84888561589d565b505b611ac984610ea3565b905080611b065760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b6044820152606401611030565b609c54600090611b2690611b1c9061271061589d565b8390612710612a0e565b9050611b338186866137da565b611b3d8386613808565b60408051828152602081018790526001600160a01b03808616929087169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4606554611b9f906001600160a01b03168583613956565b509392505050565b611baf61328f565b60b980546001600160a01b0319166001600160a01b0383169081179091556040519081527f9d2850ff561076853ce9dd9bf763580841b1e3a5ec11bc4d54736f793eeeb70190602001610f49565b611c0561328f565b611c126020820182615c6d565b60ae805461ffff92909216600160a01b0261ffff60a01b19909216919091179055611c436040820160208301615c8a565b60af80547fffff000000000000000000000000000000000000000000000000000000000000166001600160f01b0392909216919091179055604081018035609f81905590611c949060208401615c8a565b6001600160f01b0316611caa6020840184615c6d565b61ffff167f6f2f774175bcaf77f80c8a859de1a0c38c9e9e0367cff60dea1234233f14654d60405160405180910390a450565b611ce561328f565b60a55460ab5460ba5460b55460405163095ea7b360e01b81526001600160a01b039485166004820181905260001960248301529493841693928316929091169063095ea7b3906044016020604051808303816000875af1158015611d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d719190615cc3565b5060b55460405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015611dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dea9190615cc3565b5060b45460405163095ea7b360e01b81526001600160a01b03858116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015611e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e639190615cc3565b5060b45460405163095ea7b360e01b81526001600160a01b03848116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015611eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edc9190615cc3565b5060b45460b95460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015611f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f579190615cc3565b5060b25460405163095ea7b360e01b81526001600160a01b03858116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015611fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd09190615cc3565b5060b25460405163095ea7b360e01b81526001600160a01b03848116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120499190615cc3565b5060b25460b95460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190615cc3565b5060b35460405163095ea7b360e01b81526001600160a01b038381166004830152600060248301529091169063095ea7b3906044016020604051808303816000875af1158015612118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213c9190615cc3565b5060b35460405163095ea7b360e01b81526001600160a01b038481166004830152600060248301529091169063095ea7b3906044016020604051808303816000875af1158015612190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b49190615cc3565b5060b35460405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222d9190615cc3565b5060b35460405163095ea7b360e01b81526001600160a01b03848116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a69190615cc3565b5060a854609a5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156122fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123219190615cc3565b5060655460b75460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015612378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239c9190615cc3565b506040517fba5bb3f899c7a3edcc9ff9d46c4e08449c6a608b6f8254132bc5af4898645cbc90600090a1505050565b6000806123d760355490565b9050801561086957610864816123eb6106c2565b85919061289d565b6001600160a01b0381166000908152603360205260408120546108869061083d565b600061241f6139b9565b806107a657506107a66139ec565b6001600160a01b038116600090815260336020526040812054610886565b61245361328f565b609a80546001600160a01b0319166001600160a01b0383169081179091556040519081527fb6c62db913ccc78e8f2bb453c48c439dc86445188f333c52fe0638a0e3ea1b1390602001610f49565b6124a961328f565b609b546001600160a01b038281169116146124de57609b80546001600160a01b0319166001600160a01b0383161790556124f7565b604051630ed1b8b360e31b815260040160405180910390fd5b6040516001600160a01b03821681527f7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc290602001610f49565b6000610886826123cb565b60ac546001600160a01b031633146125665760405163f4a8e62160e01b815260040160405180910390fd5b60a45460ff1661258957604051637869c16160e11b815260040160405180910390fd5b600080600080600080868060200190518101906125a69190615cde565b9550955095509550955095506000808380156125bf5750825b1561263c5761260d888c6000815181106125db576125db615d36565b60200260200101518c6000815181106125f6576125f6615d36565b6020026020010151612a0e9092919063ffffffff16565b9150818a60008151811061262357612623615d36565b6020026020010151612635919061589d565b9050612716565b60008461267c5760b5548d516001600160a01b03909116908e9060009061266557612665615d36565b60200260200101516001600160a01b0316146126b1565b60b2548d516001600160a01b03909116908e9060009061269e5761269e615d36565b60200260200101516001600160a01b0316145b156126ba575060015b8a816126c75760016126ca565b60005b60ff16815181106126dd576126dd615d36565b602002602001015192508a816126f45760006126f7565b60015b60ff168151811061270a5761270a615d36565b60200260200101519150505b60b55461272f906001600160a01b031689898588613a39565b60b454612748906001600160a01b031687878487613a39565b505050505050505050505050565b61275e61328f565b6001600160a01b0381166127c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611030565b610d23816132e9565b6127d461328f565b6127e16020820182615d4c565b60a4805463ffffffff92909216600160481b026cffffffff0000000000000000001990921691909117905561281c6040820160208301615c6d565b60a4805461ffff92909216600160681b026effff00000000000000000000000000199092169190911790556128576040820160208301615c6d565b61ffff166128686020830183615d4c565b63ffffffff167fb3afb3dd9d92356112ae0253f1ee685bfd20d80cfe8c50433c64dcf5ef9dcba260405160405180910390a350565b8282028115158415858304851417166128b557600080fd5b0492915050565b6001600160a01b03831661291e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401611030565b6001600160a01b03821661297f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401611030565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b8282028115158415858304851417166129f857600080fd5b6001826001830304018115150290509392505050565b600080806000198587098587029250828110838203039150508060001415612a485760008411612a3d57600080fd5b50829004905061086b565b808411612a5457600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b269190615d72565b60a65460405163b3596f0760e01b81526001600160a01b03878116600483015260ff9390931693506000929091169063b3596f0790602401602060405180830381865afa158015612b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9f9190615821565b9050600084612c205760a65460b35460405163b3596f0760e01b81526001600160a01b03918216600482015291169063b3596f0790602401602060405180830381865afa158015612bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c189190615821565b905080612c94565b60a65460b25460405163b3596f0760e01b81526001600160a01b03918216600482015291169063b3596f0790602401602060405180830381865afa158015612c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c909190615821565b9050805b50612cc568fc6f7c40458122964d601f1b612cb060068661589d565b612cbb90600a6159e1565b610e9490846158b4565b9695505050505050565b60b5546000906001600160a01b0385811691161415612cf957612cf28383613c0f565b905061086b565b60408051610100810182526001600160a01b03808716825260b254811660208301526101f48284015230606083015242608083015260a0820186905260c08201859052600060e083015260ab54925163414bf38960e01b81529192169063414bf38990612d6a908490600401615d95565b6020604051808303816000875af1158015612d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dad9190615821565b95945050505050565b60a55460405163617ba03760e01b81526001600160a01b03848116600483015260248201849052306044830152600060648301529091169063617ba037906084015b600060405180830381600087803b158015612e1257600080fd5b505af1158015612e26573d6000803e3d6000fd5b505050505050565b6001600160a01b038381166000908152603460209081526040808320938616835292905220546000198114612eba5781811015612ead5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401611030565b612eba84848484036128bc565b50505050565b6001600160a01b038316612f245760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401611030565b6001600160a01b038216612f865760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401611030565b6001600160a01b03831660009081526033602052604090205481811015612ffe5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401611030565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290613035908490615850565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161308191815260200190565b60405180910390a3612eba565b60b75460405163019c8a3b60e11b81526000600482018190529182916001600160a01b0390911690630339147690602401602060405180830381865afa1580156130dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131009190615821565b9050600060b160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317b9190615821565b9050610e9c68fc6f7c40458122964d601f1b610e948369d3c21bcecceda10000006158b4565b6131a96108b4565b6000806131b461333b565b9150915060006131c48383613420565b90506131cf8161349d565b505050565b60006131df83612530565b90508061321c5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b6044820152606401611030565b606554613234906001600160a01b0316333086613d02565b61323e8282613d3a565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610886838284613e19565b6066546001600160a01b03163314610ef55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611030565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60a9546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015613388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ac9190615821565b60aa546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156133f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134189190615821565b915091509091565b60b45460009061343c90610ebb906001600160a01b0316613e5f565b60b55461346990613455906001600160a01b0316613e5f565b859068fc6f7c40458122964d601f1b612a0e565b6134739190615850565b60b25490915061086b9068fc6f7c40458122964d601f1b90610ba7906001600160a01b0316613e5f565b60006134a882613715565b905060a3548113156134e9576134cd61189e60a354836134c89190615c2e565b613f6d565b60a360008282546134de9190615bed565b9091555061350f9050565b60a35481121561350f576135098160a3546135049190615c2e565b614103565b60a38190555b5050565b60008061351f836142e2565b91509150600061352f8383613420565b60b25490915060009061354a906001600160a01b031661431d565b9050600061356183838460ad54610aa8919061589d565b60a35460a8546040516370a0823160e01b815230600482015292935060009261359c916001600160a01b0316906370a0823190602401611919565b6135a69190615c2e565b90508082111561362c57609a546001600160a01b031663c5ebeaec6135cb838561589d565b6040518263ffffffff1660e01b81526004016135e991815260200190565b600060405180830381600087803b15801561360357600080fd5b505af1158015613617573d6000803e3d6000fd5b50505050613627868a878b61439e565b6136ad565b613638868a878b61439e565b6136418461349d565b609a546001600160a01b031663371fd8e661365c848461589d565b6040518263ffffffff1660e01b815260040161367a91815260200190565b600060405180830381600087803b15801561369457600080fd5b505af11580156136a8573d6000803e3d6000fd5b505050505b505050505050505050565b600054610100900460ff166136df5760405162461bcd60e51b815260040161103090615e03565b610ef5614766565b6136f18282614796565b5050606580546001600160a01b0319166001600160a01b0392909216919091179055565b6000600160ff1b82106137555760405162461bcd60e51b81526020600482015260086024820152674f766572666c6f7760c01b6044820152606401611030565b5090565b600061376483611a04565b60655490915061377f906001600160a01b0316333084613d02565b6137898284613d3a565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610886818484613e19565b6000806137e561333b565b915091506138018282876137f76106c2565b611099919061589d565b5050505050565b6001600160a01b0382166138685760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401611030565b6001600160a01b038216600090815260336020526040902054818110156138dc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401611030565b6001600160a01b038316600090815260336020526040812083830390556035805484929061390b90849061589d565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b0383166024820152604481018290526131cf90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526147c7565b60a454600090600160481b810463ffffffff16906139e690610100900467ffffffffffffffff164261589d565b11905090565b60008060006139f961333b565b91509150600080613a10613a0b6106c2565b6142e2565b91509150613a1e8285614899565b8015613a2f5750613a2f8184614899565b1594505050505090565b80613b1b576000613a4a8386615850565b90506000613a59878787612ccf565b60b254909150613a72906001600160a01b031682612db6565b613a7c87836148e2565b60ac5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529088169063a9059cbb906044016020604051808303816000875af1158015613acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af39190615cc3565b50613afd81613715565b60a36000828254613b0e9190615bed565b9091555061380192505050565b600080613b2987878761492f565b90925090506000613b3a8584615850565b9050613b4581613715565b60a36000828254613b569190615c2e565b90915550613b6690508883614d0f565b60b254613b7d906001600160a01b03168230614d93565b60b25460ac546001600160a01b039182169163a9059cbb9116613ba0888a615850565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015613beb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ad9190615cc3565b60ba5460405163394747c560e01b815260016004820152600060248201819052604482018590526064820181905260848201819052916001600160a01b03169063394747c59060a401600060405180830381600087803b158015613c7257600080fd5b505af1158015613c86573d6000803e3d6000fd5b505060b3546040516370a0823160e01b815230600482015261086b93506001600160a01b03909116915081906370a0823190602401602060405180830381865afa158015613cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cfc9190615821565b84612ccf565b6040516001600160a01b0380851660248301528316604482015260648101829052612eba9085906323b872dd60e01b90608401613982565b6001600160a01b038216613d905760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401611030565b8060356000828254613da29190615850565b90915550506001600160a01b03821660009081526033602052604081208054839290613dcf908490615850565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60a254613e246106c2565b1115613e43576040516324d758c360e21b815260040160405180910390fd5b600080613e4e61333b565b9150915061380182826110996106c2565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ec49190615d72565b60a65460405163b3596f0760e01b81526001600160a01b03868116600483015260ff9390931693506000929091169063b3596f0790602401602060405180830381865afa158015613f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3d9190615821565b9050613f6568fc6f7c40458122964d601f1b613f5a846002615850565b610ba790600a6159e1565b949350505050565b60af546000906001600160f01b0316821015613f8b57506000919050565b6000613fad68fc6f7c40458122964d601f1b613fa561308e565b859190612a0e565b60b85460b25460ae549293506001600160a01b0391821692630f3aa55492909116908490613ffa90613fec90600160a01b900461ffff166127106159ed565b889061ffff16612710612a0e565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915260448201523060648201526084016020604051808303816000875af1158015614053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140779190615821565b5060b2546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156140c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e49190615821565b60b2549092506140fd906001600160a01b031683612db6565b50919050565b60b25461411a906001600160a01b03168230614d93565b60b65460b2546040516340d3096b60e11b81526001600160a01b03918216600482015260009291909116906381a612d690602401602060405180830381865afa15801561416b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061418f9190615821565b905060006141cc60a15461271061ffff166141aa919061589d565b6141b490846158b4565b613fa561271068fc6f7c40458122964d601f1b6158b4565b905061425f6141dd6012600a6159e1565b60b260009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015614230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142549190615d72565b610ba790600a615e4e565b60b95460b254604051634ce3696f60e11b81526001600160a01b039182166004820152602481018790526044810184905292935016906399c6d2de906064015b6020604051808303816000875af11580156142be573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eba9190615821565b60b55460009081906142fd906001600160a01b031684614dd4565b60b454909250614316906001600160a01b031684614dd4565b9050915091565b60a55460405163c44b11f760e01b81526001600160a01b038381166004830152600092839291169063c44b11f790602401602060405180830381865afa15801561436b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061438f9190615e5d565b5160101c61ffff169392505050565b60b5546060908190600090819081906143c1906001600160a01b03168a8a614efe565b60b4549295509093509150600090819081906143e7906001600160a01b03168b8b614efe565b9250925092508560001480156143fb575082155b1561440d575050505050505050612eba565b60008461441a578661441c565b855b905060008261442b578461442d565b835b90508580156144395750825b156144e45760408051600180825281830190925290602080830190803683375050604080516001808252818301909252929c50905060208083019080368337505060b2548c51929b506001600160a01b0316918c915060009061449e5761449e615d36565b6001600160a01b03909216602092830291909101909101526144c08183615850565b896000815181106144d3576144d3615d36565b602002602001018181525050614746565b60408051600280825260608201835290916020830190803683375050604080516002808252606082018352939d509291506020830190803683370190505098508561453a5760b5546001600160a01b0316614547565b60b2546001600160a01b03165b8a60008151811061455a5761455a615d36565b60200260200101906001600160a01b031690816001600160a01b031681525050826145905760b4546001600160a01b031661459d565b60b2546001600160a01b03165b8a6001815181106145b0576145b0615d36565b60200260200101906001600160a01b031690816001600160a01b031681525050896001815181106145e3576145e3615d36565b60200260200101516001600160a01b03168a60008151811061460757614607615d36565b60200260200101516001600160a01b031611156147055760008a60008151811061463357614633615d36565b602002602001015190508a60018151811061465057614650615d36565b60200260200101518b60008151811061466b5761466b615d36565b60200260200101906001600160a01b031690816001600160a01b031681525050808b60018151811061469f5761469f615d36565b60200260200101906001600160a01b031690816001600160a01b031681525050818a6000815181106146d3576146d3615d36565b602002602001018181525050828a6001815181106146f3576146f3615d36565b60200260200101818152505050614746565b818960008151811061471957614719615d36565b602002602001018181525050808960018151811061473957614739615d36565b6020026020010181815250505b6147568a8a8a8a89898c8a614fad565b5050505050505050505050505050565b600054610100900460ff1661478d5760405162461bcd60e51b815260040161103090615e03565b610ef5336132e9565b600054610100900460ff166147bd5760405162461bcd60e51b815260040161103090615e03565b61350f828261509d565b600061481c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166150eb9092919063ffffffff16565b8051909150156131cf578080602001905181019061483a9190615cc3565b6131cf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611030565b6000808284116148b2576148ad848461589d565b6148bc565b6148bc838561589d565b60a4549091506148da90600160681b900461ffff1684612710612a0e565b119392505050565b60a55460405163a415bcad60e01b81526001600160a01b0384811660048301526024820184905260026044830152600060648301523060848301529091169063a415bcad9060a401612df8565b60b55460009081906001600160a01b0386811691161415614c495760ae546000906149a89061496b90600290600160a01b900461ffff16615e79565b61497790612710615e9a565b6149859061ffff16876158b4565b61499d68fc6f7c40458122964d601f1b6127106158b4565b610aa8896000612ac1565b604080516101008101825260b2546001600160a01b03908116825260b354811660208301526101f48284015230606083015242608083015260a0820184905260c08201889052600060e083015260ab549251631b67c43360e31b8152939450909291169063db3e219890614a20908490600401615d95565b6020604051808303816000875af1158015614a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a639190615821565b60b5546040516370a0823160e01b81523060048201529195506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015614ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ad59190615821565b60ba5460b3546040516370a0823160e01b81523060048201529293506001600160a01b039182169263394747c5926000926001929116906370a0823190602401602060405180830381865afa158015614b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b569190615821565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152600060648201819052608482015260a401600060405180830381600087803b158015614baa57600080fd5b505af1158015614bbe573d6000803e3d6000fd5b505060b5546040516370a0823160e01b8152306004820152600093508492506001600160a01b03909116906370a0823190602401602060405180830381865afa158015614c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c339190615821565b614c3d919061589d565b9450614d079350505050565b604080516101008101825260b2546001600160a01b03908116825260b454811660208301526101f48284015230606083015242608083015260a0820187905260c08201869052600060e083015260ab549251631b67c43360e31b81529192169063db3e219890614cbd908490600401615d95565b6020604051808303816000875af1158015614cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d009190615821565b9250849150505b935093915050565b60a55460405163573ade8160e01b81526001600160a01b03848116600483015260248201849052600260448301523060648301529091169063573ade81906084016020604051808303816000875af1158015614d6f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cf9190615821565b60a554604051631a4ca37b60e21b81526001600160a01b038581166004830152602482018590528381166044830152909116906369328dec9060640161429f565b60b654604051632acbceb560e21b81526001600160a01b038481166004830152600092839291169063ab2f3ad490602401602060405180830381865afa158015614e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e469190615821565b9050600060b660009054906101000a90046001600160a01b03166001600160a01b031663dc8f5fac6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ec19190615821565b90506000614ecd61308e565b90506000614eda87613e5f565b9050614ef3614ee983886158b4565b610b8283866158b4565b979650505050505050565b600080600083851115614f7257614f15848661589d565b60ae54909350614f6790614f3690600160a01b900461ffff166127106159ed565b614f449061ffff16856158b4565b614f5c68fc6f7c40458122964d601f1b6127106158b4565b610aa8896001612ac1565b915060009050614fa4565b614f7c858561589d565b60ae54909350614f9d90614f3690600160a01b900461ffff16612710615e9a565b9150600190505b93509350939050565b8651885114614fcf576040516307e11acb60e51b815260040160405180910390fd5b60a4805460ff1916600117905560ac546040805160208101899052908101879052606081018690526080810185905283151560a082015282151560c08201526001600160a01b0390911690635c38449e9030908b908b9060e0016040516020818303038152906040526040518563ffffffff1660e01b81526004016150579493929190615ec0565b600060405180830381600087803b15801561507157600080fd5b505af1158015615085573d6000803e3d6000fd5b505060a4805460ff1916905550505050505050505050565b600054610100900460ff166150c45760405162461bcd60e51b815260040161103090615e03565b81516150d79060369060208501906151ef565b5080516131cf9060379060208401906151ef565b6060613f658484600085856001600160a01b0385163b61514d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611030565b600080866001600160a01b031685876040516151699190615f5b565b60006040518083038185875af1925050503d80600081146151a6576040519150601f19603f3d011682016040523d82523d6000602084013e6151ab565b606091505b5091509150614ef3828286606083156151c557508161086b565b8251156151d55782518084602001fd5b8160405162461bcd60e51b815260040161103091906152d7565b8280546151fb90615868565b90600052602060002090601f01602090048101928261521d5760008555615263565b82601f1061523657805160ff1916838001178555615263565b82800160010185558215615263579182015b82811115615263578251825591602001919060010190615248565b506137559291505b80821115613755576000815560010161526b565b60005b8381101561529a578181015183820152602001615282565b83811115612eba5750506000910152565b600081518084526152c381602086016020860161527f565b601f01601f19169290920160200192915050565b60208152600061086b60208301846152ab565b6000602082840312156152fc57600080fd5b5035919050565b6001600160a01b0381168114610d2357600080fd5b6000806040838503121561532b57600080fd5b823561533681615303565b946020939093013593505050565b60008060006060848603121561535957600080fd5b833561536481615303565b9250602084013561537481615303565b929592945050506040919091013590565b60006020828403121561539757600080fd5b813561086b81615303565b600080604083850312156153b557600080fd5b8235915060208301356153c781615303565b809150509250929050565b6000608082840312156140fd57600080fd5b60008083601f8401126153f657600080fd5b50813567ffffffffffffffff81111561540e57600080fd5b60208301915083602082850101111561542657600080fd5b9250929050565b803561543881615303565b919050565b6000806000806000806000806000898b0361016081121561545d57600080fd5b8a3567ffffffffffffffff8082111561547557600080fd5b6154818e838f016153e4565b909c509a5060208d013591508082111561549a57600080fd5b506154a78d828e016153e4565b90995097505060408b01356154bb81615303565b955060608b01356154cb81615303565b945060808b01356154db81615303565b935060a0609f19820112156154ef57600080fd5b5060a08a0191506155036101408b0161542d565b90509295985092959850929598565b60008060006060848603121561552757600080fd5b83359250602084013561553981615303565b9150604084013561554981615303565b809150509250925092565b6000606082840312156140fd57600080fd5b6000806040838503121561557957600080fd5b823561558481615303565b915060208301356153c781615303565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff811182821017156155ce576155ce615594565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156155fd576155fd615594565b604052919050565b600067ffffffffffffffff82111561561f5761561f615594565b5060051b60200190565b600082601f83011261563a57600080fd5b8135602061564f61564a83615605565b6155d4565b82815260059290921b8401810191818101908684111561566e57600080fd5b8286015b848110156156895780358352918301918301615672565b509695505050505050565b600082601f8301126156a557600080fd5b813567ffffffffffffffff8111156156bf576156bf615594565b6156d2601f8201601f19166020016155d4565b8181528460208386010111156156e757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561571a57600080fd5b843567ffffffffffffffff8082111561573257600080fd5b818701915087601f83011261574657600080fd5b8135602061575661564a83615605565b82815260059290921b8401810191818101908b84111561577557600080fd5b948201945b8386101561579c57853561578d81615303565b8252948201949082019061577a565b985050880135925050808211156157b257600080fd5b6157be88838901615629565b945060408701359150808211156157d457600080fd5b6157e088838901615629565b935060608701359150808211156157f657600080fd5b5061580387828801615694565b91505092959194509250565b6000604082840312156140fd57600080fd5b60006020828403121561583357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156158635761586361583a565b500190565b600181811c9082168061587c57607f821691505b602082108114156140fd57634e487b7160e01b600052602260045260246000fd5b6000828210156158af576158af61583a565b500390565b60008160001904831182151516156158ce576158ce61583a565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826158f8576158f86158d3565b500490565b600181815b8085111561593857816000190482111561591e5761591e61583a565b8085161561592b57918102915b93841c9390800290615902565b509250929050565b60008261594f57506001610886565b8161595c57506000610886565b8160018114615972576002811461597c57615998565b6001915050610886565b60ff84111561598d5761598d61583a565b50506001821b610886565b5060208310610133831016604e8410600b84101617156159bb575081810a610886565b6159c583836158fd565b80600019048211156159d9576159d961583a565b029392505050565b600061086b8383615940565b600061ffff83811690831681811015615a0857615a0861583a565b039392505050565b805161543881615303565b600060208284031215615a2d57600080fd5b815161086b81615303565b600060208284031215615a4a57600080fd5b6040516020810181811067ffffffffffffffff82111715615a6d57615a6d615594565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461543857600080fd5b805164ffffffffff8116811461543857600080fd5b61ffff81168114610d2357600080fd5b805161543881615aaf565b60006101e08284031215615add57600080fd5b615ae56155aa565b615aef8484615a38565b8152615afd60208401615a7a565b6020820152615b0e60408401615a7a565b6040820152615b1f60608401615a7a565b6060820152615b3060808401615a7a565b6080820152615b4160a08401615a7a565b60a0820152615b5260c08401615a9a565b60c0820152615b6360e08401615abf565b60e0820152610100615b76818501615a10565b90820152610120615b88848201615a10565b90820152610140615b9a848201615a10565b90820152610160615bac848201615a10565b90820152610180615bbe848201615a7a565b908201526101a0615bd0848201615a7a565b908201526101c0615be2848201615a7a565b908201529392505050565b600080821280156001600160ff1b0384900385131615615c0f57615c0f61583a565b600160ff1b8390038412811615615c2857615c2861583a565b50500190565b60008083128015600160ff1b850184121615615c4c57615c4c61583a565b6001600160ff1b0384018313811615615c6757615c6761583a565b50500390565b600060208284031215615c7f57600080fd5b813561086b81615aaf565b600060208284031215615c9c57600080fd5b81356001600160f01b038116811461086b57600080fd5b8051801515811461543857600080fd5b600060208284031215615cd557600080fd5b61086b82615cb3565b60008060008060008060c08789031215615cf757600080fd5b86519550602087015194506040870151935060608701519250615d1c60808801615cb3565b9150615d2a60a08801615cb3565b90509295509295509295565b634e487b7160e01b600052603260045260246000fd5b600060208284031215615d5e57600080fd5b813563ffffffff8116811461086b57600080fd5b600060208284031215615d8457600080fd5b815160ff8116811461086b57600080fd5b610100810161088682846001600160a01b0380825116835280602083015116602084015262ffffff60408301511660408401528060608301511660608401526080820151608084015260a082015160a084015260c082015160c08401528060e08301511660e0840152505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600061086b60ff841683615940565b600060208284031215615e6f57600080fd5b61086b8383615a38565b600061ffff80841680615e8e57615e8e6158d3565b92169190910492915050565b600061ffff808316818516808303821115615eb757615eb761583a565b01949350505050565b6000608082016001600160a01b038088168452602060808186015282885180855260a087019150828a01945060005b81811015615f0d578551851683529483019491830191600101615eef565b5050858103604087015287518082529082019350915080870160005b83811015615f4557815185529382019390820190600101615f29565b505050508281036060840152614ef381856152ab565b60008251615f6d81846020870161527f565b919091019291505056fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061032b5760003560e01c80638da5cb5b116101b2578063bf9571f1116100f9578063db021040116100a2578063ef8b30f71161007c578063ef8b30f714610676578063f04f270714610689578063f2fde38b1461069c578063f3a897c0146106af57600080fd5b8063db02104014610617578063dd62ed3e1461062a578063e74b981b1461066357600080fd5b8063ce96cb77116100d3578063ce96cb77146105e9578063d627b530146105fc578063d905777e1461060457600080fd5b8063bf9571f1146105ce578063c63d75b614610423578063c6e6f592146105d657600080fd5b8063b3d7f6b91161015b578063ba08765211610135578063ba08765214610595578063ba9e9a66146105a8578063bb594433146105bb57600080fd5b8063b3d7f6b914610558578063b460af941461056b578063b6ac642a1461058257600080fd5b806395e2da7c1161018c57806395e2da7c1461052a578063a457c2d714610532578063a9059cbb1461054557600080fd5b80638da5cb5b146104fe57806394bf804d1461050f57806395d89b411461052257600080fd5b8063402d267d11610276578063748747e61161021f57806386651203116101f957806386651203146104d05780638b229ba6146104e35780638d315d7b146104f657600080fd5b8063748747e6146104a2578063757f9396146104b55780637d7c2a1c146104c857600080fd5b80636e553f65116102505780636e553f651461045e57806370a0823114610471578063715018a61461049a57600080fd5b8063402d267d146104235780634cdad50614610438578063554070bc1461044b57600080fd5b806318160ddd116102d857806338d52e0f116102b257806338d52e0f146103dd57806339509351146104085780633d672a451461041b57600080fd5b806318160ddd146103b357806323b872dd146103bb578063313ce567146103ce57600080fd5b8063095ea7b311610309578063095ea7b3146103735780630a28a47714610396578063138cc18f146103a957600080fd5b806301e1d1141461033057806306fdde031461034b57806307a2d13a14610360575b600080fd5b6103386106c2565b6040519081526020015b60405180910390f35b6103536107ab565b60405161034291906152d7565b61033861036e3660046152ea565b61083d565b610386610381366004615318565b610872565b6040519015158152602001610342565b6103386103a43660046152ea565b61088c565b6103b16108b4565b005b603554610338565b6103866103c9366004615344565b610d26565b60405160128152602001610342565b6065546103f0906001600160a01b031681565b6040516001600160a01b039091168152602001610342565b610386610416366004615318565b610d4a565b610338610d89565b610338610431366004615385565b5060001990565b6103386104463660046152ea565b610ea3565b6103386104593660046152ea565b610eae565b61033861046c3660046153a2565b610ecf565b61033861047f366004615385565b6001600160a01b031660009081526033602052604090205490565b6103b1610ee3565b6103b16104b0366004615385565b610ef7565b6103b16104c33660046153d2565b610f54565b6103b1610ff4565b6103b16104de3660046152ea565b6110ee565b6103b16104f136600461543d565b61112b565b610338611865565b6066546001600160a01b03166103f0565b61033861051d3660046153a2565b6118bf565b6103536118d3565b6103386118e2565b610386610540366004615318565b611964565b610386610553366004615318565b6119f6565b6103386105663660046152ea565b611a04565b610338610579366004615512565b60009392505050565b6103b16105903660046152ea565b611a2b565b6103386105a3366004615512565b611a68565b6103b16105b6366004615385565b611ba7565b6103b16105c9366004615554565b611bfd565b6103b1611cdd565b6103386105e43660046152ea565b6123cb565b6103386105f7366004615385565b6123f3565b610386612415565b610338610612366004615385565b61242d565b6103b1610625366004615385565b61244b565b610338610638366004615566565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6103b1610671366004615385565b6124a1565b6103386106843660046152ea565b612530565b6103b1610697366004615704565b61253b565b6103b16106aa366004615385565b612756565b6103b16106bd36600461580f565b6127cc565b60b95460408051635841507560e01b815290516000926001600160a01b03169163584150759160048083019260209291908290030181865afa15801561070c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107309190615821565b60b0546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c9190615821565b6107a69190615850565b905090565b6060603680546107ba90615868565b80601f01602080910402602001604051908101604052809291908181526020018280546107e690615868565b80156108335780601f1061080857610100808354040283529160200191610833565b820191906000526020600020905b81548152906001019060200180831161081657829003601f168201915b5050505050905090565b60008061084960355490565b905080156108695761086461085c6106c2565b84908361289d565b61086b565b825b9392505050565b6000336108808185856128bc565b60019150505b92915050565b60008061089860355490565b9050801561086957610864816108ac6106c2565b8591906129e0565b60b85460405163185b800160e11b815260006004820181905260248201819052600160448301819052606483018190526084830181905260a483015260c48201526001600160a01b03909116906330b700029060e401600060405180830381600087803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b5050609e54609d5460b4546040516370a0823160e01b81523060048201526000955092935090916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190615821565b6109bf919061589d565b6109c9919061589d565b905060a054811115610d2357609854600090612710906109e990846158b4565b6109f391906158e9565b905080609d6000828254610a079190615850565b9091555060009050610a19828461589d565b90506000610aaf826c0c9f2c9cd04674edea40000000609a60009054906101000a90046001600160a01b03166001600160a01b031663e3696edd6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa89190615821565b9190612a0e565b90506000610abd828461589d565b9050600082609e54610acf9190615850565b60b65460b4546040516340d3096b60e11b81526001600160a01b0391821660048201529293506000929116906381a612d690602401602060405180830381865afa158015610b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b459190615821565b90506000610b8a60a15461271061ffff16610b60919061589d565b610b6a90846158b4565b610b8261271068fc6f7c40458122964d601f1b6158b4565b869190612a0e565b9050610baf610b9b6012600a6159e1565b610ba76012600a6159e1565b839190612a0e565b60b95460b454604051634ce3696f60e11b81526001600160a01b039182166004820152602481018890526044810184905292935016906399c6d2de906064016020604051808303816000875af1158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c319190615821565b50609f54831115610cdc5760ae54600090610c9a90610c5d90600160a01b900461ffff166127106159ed565b610c6b9061ffff16866158b4565b610c8368fc6f7c40458122964d601f1b6127106158b4565b60b454610aa8906001600160a01b03166001612ac1565b60b454909150600090610cb7906001600160a01b03168684612ccf565b60b254909150610cd0906001600160a01b031682612db6565b50506000609e55610ce2565b609e8390555b60408051878152602081018690527ffa5fc4e614ff1acb4e5e98dccf2a504cb9fb51a469dce5a5eca07ff5491a677b910160405180910390a1505050505050505b50565b600033610d34858285612e2e565b610d3f858585612ec0565b506001949350505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906108809082908690610d84908790615850565b6128bc565b60b75460405163019c8a3b60e11b81526000600482018190529182916001600160a01b0390911690630339147690602401602060405180830381865afa158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb9190615821565b9050600060b160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e769190615821565b9050610e9c600160801b610e948369d3c21bcecceda10000006158b4565b849190612a0e565b9250505090565b60006108868261083d565b6000610886610ebb61308e565b839068fc6f7c40458122964d601f1b612a0e565b6000610ed96131a1565b61086b83836131d4565b610eeb61328f565b610ef560006132e9565b565b610eff61328f565b609980546001600160a01b0319166001600160a01b0383169081179091556040519081527f0425bcd291db1d48816f2a98edc7ecaf6dd5c64b973d9e4b3b6b750763dc6c2e906020015b60405180910390a150565b610f5c61328f565b610f696020820182615385565b60ac80546001600160a01b0319166001600160a01b0392909216919091179055610f996040820160208301615385565b60ab80546001600160a01b0319166001600160a01b0392909216919091179055604081013560ad55610fd16080820160608301615385565b60ae80546001600160a01b0319166001600160a01b039290921691909117905550565b6099546001600160a01b03163314611039576099546040516329b7946d60e01b81523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b611041612415565b61105e5760405163a039e79960e01b815260040160405180910390fd5b6110666108b4565b60008061107161333b565b9150915060006110818383613420565b905061108c8161349d565b61109e83836110996106c2565b613513565b60a4805468ffffffffffffffff0019166101004267ffffffffffffffff16021790556040517fc741dbaad15a4f298fe8d80943fa8e005e7bcb2f5b0a0c8dec1fc35be457f14690600090a1505050565b6110f661328f565b60a28190556040518181527f333b26cca69716ad4680ddb07663f5bfb4f06045671f336af9a83690a3ae00f990602001610f49565b600054610100900460ff161580801561114b5750600054600160ff909116105b806111655750303b158015611165575060005460ff166001145b6111c85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401611030565b6000805460ff1916600117905580156111eb576000805461ff0019166101001790555b6111f36136b8565b6112766112066060850160408601615385565b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c90819084018382808284376000920191909152506136e792505050565b6112836020840184615385565b60b480546001600160a01b0319166001600160a01b03929092169190911790556112b36040840160208501615385565b60b580546001600160a01b0319166001600160a01b03929092169190911790556112e36080840160608501615385565b60b280546001600160a01b0319166001600160a01b039290921691909117905561131360a0840160808501615385565b60b380546001600160a01b03199081166001600160a01b039384161790915560ab8054821689841617905560b88054821688841617905560a7805490911684831617905560655460408051633c5103f760e11b8152905191909216916378a207ee9160048281019260209291908290030181865afa158015611399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bd9190615a1b565b60b180546001600160a01b0319166001600160a01b0392831617905560655460408051633e9b6c6f60e21b81529051919092169163fa6db1bc9160048083019260209291908290030181865afa15801561141b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143f9190615a1b565b60b780546001600160a01b0319166001600160a01b039283161790556065546040805162af394d60e81b81529051919092169163af394d009160048083019260209291908290030181865afa15801561149c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c09190615a1b565b60b080546001600160a01b0319166001600160a01b0392831617905560b7546040805163fbfa77cf60e01b81529051919092169163fbfa77cf9160048083019260209291908290030181865afa15801561151e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115429190615a1b565b60b680546001600160a01b03199081166001600160a01b039384161790915560ba805490911686831617905560a7546040805163026b1d5f60e01b81529051919092169163026b1d5f9160048083019260209291908290030181865afa1580156115b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d49190615a1b565b60a580546001600160a01b0319166001600160a01b0392831617905560a75460408051631f94a27560e31b81529051919092169163fca513a89160048083019260209291908290030181865afa158015611632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116569190615a1b565b60a680546001600160a01b0319166001600160a01b0392831617905560a55460b2546040516335ea6a7560e01b815290831660048201529116906335ea6a75906024016101e060405180830381865afa1580156116b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116db9190615aca565b610100015160a880546001600160a01b0319166001600160a01b0392831617905560a55460b5546040516335ea6a7560e01b815290831660048201529116906335ea6a75906024016101e060405180830381865afa158015611741573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117659190615aca565b610140015160a980546001600160a01b0319166001600160a01b0392831617905560a55460b4546040516335ea6a7560e01b815290831660048201529116906335ea6a75906024016101e060405180830381865afa1580156117cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ef9190615aca565b610140015160aa80546001600160a01b0319166001600160a01b039092169190911790558015611859576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b600080600061187261333b565b9150915060006118828383613420565b905061188d81613715565b60a3546118a361189e6104596106c2565b613715565b6118ad9190615bed565b6118b79190615c2e565b935050505090565b60006118c96131a1565b61086b8383613759565b6060603780546107ba90615868565b60a35460a8546040516370a0823160e01b81523060048201526000929161195a916001600160a01b03909116906370a08231906024015b602060405180830381865afa158015611936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189e9190615821565b6107a69190615c2e565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190838110156119e95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401611030565b610d3f82868684036128bc565b600033610880818585612ec0565b600080611a1060355490565b9050801561086957610864611a236106c2565b8490836129e0565b611a3361328f565b609c8190556040518181527f9a1f74aeeb037eb3d45b22a56376dadd6ba6ded25ec3727e520415f6c76768a990602001610f49565b6000611a726131a1565b336001600160a01b03831614611ac0576001600160a01b03821660009081526034602090815260408083203384529091529020546000198114611abe57611abe8333610d84888561589d565b505b611ac984610ea3565b905080611b065760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b6044820152606401611030565b609c54600090611b2690611b1c9061271061589d565b8390612710612a0e565b9050611b338186866137da565b611b3d8386613808565b60408051828152602081018790526001600160a01b03808616929087169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4606554611b9f906001600160a01b03168583613956565b509392505050565b611baf61328f565b60b980546001600160a01b0319166001600160a01b0383169081179091556040519081527f9d2850ff561076853ce9dd9bf763580841b1e3a5ec11bc4d54736f793eeeb70190602001610f49565b611c0561328f565b611c126020820182615c6d565b60ae805461ffff92909216600160a01b0261ffff60a01b19909216919091179055611c436040820160208301615c8a565b60af80547fffff000000000000000000000000000000000000000000000000000000000000166001600160f01b0392909216919091179055604081018035609f81905590611c949060208401615c8a565b6001600160f01b0316611caa6020840184615c6d565b61ffff167f6f2f774175bcaf77f80c8a859de1a0c38c9e9e0367cff60dea1234233f14654d60405160405180910390a450565b611ce561328f565b60a55460ab5460ba5460b55460405163095ea7b360e01b81526001600160a01b039485166004820181905260001960248301529493841693928316929091169063095ea7b3906044016020604051808303816000875af1158015611d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d719190615cc3565b5060b55460405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015611dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dea9190615cc3565b5060b45460405163095ea7b360e01b81526001600160a01b03858116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015611e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e639190615cc3565b5060b45460405163095ea7b360e01b81526001600160a01b03848116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015611eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edc9190615cc3565b5060b45460b95460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015611f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f579190615cc3565b5060b25460405163095ea7b360e01b81526001600160a01b03858116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015611fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd09190615cc3565b5060b25460405163095ea7b360e01b81526001600160a01b03848116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120499190615cc3565b5060b25460b95460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190615cc3565b5060b35460405163095ea7b360e01b81526001600160a01b038381166004830152600060248301529091169063095ea7b3906044016020604051808303816000875af1158015612118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213c9190615cc3565b5060b35460405163095ea7b360e01b81526001600160a01b038481166004830152600060248301529091169063095ea7b3906044016020604051808303816000875af1158015612190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b49190615cc3565b5060b35460405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222d9190615cc3565b5060b35460405163095ea7b360e01b81526001600160a01b03848116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a69190615cc3565b5060a854609a5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156122fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123219190615cc3565b5060655460b75460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015612378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239c9190615cc3565b506040517fba5bb3f899c7a3edcc9ff9d46c4e08449c6a608b6f8254132bc5af4898645cbc90600090a1505050565b6000806123d760355490565b9050801561086957610864816123eb6106c2565b85919061289d565b6001600160a01b0381166000908152603360205260408120546108869061083d565b600061241f6139b9565b806107a657506107a66139ec565b6001600160a01b038116600090815260336020526040812054610886565b61245361328f565b609a80546001600160a01b0319166001600160a01b0383169081179091556040519081527fb6c62db913ccc78e8f2bb453c48c439dc86445188f333c52fe0638a0e3ea1b1390602001610f49565b6124a961328f565b609b546001600160a01b038281169116146124de57609b80546001600160a01b0319166001600160a01b0383161790556124f7565b604051630ed1b8b360e31b815260040160405180910390fd5b6040516001600160a01b03821681527f7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc290602001610f49565b6000610886826123cb565b60ac546001600160a01b031633146125665760405163f4a8e62160e01b815260040160405180910390fd5b60a45460ff1661258957604051637869c16160e11b815260040160405180910390fd5b600080600080600080868060200190518101906125a69190615cde565b9550955095509550955095506000808380156125bf5750825b1561263c5761260d888c6000815181106125db576125db615d36565b60200260200101518c6000815181106125f6576125f6615d36565b6020026020010151612a0e9092919063ffffffff16565b9150818a60008151811061262357612623615d36565b6020026020010151612635919061589d565b9050612716565b60008461267c5760b5548d516001600160a01b03909116908e9060009061266557612665615d36565b60200260200101516001600160a01b0316146126b1565b60b2548d516001600160a01b03909116908e9060009061269e5761269e615d36565b60200260200101516001600160a01b0316145b156126ba575060015b8a816126c75760016126ca565b60005b60ff16815181106126dd576126dd615d36565b602002602001015192508a816126f45760006126f7565b60015b60ff168151811061270a5761270a615d36565b60200260200101519150505b60b55461272f906001600160a01b031689898588613a39565b60b454612748906001600160a01b031687878487613a39565b505050505050505050505050565b61275e61328f565b6001600160a01b0381166127c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611030565b610d23816132e9565b6127d461328f565b6127e16020820182615d4c565b60a4805463ffffffff92909216600160481b026cffffffff0000000000000000001990921691909117905561281c6040820160208301615c6d565b60a4805461ffff92909216600160681b026effff00000000000000000000000000199092169190911790556128576040820160208301615c6d565b61ffff166128686020830183615d4c565b63ffffffff167fb3afb3dd9d92356112ae0253f1ee685bfd20d80cfe8c50433c64dcf5ef9dcba260405160405180910390a350565b8282028115158415858304851417166128b557600080fd5b0492915050565b6001600160a01b03831661291e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401611030565b6001600160a01b03821661297f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401611030565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b8282028115158415858304851417166129f857600080fd5b6001826001830304018115150290509392505050565b600080806000198587098587029250828110838203039150508060001415612a485760008411612a3d57600080fd5b50829004905061086b565b808411612a5457600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b269190615d72565b60a65460405163b3596f0760e01b81526001600160a01b03878116600483015260ff9390931693506000929091169063b3596f0790602401602060405180830381865afa158015612b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9f9190615821565b9050600084612c205760a65460b35460405163b3596f0760e01b81526001600160a01b03918216600482015291169063b3596f0790602401602060405180830381865afa158015612bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c189190615821565b905080612c94565b60a65460b25460405163b3596f0760e01b81526001600160a01b03918216600482015291169063b3596f0790602401602060405180830381865afa158015612c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c909190615821565b9050805b50612cc568fc6f7c40458122964d601f1b612cb060068661589d565b612cbb90600a6159e1565b610e9490846158b4565b9695505050505050565b60b5546000906001600160a01b0385811691161415612cf957612cf28383613c0f565b905061086b565b60408051610100810182526001600160a01b03808716825260b254811660208301526101f48284015230606083015242608083015260a0820186905260c08201859052600060e083015260ab54925163414bf38960e01b81529192169063414bf38990612d6a908490600401615d95565b6020604051808303816000875af1158015612d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dad9190615821565b95945050505050565b60a55460405163617ba03760e01b81526001600160a01b03848116600483015260248201849052306044830152600060648301529091169063617ba037906084015b600060405180830381600087803b158015612e1257600080fd5b505af1158015612e26573d6000803e3d6000fd5b505050505050565b6001600160a01b038381166000908152603460209081526040808320938616835292905220546000198114612eba5781811015612ead5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401611030565b612eba84848484036128bc565b50505050565b6001600160a01b038316612f245760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401611030565b6001600160a01b038216612f865760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401611030565b6001600160a01b03831660009081526033602052604090205481811015612ffe5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401611030565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290613035908490615850565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161308191815260200190565b60405180910390a3612eba565b60b75460405163019c8a3b60e11b81526000600482018190529182916001600160a01b0390911690630339147690602401602060405180830381865afa1580156130dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131009190615821565b9050600060b160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317b9190615821565b9050610e9c68fc6f7c40458122964d601f1b610e948369d3c21bcecceda10000006158b4565b6131a96108b4565b6000806131b461333b565b9150915060006131c48383613420565b90506131cf8161349d565b505050565b60006131df83612530565b90508061321c5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b6044820152606401611030565b606554613234906001600160a01b0316333086613d02565b61323e8282613d3a565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610886838284613e19565b6066546001600160a01b03163314610ef55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611030565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60a9546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015613388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ac9190615821565b60aa546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156133f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134189190615821565b915091509091565b60b45460009061343c90610ebb906001600160a01b0316613e5f565b60b55461346990613455906001600160a01b0316613e5f565b859068fc6f7c40458122964d601f1b612a0e565b6134739190615850565b60b25490915061086b9068fc6f7c40458122964d601f1b90610ba7906001600160a01b0316613e5f565b60006134a882613715565b905060a3548113156134e9576134cd61189e60a354836134c89190615c2e565b613f6d565b60a360008282546134de9190615bed565b9091555061350f9050565b60a35481121561350f576135098160a3546135049190615c2e565b614103565b60a38190555b5050565b60008061351f836142e2565b91509150600061352f8383613420565b60b25490915060009061354a906001600160a01b031661431d565b9050600061356183838460ad54610aa8919061589d565b60a35460a8546040516370a0823160e01b815230600482015292935060009261359c916001600160a01b0316906370a0823190602401611919565b6135a69190615c2e565b90508082111561362c57609a546001600160a01b031663c5ebeaec6135cb838561589d565b6040518263ffffffff1660e01b81526004016135e991815260200190565b600060405180830381600087803b15801561360357600080fd5b505af1158015613617573d6000803e3d6000fd5b50505050613627868a878b61439e565b6136ad565b613638868a878b61439e565b6136418461349d565b609a546001600160a01b031663371fd8e661365c848461589d565b6040518263ffffffff1660e01b815260040161367a91815260200190565b600060405180830381600087803b15801561369457600080fd5b505af11580156136a8573d6000803e3d6000fd5b505050505b505050505050505050565b600054610100900460ff166136df5760405162461bcd60e51b815260040161103090615e03565b610ef5614766565b6136f18282614796565b5050606580546001600160a01b0319166001600160a01b0392909216919091179055565b6000600160ff1b82106137555760405162461bcd60e51b81526020600482015260086024820152674f766572666c6f7760c01b6044820152606401611030565b5090565b600061376483611a04565b60655490915061377f906001600160a01b0316333084613d02565b6137898284613d3a565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610886818484613e19565b6000806137e561333b565b915091506138018282876137f76106c2565b611099919061589d565b5050505050565b6001600160a01b0382166138685760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401611030565b6001600160a01b038216600090815260336020526040902054818110156138dc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401611030565b6001600160a01b038316600090815260336020526040812083830390556035805484929061390b90849061589d565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b0383166024820152604481018290526131cf90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526147c7565b60a454600090600160481b810463ffffffff16906139e690610100900467ffffffffffffffff164261589d565b11905090565b60008060006139f961333b565b91509150600080613a10613a0b6106c2565b6142e2565b91509150613a1e8285614899565b8015613a2f5750613a2f8184614899565b1594505050505090565b80613b1b576000613a4a8386615850565b90506000613a59878787612ccf565b60b254909150613a72906001600160a01b031682612db6565b613a7c87836148e2565b60ac5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529088169063a9059cbb906044016020604051808303816000875af1158015613acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af39190615cc3565b50613afd81613715565b60a36000828254613b0e9190615bed565b9091555061380192505050565b600080613b2987878761492f565b90925090506000613b3a8584615850565b9050613b4581613715565b60a36000828254613b569190615c2e565b90915550613b6690508883614d0f565b60b254613b7d906001600160a01b03168230614d93565b60b25460ac546001600160a01b039182169163a9059cbb9116613ba0888a615850565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015613beb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ad9190615cc3565b60ba5460405163394747c560e01b815260016004820152600060248201819052604482018590526064820181905260848201819052916001600160a01b03169063394747c59060a401600060405180830381600087803b158015613c7257600080fd5b505af1158015613c86573d6000803e3d6000fd5b505060b3546040516370a0823160e01b815230600482015261086b93506001600160a01b03909116915081906370a0823190602401602060405180830381865afa158015613cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cfc9190615821565b84612ccf565b6040516001600160a01b0380851660248301528316604482015260648101829052612eba9085906323b872dd60e01b90608401613982565b6001600160a01b038216613d905760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401611030565b8060356000828254613da29190615850565b90915550506001600160a01b03821660009081526033602052604081208054839290613dcf908490615850565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60a254613e246106c2565b1115613e43576040516324d758c360e21b815260040160405180910390fd5b600080613e4e61333b565b9150915061380182826110996106c2565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ec49190615d72565b60a65460405163b3596f0760e01b81526001600160a01b03868116600483015260ff9390931693506000929091169063b3596f0790602401602060405180830381865afa158015613f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3d9190615821565b9050613f6568fc6f7c40458122964d601f1b613f5a846002615850565b610ba790600a6159e1565b949350505050565b60af546000906001600160f01b0316821015613f8b57506000919050565b6000613fad68fc6f7c40458122964d601f1b613fa561308e565b859190612a0e565b60b85460b25460ae549293506001600160a01b0391821692630f3aa55492909116908490613ffa90613fec90600160a01b900461ffff166127106159ed565b889061ffff16612710612a0e565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915260448201523060648201526084016020604051808303816000875af1158015614053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140779190615821565b5060b2546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156140c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e49190615821565b60b2549092506140fd906001600160a01b031683612db6565b50919050565b60b25461411a906001600160a01b03168230614d93565b60b65460b2546040516340d3096b60e11b81526001600160a01b03918216600482015260009291909116906381a612d690602401602060405180830381865afa15801561416b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061418f9190615821565b905060006141cc60a15461271061ffff166141aa919061589d565b6141b490846158b4565b613fa561271068fc6f7c40458122964d601f1b6158b4565b905061425f6141dd6012600a6159e1565b60b260009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015614230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142549190615d72565b610ba790600a615e4e565b60b95460b254604051634ce3696f60e11b81526001600160a01b039182166004820152602481018790526044810184905292935016906399c6d2de906064015b6020604051808303816000875af11580156142be573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eba9190615821565b60b55460009081906142fd906001600160a01b031684614dd4565b60b454909250614316906001600160a01b031684614dd4565b9050915091565b60a55460405163c44b11f760e01b81526001600160a01b038381166004830152600092839291169063c44b11f790602401602060405180830381865afa15801561436b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061438f9190615e5d565b5160101c61ffff169392505050565b60b5546060908190600090819081906143c1906001600160a01b03168a8a614efe565b60b4549295509093509150600090819081906143e7906001600160a01b03168b8b614efe565b9250925092508560001480156143fb575082155b1561440d575050505050505050612eba565b60008461441a578661441c565b855b905060008261442b578461442d565b835b90508580156144395750825b156144e45760408051600180825281830190925290602080830190803683375050604080516001808252818301909252929c50905060208083019080368337505060b2548c51929b506001600160a01b0316918c915060009061449e5761449e615d36565b6001600160a01b03909216602092830291909101909101526144c08183615850565b896000815181106144d3576144d3615d36565b602002602001018181525050614746565b60408051600280825260608201835290916020830190803683375050604080516002808252606082018352939d509291506020830190803683370190505098508561453a5760b5546001600160a01b0316614547565b60b2546001600160a01b03165b8a60008151811061455a5761455a615d36565b60200260200101906001600160a01b031690816001600160a01b031681525050826145905760b4546001600160a01b031661459d565b60b2546001600160a01b03165b8a6001815181106145b0576145b0615d36565b60200260200101906001600160a01b031690816001600160a01b031681525050896001815181106145e3576145e3615d36565b60200260200101516001600160a01b03168a60008151811061460757614607615d36565b60200260200101516001600160a01b031611156147055760008a60008151811061463357614633615d36565b602002602001015190508a60018151811061465057614650615d36565b60200260200101518b60008151811061466b5761466b615d36565b60200260200101906001600160a01b031690816001600160a01b031681525050808b60018151811061469f5761469f615d36565b60200260200101906001600160a01b031690816001600160a01b031681525050818a6000815181106146d3576146d3615d36565b602002602001018181525050828a6001815181106146f3576146f3615d36565b60200260200101818152505050614746565b818960008151811061471957614719615d36565b602002602001018181525050808960018151811061473957614739615d36565b6020026020010181815250505b6147568a8a8a8a89898c8a614fad565b5050505050505050505050505050565b600054610100900460ff1661478d5760405162461bcd60e51b815260040161103090615e03565b610ef5336132e9565b600054610100900460ff166147bd5760405162461bcd60e51b815260040161103090615e03565b61350f828261509d565b600061481c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166150eb9092919063ffffffff16565b8051909150156131cf578080602001905181019061483a9190615cc3565b6131cf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611030565b6000808284116148b2576148ad848461589d565b6148bc565b6148bc838561589d565b60a4549091506148da90600160681b900461ffff1684612710612a0e565b119392505050565b60a55460405163a415bcad60e01b81526001600160a01b0384811660048301526024820184905260026044830152600060648301523060848301529091169063a415bcad9060a401612df8565b60b55460009081906001600160a01b0386811691161415614c495760ae546000906149a89061496b90600290600160a01b900461ffff16615e79565b61497790612710615e9a565b6149859061ffff16876158b4565b61499d68fc6f7c40458122964d601f1b6127106158b4565b610aa8896000612ac1565b604080516101008101825260b2546001600160a01b03908116825260b354811660208301526101f48284015230606083015242608083015260a0820184905260c08201889052600060e083015260ab549251631b67c43360e31b8152939450909291169063db3e219890614a20908490600401615d95565b6020604051808303816000875af1158015614a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a639190615821565b60b5546040516370a0823160e01b81523060048201529195506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015614ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ad59190615821565b60ba5460b3546040516370a0823160e01b81523060048201529293506001600160a01b039182169263394747c5926000926001929116906370a0823190602401602060405180830381865afa158015614b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b569190615821565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152600060648201819052608482015260a401600060405180830381600087803b158015614baa57600080fd5b505af1158015614bbe573d6000803e3d6000fd5b505060b5546040516370a0823160e01b8152306004820152600093508492506001600160a01b03909116906370a0823190602401602060405180830381865afa158015614c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c339190615821565b614c3d919061589d565b9450614d079350505050565b604080516101008101825260b2546001600160a01b03908116825260b454811660208301526101f48284015230606083015242608083015260a0820187905260c08201869052600060e083015260ab549251631b67c43360e31b81529192169063db3e219890614cbd908490600401615d95565b6020604051808303816000875af1158015614cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d009190615821565b9250849150505b935093915050565b60a55460405163573ade8160e01b81526001600160a01b03848116600483015260248201849052600260448301523060648301529091169063573ade81906084016020604051808303816000875af1158015614d6f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cf9190615821565b60a554604051631a4ca37b60e21b81526001600160a01b038581166004830152602482018590528381166044830152909116906369328dec9060640161429f565b60b654604051632acbceb560e21b81526001600160a01b038481166004830152600092839291169063ab2f3ad490602401602060405180830381865afa158015614e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e469190615821565b9050600060b660009054906101000a90046001600160a01b03166001600160a01b031663dc8f5fac6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ec19190615821565b90506000614ecd61308e565b90506000614eda87613e5f565b9050614ef3614ee983886158b4565b610b8283866158b4565b979650505050505050565b600080600083851115614f7257614f15848661589d565b60ae54909350614f6790614f3690600160a01b900461ffff166127106159ed565b614f449061ffff16856158b4565b614f5c68fc6f7c40458122964d601f1b6127106158b4565b610aa8896001612ac1565b915060009050614fa4565b614f7c858561589d565b60ae54909350614f9d90614f3690600160a01b900461ffff16612710615e9a565b9150600190505b93509350939050565b8651885114614fcf576040516307e11acb60e51b815260040160405180910390fd5b60a4805460ff1916600117905560ac546040805160208101899052908101879052606081018690526080810185905283151560a082015282151560c08201526001600160a01b0390911690635c38449e9030908b908b9060e0016040516020818303038152906040526040518563ffffffff1660e01b81526004016150579493929190615ec0565b600060405180830381600087803b15801561507157600080fd5b505af1158015615085573d6000803e3d6000fd5b505060a4805460ff1916905550505050505050505050565b600054610100900460ff166150c45760405162461bcd60e51b815260040161103090615e03565b81516150d79060369060208501906151ef565b5080516131cf9060379060208401906151ef565b6060613f658484600085856001600160a01b0385163b61514d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611030565b600080866001600160a01b031685876040516151699190615f5b565b60006040518083038185875af1925050503d80600081146151a6576040519150601f19603f3d011682016040523d82523d6000602084013e6151ab565b606091505b5091509150614ef3828286606083156151c557508161086b565b8251156151d55782518084602001fd5b8160405162461bcd60e51b815260040161103091906152d7565b8280546151fb90615868565b90600052602060002090601f01602090048101928261521d5760008555615263565b82601f1061523657805160ff1916838001178555615263565b82800160010185558215615263579182015b82811115615263578251825591602001919060010190615248565b506137559291505b80821115613755576000815560010161526b565b60005b8381101561529a578181015183820152602001615282565b83811115612eba5750506000910152565b600081518084526152c381602086016020860161527f565b601f01601f19169290920160200192915050565b60208152600061086b60208301846152ab565b6000602082840312156152fc57600080fd5b5035919050565b6001600160a01b0381168114610d2357600080fd5b6000806040838503121561532b57600080fd5b823561533681615303565b946020939093013593505050565b60008060006060848603121561535957600080fd5b833561536481615303565b9250602084013561537481615303565b929592945050506040919091013590565b60006020828403121561539757600080fd5b813561086b81615303565b600080604083850312156153b557600080fd5b8235915060208301356153c781615303565b809150509250929050565b6000608082840312156140fd57600080fd5b60008083601f8401126153f657600080fd5b50813567ffffffffffffffff81111561540e57600080fd5b60208301915083602082850101111561542657600080fd5b9250929050565b803561543881615303565b919050565b6000806000806000806000806000898b0361016081121561545d57600080fd5b8a3567ffffffffffffffff8082111561547557600080fd5b6154818e838f016153e4565b909c509a5060208d013591508082111561549a57600080fd5b506154a78d828e016153e4565b90995097505060408b01356154bb81615303565b955060608b01356154cb81615303565b945060808b01356154db81615303565b935060a0609f19820112156154ef57600080fd5b5060a08a0191506155036101408b0161542d565b90509295985092959850929598565b60008060006060848603121561552757600080fd5b83359250602084013561553981615303565b9150604084013561554981615303565b809150509250925092565b6000606082840312156140fd57600080fd5b6000806040838503121561557957600080fd5b823561558481615303565b915060208301356153c781615303565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff811182821017156155ce576155ce615594565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156155fd576155fd615594565b604052919050565b600067ffffffffffffffff82111561561f5761561f615594565b5060051b60200190565b600082601f83011261563a57600080fd5b8135602061564f61564a83615605565b6155d4565b82815260059290921b8401810191818101908684111561566e57600080fd5b8286015b848110156156895780358352918301918301615672565b509695505050505050565b600082601f8301126156a557600080fd5b813567ffffffffffffffff8111156156bf576156bf615594565b6156d2601f8201601f19166020016155d4565b8181528460208386010111156156e757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561571a57600080fd5b843567ffffffffffffffff8082111561573257600080fd5b818701915087601f83011261574657600080fd5b8135602061575661564a83615605565b82815260059290921b8401810191818101908b84111561577557600080fd5b948201945b8386101561579c57853561578d81615303565b8252948201949082019061577a565b985050880135925050808211156157b257600080fd5b6157be88838901615629565b945060408701359150808211156157d457600080fd5b6157e088838901615629565b935060608701359150808211156157f657600080fd5b5061580387828801615694565b91505092959194509250565b6000604082840312156140fd57600080fd5b60006020828403121561583357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156158635761586361583a565b500190565b600181811c9082168061587c57607f821691505b602082108114156140fd57634e487b7160e01b600052602260045260246000fd5b6000828210156158af576158af61583a565b500390565b60008160001904831182151516156158ce576158ce61583a565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826158f8576158f86158d3565b500490565b600181815b8085111561593857816000190482111561591e5761591e61583a565b8085161561592b57918102915b93841c9390800290615902565b509250929050565b60008261594f57506001610886565b8161595c57506000610886565b8160018114615972576002811461597c57615998565b6001915050610886565b60ff84111561598d5761598d61583a565b50506001821b610886565b5060208310610133831016604e8410600b84101617156159bb575081810a610886565b6159c583836158fd565b80600019048211156159d9576159d961583a565b029392505050565b600061086b8383615940565b600061ffff83811690831681811015615a0857615a0861583a565b039392505050565b805161543881615303565b600060208284031215615a2d57600080fd5b815161086b81615303565b600060208284031215615a4a57600080fd5b6040516020810181811067ffffffffffffffff82111715615a6d57615a6d615594565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461543857600080fd5b805164ffffffffff8116811461543857600080fd5b61ffff81168114610d2357600080fd5b805161543881615aaf565b60006101e08284031215615add57600080fd5b615ae56155aa565b615aef8484615a38565b8152615afd60208401615a7a565b6020820152615b0e60408401615a7a565b6040820152615b1f60608401615a7a565b6060820152615b3060808401615a7a565b6080820152615b4160a08401615a7a565b60a0820152615b5260c08401615a9a565b60c0820152615b6360e08401615abf565b60e0820152610100615b76818501615a10565b90820152610120615b88848201615a10565b90820152610140615b9a848201615a10565b90820152610160615bac848201615a10565b90820152610180615bbe848201615a7a565b908201526101a0615bd0848201615a7a565b908201526101c0615be2848201615a7a565b908201529392505050565b600080821280156001600160ff1b0384900385131615615c0f57615c0f61583a565b600160ff1b8390038412811615615c2857615c2861583a565b50500190565b60008083128015600160ff1b850184121615615c4c57615c4c61583a565b6001600160ff1b0384018313811615615c6757615c6761583a565b50500390565b600060208284031215615c7f57600080fd5b813561086b81615aaf565b600060208284031215615c9c57600080fd5b81356001600160f01b038116811461086b57600080fd5b8051801515811461543857600080fd5b600060208284031215615cd557600080fd5b61086b82615cb3565b60008060008060008060c08789031215615cf757600080fd5b86519550602087015194506040870151935060608701519250615d1c60808801615cb3565b9150615d2a60a08801615cb3565b90509295509295509295565b634e487b7160e01b600052603260045260246000fd5b600060208284031215615d5e57600080fd5b813563ffffffff8116811461086b57600080fd5b600060208284031215615d8457600080fd5b815160ff8116811461086b57600080fd5b610100810161088682846001600160a01b0380825116835280602083015116602084015262ffffff60408301511660408401528060608301511660608401526080820151608084015260a082015160a084015260c082015160c08401528060e08301511660e0840152505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600061086b60ff841683615940565b600060208284031215615e6f57600080fd5b61086b8383615a38565b600061ffff80841680615e8e57615e8e6158d3565b92169190910492915050565b600061ffff808316818516808303821115615eb757615eb761583a565b01949350505050565b6000608082016001600160a01b038088168452602060808186015282885180855260a087019150828a01945060005b81811015615f0d578551851683529483019491830191600101615eef565b5050858103604087015287518082529082019350915080870160005b83811015615f4557815185529382019390820190600101615f29565b505050508281036060840152614ef381856152ab565b60008251615f6d81846020870161527f565b919091019291505056fea164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "harvestFees()": {
        "notice": "stakes the rewards from the staked Glp and claims WETH to buy glp"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3997,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 4000,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5266,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4287,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4293,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4295,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 4297,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 4299,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 4878,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 6440,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "asset",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20Metadata)5373"
      },
      {
        "astId": 3869,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_owner",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 3989,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11975,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "FEE",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 11977,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "keeper",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 11980,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "dnGmxSeniorVault",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(IDnGmxSeniorVault)7119"
      },
      {
        "astId": 11982,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 11984,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "withdrawFeeBps",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 11986,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "protocolFee",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 11988,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "seniorVaultWethRewards",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 11990,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "seniorVaultWethConversionThreshold",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 11992,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "wethThreshold",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 11994,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "slippageThreshold",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      },
      {
        "astId": 11996,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "depositCap",
        "offset": 0,
        "slot": "162",
        "type": "t_uint256"
      },
      {
        "astId": 11998,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "dnUsdcDeposited",
        "offset": 0,
        "slot": "163",
        "type": "t_int256"
      },
      {
        "astId": 12000,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_hasFlashloaned",
        "offset": 0,
        "slot": "164",
        "type": "t_bool"
      },
      {
        "astId": 12002,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "lastRebalanceTS",
        "offset": 1,
        "slot": "164",
        "type": "t_uint64"
      },
      {
        "astId": 12004,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "rebalanceTimeThreshold",
        "offset": 9,
        "slot": "164",
        "type": "t_uint32"
      },
      {
        "astId": 12006,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "rebalanceDeltaThreshold",
        "offset": 13,
        "slot": "164",
        "type": "t_uint16"
      },
      {
        "astId": 12010,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "pool",
        "offset": 0,
        "slot": "165",
        "type": "t_contract(IPool)1121"
      },
      {
        "astId": 12013,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "oracle",
        "offset": 0,
        "slot": "166",
        "type": "t_contract(IPriceOracle)1350"
      },
      {
        "astId": 12016,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "poolAddressProvider",
        "offset": 0,
        "slot": "167",
        "type": "t_contract(IPoolAddressesProvider)1330"
      },
      {
        "astId": 12019,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "aUsdc",
        "offset": 0,
        "slot": "168",
        "type": "t_contract(IAToken)218"
      },
      {
        "astId": 12022,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "vWbtc",
        "offset": 0,
        "slot": "169",
        "type": "t_contract(IDebtToken)11955"
      },
      {
        "astId": 12025,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "vWeth",
        "offset": 0,
        "slot": "170",
        "type": "t_contract(IDebtToken)11955"
      },
      {
        "astId": 12028,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "swapRouter",
        "offset": 0,
        "slot": "171",
        "type": "t_contract(ISwapRouter)6395"
      },
      {
        "astId": 12031,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "balancerVault",
        "offset": 0,
        "slot": "172",
        "type": "t_contract(IBalancerVault)7305"
      },
      {
        "astId": 12033,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "targetHealthFactor",
        "offset": 0,
        "slot": "173",
        "type": "t_uint256"
      },
      {
        "astId": 12036,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "aaveRewardsController",
        "offset": 0,
        "slot": "174",
        "type": "t_contract(IRewardsController)3570"
      },
      {
        "astId": 12039,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "usdcRedeemSlippage",
        "offset": 20,
        "slot": "174",
        "type": "t_uint16"
      },
      {
        "astId": 12041,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "usdcConversionThreshold",
        "offset": 0,
        "slot": "175",
        "type": "t_uint240"
      },
      {
        "astId": 12044,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "fsGlp",
        "offset": 0,
        "slot": "176",
        "type": "t_contract(IERC20)5348"
      },
      {
        "astId": 12047,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "glp",
        "offset": 0,
        "slot": "177",
        "type": "t_contract(IERC20Metadata)5373"
      },
      {
        "astId": 12050,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "usdc",
        "offset": 0,
        "slot": "178",
        "type": "t_contract(IERC20Metadata)5373"
      },
      {
        "astId": 12053,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "usdt",
        "offset": 0,
        "slot": "179",
        "type": "t_contract(IERC20Metadata)5373"
      },
      {
        "astId": 12056,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "weth",
        "offset": 0,
        "slot": "180",
        "type": "t_contract(IERC20Metadata)5373"
      },
      {
        "astId": 12059,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "wbtc",
        "offset": 0,
        "slot": "181",
        "type": "t_contract(IERC20Metadata)5373"
      },
      {
        "astId": 12062,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "gmxVault",
        "offset": 0,
        "slot": "182",
        "type": "t_contract(IVault)8205"
      },
      {
        "astId": 12065,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "glpManager",
        "offset": 0,
        "slot": "183",
        "type": "t_contract(IGlpManager)7480"
      },
      {
        "astId": 12068,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "rewardRouter",
        "offset": 0,
        "slot": "184",
        "type": "t_contract(IRewardRouterV2)7643"
      },
      {
        "astId": 12071,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "batchingManager",
        "offset": 0,
        "slot": "185",
        "type": "t_contract(IDnGmxBatchingManager)7082"
      },
      {
        "astId": 12074,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "tricryptoPool",
        "offset": 0,
        "slot": "186",
        "type": "t_contract(IStableSwap)7382"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAToken)218": {
        "encoding": "inplace",
        "label": "contract IAToken",
        "numberOfBytes": "20"
      },
      "t_contract(IBalancerVault)7305": {
        "encoding": "inplace",
        "label": "contract IBalancerVault",
        "numberOfBytes": "20"
      },
      "t_contract(IDebtToken)11955": {
        "encoding": "inplace",
        "label": "contract IDebtToken",
        "numberOfBytes": "20"
      },
      "t_contract(IDnGmxBatchingManager)7082": {
        "encoding": "inplace",
        "label": "contract IDnGmxBatchingManager",
        "numberOfBytes": "20"
      },
      "t_contract(IDnGmxSeniorVault)7119": {
        "encoding": "inplace",
        "label": "contract IDnGmxSeniorVault",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)5348": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)5373": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IGlpManager)7480": {
        "encoding": "inplace",
        "label": "contract IGlpManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)1121": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolAddressesProvider)1330": {
        "encoding": "inplace",
        "label": "contract IPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)1350": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardRouterV2)7643": {
        "encoding": "inplace",
        "label": "contract IRewardRouterV2",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsController)3570": {
        "encoding": "inplace",
        "label": "contract IRewardsController",
        "numberOfBytes": "20"
      },
      "t_contract(IStableSwap)7382": {
        "encoding": "inplace",
        "label": "contract IStableSwap",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)6395": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)8205": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint240": {
        "encoding": "inplace",
        "label": "uint240",
        "numberOfBytes": "30"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}