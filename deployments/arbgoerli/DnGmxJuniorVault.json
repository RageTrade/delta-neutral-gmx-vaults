{
  "address": "0x1637c91Dbb18d29B0394D6ed2FbCfC77D3b4f0a4",
  "abi": [
    {
      "inputs": [],
      "name": "ArraysLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositCapExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashloanNotInitiated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRebalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotBalancerVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDnGmxSeniorVault",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorisedKeeperAddress",
          "type": "address"
        }
      ],
      "name": "OnlyKeeperAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AllowancesGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_batchingManager",
          "type": "address"
        }
      ],
      "name": "BatchingManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newDepositCap",
          "type": "uint256"
        }
      ],
      "name": "DepositCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_dnGmxSeniorVault",
          "type": "address"
        }
      ],
      "name": "DnGmxSeniorVaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "FeeRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newKeeper",
          "type": "address"
        }
      ],
      "name": "KeeperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "rebalanceTimeThreshold",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "rebalanceDeltaThreshold",
          "type": "uint16"
        }
      ],
      "name": "RebalanceParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Rebalanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wethHarvested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "esGmxStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "juniorVaultWeth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seniorVaultWeth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "juniorVaultGlp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seniorVaultAUsdc",
          "type": "uint256"
        }
      ],
      "name": "RewardsHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawFeeBps",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "slippageThresholdGmx",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint240",
          "name": "usdcConversionThreshold",
          "type": "uint240"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wethConversionThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hedgeUsdcAmountThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hfThreshold",
          "type": "uint256"
        }
      ],
      "name": "YieldParamsUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimVestedGmx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        }
      ],
      "name": "getMarketValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marketValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "maximize",
          "type": "bool"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceX128",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdcBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultMarketValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "vaultMarketValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "grantAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardRouter",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Metadata",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Metadata",
              "name": "wbtc",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Metadata",
              "name": "sGlp",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Metadata",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Metadata",
              "name": "usdt",
              "type": "address"
            }
          ],
          "internalType": "struct DnGmxJuniorVault.Tokens",
          "name": "_tokens",
          "type": "tuple"
        },
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "_poolAddressesProvider",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isValidRebalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "receiveFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newKeeper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dnGmxSeniorVault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newDepositCap",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_batchingManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFeeBps",
          "type": "uint256"
        }
      ],
      "name": "setAdminParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBalancerVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_targetHealthFactor",
          "type": "uint256"
        },
        {
          "internalType": "contract IRewardsController",
          "name": "_aaveRewardsController",
          "type": "address"
        }
      ],
      "name": "setHedgeParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_rebalanceTimeThreshold",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_rebalanceDeltaThreshold",
          "type": "uint16"
        }
      ],
      "name": "setRebalanceParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_slippageThresholdSwap",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_slippageThresholdGmx",
          "type": "uint16"
        },
        {
          "internalType": "uint208",
          "name": "_usdcConversionThreshold",
          "type": "uint208"
        },
        {
          "internalType": "uint256",
          "name": "_hfThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wethConversionThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_hedgeUsdcAmountThreshold",
          "type": "uint256"
        }
      ],
      "name": "setThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopVestAndStakeEsGmx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeAndVestEsGmx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x650420b565077205688041b53d778ec3bb739bd1fe08595137eab2b93555045c",
  "receipt": {
    "to": null,
    "from": "0x4ec0dda0430A54b4796109913545F715B2d89F34",
    "contractAddress": "0x1637c91Dbb18d29B0394D6ed2FbCfC77D3b4f0a4",
    "transactionIndex": 1,
    "gasUsed": "22720819",
    "logsBloom": "0x
    "blockHash": "0xa40383a35edd4cc49befcaf09166217ee184abf9a02dbe2e7d5efd7a31bb2a8c",
    "transactionHash": "0x650420b565077205688041b53d778ec3bb739bd1fe08595137eab2b93555045c",
    "logs": [],
    "blockNumber": 710454,
    "cumulativeGasUsed": "22720819",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "07330335c049b8b9367e6892ce9313ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ArraysLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositCapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashloanNotInitiated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRebalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBalancerVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDnGmxSeniorVault\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorisedKeeperAddress\",\"type\":\"address\"}],\"name\":\"OnlyKeeperAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowancesGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_batchingManager\",\"type\":\"address\"}],\"name\":\"BatchingManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDepositCap\",\"type\":\"uint256\"}],\"name\":\"DepositCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_dnGmxSeniorVault\",\"type\":\"address\"}],\"name\":\"DnGmxSeniorVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newKeeper\",\"type\":\"address\"}],\"name\":\"KeeperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"rebalanceTimeThreshold\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"rebalanceDeltaThreshold\",\"type\":\"uint16\"}],\"name\":\"RebalanceParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Rebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethHarvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"esGmxStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"juniorVaultWeth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seniorVaultWeth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"juniorVaultGlp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seniorVaultAUsdc\",\"type\":\"uint256\"}],\"name\":\"RewardsHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawFeeBps\",\"type\":\"uint256\"}],\"name\":\"WithdrawFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"slippageThresholdGmx\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint240\",\"name\":\"usdcConversionThreshold\",\"type\":\"uint240\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethConversionThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hedgeUsdcAmountThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hfThreshold\",\"type\":\"uint256\"}],\"name\":\"YieldParamsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVestedGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"getMarketValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"maximize\",\"type\":\"bool\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceX128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdcBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultMarketValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"vaultMarketValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grantAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardRouter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"wbtc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"sGlp\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"usdt\",\"type\":\"address\"}],\"internalType\":\"struct DnGmxJuniorVault.Tokens\",\"name\":\"_tokens\",\"type\":\"tuple\"},{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"_poolAddressesProvider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isValidRebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newKeeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dnGmxSeniorVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newDepositCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_batchingManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeBps\",\"type\":\"uint256\"}],\"name\":\"setAdminParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBalancerVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewardsController\",\"name\":\"_aaveRewardsController\",\"type\":\"address\"}],\"name\":\"setHedgeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rebalanceTimeThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_rebalanceDeltaThreshold\",\"type\":\"uint16\"}],\"name\":\"setRebalanceParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_slippageThresholdSwap\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_slippageThresholdGmx\",\"type\":\"uint16\"},{\"internalType\":\"uint208\",\"name\":\"_usdcConversionThreshold\",\"type\":\"uint208\"},{\"internalType\":\"uint256\",\"name\":\"_hfThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wethConversionThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hedgeUsdcAmountThreshold\",\"type\":\"uint256\"}],\"name\":\"setThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopVestAndStakeEsGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAndVestEsGmx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"maxRedeem(address)\":{\"details\":\"Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert.\"},\"maxWithdraw(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"harvestFees()\":{\"notice\":\"stakes the rewards from the staked Glp and claims WETH to buy glp\"},\"withdrawFees()\":{\"notice\":\"withdraw accumulated WETH fees\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/DnGmxJuniorVault.sol\":\"DnGmxJuniorVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":340},\"remappings\":[]},\"sources\":{\"@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6fdde76d62d0772bbf8c579e7990013034509a99abbb661d8b5a8e8c42f7afb5\",\"license\":\"agpl-3.0\"},\"@aave/core-v3/contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableAToken} from './IInitializableAToken.sol';\\n\\n/**\\n * @title IAToken\\n * @author Aave\\n * @notice Defines the basic interface for an AToken.\\n **/\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @notice Mints `amount` aTokens to `user`\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted aTokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address caller,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @dev In some instances, the mint event could be emitted from a burn transaction\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param from The address from which the aTokens will be burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  function burn(\\n    address from,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @notice Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @notice Transfers the underlying asset to `target`.\\n   * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external;\\n\\n  /**\\n   * @notice Handles the underlying received by the aToken after the transfer has been completed.\\n   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\\n   * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\\n   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\n   * @param user The user executing the repayment\\n   * @param amount The amount getting repaid\\n   **/\\n  function handleRepayment(address user, uint256 amount) external;\\n\\n  /**\\n   * @notice Allow passing a signed message to approve spending\\n   * @dev implements the permit function as for\\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner The owner of the funds\\n   * @param spender The spender\\n   * @param value The amount\\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n   * @param v Signature param\\n   * @param s Signature param\\n   * @param r Signature param\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @return The address of the underlying asset\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.\\n   * @return Address of the Aave treasury\\n   **/\\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Get the domain separator for the token\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n   * @return The domain separator of the token at current chain\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the nonce for owner.\\n   * @param owner The address of the owner\\n   * @return The nonce of the owner\\n   **/\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc4760b005b3b5e12eb91c5b7486976a36d9f568ef9a409c8534ee8c12e256ec8\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAaveIncentivesController\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\n **/\\ninterface IAaveIncentivesController {\\n  /**\\n   * @dev Emitted during `handleAction`, `claimRewards` and `claimRewardsOnBehalf`\\n   * @param user The user that accrued rewards\\n   * @param amount The amount of accrued rewards\\n   */\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted during `claimRewards` and `claimRewardsOnBehalf`\\n   * @param user The address that accrued rewards\\n   *\\u00a0@param to The address that will be receiving the rewards\\n   * @param claimer The address that performed the claim\\n   * @param amount The amount of rewards\\n   */\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted during `setClaimer`\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @notice Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index\\n   * @return The emission per second\\n   * @return The last updated timestamp\\n   **/\\n  function getAssetData(address asset)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * LEGACY **************************\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function assets(address asset)\\n    external\\n    view\\n    returns (\\n      uint128,\\n      uint128,\\n      uint256\\n    );\\n\\n  /**\\n   * @notice Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @notice Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @notice Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n  /**\\n   * @notice Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the pool\\n   * @param totalSupply The total supply of the asset in the pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @notice Returns the total of rewards of a user, already accrued + not yet accrued\\n   * @param assets The assets to accumulate rewards for\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Claims reward for a user, on the assets of the pool, accumulating the pending rewards\\n   * @param assets The assets to accumulate rewards for\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Claims reward for a user on its behalf, on the assets of the pool, accumulating the pending rewards.\\n   * @dev The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The assets to accumulate rewards for\\n   * @param amount The amount of rewards to claim\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the unclaimed rewards of the user\\n   * @param user The address of the user\\n   * @return The unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the user index for a specific asset\\n   * @param user The address of the user\\n   * @param asset The asset to incentivize\\n   * @return The user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice for backward compatibility with previous implementation of the Incentives controller\\n   * @return The address of the reward token\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @notice for backward compatibility with previous implementation of the Incentives controller\\n   * @return The precision used in the incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n\\n  /**\\n   * @dev Gets the distribution end timestamp of the emissions\\n   */\\n  function DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x15a3f9887545112721e45312b3453115729d6c9870b10cba61da627a35c189bd\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IInitializableAToken\\n * @author Aave\\n * @notice Interface for the initialize function on AToken\\n **/\\ninterface IInitializableAToken {\\n  /**\\n   * @dev Emitted when an aToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param treasury The address of the treasury\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param aTokenDecimals The decimals of the underlying\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    address incentivesController,\\n    uint8 aTokenDecimals,\\n    string aTokenName,\\n    string aTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @notice Initializes the aToken\\n   * @param pool The pool contract that is initializing this contract\\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  function initialize(\\n    IPool pool,\\n    address treasury,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 aTokenDecimals,\\n    string calldata aTokenName,\\n    string calldata aTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0x771ccf0ea983cb3b466d83e6f4db0cf268df791e87c2c8c2ec66d6088613b67c\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IInitializableDebtToken\\n * @author Aave\\n * @notice Interface for the initialize function common between debt tokens\\n **/\\ninterface IInitializableDebtToken {\\n  /**\\n   * @dev Emitted when a debt token is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param debtTokenDecimals The decimals of the debt token\\n   * @param debtTokenName The name of the debt token\\n   * @param debtTokenSymbol The symbol of the debt token\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address incentivesController,\\n    uint8 debtTokenDecimals,\\n    string debtTokenName,\\n    string debtTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @notice Initializes the debt token.\\n   * @param pool The pool contract that is initializing this contract\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n   * @param debtTokenName The name of the token\\n   * @param debtTokenSymbol The symbol of the token\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  function initialize(\\n    IPool pool,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 debtTokenDecimals,\\n    string memory debtTokenName,\\n    string memory debtTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0x78f14c84b714dcc8adba99fc86b5e0d23568a0ad57578b1601c1d0b5e2db4b9e\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   **/\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   **/\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   **/\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   **/\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   **/\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   **/\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   **/\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   **/\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   **/\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   **/\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   **/\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   **/\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\",\"keccak256\":\"0xad2946be653bb9395f906614a0c62f37f8a44f3963e62f63f18a409dfbea51f2\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   **/\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   **/\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   **/\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   **/\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   **/\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   **/\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   **/\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x2f70daa98416d61fd3128b1ee05f96852d84074689a2c2132a7fd587c5c9e3f0\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracle\\n * @author Aave\\n * @notice Defines the basic interface for a Price oracle.\\n **/\\ninterface IPriceOracle {\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   **/\\n  function getAssetPrice(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Set the price of the asset\\n   * @param asset The address of the asset\\n   * @param price The price of the asset\\n   **/\\n  function setAssetPrice(address asset, uint256 price) external;\\n}\\n\",\"keccak256\":\"0xa420be12e8e5402380204e0456189880e495892dd32fd9283df6d77c6fc25b23\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaledbalance token.\\n **/\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted scaled balance tokens\\n   * @param value The amount being minted (user entered amount + balance increase from interest)\\n   * @param balanceIncrease The increase in balance since the last action of the user\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  event Mint(\\n    address indexed caller,\\n    address indexed onBehalfOf,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted after scaled balance tokens are burned\\n   * @param from The address from which the scaled tokens will be burned\\n   * @param target The address that will receive the underlying, if any\\n   * @param value The amount being burned (user entered amount - balance increase from interest)\\n   * @param balanceIncrease The increase in balance since the last action of the user\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  event Burn(\\n    address indexed from,\\n    address indexed target,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @notice Returns the scaled balance of the user.\\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n   * at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns last index interest was accrued to the user's balance\\n   * @param user The address of the user\\n   * @return The last index interest was accrued to the user's balance, expressed in ray\\n   **/\\n  function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcfecd4a44d5cb97162e99d83120fdfc631e1dd7161cc0ec9338c5c076e796a3c\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableDebtToken} from './IInitializableDebtToken.sol';\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n  /**\\n   * @notice Mints debt token to the `onBehalfOf` address\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\n   * @param onBehalfOf The address receiving the debt tokens\\n   * @param amount The amount of debt being minted\\n   * @param index The variable debt index of the reserve\\n   * @return True if the previous balance of the user is 0, false otherwise\\n   * @return The scaled total debt of the reserve\\n   **/\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool, uint256);\\n\\n  /**\\n   * @notice Burns user variable debt\\n   * @dev In some instances, a burn transaction will emit a mint event\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param from The address from which the debt will be burned\\n   * @param amount The amount getting burned\\n   * @param index The variable debt index of the reserve\\n   * @return The scaled total debt of the reserve\\n   **/\\n  function burn(\\n    address from,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)\\n   * @return The address of the underlying asset\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd704126de135b8fa7cd1acc72e47e5ef1b1a7dcdd479875df52f28b8c8342f6a\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n  uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n  uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n  /// @dev bit 63 reserved\\n\\n  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\n  uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\n  uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\n  uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\n\\n  uint256 internal constant MAX_VALID_LTV = 65535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n  uint256 internal constant MAX_VALID_DECIMALS = 255;\\n  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\n  uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\n  uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\n  uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\n\\n  uint256 public constant DEBT_CEILING_DECIMALS = 2;\\n  uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n  /**\\n   * @notice Sets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @param ltv The new ltv\\n   **/\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n    require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\n\\n    self.data = (self.data & LTV_MASK) | ltv;\\n  }\\n\\n  /**\\n   * @notice Gets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @return The loan to value\\n   **/\\n  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return self.data & ~LTV_MASK;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @param threshold The new liquidation threshold\\n   **/\\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold)\\n    internal\\n    pure\\n  {\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.INVALID_LIQ_THRESHOLD);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n      (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation threshold\\n   **/\\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @param bonus The new liquidation bonus\\n   **/\\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus)\\n    internal\\n    pure\\n  {\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_BONUS_MASK) |\\n      (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation bonus\\n   **/\\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @param decimals The decimals\\n   **/\\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals)\\n    internal\\n    pure\\n  {\\n    require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\n\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @return The decimals of the asset\\n   **/\\n  function getDecimals(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @param active The active state\\n   **/\\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n    self.data =\\n      (self.data & ACTIVE_MASK) |\\n      (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @return The active state\\n   **/\\n  function getActive(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~ACTIVE_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @param frozen The frozen state\\n   **/\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n    self.data =\\n      (self.data & FROZEN_MASK) |\\n      (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @return The frozen state\\n   **/\\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~FROZEN_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @param paused The paused state\\n   **/\\n  function setPaused(DataTypes.ReserveConfigurationMap memory self, bool paused) internal pure {\\n    self.data =\\n      (self.data & PAUSED_MASK) |\\n      (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @return The paused state\\n   **/\\n  function getPaused(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~PAUSED_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the borrowable in isolation flag for the reserve.\\n   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\n   * amount will be accumulated in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @param borrowable True if the asset is borrowable\\n   **/\\n  function setBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self, bool borrowable)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\n      (uint256(borrowable ? 1 : 0) << BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowable in isolation flag for the reserve.\\n   * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\n   * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @return The borrowable in isolation flag\\n   **/\\n  function getBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @param siloed True if the asset is siloed\\n   **/\\n  function setSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self, bool siloed)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & SILOED_BORROWING_MASK) |\\n      (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @return The siloed borrowing flag\\n   **/\\n  function getSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~SILOED_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\n   **/\\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrowing state\\n   **/\\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables stable rate borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n   **/\\n  function setStableRateBorrowingEnabled(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool enabled\\n  ) internal pure {\\n    self.data =\\n      (self.data & STABLE_BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the stable rate borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The stable rate borrowing state\\n   **/\\n  function getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @param reserveFactor The reserve factor\\n   **/\\n  function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor)\\n    internal\\n    pure\\n  {\\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.INVALID_RESERVE_FACTOR);\\n\\n    self.data =\\n      (self.data & RESERVE_FACTOR_MASK) |\\n      (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @return The reserve factor\\n   **/\\n  function getReserveFactor(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @param borrowCap The borrow cap\\n   **/\\n  function setBorrowCap(DataTypes.ReserveConfigurationMap memory self, uint256 borrowCap)\\n    internal\\n    pure\\n  {\\n    require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\n\\n    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrow cap\\n   **/\\n  function getBorrowCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @param supplyCap The supply cap\\n   **/\\n  function setSupplyCap(DataTypes.ReserveConfigurationMap memory self, uint256 supplyCap)\\n    internal\\n    pure\\n  {\\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\n\\n    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The supply cap\\n   **/\\n  function getSupplyCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the debt ceiling in isolation mode for the asset\\n   * @param self The reserve configuration\\n   * @param ceiling The maximum debt ceiling for the asset\\n   **/\\n  function setDebtCeiling(DataTypes.ReserveConfigurationMap memory self, uint256 ceiling)\\n    internal\\n    pure\\n  {\\n    require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\n\\n    self.data = (self.data & DEBT_CEILING_MASK) | (ceiling << DEBT_CEILING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\n   * @param self The reserve configuration\\n   * @return The debt ceiling (0 = isolation mode disabled)\\n   **/\\n  function getDebtCeiling(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation protocol fee of the reserve\\n   * @param self The reserve configuration\\n   * @param liquidationProtocolFee The liquidation protocol fee\\n   **/\\n  function setLiquidationProtocolFee(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 liquidationProtocolFee\\n  ) internal pure {\\n    require(\\n      liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\n      Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\n    );\\n\\n    self.data =\\n      (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\n      (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the liquidation protocol fee\\n   * @param self The reserve configuration\\n   * @return The liquidation protocol fee\\n   **/\\n  function getLiquidationProtocolFee(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return\\n      (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >> LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @param unbackedMintCap The unbacked mint cap\\n   **/\\n  function setUnbackedMintCap(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 unbackedMintCap\\n  ) internal pure {\\n    require(unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP, Errors.INVALID_UNBACKED_MINT_CAP);\\n\\n    self.data =\\n      (self.data & UNBACKED_MINT_CAP_MASK) |\\n      (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The unbacked mint cap\\n   **/\\n  function getUnbackedMintCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~UNBACKED_MINT_CAP_MASK) >> UNBACKED_MINT_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the eMode asset category\\n   * @param self The reserve configuration\\n   * @param category The asset category when the user selects the eMode\\n   **/\\n  function setEModeCategory(DataTypes.ReserveConfigurationMap memory self, uint256 category)\\n    internal\\n    pure\\n  {\\n    require(category <= MAX_VALID_EMODE_CATEGORY, Errors.INVALID_EMODE_CATEGORY);\\n\\n    self.data = (self.data & EMODE_CATEGORY_MASK) | (category << EMODE_CATEGORY_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the eMode asset category\\n   * @param self The reserve configuration\\n   * @return The eMode category for the asset\\n   **/\\n  function getEModeCategory(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Gets the configuration flags of the reserve\\n   * @param self The reserve configuration\\n   * @return The state flag representing active\\n   * @return The state flag representing frozen\\n   * @return The state flag representing borrowing enabled\\n   * @return The state flag representing stableRateBorrowing enabled\\n   * @return The state flag representing paused\\n   **/\\n  function getFlags(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      bool,\\n      bool,\\n      bool,\\n      bool,\\n      bool\\n    )\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~ACTIVE_MASK) != 0,\\n      (dataLocal & ~FROZEN_MASK) != 0,\\n      (dataLocal & ~BORROWING_MASK) != 0,\\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\n      (dataLocal & ~PAUSED_MASK) != 0\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the configuration parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing ltv\\n   * @return The state param representing liquidation threshold\\n   * @return The state param representing liquidation bonus\\n   * @return The state param representing reserve decimals\\n   * @return The state param representing reserve factor\\n   * @return The state param representing eMode category\\n   **/\\n  function getParams(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      dataLocal & ~LTV_MASK,\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION,\\n      (dataLocal & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the caps parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing borrow cap\\n   * @return The state param representing supply cap.\\n   **/\\n  function getCaps(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256, uint256)\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\n      (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x24ac246ad26f88923762131f07657a54594ce7cb5342de3f47b0ed6ce908d42a\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\n  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\n  string public constant SAME_BLOCK_BORROW_REPAY = '48'; // 'Borrow and repay in same block is not allowed'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\n  string public constant ATOKEN_SUPPLY_NOT_ZERO = '54'; // 'AToken supply is not zero'\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\n  string public constant USER_IN_ISOLATION_MODE = '62'; // 'User is in isolation mode'\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\n}\\n\",\"keccak256\":\"0x3378cb9e8c58e121f10e9d2022c50984331621217281e11f1bb3dc79b3d77706\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary WadRayMath {\\n  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant HALF_WAD = 0.5e18;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant HALF_RAY = 0.5e27;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_WAD), WAD)\\n    }\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, WAD), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raymul b\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_RAY), RAY)\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raydiv b\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, RAY), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @return b = a converted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n    assembly {\\n      b := div(a, WAD_RAY_RATIO)\\n      let remainder := mod(a, WAD_RAY_RATIO)\\n      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n        b := add(b, 1)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @return b = a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n    // to avoid overflow, b/WAD_RAY_RATIO == a\\n    assembly {\\n      b := mul(a, WAD_RAY_RATIO)\\n\\n      if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n        revert(0, 0)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x681682d3fc1104c907ecdcc26d5cddefe82acf4231396124e5cabcca318a788d\",\"license\":\"BUSL-1.1\"},\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0xf3acc235689aae1094d33bfdf90e60b0c3ae1f12c5f095b8cffb69bc6880765c\",\"license\":\"BUSL-1.1\"},\"@aave/periphery-v3/contracts/misc/interfaces/IEACAggregatorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\ninterface IEACAggregatorProxy {\\n  function decimals() external view returns (uint8);\\n\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\\n}\\n\",\"keccak256\":\"0xc6e0656205d26ce3ad1c14f647ee70ced21640522d06ef380ed7c35dad7c22e3\",\"license\":\"agpl-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport {IRewardsDistributor} from './IRewardsDistributor.sol';\\nimport {ITransferStrategyBase} from './ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\nimport {RewardsDataTypes} from '../libraries/RewardsDataTypes.sol';\\n\\n/**\\n * @title IRewardsController\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Controller.\\n */\\ninterface IRewardsController is IRewardsDistributor {\\n  /**\\n   * @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @dev Emitted when rewards are claimed\\n   * @param user The address of the user rewards has been claimed on behalf of\\n   * @param reward The address of the token reward is claimed\\n   * @param to The address of the receiver of the rewards\\n   * @param claimer The address of the claimer\\n   * @param amount The amount of rewards claimed\\n   */\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed reward,\\n    address indexed to,\\n    address claimer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted when a transfer strategy is installed for the reward distribution\\n   * @param reward The address of the token reward\\n   * @param transferStrategy The address of TransferStrategy contract\\n   */\\n  event TransferStrategyInstalled(address indexed reward, address indexed transferStrategy);\\n\\n  /**\\n   * @dev Emitted when the reward oracle is updated\\n   * @param reward The address of the token reward\\n   * @param rewardOracle The address of oracle\\n   */\\n  event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\\n   * @param reward The address of the reward token\\n   * @param transferStrategy The address of the TransferStrategy logic contract\\n   */\\n  function setTransferStrategy(address reward, ITransferStrategyBase transferStrategy) external;\\n\\n  /**\\n   * @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n   * @notice At the moment of reward configuration, the Incentives Controller performs\\n   * a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\n   * This check is enforced for integrators to be able to show incentives at\\n   * the current Aave UI without the need to setup an external price registry\\n   * @param reward The address of the reward to set the price aggregator\\n   * @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\n   */\\n  function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\n\\n  /**\\n   * @dev Get the price aggregator oracle address\\n   * @param reward The address of the reward\\n   * @return The price oracle of the reward\\n   */\\n  function getRewardOracle(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Returns the Transfer Strategy implementation contract address being used for a reward address\\n   * @param reward The address of the reward\\n   * @return The address of the TransferStrategy contract\\n   */\\n  function getTransferStrategy(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n   * @param config The assets configuration input, the list of structs contains the following fields:\\n   *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n   *   uint256 totalSupply: The total supply of the asset to incentivize\\n   *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n   *   address asset: The asset address to incentivize\\n   *   address reward: The reward token address\\n   *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\\n   *   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n   *                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n   */\\n  function configureAssets(RewardsDataTypes.RewardsConfigInput[] memory config) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   * @param userBalance The user balance of the asset\\n   * @param totalSupply The total supply of the asset\\n   **/\\n  function handleAction(\\n    address user,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param to The address that will be receiving the rewards\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The\\n   * caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsToSelf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n   **/\\n  function claimAllRewards(address[] calldata assets, address to)\\n    external\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsOnBehalf(\\n    address[] calldata assets,\\n    address user,\\n    address to\\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsToSelf(address[] calldata assets)\\n    external\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n}\\n\",\"keccak256\":\"0xbaaa2c6aa9eea166d41ac39751ee1a14f57ece37bfcc0a7420a2b116a0a6fa37\",\"license\":\"agpl-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IRewardsDistributor\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Distributor.\\n */\\ninterface IRewardsDistributor {\\n  /**\\n   * @dev Emitted when the configuration of the rewards of an asset is updated.\\n   * @param asset The address of the incentivized asset\\n   * @param reward The address of the reward token\\n   * @param oldEmission The old emissions per second value of the reward distribution\\n   * @param newEmission The new emissions per second value of the reward distribution\\n   * @param oldDistributionEnd The old end timestamp of the reward distribution\\n   * @param newDistributionEnd The new end timestamp of the reward distribution\\n   * @param assetIndex The index of the asset distribution\\n   */\\n  event AssetConfigUpdated(\\n    address indexed asset,\\n    address indexed reward,\\n    uint256 oldEmission,\\n    uint256 newEmission,\\n    uint256 oldDistributionEnd,\\n    uint256 newDistributionEnd,\\n    uint256 assetIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when rewards of an asset are accrued on behalf of a user.\\n   * @param asset The address of the incentivized asset\\n   * @param reward The address of the reward token\\n   * @param user The address of the user that rewards are accrued on behalf of\\n   * @param assetIndex The index of the asset distribution\\n   * @param userIndex The index of the asset distribution on behalf of the user\\n   * @param rewardsAccrued The amount of rewards accrued\\n   */\\n  event Accrued(\\n    address indexed asset,\\n    address indexed reward,\\n    address indexed user,\\n    uint256 assetIndex,\\n    uint256 userIndex,\\n    uint256 rewardsAccrued\\n  );\\n\\n  /**\\n   * @dev Emitted when the emission manager address is updated.\\n   * @param oldEmissionManager The address of the old emission manager\\n   * @param newEmissionManager The address of the new emission manager\\n   */\\n  event EmissionManagerUpdated(\\n    address indexed oldEmissionManager,\\n    address indexed newEmissionManager\\n  );\\n\\n  /**\\n   * @dev Sets the end date for the distribution\\n   * @param asset The asset to incentivize\\n   * @param reward The reward token that incentives the asset\\n   * @param newDistributionEnd The end date of the incentivization, in unix time format\\n   **/\\n  function setDistributionEnd(\\n    address asset,\\n    address reward,\\n    uint32 newDistributionEnd\\n  ) external;\\n\\n  /**\\n   * @dev Sets the emission per second of a set of reward distributions\\n   * @param asset The asset is being incentivized\\n   * @param rewards List of reward addresses are being distributed\\n   * @param newEmissionsPerSecond List of new reward emissions per second\\n   */\\n  function setEmissionPerSecond(\\n    address asset,\\n    address[] calldata rewards,\\n    uint88[] calldata newEmissionsPerSecond\\n  ) external;\\n\\n  /**\\n   * @dev Gets the end date for the distribution\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The timestamp with the end of the distribution, in unix time format\\n   **/\\n  function getDistributionEnd(address asset, address reward) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the index of a user on a reward distribution\\n   * @param user Address of the user\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The current user asset index, not including new distributions\\n   **/\\n  function getUserAssetIndex(\\n    address user,\\n    address asset,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configuration of the distribution reward for a certain asset\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The index of the asset distribution\\n   * @return The emission per second of the reward distribution\\n   * @return The timestamp of the last update of the index\\n   * @return The timestamp of the distribution end\\n   **/\\n  function getRewardsData(address asset, address reward)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Returns the list of available reward token addresses of an incentivized asset\\n   * @param asset The incentivized asset\\n   * @return List of rewards addresses of the input asset\\n   **/\\n  function getRewardsByAsset(address asset) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the list of available reward addresses\\n   * @return List of rewards supported in this contract\\n   **/\\n  function getRewardsList() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return Unclaimed rewards, not including new distributions\\n   **/\\n  function getUserAccruedRewards(address user, address reward) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return The rewards amount\\n   **/\\n  function getUserRewards(\\n    address[] calldata assets,\\n    address user,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @return The list of reward addresses\\n   * @return The list of unclaimed amount of rewards\\n   **/\\n  function getAllUserRewards(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n\\n  /**\\n   * @dev Returns the decimals of an asset to calculate the distribution delta\\n   * @param asset The address to retrieve decimals\\n   * @return The decimals of an underlying asset\\n   */\\n  function getAssetDecimals(address asset) external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the address of the emission manager\\n   * @return The address of the EmissionManager\\n   */\\n  function getEmissionManager() external view returns (address);\\n\\n  /**\\n   * @dev Updates the address of the emission manager\\n   * @param emissionManager The address of the new EmissionManager\\n   */\\n  function setEmissionManager(address emissionManager) external;\\n}\\n\",\"keccak256\":\"0xfdbb964120445be67bfaafed33faad54ea8f9e51c2965dbb72252ab3adbafee5\",\"license\":\"agpl-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/ITransferStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\ninterface ITransferStrategyBase {\\n  event EmergencyWithdrawal(\\n    address indexed caller,\\n    address indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\\n   * @param to Account to transfer rewards\\n   * @param reward Address of the reward token\\n   * @param amount Amount to transfer to the \\\"to\\\" address parameter\\n   * @return Returns true bool if transfer logic succeeds\\n   */\\n  function performTransfer(\\n    address to,\\n    address reward,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @return Returns the address of the Incentives Controller\\n   */\\n  function getIncentivesController() external view returns (address);\\n\\n  /**\\n   * @return Returns the address of the Rewards admin\\n   */\\n  function getRewardsAdmin() external view returns (address);\\n\\n  /**\\n   * @dev Perform an emergency token withdrawal only callable by the Rewards admin\\n   * @param token Address of the token to withdraw funds from this contract\\n   * @param to Address of the recipient of the withdrawal\\n   * @param amount Amount of the withdrawal\\n   */\\n  function emergencyWithdrawal(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x693a03ea4ff01373ef102c6a558bcfa8e54a6be6e53de7a022b923f2108cd250\",\"license\":\"AGPL-3.0\"},\"@aave/periphery-v3/contracts/rewards/libraries/RewardsDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport {ITransferStrategyBase} from '../interfaces/ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\n\\nlibrary RewardsDataTypes {\\n  struct RewardsConfigInput {\\n    uint88 emissionPerSecond;\\n    uint256 totalSupply;\\n    uint32 distributionEnd;\\n    address asset;\\n    address reward;\\n    ITransferStrategyBase transferStrategy;\\n    IEACAggregatorProxy rewardOracle;\\n  }\\n\\n  struct UserAssetBalance {\\n    address asset;\\n    uint256 userBalance;\\n    uint256 totalSupply;\\n  }\\n\\n  struct UserData {\\n    uint104 index; // matches reward index\\n    uint128 accrued;\\n  }\\n\\n  struct RewardData {\\n    uint104 index;\\n    uint88 emissionPerSecond;\\n    uint32 lastUpdateTimestamp;\\n    uint32 distributionEnd;\\n    mapping(address => UserData) usersData;\\n  }\\n\\n  struct AssetData {\\n    mapping(address => RewardData) rewards;\\n    mapping(uint128 => address) availableRewards;\\n    uint128 availableRewardsCount;\\n    uint8 decimals;\\n  }\\n}\\n\",\"keccak256\":\"0x93632dbb39e8cce89098bc29ee786123cd2b2b8532a2077392966b8e86ceed39\",\"license\":\"agpl-3.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ab2a92fbac88a704270b039691afb363c5a1ef1170fb0c955043e4da84b987\",\"license\":\"AGPL-3.0-only\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7825565a4bb2a34a1dc96bbfead755785dfb0df8ef81bd934c43023689685645\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/ERC4626/ERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport { ERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\\n\\nimport { IERC4626 } from '../interfaces/IERC4626.sol';\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Copied and modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626Upgradeable is IERC4626, ERC20Upgradeable {\\n    using SafeERC20 for IERC20Metadata;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               STATE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public asset;\\n\\n    /* solhint-disable func-name-mixedcase */\\n    function __ERC4626Upgradeable_init(\\n        address _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) internal {\\n        __ERC20_init(_name, _symbol);\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, 'ZERO_SHARES');\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        IERC20Metadata(asset).safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares, receiver);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        IERC20Metadata(asset).safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares, receiver);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\\n        }\\n\\n        beforeWithdraw(assets, shares, receiver);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        IERC20Metadata(asset).safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, 'ZERO_ASSETS');\\n\\n        beforeWithdraw(assets, shares, receiver);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        IERC20Metadata(asset).safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf(owner));\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /* solhint-disable no-empty-blocks */\\n    function beforeWithdraw(\\n        uint256 assets,\\n        uint256 shares,\\n        address receiver\\n    ) internal virtual {}\\n\\n    /* solhint-disable no-empty-blocks */\\n    function afterDeposit(\\n        uint256 assets,\\n        uint256 shares,\\n        address receiver\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x021468c4f4a3f05186d5572f3067c765066e9fe0e67a76807c2cc9e2e8f8f27a\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBorrower {\\n    function getUsdcBorrowed() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7c0f554de9244b41a5105480eb6b6412d6d373de759bd9756fd2c84ef8b7adff\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IVariableDebtToken } from '@aave/core-v3/contracts/interfaces/IVariableDebtToken.sol';\\n\\ninterface IDebtToken is IVariableDebtToken {\\n    function balanceOf(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d3ac4deb2ca66a0ea14b4a525a34fd387b0de979fe052a3a5724d13aef031b8\",\"license\":\"MIT\"},\"contracts/interfaces/IDnGmxBatchingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport { IERC4626 } from './IERC4626.sol';\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDnGmxBatchingManager {\\n    error InvalidVault(address vault);\\n    error InvalidInput(uint256 errorCode);\\n    error InsufficientShares(uint256 balance);\\n    error InvalidSetDepositPaused(bool currentValue);\\n\\n    error ZeroBalance();\\n\\n    error VaultAlreadyAdded();\\n    error VaultsLimitExceeded();\\n\\n    error CallerNotKeeper();\\n    error CallerNotVault();\\n    error NoUsdcBalance();\\n\\n    event DepositToken(\\n        uint256 indexed round,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount,\\n        uint256 glpStaked\\n    );\\n\\n    event VaultAdded(address vault);\\n    event VaultDeposit(uint256 vaultGlpAmount);\\n\\n    event KeeperUpdated(address newKeeper);\\n\\n    event SharesClaimed(address indexed from, address indexed receiver, uint256 claimAmount);\\n    event BatchStake(uint256 indexed round, uint256 userUsdcAmount, uint256 userGlpAmount);\\n    event BatchDeposit(uint256 indexed round, uint256 userUsdcAmount, uint256 userGlpAmount, uint256 userShareAmount);\\n\\n    struct UserDeposit {\\n        uint256 round;\\n        uint128 usdcBalance;\\n        uint128 unclaimedShares;\\n    }\\n    struct RoundDeposit {\\n        uint128 totalUsdc;\\n        uint128 totalShares;\\n    }\\n\\n    function depositToken(\\n        address token,\\n        uint256 amount,\\n        uint256 minUSDG\\n    ) external returns (uint256 glpStaked);\\n\\n    function depositUsdc(uint256 amount, address receiver) external returns (uint256 glpStaked);\\n\\n    function executeBatchStake() external;\\n\\n    function executeBatchDeposit() external;\\n\\n    function dnGmxJuniorVaultGlpBalance() external view returns (uint256 balance);\\n\\n    function usdcBalance(address account) external view returns (uint256 balance);\\n\\n    function unclaimedShares(address account) external view returns (uint256 shares);\\n\\n    function claim(address receiver, uint256 amount) external;\\n\\n    function currentRound() external view returns (uint256);\\n\\n    function roundDeposits(uint256 round) external view returns (RoundDeposit memory);\\n}\\n\",\"keccak256\":\"0xf7c614f54652c7e054f70df723d820d6eff9ab7ed5d5db1eab0a1d7921940b0d\",\"license\":\"MIT\"},\"contracts/interfaces/IDnGmxJuniorVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC4626 } from './IERC4626.sol';\\nimport { IBorrower } from './IBorrower.sol';\\n\\ninterface IDnGmxJuniorVault is IERC4626, IBorrower {\\n    error InvalidRebalance();\\n    error DepositCapExceeded();\\n    error OnlyKeeperAllowed(address msgSender, address authorisedKeeperAddress);\\n\\n    error NotDnGmxSeniorVault();\\n    error NotBalancerVault();\\n\\n    error ArraysLengthMismatch();\\n    error FlashloanNotInitiated();\\n\\n    error InvalidFeeRecipient();\\n\\n    event Rebalanced();\\n    event AllowancesGranted();\\n\\n    event DnGmxSeniorVaultUpdated(address _dnGmxSeniorVault);\\n    event KeeperUpdated(address _newKeeper);\\n    event FeeRecipientUpdated(address _newFeeRecipient);\\n    event WithdrawFeeUpdated(uint256 _withdrawFeeBps);\\n    event FeesWithdrawn(uint256 feeAmount);\\n    event RewardsHarvested(\\n        uint256 wethHarvested,\\n        uint256 esGmxStaked,\\n        uint256 juniorVaultWeth,\\n        uint256 seniorVaultWeth,\\n        uint256 juniorVaultGlp,\\n        uint256 seniorVaultAUsdc\\n    );\\n    event DepositCapUpdated(uint256 _newDepositCap);\\n    event BatchingManagerUpdated(address _batchingManager);\\n\\n    event YieldParamsUpdated(\\n        uint16 slippageThresholdGmx,\\n        uint240 usdcConversionThreshold,\\n        uint256 wethConversionThreshold,\\n        uint256 hedgeUsdcAmountThreshold,\\n        uint256 hfThreshold\\n    );\\n    event RebalanceParamsUpdated(uint32 indexed rebalanceTimeThreshold, uint16 indexed rebalanceDeltaThreshold);\\n\\n    function getMarketValue(uint256 assetAmount) external view returns (uint256 marketValue);\\n\\n    function harvestFees() external;\\n\\n    function getPriceX128() external view returns (uint256);\\n\\n    function getVaultMarketValue() external view returns (int256);\\n\\n    function depositCap() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfad275205280af8ff28b771d44b55d2d577fc5e74a1ffe438fcc63e311355a3b\",\"license\":\"MIT\"},\"contracts/interfaces/IDnGmxSeniorVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC4626 } from './IERC4626.sol';\\n\\ninterface IDnGmxSeniorVault is IERC4626 {\\n    function availableBorrow(address borrower) external returns (uint256);\\n\\n    function borrow(uint256 amount) external;\\n\\n    function repay(uint256 amount) external;\\n\\n    function getEthRewardsSplitRate() external returns (uint256);\\n\\n    function getPriceX128() external view returns (uint256);\\n\\n    function getVaultMarketValue() external view returns (uint256);\\n\\n    function depositCap() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdfc2f474e6c11040c5ac2a9fb14c0c7a2f4f8d5def6856a0857bbcb537dadb12\",\"license\":\"MIT\"},\"contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\n\\ninterface IERC4626 is IERC20Upgradeable {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x37d8c03e10ddebdc2316e27ccda12f53ac585908aa123e1774ec58a7c5849478\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IBalancerVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBalancerVault {\\n    event FlashLoan(address indexed recipient, address indexed token, uint256 amount, uint256 feeAmount);\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa1875dfe6d61fcfa0bccf8f9760b08bb7704d812b9a4b7d5fe67f280548f47ea\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStableSwap {\\n    ///@dev Get the amount of coin j one would receive for swapping _dx of coin i.\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external returns (uint256);\\n\\n    /**\\n    Perform an exchange between two coins.\\n\\n    i: Index value for the coin to send\\n    j: Index value of the coin to receive\\n    _dx: Amount of i being exchanged\\n    _min_dy: Minimum amount of j to receive\\n\\n    Returns the actual amount of coin j received. Index values can be found via the coins public getter method.\\n    */\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool use_eth\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x3c0cbce9d2f997cebc3b11de35c7d85d1123cfc8dca76f70e1dd34523a5b0759\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/IGlpManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGlpManager {\\n    function cooldownDuration() external returns (uint256);\\n\\n    function lastAddedAt(address _account) external returns (uint256);\\n\\n    function addLiquidity(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp\\n    ) external returns (uint256);\\n\\n    function addLiquidityForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        address _tokenOut,\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function removeLiquidityForAccount(\\n        address _account,\\n        address _tokenOut,\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function getAums() external view returns (uint256[] memory);\\n\\n    function vault() external view returns (address);\\n\\n    function getAumInUsdg(bool maximise) external view returns (uint256);\\n\\n    function getAum(bool maximise) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcadd845dbdce20a138aff2228eb273ab3b0818cc087a5b0e89ba1535755ecc75\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/IRewardRouterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRewardRouterV2 {\\n    event StakeGmx(address account, address token, uint256 amount);\\n    event UnstakeGmx(address account, address token, uint256 amount);\\n\\n    event StakeGlp(address account, uint256 amount);\\n    event UnstakeGlp(address account, uint256 amount);\\n\\n    function stakedGmxTracker() external view returns (address);\\n\\n    function gmx() external view returns (address);\\n\\n    function esGmx() external view returns (address);\\n\\n    function glpVester() external view returns (address);\\n\\n    function batchStakeGmxForAccount(address[] memory _accounts, uint256[] memory _amounts) external;\\n\\n    function stakeGmxForAccount(address _account, uint256 _amount) external;\\n\\n    function stakeGmx(uint256 _amount) external;\\n\\n    function stakeEsGmx(uint256 _amount) external;\\n\\n    function unstakeGmx(uint256 _amount) external;\\n\\n    function unstakeEsGmx(uint256 _amount) external;\\n\\n    function mintAndStakeGlp(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp\\n    ) external returns (uint256);\\n\\n    function mintAndStakeGlpETH(uint256 _minUsdg, uint256 _minGlp) external payable returns (uint256);\\n\\n    function unstakeAndRedeemGlp(\\n        address _tokenOut,\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function unstakeAndRedeemGlpETH(\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address payable _receiver\\n    ) external returns (uint256);\\n\\n    function claim() external;\\n\\n    function claimEsGmx() external;\\n\\n    function claimFees() external;\\n\\n    function compound() external;\\n\\n    function compoundForAccount(address _account) external;\\n\\n    function handleRewards(\\n        bool shouldClaimGmx,\\n        bool shouldStakeGmx,\\n        bool shouldClaimEsGmx,\\n        bool shouldStakeEsGmx,\\n        bool shouldStakeMultiplierPoints,\\n        bool shouldClaimWeth,\\n        bool shouldConvertWethToEth\\n    ) external;\\n\\n    function batchCompoundForAccounts(address[] memory _accounts) external;\\n\\n    function signalTransfer(address _receiver) external;\\n\\n    function acceptTransfer(address _sender) external;\\n}\\n\",\"keccak256\":\"0x3644a7af2511eec487f19305b58b655e97cc355e9add820f0626bd3d61063461\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/IRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n\\n    function stakedAmounts(address _account) external view returns (uint256);\\n\\n    function updateRewards() external;\\n\\n    function stake(address _depositToken, uint256 _amount) external;\\n\\n    function stakeForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(address _depositToken, uint256 _amount) external;\\n\\n    function unstakeForAccount(\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount,\\n        address _receiver\\n    ) external;\\n\\n    function tokensPerInterval() external view returns (uint256);\\n\\n    function claim(address _receiver) external returns (uint256);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x476112acc4547dfaab4b61bf37e2655f220af23afac5e92e4e52ce0d045a2fdb\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/ISGLPExtended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISGLPExtended {\\n    function glp() external view returns (address);\\n\\n    function glpManager() external view returns (address);\\n\\n    function feeGlpTracker() external view returns (address);\\n\\n    function stakedGlpTracker() external view returns (address);\\n}\\n\",\"keccak256\":\"0x0c9e277710a09007979184016f25d68ca1c026490020a355feae398313307dcd\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n\\n    function isSwapEnabled() external view returns (bool);\\n\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n\\n    function usdg() external view returns (address);\\n\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n\\n    function hasDynamicFees() external view returns (bool);\\n\\n    function fundingInterval() external view returns (uint256);\\n\\n    function totalTokenWeights() external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n\\n    function isLiquidator(address _account) external view returns (bool);\\n\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n\\n    function tokenBalances(address _token) external view returns (uint256);\\n\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setInManagerMode(bool _inManagerMode) external;\\n\\n    function setManager(address _manager, bool _isManager) external;\\n\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n\\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\\n\\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function increasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function fundingRateFactor() external view returns (uint256);\\n\\n    function stableFundingRateFactor() external view returns (uint256);\\n\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdgDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function stableTaxBasisPoints() external view returns (uint256);\\n\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n\\n    function whitelistedTokens(address _token) external view returns (bool);\\n\\n    function stableTokens(address _token) external view returns (bool);\\n\\n    function shortableTokens(address _token) external view returns (bool);\\n\\n    function feeReserves(address _token) external view returns (uint256);\\n\\n    function globalShortSizes(address _token) external view returns (uint256);\\n\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n\\n    function tokenDecimals(address _token) external view returns (uint256);\\n\\n    function tokenWeights(address _token) external view returns (uint256);\\n\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n\\n    function poolAmounts(address _token) external view returns (uint256);\\n\\n    function bufferAmounts(address _token) external view returns (uint256);\\n\\n    function reservedAmounts(address _token) external view returns (uint256);\\n\\n    function usdgAmounts(address _token) external view returns (uint256);\\n\\n    function maxUsdgAmounts(address _token) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) external view returns (bool, uint256);\\n\\n    function getPosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0xfeb43dd05f2ea0cb41c1545d26d3e62ed4a5f3ee89ff4ab6e18b0767049809e6\",\"license\":\"MIT\"},\"contracts/interfaces/gmx/IVester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVester {\\n    function rewardTracker() external view returns (address);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n\\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\\n\\n    function claimedAmounts(address _account) external view returns (uint256);\\n\\n    function pairAmounts(address _account) external view returns (uint256);\\n\\n    function getVestedAmount(address _account) external view returns (uint256);\\n\\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\\n\\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\\n\\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\\n\\n    function bonusRewards(address _account) external view returns (uint256);\\n\\n    function transferStakeValues(address _sender, address _receiver) external;\\n\\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\\n\\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\\n\\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\\n\\n    function setBonusRewards(address _account, uint256 _amount) external;\\n\\n    function getMaxVestableAmount(address _account) external view returns (uint256);\\n\\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function withdraw() external;\\n\\n    function claim() external returns (uint256);\\n\\n    function balances(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77433d3f948ac81cde2f9310f03352aad1151417ea74965c53a823bc44290c7a\",\"license\":\"MIT\"},\"contracts/libraries/DnGmxJuniorVaultHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport { IPool } from '@aave/core-v3/contracts/interfaces/IPool.sol';\\nimport { IAToken } from '@aave/core-v3/contracts/interfaces/IAToken.sol';\\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\\nimport { IPoolAddressesProvider } from '@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol';\\nimport { IRewardsController } from '@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol';\\nimport { DataTypes } from '@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol';\\nimport { ReserveConfiguration } from '@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol';\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\n\\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\\n\\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\n\\nimport { IVault } from '../interfaces/gmx/IVault.sol';\\nimport { IGlpManager } from '../interfaces/gmx/IGlpManager.sol';\\nimport { IRewardRouterV2 } from '../interfaces/gmx/IRewardRouterV2.sol';\\nimport { IDnGmxJuniorVault } from '../interfaces/IDnGmxJuniorVault.sol';\\nimport { IDnGmxSeniorVault } from '../interfaces/IDnGmxSeniorVault.sol';\\nimport { IBalancerVault } from '../interfaces/balancer/IBalancerVault.sol';\\nimport { IDnGmxBatchingManager } from '../interfaces/IDnGmxBatchingManager.sol';\\nimport { IDebtToken } from '../interfaces/IDebtToken.sol';\\nimport { IRewardTracker } from '../interfaces/gmx/IRewardTracker.sol';\\n\\nimport { SafeCast } from '../libraries/SafeCast.sol';\\n\\nlibrary DnGmxJuniorVaultHelpers {\\n    using DnGmxJuniorVaultHelpers for State;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    using FixedPointMathLib for uint256;\\n    using SafeCast for uint256;\\n\\n    uint16 constant MAX_BPS = 10_000;\\n\\n    uint256 constant USDG_DECIMALS = 18;\\n    uint256 constant WETH_DECIMALS = 18;\\n\\n    uint256 constant PRICE_PRECISION = 1e30;\\n    uint256 constant VARIABLE_INTEREST_MODE = 2;\\n\\n    struct State {\\n        uint256 FEE; // = 1000;\\n        address keeper;\\n        IDnGmxSeniorVault dnGmxSeniorVault;\\n        address feeRecipient;\\n        uint256 withdrawFeeBps;\\n        uint256 protocolFee;\\n        uint256 protocolEsGmx;\\n        uint256 unhedgedGlpInUsdc;\\n        uint256 seniorVaultWethRewards;\\n        uint256 wethConversionThreshold;\\n        uint256 hedgeUsdcAmountThreshold;\\n        uint256 hfThreshold;\\n        uint256 depositCap;\\n        int256 dnUsdcDeposited;\\n        bool _hasFlashloaned;\\n        uint64 lastRebalanceTS;\\n        uint32 rebalanceTimeThreshold;\\n        uint16 rebalanceDeltaThreshold;\\n        ///@dev storage for hedge strategy\\n        IPool pool;\\n        IPriceOracle oracle;\\n        IPoolAddressesProvider poolAddressProvider;\\n        IAToken aUsdc;\\n        IDebtToken vWbtc;\\n        IDebtToken vWeth;\\n        ISwapRouter swapRouter;\\n        IBalancerVault balancerVault;\\n        uint256 targetHealthFactor;\\n        IRewardsController aaveRewardsController;\\n        ///@dev storage for yield strategy\\n        uint16 slippageThresholdGmx;\\n        uint16 slippageThresholdSwap;\\n        uint208 usdcConversionThreshold;\\n        IERC20 fsGlp;\\n        IRewardTracker sGmx;\\n        IERC20Metadata glp;\\n        IERC20Metadata usdc;\\n        IERC20Metadata usdt;\\n        IERC20Metadata weth;\\n        IERC20Metadata wbtc;\\n        IVault gmxVault;\\n        IGlpManager glpManager;\\n        IRewardRouterV2 rewardRouter;\\n        IDnGmxBatchingManager batchingManager;\\n    }\\n\\n    /* ##################################################################\\n                            REBALANCE HELPERS\\n    ################################################################## */\\n\\n    function rebalanceProfit(State storage state, uint256 borrowValue) external {\\n        return _rebalanceProfit(state, borrowValue);\\n    }\\n\\n    function _rebalanceProfit(State storage state, uint256 borrowValue) private {\\n        int256 borrowVal = borrowValue.toInt256();\\n\\n        // console.log('borrowVal');\\n        // console.logInt(borrowVal);\\n        // console.log('dnUsdcDeposited');\\n        // console.logInt(dnUsdcDeposited);\\n\\n        if (borrowVal > state.dnUsdcDeposited) {\\n            // If glp goes up - there is profit on GMX and loss on AAVE\\n            // So convert some glp to usdc and deposit to AAVE\\n            state.dnUsdcDeposited += _convertAssetToAUsdc(state, uint256(borrowVal - state.dnUsdcDeposited)).toInt256();\\n        } else if (borrowVal < state.dnUsdcDeposited) {\\n            // If glp goes down - there is profit on AAVE and loss on GMX\\n            // So withdraw some aave usdc and convert to glp\\n            _convertAUsdcToAsset(state, uint256(state.dnUsdcDeposited - borrowVal));\\n            state.dnUsdcDeposited = borrowVal;\\n        }\\n    }\\n\\n    function rebalanceBorrow(\\n        State storage state,\\n        uint256 optimalBtcBorrow,\\n        uint256 currentBtcBorrow,\\n        uint256 optimalEthBorrow,\\n        uint256 currentEthBorrow\\n    ) external {\\n        return _rebalanceBorrow(state, optimalBtcBorrow, currentBtcBorrow, optimalEthBorrow, currentEthBorrow);\\n    }\\n\\n    function _rebalanceBorrow(\\n        State storage state,\\n        uint256 optimalBtcBorrow,\\n        uint256 currentBtcBorrow,\\n        uint256 optimalEthBorrow,\\n        uint256 currentEthBorrow\\n    ) private {\\n        address[] memory assets;\\n        uint256[] memory amounts;\\n\\n        (uint256 btcTokenAmount, uint256 btcUsdcAmount, bool repayDebtBtc) = _flashloanAmounts(\\n            state,\\n            address(state.wbtc),\\n            optimalBtcBorrow,\\n            currentBtcBorrow\\n        );\\n        (uint256 ethTokenAmount, uint256 ethUsdcAmount, bool repayDebtEth) = _flashloanAmounts(\\n            state,\\n            address(state.weth),\\n            optimalEthBorrow,\\n            currentEthBorrow\\n        );\\n\\n        // console.log('repayDebtBtc', repayDebtBtc);\\n        // console.log('repayDebtEth', repayDebtEth);\\n\\n        // console.log('btcTokenAmount', btcTokenAmount);\\n        // console.log('btcUsdcAmount', btcUsdcAmount);\\n        // console.log('ethTokenAmount', ethTokenAmount);\\n        // console.log('ethUsdcAmount', ethUsdcAmount);\\n        // console.log('hedgeUsdcAmountThreshold', hedgeUsdcAmountThreshold);\\n\\n        if (btcUsdcAmount < state.hedgeUsdcAmountThreshold) {\\n            // console.log('BTC Below Threshold');\\n            btcTokenAmount = 0;\\n            btcUsdcAmount = 0;\\n        }\\n        if (ethUsdcAmount < state.hedgeUsdcAmountThreshold) {\\n            // console.log('ETH Below Threshold');\\n            ethTokenAmount = 0;\\n            ethUsdcAmount = 0;\\n        }\\n\\n        // console.log('btcBeyondThreshold', btcBeyondThreshold);\\n        // console.log('ethBeyondThreshold', ethBeyondThreshold);\\n\\n        uint256 btcAssetAmount = repayDebtBtc ? btcUsdcAmount : btcTokenAmount;\\n        uint256 ethAssetAmount = repayDebtEth ? ethUsdcAmount : ethTokenAmount;\\n\\n        // If both eth and btc swap amounts are not beyond the threshold then no flashloan needs to be executed | case 1\\n        if (btcAssetAmount == 0 && ethAssetAmount == 0) return;\\n\\n        if (repayDebtBtc && repayDebtEth) {\\n            // console.log('### BOTH REPAY CASE ###');\\n            assets = new address[](1);\\n            amounts = new uint256[](1);\\n\\n            assets[0] = address(state.usdc);\\n            amounts[0] = (btcAssetAmount + ethAssetAmount);\\n            // console.log('asset[0] from if', assets[0]);\\n            // console.log('amounts[0] from if', amounts[0]);\\n        } else if (btcAssetAmount == 0 || ethAssetAmount == 0) {\\n            // Exactly one would be true since case-1 excluded (both false) | case-2\\n            // console.log('### CASE-2 ###');\\n            assets = new address[](1);\\n            amounts = new uint256[](1);\\n\\n            if (btcAssetAmount == 0) {\\n                assets[0] = (repayDebtBtc ? address(state.usdc) : address(state.wbtc));\\n                amounts[0] = btcAssetAmount;\\n            } else {\\n                assets[0] = (repayDebtEth ? address(state.usdc) : address(state.weth));\\n                amounts[0] = ethAssetAmount;\\n            }\\n        } else {\\n            // console.log('### CASE-3 ###');\\n            // Both are true | case-3\\n            assets = new address[](2);\\n            amounts = new uint256[](2);\\n\\n            assets[0] = repayDebtBtc ? address(state.usdc) : address(state.wbtc);\\n            // console.log('assets[0]', assets[0]);\\n            assets[1] = repayDebtEth ? address(state.usdc) : address(state.weth);\\n            // console.log('assets[1]', assets[1]);\\n\\n            // ensure that assets and amount tuples are in sorted order of addresses\\n            if (assets[0] > assets[1]) {\\n                address tempAsset = assets[0];\\n                assets[0] = assets[1];\\n                assets[1] = tempAsset;\\n\\n                amounts[0] = ethAssetAmount;\\n                // console.log('amounts[0]', amounts[0]);\\n                amounts[1] = btcAssetAmount;\\n                // console.log('amounts[1]', amounts[1]);\\n            } else {\\n                amounts[0] = btcAssetAmount;\\n                // console.log('amounts[0]*', amounts[0]);\\n                amounts[1] = ethAssetAmount;\\n                // console.log('amounts[1]*', amounts[1]);\\n            }\\n        }\\n        _executeFlashloan(\\n            state,\\n            assets,\\n            amounts,\\n            btcTokenAmount,\\n            btcUsdcAmount,\\n            ethTokenAmount,\\n            ethUsdcAmount,\\n            repayDebtBtc,\\n            repayDebtEth\\n        );\\n    }\\n\\n    /// @notice settles collateral for the vault\\n    /// @dev to be called after settle profits only (since vaultMarketValue if after settlement of profits)\\n    /// @param currentBtcBorrow The amount of USDC collateral token deposited to LB Protocol\\n    /// @param currentEthBorrow The market value of ETH/BTC part in sGLP\\n    function rebalanceHedge(\\n        State storage state,\\n        uint256 currentBtcBorrow,\\n        uint256 currentEthBorrow,\\n        uint256 glpDeposited\\n    ) external {\\n        // console.log('totalAssets()', totalAssets());\\n        (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) = _getOptimalBorrows(state, glpDeposited);\\n        // console.log('optimalBtcBorrow', optimalBtcBorrow);\\n        // console.log('optimalEthBorrow', optimalEthBorrow);\\n\\n        uint256 optimalBorrowValue = _getBorrowValue(state, optimalBtcBorrow, optimalEthBorrow);\\n        // console.log('optimalBorrowValue', optimalBorrowValue);\\n\\n        uint256 usdcLiquidationThreshold = _getLiquidationThreshold(state, address(state.usdc));\\n\\n        // Settle net change in market value and deposit/withdraw collateral tokens\\n        // Vault market value is just the collateral value since profit has been settled\\n        uint256 targetDnGmxSeniorVaultAmount = (state.targetHealthFactor - usdcLiquidationThreshold).mulDivDown(\\n            optimalBorrowValue,\\n            usdcLiquidationThreshold\\n        );\\n\\n        uint256 currentDnGmxSeniorVaultAmount = _getUsdcBorrowed(state);\\n\\n        // console.log('targetDnGmxSeniorVaultAmount', targetDnGmxSeniorVaultAmount);\\n        // console.log('currentDnGmxSeniorVaultAmount', currentDnGmxSeniorVaultAmount);\\n        // console.log(optimalBtcBorrow, currentBtcBorrow, optimalEthBorrow, currentEthBorrow);\\n\\n        if (targetDnGmxSeniorVaultAmount > currentDnGmxSeniorVaultAmount) {\\n            // console.log('IF');\\n            uint256 amountToBorrow = targetDnGmxSeniorVaultAmount - currentDnGmxSeniorVaultAmount;\\n            uint256 availableBorrow = state.dnGmxSeniorVault.availableBorrow(address(this));\\n            if (amountToBorrow > availableBorrow) {\\n                uint256 optimalUncappedEthBorrow = optimalEthBorrow;\\n                (optimalBtcBorrow, optimalEthBorrow) = _getOptimalCappedBorrows(\\n                    state,\\n                    currentDnGmxSeniorVaultAmount + availableBorrow,\\n                    usdcLiquidationThreshold\\n                );\\n                _rebalanceUnhedgedGlp(state, optimalUncappedEthBorrow, optimalEthBorrow);\\n                // console.log(\\\"Optimal token amounts 1\\\",optimalBtcBorrow, optimalEthBorrow);\\n                if (availableBorrow > 0) {\\n                    state.dnGmxSeniorVault.borrow(availableBorrow);\\n                }\\n            } else {\\n                //No unhedged glp remaining so just pass same value in capped and uncapped (should convert back any ausdc back to sglp)\\n                _rebalanceUnhedgedGlp(state, optimalEthBorrow, optimalEthBorrow);\\n\\n                // Take from LB Vault\\n                state.dnGmxSeniorVault.borrow(targetDnGmxSeniorVaultAmount - currentDnGmxSeniorVaultAmount);\\n            }\\n\\n            // console.log(\\\"Optimal token amounts 2\\\",optimalBtcBorrow, optimalEthBorrow);\\n            // Rebalance Position\\n            _rebalanceBorrow(state, optimalBtcBorrow, currentBtcBorrow, optimalEthBorrow, currentEthBorrow);\\n        } else {\\n            // console.log('ELSE');\\n            // Rebalance Position\\n            _rebalanceBorrow(state, optimalBtcBorrow, currentBtcBorrow, optimalEthBorrow, currentEthBorrow);\\n            uint256 totalCurrentBorrowValue;\\n            {\\n                (uint256 currentBtc, uint256 currentEth) = _getCurrentBorrows(state);\\n                totalCurrentBorrowValue = _getBorrowValue(state, currentBtc, currentEth);\\n            }\\n            _rebalanceProfit(state, totalCurrentBorrowValue);\\n            // Deposit to LB Vault\\n            // console.log('dnUsdcDeposited');\\n            // console.logInt(dnUsdcDeposited);\\n            // console.log('ausdc bal', aUsdc.balanceOf(address(this)));\\n            state.dnGmxSeniorVault.repay(currentDnGmxSeniorVaultAmount - targetDnGmxSeniorVaultAmount);\\n        }\\n    }\\n\\n    /// @notice withdraws LP tokens from gauge, sells LP token for usdc\\n    /// @param usdcAmountDesired amount of USDC desired\\n    function _convertAssetToAUsdc(State storage state, uint256 usdcAmountDesired) private returns (uint256 usdcAmount) {\\n        /// @dev if usdcAmountDesired < 10, then there is precision issue in gmx contracts while redeeming for usdg\\n        if (usdcAmountDesired < state.usdcConversionThreshold) return 0;\\n        uint256 glpAmountDesired = usdcAmountDesired.mulDivDown(PRICE_PRECISION, _getGlpPrice(state, false));\\n        // USDG has 18 decimals and usdc has 6 decimals => 18-6 = 12\\n        // console.log('GLP PRICE: ', getPrice());\\n        // console.log('glpAmountDesired', glpAmountDesired);\\n        // console.log('TA', totalAssets());\\n        state.rewardRouter.unstakeAndRedeemGlp(\\n            address(state.usdc),\\n            glpAmountDesired, // glp amount\\n            usdcAmountDesired.mulDivDown(MAX_BPS - state.slippageThresholdGmx, MAX_BPS), // usdc\\n            address(this)\\n        );\\n\\n        usdcAmount = state.usdc.balanceOf(address(this));\\n\\n        _executeSupply(state, address(state.usdc), usdcAmount);\\n    }\\n\\n    /// @notice sells usdc for LP tokens and then stakes LP tokens\\n    /// @param amount amount of usdc\\n    function _convertAUsdcToAsset(State storage state, uint256 amount) private {\\n        _executeWithdraw(state, address(state.usdc), amount, address(this));\\n        // USDG has 18 decimals and usdc has 6 decimals => 18-6 = 12\\n        uint256 price = state.gmxVault.getMinPrice(address(state.usdc));\\n        uint256 usdgAmount = amount.mulDivDown(\\n            price * (MAX_BPS - state.slippageThresholdGmx),\\n            PRICE_PRECISION * MAX_BPS\\n        );\\n\\n        usdgAmount = usdgAmount.mulDivDown(10**USDG_DECIMALS, 10**IERC20Metadata(address(state.usdc)).decimals());\\n\\n        state.batchingManager.depositToken(address(state.usdc), amount, usdgAmount);\\n    }\\n\\n    function _rebalanceUnhedgedGlp(\\n        State storage state,\\n        uint256 uncappedTokenHedge,\\n        uint256 cappedTokenHedge\\n    ) private {\\n        // console.log('uncappedTokenHedge',uncappedTokenHedge);\\n        // console.log('cappedTokenHedge',cappedTokenHedge);\\n        // console.log('totalAssets',totalAssets());\\n\\n        uint256 unhedgedGlp = _totalAssets(state, false).mulDivDown(\\n            uncappedTokenHedge - cappedTokenHedge,\\n            uncappedTokenHedge\\n        );\\n        uint256 unhedgedGlpUsdcAmount = unhedgedGlp.mulDivDown(_getGlpPrice(state, false), PRICE_PRECISION);\\n        // console.log('unhedgedGlp',unhedgedGlp);\\n        // console.log('unhedgedGlpUsdcAmount',unhedgedGlpUsdcAmount);\\n        if (unhedgedGlpUsdcAmount > state.unhedgedGlpInUsdc) {\\n            uint256 glpToUsdcAmount = unhedgedGlpUsdcAmount - state.unhedgedGlpInUsdc;\\n            state.unhedgedGlpInUsdc += _convertAssetToAUsdc(state, glpToUsdcAmount);\\n        } else if (unhedgedGlpUsdcAmount < state.unhedgedGlpInUsdc) {\\n            uint256 usdcToGlpAmount = state.unhedgedGlpInUsdc - unhedgedGlpUsdcAmount;\\n            state.unhedgedGlpInUsdc -= usdcToGlpAmount;\\n            _convertAUsdcToAsset(state, usdcToGlpAmount);\\n        }\\n    }\\n\\n    /* ##################################################################\\n                            AAVE HELPERS\\n    ################################################################## */\\n\\n    function _executeBorrow(\\n        State storage state,\\n        address token,\\n        uint256 amount\\n    ) private {\\n        state.pool.borrow(token, amount, VARIABLE_INTEREST_MODE, 0, address(this));\\n    }\\n\\n    function _executeRepay(\\n        State storage state,\\n        address token,\\n        uint256 amount\\n    ) private {\\n        state.pool.repay(token, amount, VARIABLE_INTEREST_MODE, address(this));\\n    }\\n\\n    function _executeSupply(\\n        State storage state,\\n        address token,\\n        uint256 amount\\n    ) private {\\n        state.pool.supply(token, amount, address(this), 0);\\n    }\\n\\n    function _executeWithdraw(\\n        State storage state,\\n        address token,\\n        uint256 amount,\\n        address receiver\\n    ) private {\\n        state.pool.withdraw(token, amount, receiver);\\n    }\\n\\n    function _getLiquidationThreshold(State storage state, address asset) private view returns (uint256) {\\n        DataTypes.ReserveConfigurationMap memory config = state.pool.getConfiguration(asset);\\n        (\\n            ,\\n            /** uint256 ltv **/\\n            uint256 liquidationThreshold, /** uint256 liquidationBonus */ /** uint256 decimals */ /** uint256 reserveFactor */\\n            ,\\n            ,\\n            ,\\n\\n        ) = config.getParams();\\n\\n        return liquidationThreshold;\\n    }\\n\\n    /* ##################################################################\\n                            BALANCER HELPERS\\n    ################################################################## */\\n\\n    function _executeFlashloan(\\n        State storage state,\\n        address[] memory assets,\\n        uint256[] memory amounts,\\n        uint256 _btcTokenAmount,\\n        uint256 _btcUsdcAmount,\\n        uint256 _ethTokenAmount,\\n        uint256 _ethUsdcAmount,\\n        bool _repayDebtBtc,\\n        bool _repayDebtEth\\n    ) private {\\n        if (assets.length != amounts.length) revert IDnGmxJuniorVault.ArraysLengthMismatch();\\n\\n        state._hasFlashloaned = true;\\n\\n        state.balancerVault.flashLoan(\\n            address(this),\\n            assets,\\n            amounts,\\n            abi.encode(_btcTokenAmount, _btcUsdcAmount, _ethTokenAmount, _ethUsdcAmount, _repayDebtBtc, _repayDebtEth)\\n        );\\n\\n        state._hasFlashloaned = false;\\n    }\\n\\n    /* ##################################################################\\n                            VIEW FUNCTIONS\\n    ################################################################## */\\n\\n    function _getUsdcBorrowed(State storage state) private view returns (uint256 usdcAmount) {\\n        return\\n            uint256(\\n                state.aUsdc.balanceOf(address(this)).toInt256() -\\n                    state.dnUsdcDeposited -\\n                    state.unhedgedGlpInUsdc.toInt256()\\n            );\\n    }\\n\\n    function totalAssets(State storage state) external view returns (uint256) {\\n        return _totalAssets(state, false);\\n    }\\n\\n    function totalAssets(State storage state, bool maximize) external view returns (uint256) {\\n        return _totalAssets(state, maximize);\\n    }\\n\\n    function _totalAssets(State storage state, bool maximize) private view returns (uint256) {\\n        uint256 unhedgedGlp = state.unhedgedGlpInUsdc.mulDivDown(PRICE_PRECISION, _getGlpPrice(state, !maximize));\\n        if (!maximize) unhedgedGlp = unhedgedGlp.mulDivDown(MAX_BPS - state.slippageThresholdGmx, MAX_BPS);\\n        return state.fsGlp.balanceOf(address(this)) + state.batchingManager.dnGmxJuniorVaultGlpBalance() + unhedgedGlp;\\n    }\\n\\n    /* solhint-disable not-rely-on-time */\\n    function isValidRebalanceTime(State storage state) external view returns (bool) {\\n        return (block.timestamp - state.lastRebalanceTS) > state.rebalanceTimeThreshold;\\n    }\\n\\n    function isValidRebalanceHF(State storage state) external view returns (bool) {\\n        (, , , , , uint256 healthFactor) = state.pool.getUserAccountData(address(this));\\n        // console.log('healthFactor', healthFactor);\\n        // console.log('hfThreshold', hfThreshold);\\n\\n        return healthFactor < (state.hfThreshold * 1e14);\\n    }\\n\\n    function isValidRebalanceDeviation(State storage state) external view returns (bool) {\\n        (uint256 currentBtcBorrow, uint256 currentEthBorrow) = _getCurrentBorrows(state);\\n\\n        (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) = _getOptimalBorrows(state, _totalAssets(state, false));\\n\\n        return\\n            !(_isWithinAllowedDelta(state, optimalBtcBorrow, currentBtcBorrow) &&\\n                _isWithinAllowedDelta(state, optimalEthBorrow, currentEthBorrow));\\n    }\\n\\n    function getTokenPrice(State storage state, IERC20Metadata token) external view returns (uint256) {\\n        return _getTokenPrice(state, token);\\n    }\\n\\n    function _getTokenPrice(State storage state, IERC20Metadata token) private view returns (uint256) {\\n        uint256 decimals = token.decimals();\\n        uint256 price = state.oracle.getAssetPrice(address(token));\\n\\n        // @dev aave returns from same source as chainlink (which is 8 decimals)\\n        return price.mulDivDown(PRICE_PRECISION, 10**(decimals + 2));\\n    }\\n\\n    function getGlpPrice(State storage state, bool maximize) external view returns (uint256) {\\n        return _getGlpPrice(state, maximize);\\n    }\\n\\n    function _getGlpPrice(State storage state, bool maximize) private view returns (uint256) {\\n        uint256 aum = state.glpManager.getAum(maximize);\\n        uint256 totalSupply = state.glp.totalSupply();\\n\\n        return aum.mulDivDown(PRICE_PRECISION, totalSupply * 1e24);\\n    }\\n\\n    function getTokenPriceInUsdc(\\n        State storage state,\\n        IERC20Metadata token,\\n        bool isUsdc\\n    ) external view returns (uint256 scaledPrice) {\\n        return _getTokenPriceInUsdc(state, token, isUsdc);\\n    }\\n\\n    function _getTokenPriceInUsdc(\\n        State storage state,\\n        IERC20Metadata token,\\n        bool isUsdc\\n    ) private view returns (uint256 scaledPrice) {\\n        uint256 decimals = token.decimals();\\n        uint256 price = state.oracle.getAssetPrice(address(token));\\n\\n        // @dev aave returns from same source as chainlink (which is 8 decimals)\\n        uint256 quotePrice;\\n\\n        isUsdc ? quotePrice = state.oracle.getAssetPrice(address(state.usdc)) : quotePrice = state.oracle.getAssetPrice(\\n            address(state.usdt)\\n        );\\n\\n        scaledPrice = price.mulDivDown(PRICE_PRECISION, quotePrice * 10**(decimals - 6));\\n    }\\n\\n    // @dev returns price in terms of usdc\\n    function getTokenPrice(\\n        State storage state,\\n        IERC20Metadata token,\\n        bool isUsdc\\n    ) external view returns (uint256 scaledPrice) {\\n        uint256 decimals = token.decimals();\\n        uint256 price = state.oracle.getAssetPrice(address(token));\\n\\n        // @dev aave returns from same source as chainlink (which is 8 decimals)\\n        uint256 quotePrice;\\n\\n        isUsdc ? quotePrice = state.oracle.getAssetPrice(address(state.usdc)) : quotePrice = state.oracle.getAssetPrice(\\n            address(state.usdt)\\n        );\\n\\n        scaledPrice = price.mulDivDown(PRICE_PRECISION, quotePrice * 10**(decimals - 6));\\n    }\\n\\n    /// @dev returns the borrow value in USDC\\n    function getBorrowValue(\\n        State storage state,\\n        uint256 btcAmount,\\n        uint256 ethAmount\\n    ) external view returns (uint256 borrowValue) {\\n        return _getBorrowValue(state, btcAmount, ethAmount);\\n    }\\n\\n    function _getBorrowValue(\\n        State storage state,\\n        uint256 btcAmount,\\n        uint256 ethAmount\\n    ) private view returns (uint256 borrowValue) {\\n        borrowValue =\\n            btcAmount.mulDivDown(_getTokenPrice(state, state.wbtc), PRICE_PRECISION) +\\n            ethAmount.mulDivDown(_getTokenPrice(state, state.weth), PRICE_PRECISION);\\n        borrowValue = borrowValue.mulDivDown(PRICE_PRECISION, _getTokenPrice(state, state.usdc));\\n    }\\n\\n    function flashloanAmounts(\\n        State storage state,\\n        address token,\\n        uint256 optimalBorrow,\\n        uint256 currentBorrow\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 tokenAmount,\\n            uint256 usdcAmount,\\n            bool repayDebt\\n        )\\n    {\\n        return _flashloanAmounts(state, token, optimalBorrow, currentBorrow);\\n    }\\n\\n    function _flashloanAmounts(\\n        State storage state,\\n        address token,\\n        uint256 optimalBorrow,\\n        uint256 currentBorrow\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 tokenAmount,\\n            uint256 usdcAmount,\\n            bool repayDebt\\n        )\\n    {\\n        // check the delta between optimal position and actual position in token terms\\n        // take that position using swap\\n        // To Increase\\n        if (optimalBorrow > currentBorrow) {\\n            tokenAmount = optimalBorrow - currentBorrow;\\n            // To swap with the amount in specified hence usdcAmount should be the min amount out\\n            usdcAmount = _getTokenPriceInUsdc(state, IERC20Metadata(token), true).mulDivDown(\\n                tokenAmount * (MAX_BPS - state.slippageThresholdSwap),\\n                MAX_BPS * PRICE_PRECISION\\n            );\\n\\n            repayDebt = false;\\n            // Flash loan ETH/BTC from AAVE\\n            // In callback: Sell loan for USDC and repay debt\\n        } else {\\n            // To Decrease\\n            tokenAmount = (currentBorrow - optimalBorrow);\\n            // To swap with amount out specified hence usdcAmount should be the max amount in\\n            usdcAmount = _getTokenPriceInUsdc(state, IERC20Metadata(token), true).mulDivDown(\\n                tokenAmount * (MAX_BPS + state.slippageThresholdSwap),\\n                MAX_BPS * PRICE_PRECISION\\n            );\\n            // console.log('currentBorrow', currentBorrow);\\n            // console.log('optimalBorrow', optimalBorrow);\\n            // console.log('tokenAmount __', tokenAmount);\\n            // console.log('usdcAmount __', usdcAmount);\\n\\n            repayDebt = true;\\n            // In callback: Swap to ETH/BTC and deposit to AAVE\\n            // Send back some aUSDC to LB vault\\n        }\\n    }\\n\\n    function getCurrentBorrows(State storage state)\\n        external\\n        view\\n        returns (uint256 currentBtcBorrow, uint256 currentEthBorrow)\\n    {\\n        return _getCurrentBorrows(state);\\n    }\\n\\n    function _getCurrentBorrows(State storage state)\\n        private\\n        view\\n        returns (uint256 currentBtcBorrow, uint256 currentEthBorrow)\\n    {\\n        return (state.vWbtc.balanceOf(address(this)), state.vWeth.balanceOf(address(this)));\\n    }\\n\\n    function getOptimalBorrows(State storage state, uint256 glpDeposited)\\n        external\\n        view\\n        returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow)\\n    {\\n        return _getOptimalBorrows(state, glpDeposited);\\n    }\\n\\n    function _getOptimalBorrows(State storage state, uint256 glpDeposited)\\n        private\\n        view\\n        returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow)\\n    {\\n        optimalBtcBorrow = _getTokenReservesInGlp(state, address(state.wbtc), glpDeposited);\\n        optimalEthBorrow = _getTokenReservesInGlp(state, address(state.weth), glpDeposited);\\n        // console.log('optimalEthBorrow', optimalEthBorrow);\\n        // console.log('optimalBtcBorrow', optimalBtcBorrow);\\n    }\\n\\n    function getOptimalCappedBorrows(\\n        State storage state,\\n        uint256 availableBorrowAmount,\\n        uint256 usdcLiquidationThreshold\\n    ) external view returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) {\\n        return _getOptimalCappedBorrows(state, availableBorrowAmount, usdcLiquidationThreshold);\\n    }\\n\\n    function _getOptimalCappedBorrows(\\n        State storage state,\\n        uint256 availableBorrowAmount,\\n        uint256 usdcLiquidationThreshold\\n    ) private view returns (uint256 optimalBtcBorrow, uint256 optimalEthBorrow) {\\n        // console.log(\\\"availableBorrowAmount\\\",availableBorrowAmount);\\n\\n        uint256 maxBorrowValue = availableBorrowAmount.mulDivDown(\\n            usdcLiquidationThreshold,\\n            state.targetHealthFactor - usdcLiquidationThreshold\\n        );\\n        // console.log(\\\"maxBorrowValue\\\",maxBorrowValue);\\n\\n        uint256 btcWeight = state.gmxVault.tokenWeights(address(state.wbtc));\\n        uint256 ethWeight = state.gmxVault.tokenWeights(address(state.weth));\\n        // console.log(\\\"btcWeight\\\",btcWeight);\\n        // console.log(\\\"ethWeight\\\",ethWeight);\\n\\n        uint256 btcPrice = _getTokenPrice(state, state.wbtc);\\n        uint256 ethPrice = _getTokenPrice(state, state.weth);\\n\\n        optimalBtcBorrow = maxBorrowValue.mulDivDown(btcWeight * PRICE_PRECISION, (btcWeight + ethWeight) * btcPrice);\\n        optimalEthBorrow = maxBorrowValue.mulDivDown(ethWeight * PRICE_PRECISION, (btcWeight + ethWeight) * ethPrice);\\n        // console.log(\\\"optimalBtcBorrow\\\",optimalBtcBorrow);\\n        // console.log(\\\"optimalEthBorrow\\\",optimalEthBorrow);\\n    }\\n\\n    function getTokenReservesInGlp(\\n        State storage state,\\n        address token,\\n        uint256 glpDeposited\\n    ) external view returns (uint256) {\\n        return _getTokenReservesInGlp(state, token, glpDeposited);\\n    }\\n\\n    function _getTokenReservesInGlp(\\n        State storage state,\\n        address token,\\n        uint256 glpDeposited\\n    ) private view returns (uint256) {\\n        uint256 targetWeight = state.gmxVault.tokenWeights(token);\\n        uint256 totalTokenWeights = state.gmxVault.totalTokenWeights();\\n\\n        uint256 glpPrice = _getGlpPrice(state, false);\\n        uint256 tokenPrice = _getTokenPrice(state, IERC20Metadata(token));\\n\\n        return targetWeight.mulDivDown(glpDeposited * glpPrice, totalTokenWeights * tokenPrice);\\n    }\\n\\n    function isWithinAllowedDelta(\\n        State storage state,\\n        uint256 optimalBorrow,\\n        uint256 currentBorrow\\n    ) external view returns (bool) {\\n        return _isWithinAllowedDelta(state, optimalBorrow, currentBorrow);\\n    }\\n\\n    function _isWithinAllowedDelta(\\n        State storage state,\\n        uint256 optimalBorrow,\\n        uint256 currentBorrow\\n    ) private view returns (bool) {\\n        // console.log('optimalBorrow', optimalBorrow);\\n        // console.log('currentBorrow', currentBorrow);\\n\\n        uint256 diff = optimalBorrow > currentBorrow ? optimalBorrow - currentBorrow : currentBorrow - optimalBorrow;\\n        // console.log('diff', diff);\\n        // console.log('RHS', uint256(rebalanceDeltaThreshold).mulDivDown(currentBorrow, MAX_BPS));\\n        return diff <= uint256(state.rebalanceDeltaThreshold).mulDivDown(currentBorrow, MAX_BPS);\\n    }\\n\\n    function _getOptimalCappedBorrow(\\n        uint256 requiredBorrow,\\n        uint256 availableBorrow,\\n        uint256 optimalTokenBorrow\\n    ) private pure returns (uint256 optimalCappedTokenBorrow) {\\n        // console.log(\\\"availableBorrowAmount\\\",availableBorrowAmount);\\n        optimalCappedTokenBorrow = optimalTokenBorrow.mulDivDown(availableBorrow, requiredBorrow);\\n        // console.log(\\\"optimalBtcBorrow\\\",optimalBtcBorrow);\\n        // console.log(\\\"optimalEthBorrow\\\",optimalEthBorrow);\\n    }\\n}\\n\",\"keccak256\":\"0x1087e29abe60ab9f59161f4c570305b3d4629b45484c0f5988954f1cc7e3c2e4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/FeeSplitStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\n\\n/**\\n * @title FeeSplitStrategy contract\\n * @notice Implements the calculation of the eth reward split depending on the utilization of reserve\\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE`\\n * point of utilization and another from that one to 100%\\n * @author Rage\\n **/\\nlibrary FeeSplitStrategy {\\n    using FullMath for uint256;\\n\\n    uint256 internal constant RATE_PRECISION = 1e30;\\n\\n    struct Info {\\n        /**\\n         * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\\n         * Expressed in ray\\n         **/\\n        uint256 optimalUtilizationRate;\\n        // Base variable borrow rate when Utilization rate = 0. Expressed in ray\\n        uint256 baseVariableBorrowRate;\\n        // Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint256 variableRateSlope1;\\n        // Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint256 variableRateSlope2;\\n    }\\n\\n    function getMaxVariableBorrowRate(Info storage feeStrategyInfo) internal view returns (uint256) {\\n        return\\n            feeStrategyInfo.baseVariableBorrowRate +\\n            feeStrategyInfo.variableRateSlope1 +\\n            feeStrategyInfo.variableRateSlope2;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * NOTE This function is kept for compatibility with the previous DefaultInterestRateStrategy interface.\\n     * New protocol implementation uses the new calculateInterestRates() interface\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param usedLiquidity The total borrowed from the reserve at a variable rate\\n     **/\\n    function calculateFeeSplit(\\n        Info storage feeStrategy,\\n        uint256 availableLiquidity,\\n        uint256 usedLiquidity\\n    ) internal view returns (uint256 feeSplitRate) {\\n        uint256 utilizationRate = usedLiquidity == 0\\n            ? 0\\n            : usedLiquidity.mulDiv(RATE_PRECISION, availableLiquidity + usedLiquidity);\\n\\n        uint256 excessUtilizationRate = RATE_PRECISION - feeStrategy.optimalUtilizationRate;\\n\\n        if (utilizationRate > feeStrategy.optimalUtilizationRate) {\\n            uint256 excessUtilizationRateRatio = (utilizationRate - feeStrategy.optimalUtilizationRate).mulDiv(\\n                RATE_PRECISION,\\n                excessUtilizationRate\\n            );\\n\\n            feeSplitRate =\\n                feeStrategy.baseVariableBorrowRate +\\n                feeStrategy.variableRateSlope1 +\\n                feeStrategy.variableRateSlope2.mulDiv(excessUtilizationRateRatio, RATE_PRECISION);\\n        } else {\\n            feeSplitRate =\\n                feeStrategy.baseVariableBorrowRate +\\n                utilizationRate.mulDiv(feeStrategy.variableRateSlope1, feeStrategy.optimalUtilizationRate);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5cd4d1f0b70d147e50d08c4acea42c72a96265c46e4fb20958ba49fee27177c4\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        unchecked {\\n            require((z = uint160(y)) == y, 'Overflow');\\n        }\\n    }\\n\\n    /// @notice Cast a uint256 to a uint128, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\\n        unchecked {\\n            /* solhint-disable reason-string */\\n            require((z = uint128(y)) == y);\\n        }\\n    }\\n\\n    /// @notice Cast a uint128 to a int128, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt128(uint128 y) internal pure returns (int128 z) {\\n        unchecked {\\n            require(y < 2**127, 'Overflow');\\n            z = int128(y);\\n        }\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        unchecked {\\n            require((z = int128(y)) == y, 'Overflow');\\n        }\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            require(y < 2**255, 'Overflow');\\n            z = int256(y);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa92c99d01da478590c879d65570e9f206e12b49df250129d1b537f80c3e1986\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\ninterface ISwapRouterGetter {\\n    function swapRouter() external view returns (ISwapRouter);\\n}\\n\\nlibrary SwapManager {\\n    address internal constant wbtc = 0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f;\\n    address internal constant weth = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;\\n    address internal constant usdc = 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8;\\n\\n    bytes internal constant USDC_TO_WETH = abi.encodePacked(weth, uint24(500), usdc);\\n    bytes internal constant USDC_TO_WBTC = abi.encodePacked(wbtc, uint24(3000), weth, uint24(500), usdc);\\n\\n    bytes internal constant WETH_TO_USDC = abi.encodePacked(weth, uint24(500), usdc);\\n    bytes internal constant WBTC_TO_USDC = abi.encodePacked(wbtc, uint24(3000), weth, uint24(500), usdc);\\n\\n    // ISwapRouter internal constant swapRouter = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n\\n    function swapToken(\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 minUsdcAmount\\n    ) external returns (uint256 usdcReceived, uint256 tokensUsed) {\\n        ISwapRouter swapRouter = ISwapRouterGetter(address(this)).swapRouter();\\n\\n        bytes memory path = token == weth ? WETH_TO_USDC : WBTC_TO_USDC;\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: path,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountIn: tokenAmount,\\n            amountOutMinimum: minUsdcAmount\\n        });\\n\\n        tokensUsed = tokenAmount;\\n        usdcReceived = swapRouter.exactInput(params);\\n    }\\n\\n    function swapUSDC(\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 maxUsdcAmount\\n    ) external returns (uint256 usdcPaid, uint256 tokensReceived) {\\n        ISwapRouter swapRouter = ISwapRouterGetter(address(this)).swapRouter();\\n\\n        bytes memory path = token == weth ? USDC_TO_WETH : USDC_TO_WBTC;\\n\\n        ISwapRouter.ExactOutputParams memory params = ISwapRouter.ExactOutputParams({\\n            path: path,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountOut: tokenAmount,\\n            amountInMaximum: maxUsdcAmount\\n        });\\n\\n        tokensReceived = tokenAmount;\\n        usdcPaid = swapRouter.exactOutput(params);\\n    }\\n}\\n\",\"keccak256\":\"0xe5e451acd0d29d06baf7a2a1ebdf9d056739740298750e6b1473110b9fcbd7d7\",\"license\":\"MIT\"},\"contracts/vaults/DnGmxJuniorVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { WadRayMath } from '@aave/core-v3/contracts/protocol/libraries/math/WadRayMath.sol';\\nimport { IPool } from '@aave/core-v3/contracts/interfaces/IPool.sol';\\nimport { IAToken } from '@aave/core-v3/contracts/interfaces/IAToken.sol';\\nimport { IPriceOracle } from '@aave/core-v3/contracts/interfaces/IPriceOracle.sol';\\nimport { DataTypes } from '@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol';\\nimport { IPoolAddressesProvider } from '@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol';\\nimport { ReserveConfiguration } from '@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol';\\nimport { IRewardsController } from '@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol';\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\n\\nimport { IVault } from '../interfaces/gmx/IVault.sol';\\nimport { IDebtToken } from '../interfaces/IDebtToken.sol';\\nimport { IGlpManager } from '../interfaces/gmx/IGlpManager.sol';\\nimport { IStableSwap } from '../interfaces/curve/IStableSwap.sol';\\nimport { ISGLPExtended } from '../interfaces/gmx/ISGLPExtended.sol';\\nimport { IRewardRouterV2 } from '../interfaces/gmx/IRewardRouterV2.sol';\\nimport { IRewardTracker } from '../interfaces/gmx/IRewardTracker.sol';\\nimport { IVester } from '../interfaces/gmx/IVester.sol';\\nimport { IBalancerVault } from '../interfaces/balancer/IBalancerVault.sol';\\nimport { IDnGmxSeniorVault } from '../interfaces/IDnGmxSeniorVault.sol';\\nimport { IDnGmxJuniorVault, IERC4626 } from '../interfaces/IDnGmxJuniorVault.sol';\\nimport { IDnGmxBatchingManager } from '../interfaces/IDnGmxBatchingManager.sol';\\n\\nimport { FeeSplitStrategy } from '../libraries/FeeSplitStrategy.sol';\\nimport { SwapManager } from '../libraries/SwapManager.sol';\\nimport { SafeCast } from '../libraries/SafeCast.sol';\\nimport { DnGmxJuniorVaultHelpers } from '../libraries/DnGmxJuniorVaultHelpers.sol';\\n\\nimport { ERC4626Upgradeable } from '../ERC4626/ERC4626Upgradeable.sol';\\n\\n// import 'hardhat/console.sol';\\n\\ncontract DnGmxJuniorVault is IDnGmxJuniorVault, ERC4626Upgradeable, OwnableUpgradeable, PausableUpgradeable {\\n    using SafeCast for uint256;\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20Metadata;\\n    using FixedPointMathLib for uint256;\\n\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using DnGmxJuniorVaultHelpers for DnGmxJuniorVaultHelpers.State;\\n\\n    uint16 internal constant MAX_BPS = 10_000;\\n\\n    uint256 internal constant USDG_DECIMALS = 18;\\n    uint256 internal constant WETH_DECIMALS = 18;\\n\\n    uint256 internal constant PRICE_PRECISION = 1e30;\\n    uint256 internal constant VARIABLE_INTEREST_MODE = 2;\\n\\n    DnGmxJuniorVaultHelpers.State internal state;\\n\\n    modifier onlyKeeper() {\\n        if (msg.sender != state.keeper) revert OnlyKeeperAllowed(msg.sender, state.keeper);\\n        _;\\n    }\\n\\n    modifier onlyDnGmxSeniorVault() {\\n        if (msg.sender != address(state.dnGmxSeniorVault)) revert NotDnGmxSeniorVault();\\n        _;\\n    }\\n\\n    modifier whenFlashloaned() {\\n        if (!state._hasFlashloaned) revert FlashloanNotInitiated();\\n        _;\\n    }\\n\\n    modifier onlyBalancerVault() {\\n        if (msg.sender != address(state.balancerVault)) revert NotBalancerVault();\\n        _;\\n    }\\n\\n    /* ##################################################################\\n                                SYSTEM FUNCTIONS\\n    ################################################################## */\\n\\n    struct Tokens {\\n        IERC20Metadata weth;\\n        IERC20Metadata wbtc;\\n        IERC20Metadata sGlp;\\n        IERC20Metadata usdc;\\n        IERC20Metadata usdt;\\n    }\\n\\n    function initialize(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _swapRouter,\\n        address _rewardRouter,\\n        Tokens calldata _tokens,\\n        IPoolAddressesProvider _poolAddressesProvider\\n    ) external initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ERC4626Upgradeable_init(address(_tokens.sGlp), _name, _symbol);\\n\\n        state.weth = _tokens.weth;\\n        state.wbtc = _tokens.wbtc;\\n        state.usdc = _tokens.usdc;\\n        state.usdt = _tokens.usdt;\\n\\n        state.swapRouter = ISwapRouter(_swapRouter);\\n        state.rewardRouter = IRewardRouterV2(_rewardRouter);\\n\\n        state.poolAddressProvider = _poolAddressesProvider;\\n\\n        state.glp = IERC20Metadata(ISGLPExtended(asset).glp());\\n        state.glpManager = IGlpManager(ISGLPExtended(asset).glpManager());\\n        state.fsGlp = IERC20(ISGLPExtended(asset).stakedGlpTracker());\\n\\n        state.gmxVault = IVault(state.glpManager.vault());\\n\\n        state.pool = IPool(state.poolAddressProvider.getPool());\\n        state.oracle = IPriceOracle(state.poolAddressProvider.getPriceOracle());\\n\\n        state.aUsdc = IAToken(state.pool.getReserveData(address(state.usdc)).aTokenAddress);\\n\\n        state.vWbtc = IDebtToken(state.pool.getReserveData(address(state.wbtc)).variableDebtTokenAddress);\\n        state.vWeth = IDebtToken(state.pool.getReserveData(address(state.weth)).variableDebtTokenAddress);\\n    }\\n\\n    /* ##################################################################\\n                                ADMIN FUNCTIONS\\n    ################################################################## */\\n\\n    function grantAllowances() external onlyOwner {\\n        address aavePool = address(state.pool);\\n        address swapRouter = address(state.swapRouter);\\n\\n        state.wbtc.approve(aavePool, type(uint256).max);\\n        state.wbtc.approve(swapRouter, type(uint256).max);\\n\\n        state.weth.approve(aavePool, type(uint256).max);\\n        state.weth.approve(swapRouter, type(uint256).max);\\n        state.weth.approve(address(state.batchingManager), type(uint256).max);\\n\\n        state.usdc.approve(aavePool, type(uint256).max);\\n        state.usdc.approve(address(swapRouter), type(uint256).max);\\n        state.usdc.approve(address(state.batchingManager), type(uint256).max);\\n\\n        state.aUsdc.approve(address(state.dnGmxSeniorVault), type(uint256).max);\\n\\n        IERC20Metadata(asset).approve(address(state.glpManager), type(uint256).max);\\n\\n        emit AllowancesGranted();\\n    }\\n\\n    function setAdminParams(\\n        address _newKeeper,\\n        address _dnGmxSeniorVault,\\n        uint256 _newDepositCap,\\n        address _batchingManager,\\n        uint256 _withdrawFeeBps\\n    ) external onlyOwner {\\n        state.keeper = _newKeeper;\\n        state.dnGmxSeniorVault = IDnGmxSeniorVault(_dnGmxSeniorVault);\\n        state.depositCap = _newDepositCap;\\n        state.batchingManager = IDnGmxBatchingManager(_batchingManager);\\n        state.withdrawFeeBps = _withdrawFeeBps;\\n    }\\n\\n    function setThresholds(\\n        uint16 _slippageThresholdSwap,\\n        uint16 _slippageThresholdGmx,\\n        uint208 _usdcConversionThreshold,\\n        uint256 _hfThreshold,\\n        uint256 _wethConversionThreshold,\\n        uint256 _hedgeUsdcAmountThreshold\\n    ) external onlyOwner {\\n        state.slippageThresholdSwap = _slippageThresholdSwap;\\n        state.slippageThresholdGmx = _slippageThresholdGmx;\\n        state.usdcConversionThreshold = _usdcConversionThreshold;\\n        state.wethConversionThreshold = _wethConversionThreshold;\\n        state.hedgeUsdcAmountThreshold = _hedgeUsdcAmountThreshold;\\n        state.hfThreshold = _hfThreshold;\\n    }\\n\\n    function setRebalanceParams(uint32 _rebalanceTimeThreshold, uint16 _rebalanceDeltaThreshold) external onlyOwner {\\n        state.rebalanceTimeThreshold = _rebalanceTimeThreshold;\\n        state.rebalanceDeltaThreshold = _rebalanceDeltaThreshold;\\n    }\\n\\n    function setHedgeParams(\\n        IBalancerVault _vault,\\n        ISwapRouter _swapRouter,\\n        uint256 _targetHealthFactor,\\n        IRewardsController _aaveRewardsController\\n    ) external onlyOwner {\\n        state.balancerVault = _vault;\\n        state.swapRouter = _swapRouter;\\n        state.targetHealthFactor = _targetHealthFactor;\\n        state.aaveRewardsController = _aaveRewardsController;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\\n        if (state.feeRecipient != _feeRecipient) {\\n            state.feeRecipient = _feeRecipient;\\n        } else revert InvalidFeeRecipient();\\n\\n        emit FeeRecipientUpdated(_feeRecipient);\\n    }\\n\\n    /// @notice withdraw accumulated WETH fees\\n    function withdrawFees() external {\\n        uint256 amount = state.protocolFee;\\n        state.protocolFee = 0;\\n        state.weth.transfer(state.feeRecipient, amount);\\n        emit FeesWithdrawn(amount);\\n    }\\n\\n    function unstakeAndVestEsGmx() external onlyOwner {\\n        state.rewardRouter.unstakeEsGmx(state.protocolEsGmx);\\n        IVester(state.rewardRouter.glpVester()).deposit(state.protocolEsGmx);\\n        state.protocolEsGmx = 0;\\n    }\\n\\n    function stopVestAndStakeEsGmx() external onlyOwner {\\n        IVester(state.rewardRouter.glpVester()).withdraw();\\n        uint256 esGmxWithdrawn = IERC20(state.rewardRouter.esGmx()).balanceOf(address(this));\\n        state.rewardRouter.stakeEsGmx(esGmxWithdrawn);\\n        state.protocolEsGmx += esGmxWithdrawn;\\n    }\\n\\n    function claimVestedGmx() external onlyOwner {\\n        uint256 gmxClaimed = IVester(state.rewardRouter.glpVester()).claim();\\n\\n        //Transfer all of the gmx received to fee recipient\\n        IERC20Metadata(state.rewardRouter.gmx()).safeTransfer(state.feeRecipient, gmxClaimed);\\n    }\\n\\n    /// @notice stakes the rewards from the staked Glp and claims WETH to buy glp\\n    function harvestFees() public {\\n        address esGmx = state.rewardRouter.esGmx();\\n        IRewardTracker sGmx = IRewardTracker(state.rewardRouter.stakedGmxTracker());\\n\\n        uint256 sGmxPrevBalance = sGmx.depositBalances(address(this), esGmx);\\n\\n        state.rewardRouter.handleRewards({\\n            shouldClaimGmx: false,\\n            shouldStakeGmx: false,\\n            shouldClaimEsGmx: true,\\n            shouldStakeEsGmx: true,\\n            shouldStakeMultiplierPoints: true,\\n            shouldClaimWeth: true,\\n            shouldConvertWethToEth: false\\n        });\\n\\n        uint256 sGmxHarvested = sGmx.depositBalances(address(this), esGmx) - sGmxPrevBalance;\\n        state.protocolEsGmx += sGmxHarvested.mulDivDown(state.FEE, MAX_BPS);\\n        // console.log('sGmxHarvested', sGmxHarvested);\\n        // console.log('protocolEsGmx', protocolEsGmx);\\n\\n        // console.log('gmx balance', sGmx.depositBalances(address(this), rewardRouter.gmx()));\\n        uint256 wethHarvested = state.weth.balanceOf(address(this)) - state.protocolFee - state.seniorVaultWethRewards;\\n        // console.log('wethHarvested', wethHarvested);\\n\\n        if (wethHarvested > state.wethConversionThreshold) {\\n            uint256 protocolFeeHarvested = (wethHarvested * state.FEE) / MAX_BPS;\\n            state.protocolFee += protocolFeeHarvested;\\n\\n            uint256 wethToCompound = wethHarvested - protocolFeeHarvested;\\n\\n            uint256 dnGmxSeniorVaultWethShare = state.dnGmxSeniorVault.getEthRewardsSplitRate().mulDivDown(\\n                wethToCompound,\\n                FeeSplitStrategy.RATE_PRECISION\\n            );\\n            uint256 dnGmxWethShare = wethToCompound - dnGmxSeniorVaultWethShare;\\n\\n            uint256 _seniorVaultWethRewards = state.seniorVaultWethRewards + dnGmxSeniorVaultWethShare;\\n\\n            // console.log('ethRewardsSplitRate', dnGmxSeniorVault.getEthRewardsSplitRate());\\n            // console.log('wethToCompound', wethToCompound);\\n            // console.log('dnGmxWethShare', dnGmxWethShare);\\n            // console.log('dnGmxSeniorVaultWethShare', dnGmxSeniorVaultWethShare);\\n\\n            uint256 price = state.gmxVault.getMinPrice(address(state.weth));\\n\\n            uint256 usdgAmount = dnGmxWethShare.mulDivDown(\\n                price * (MAX_BPS - state.slippageThresholdSwap),\\n                PRICE_PRECISION * MAX_BPS\\n            );\\n\\n            // console.log('usdgAmount', usdgAmount);\\n\\n            usdgAmount = usdgAmount.mulDivDown(10**USDG_DECIMALS, 10**WETH_DECIMALS);\\n\\n            uint256 glpReceived = state.batchingManager.depositToken(address(state.weth), dnGmxWethShare, usdgAmount);\\n\\n            // console.log('_seniorVaultWethRewards', _seniorVaultWethRewards);\\n            if (_seniorVaultWethRewards > state.wethConversionThreshold) {\\n                // Deposit aave vault share to AAVE in usdc\\n                uint256 minUsdcAmount = state.getTokenPriceInUsdc(state.weth, true).mulDivDown(\\n                    _seniorVaultWethRewards * (MAX_BPS - state.slippageThresholdSwap),\\n                    MAX_BPS * PRICE_PRECISION\\n                );\\n                (uint256 aaveUsdcAmount, uint256 tokensUsed) = SwapManager.swapToken(\\n                    address(state.weth),\\n                    _seniorVaultWethRewards,\\n                    minUsdcAmount\\n                );\\n                tokensUsed; // silence warning\\n                _executeSupply(address(state.usdc), aaveUsdcAmount);\\n                state.seniorVaultWethRewards = 0;\\n                emit RewardsHarvested(\\n                    wethHarvested,\\n                    sGmxHarvested,\\n                    dnGmxWethShare,\\n                    dnGmxSeniorVaultWethShare,\\n                    glpReceived,\\n                    aaveUsdcAmount\\n                );\\n            } else {\\n                state.seniorVaultWethRewards = _seniorVaultWethRewards;\\n                emit RewardsHarvested(\\n                    wethHarvested,\\n                    sGmxHarvested,\\n                    dnGmxWethShare,\\n                    dnGmxSeniorVaultWethShare,\\n                    glpReceived,\\n                    0\\n                );\\n            }\\n        } else {\\n            emit RewardsHarvested(wethHarvested, sGmxHarvested, 0, 0, 0, 0);\\n        }\\n    }\\n\\n    /* ##################################################################\\n                                KEEPER FUNCTIONS\\n    ################################################################## */\\n\\n    function isValidRebalance() public view returns (bool) {\\n        // console.log('_isValidRebalanceTime', _isValidRebalanceTime());\\n        // console.log('_isValidRebalanceDeviation', _isValidRebalanceDeviation());\\n        return state.isValidRebalanceTime() || state.isValidRebalanceDeviation() || state.isValidRebalanceHF();\\n    }\\n\\n    /* solhint-disable not-rely-on-time */\\n    function rebalance() external onlyKeeper {\\n        if (!isValidRebalance()) revert InvalidRebalance();\\n\\n        // harvest fees\\n        harvestFees();\\n\\n        (uint256 currentBtc, uint256 currentEth) = state.getCurrentBorrows();\\n        uint256 totalCurrentBorrowValue = state.getBorrowValue(currentBtc, currentEth); // = total position value of current btc and eth position\\n\\n        // rebalance profit\\n        state.rebalanceProfit(totalCurrentBorrowValue);\\n\\n        // console.log('currentBtc', currentBtc);\\n        // console.log('currentEth', currentEth);\\n        // console.log('totalAssets()', totalAssets());\\n        // console.log('totalCurrentBorrowValue', totalCurrentBorrowValue);\\n\\n        // calculate current btc and eth positions in GLP\\n        // get the position value and calculate the collateral needed to borrow that\\n        // transfer collateral from LB vault to DN vault\\n        state.rebalanceHedge(currentBtc, currentEth, totalAssets());\\n\\n        state.lastRebalanceTS = uint64(block.timestamp);\\n        emit Rebalanced();\\n    }\\n\\n    /* ##################################################################\\n                                USER FUNCTIONS\\n    ################################################################## */\\n\\n    function deposit(uint256 amount, address to)\\n        public\\n        virtual\\n        override(IERC4626, ERC4626Upgradeable)\\n        whenNotPaused\\n        returns (uint256 shares)\\n    {\\n        _rebalanceBeforeShareAllocation();\\n        shares = super.deposit(amount, to);\\n    }\\n\\n    function mint(uint256 shares, address to)\\n        public\\n        virtual\\n        override(IERC4626, ERC4626Upgradeable)\\n        whenNotPaused\\n        returns (uint256 amount)\\n    {\\n        _rebalanceBeforeShareAllocation();\\n        amount = super.mint(shares, to);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 shares) {\\n        _rebalanceBeforeShareAllocation();\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\\n        }\\n        uint256 assetsAfterFees = assets.mulDivDown(MAX_BPS - state.withdrawFeeBps, MAX_BPS);\\n\\n        beforeWithdraw(assetsAfterFees, shares, receiver);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assetsAfterFees, shares);\\n\\n        IERC20Metadata(asset).safeTransfer(receiver, assetsAfterFees);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public override(IERC4626, ERC4626Upgradeable) whenNotPaused returns (uint256 assets) {\\n        _rebalanceBeforeShareAllocation();\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, 'ZERO_ASSETS');\\n\\n        uint256 assetsAfterFees = assets.mulDivDown(MAX_BPS - state.withdrawFeeBps, MAX_BPS);\\n\\n        beforeWithdraw(assetsAfterFees, shares, receiver);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assetsAfterFees, shares);\\n\\n        // console.log('assets bal', fsGlp.balanceOf(address(this)));\\n        // console.log('withdrawing', assets);\\n        // console.log('assetsAfterFees', assetsAfterFees);\\n        // console.log('batchingManager.dnGmxJuniorVaultGlpBalance()', batchingManager.dnGmxJuniorVaultGlpBalance());\\n\\n        IERC20Metadata(asset).safeTransfer(receiver, assetsAfterFees);\\n    }\\n\\n    //TODO: add withdrawToken and redeemToken functions\\n\\n    /* ##################################################################\\n                            FLASHLOAN RECEIVER\\n    ################################################################## */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external onlyBalancerVault whenFlashloaned {\\n        (\\n            uint256 btcTokenAmount,\\n            uint256 btcUsdcAmount,\\n            uint256 ethTokenAmount,\\n            uint256 ethUsdcAmount,\\n            bool repayDebtBtc,\\n            bool repayDebtEth\\n        ) = abi.decode(userData, (uint256, uint256, uint256, uint256, bool, bool));\\n\\n        // console.log('### RECEIVE FLASHLOAN ###');\\n        // console.log('btcTokenAmount', btcTokenAmount);\\n        // console.log('ethTokenAmount', ethTokenAmount);\\n        // console.log('btcUsdcAmount', btcUsdcAmount);\\n        // console.log('ethUsdcAmount', ethUsdcAmount);\\n        // console.log('repayDebtBtc', repayDebtBtc);\\n        // console.log('repayDebtEth', repayDebtEth);\\n\\n        uint256 btcAssetPremium;\\n        uint256 ethAssetPremium;\\n        // adjust asset amounts for premiums (zero for balancer at the time of dev)\\n        if (repayDebtBtc && repayDebtEth) {\\n            // console.log('CASE 1');\\n            // Here amounts[0] should be equal to btcTokenAmount+ethTokenAmount\\n            btcAssetPremium = feeAmounts[0].mulDivDown(btcUsdcAmount, amounts[0]);\\n            // console.log('btcAssetPremium', btcAssetPremium);\\n            ethAssetPremium = (feeAmounts[0] - btcAssetPremium);\\n            // console.log('ethAssetPremium', ethAssetPremium);\\n        } else if (btcTokenAmount != 0 && ethTokenAmount != 0) {\\n            // console.log('CASE 2');\\n\\n            // Here amounts[0] should be equal to btcTokenAmount and amounts[1] should be equal to ethTokenAmount\\n            bool btcFirst = false;\\n            if (repayDebtBtc ? tokens[0] == state.usdc : tokens[0] == state.wbtc) btcFirst = true;\\n            btcAssetPremium = feeAmounts[btcFirst ? 0 : 1];\\n            ethAssetPremium = feeAmounts[btcFirst ? 1 : 0];\\n        } else {\\n            // console.log('CASE 3');\\n\\n            if (btcTokenAmount != 0) btcAssetPremium = feeAmounts[0];\\n            else ethAssetPremium = feeAmounts[0];\\n        }\\n\\n        if (btcTokenAmount > 0)\\n            _executeOperationToken(address(state.wbtc), btcTokenAmount, btcUsdcAmount, btcAssetPremium, repayDebtBtc);\\n        if (ethTokenAmount > 0)\\n            _executeOperationToken(address(state.weth), ethTokenAmount, ethUsdcAmount, ethAssetPremium, repayDebtEth);\\n    }\\n\\n    /* ##################################################################\\n                                VIEW FUNCTIONS\\n    ################################################################## */\\n\\n    function totalAssets() public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\\n        return state.totalAssets();\\n    }\\n\\n    function getPrice(bool maximize) public view returns (uint256) {\\n        uint256 aum = state.glpManager.getAum(maximize);\\n        uint256 totalSupply = state.glp.totalSupply();\\n\\n        return aum.mulDivDown(PRICE_PRECISION, totalSupply * 1e24);\\n    }\\n\\n    function getPriceX128() public view returns (uint256) {\\n        uint256 aum = state.glpManager.getAum(false);\\n        uint256 totalSupply = state.glp.totalSupply();\\n\\n        return aum.mulDivDown(1 << 128, totalSupply * 1e24);\\n    }\\n\\n    function getMarketValue(uint256 assetAmount) public view returns (uint256 marketValue) {\\n        marketValue = assetAmount.mulDivDown(getPrice(false), PRICE_PRECISION);\\n    }\\n\\n    function getVaultMarketValue() public view returns (int256 vaultMarketValue) {\\n        (uint256 currentBtc, uint256 currentEth) = state.getCurrentBorrows();\\n        uint256 totalCurrentBorrowValue = state.getBorrowValue(currentBtc, currentEth);\\n        uint256 glpBalance = state.fsGlp.balanceOf(address(this)) + state.batchingManager.dnGmxJuniorVaultGlpBalance();\\n        vaultMarketValue = ((getMarketValue(glpBalance).toInt256() +\\n            state.dnUsdcDeposited +\\n            state.unhedgedGlpInUsdc.toInt256()) - totalCurrentBorrowValue.toInt256());\\n    }\\n\\n    function getUsdcBorrowed() public view returns (uint256 usdcAmount) {\\n        return\\n            uint256(\\n                state.aUsdc.balanceOf(address(this)).toInt256() -\\n                    state.dnUsdcDeposited -\\n                    state.unhedgedGlpInUsdc.toInt256()\\n            );\\n    }\\n\\n    function maxDeposit(address) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\\n        return state.depositCap - state.totalAssets(true);\\n    }\\n\\n    function maxMint(address receiver) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\\n        return convertToShares(maxDeposit(receiver));\\n    }\\n\\n    function convertToShares(uint256 assets) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, state.totalAssets(true));\\n    }\\n\\n    function convertToAssets(uint256 shares) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(state.totalAssets(false), supply);\\n    }\\n\\n    function previewMint(uint256 shares) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(state.totalAssets(true), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view override(IERC4626, ERC4626Upgradeable) returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, state.totalAssets(false));\\n    }\\n\\n    function depositCap() external view returns (uint256) {\\n        return state.depositCap;\\n    }\\n\\n    /* ##################################################################\\n                            INTERNAL FUNCTIONS\\n    ################################################################## */\\n\\n    /*\\n        DEPOSIT/WITHDRAW HELPERS\\n    */\\n\\n    function _rebalanceBeforeShareAllocation() internal {\\n        // harvest fees\\n        harvestFees();\\n\\n        (uint256 currentBtc, uint256 currentEth) = state.getCurrentBorrows();\\n        uint256 totalCurrentBorrowValue = state.getBorrowValue(currentBtc, currentEth); // = total position value of current btc and eth position\\n\\n        // rebalance profit\\n        state.rebalanceProfit(totalCurrentBorrowValue);\\n    }\\n\\n    function beforeWithdraw(\\n        uint256 assets,\\n        uint256,\\n        address\\n    ) internal override {\\n        (uint256 currentBtc, uint256 currentEth) = state.getCurrentBorrows();\\n\\n        //rebalance of hedge based on assets after withdraw (before withdraw assets - withdrawn assets)\\n        state.rebalanceHedge(currentBtc, currentEth, totalAssets() - assets);\\n    }\\n\\n    function afterDeposit(\\n        uint256,\\n        uint256,\\n        address\\n    ) internal override {\\n        if (totalAssets() > state.depositCap) revert DepositCapExceeded();\\n        (uint256 currentBtc, uint256 currentEth) = state.getCurrentBorrows();\\n        // console.log('currentBtc', currentBtc);\\n        // console.log('currentEth', currentEth);\\n        // console.log('totalAssets()', totalAssets());\\n\\n        //rebalance of hedge based on assets after deposit (after deposit assets)\\n        state.rebalanceHedge(currentBtc, currentEth, totalAssets());\\n    }\\n\\n    /// @notice withdraws LP tokens from gauge, sells LP token for usdc\\n    /// @param usdcAmountDesired amount of USDC desired\\n    function _convertAssetToAUsdc(uint256 usdcAmountDesired) internal returns (uint256 usdcAmount) {\\n        /// @dev if usdcAmountDesired < 10, then there is precision issue in gmx contracts while redeeming for usdg\\n        if (usdcAmountDesired < state.usdcConversionThreshold) return 0;\\n        uint256 glpAmountDesired = usdcAmountDesired.mulDivDown(PRICE_PRECISION, getPrice(false));\\n        // USDG has 18 decimals and usdc has 6 decimals => 18-6 = 12\\n        // console.log('GLP PRICE: ', getPrice());\\n        // console.log('glpAmountDesired', glpAmountDesired);\\n        // console.log('TA', totalAssets());\\n        state.rewardRouter.unstakeAndRedeemGlp(\\n            address(state.usdc),\\n            glpAmountDesired, // glp amount\\n            usdcAmountDesired.mulDivDown(MAX_BPS - state.slippageThresholdGmx, MAX_BPS), // usdc\\n            address(this)\\n        );\\n\\n        usdcAmount = state.usdc.balanceOf(address(this));\\n\\n        _executeSupply(address(state.usdc), usdcAmount);\\n    }\\n\\n    /// @notice sells usdc for LP tokens and then stakes LP tokens\\n    /// @param amount amount of usdc\\n    function _convertAUsdcToAsset(uint256 amount) internal {\\n        _executeWithdraw(address(state.usdc), amount, address(this));\\n        // USDG has 18 decimals and usdc has 6 decimals => 18-6 = 12\\n        uint256 price = state.gmxVault.getMinPrice(address(state.usdc));\\n        uint256 usdgAmount = amount.mulDivDown(\\n            price * (MAX_BPS - state.slippageThresholdGmx),\\n            PRICE_PRECISION * MAX_BPS\\n        );\\n\\n        usdgAmount = usdgAmount.mulDivDown(10**USDG_DECIMALS, 10**IERC20Metadata(address(state.usdc)).decimals());\\n\\n        state.batchingManager.depositToken(address(state.usdc), amount, usdgAmount);\\n    }\\n\\n    function _rebalanceUnhedgedGlp(uint256 uncappedTokenHedge, uint256 cappedTokenHedge) internal {\\n        // console.log('uncappedTokenHedge',uncappedTokenHedge);\\n        // console.log('cappedTokenHedge',cappedTokenHedge);\\n        // console.log('totalAssets',totalAssets());\\n\\n        uint256 unhedgedGlp = totalAssets().mulDivDown(uncappedTokenHedge - cappedTokenHedge, uncappedTokenHedge);\\n        uint256 unhedgedGlpUsdcAmount = unhedgedGlp.mulDivDown(getPrice(false), PRICE_PRECISION);\\n        // console.log('unhedgedGlp',unhedgedGlp);\\n        // console.log('unhedgedGlpUsdcAmount',unhedgedGlpUsdcAmount);\\n        if (unhedgedGlpUsdcAmount > state.unhedgedGlpInUsdc) {\\n            uint256 glpToUsdcAmount = unhedgedGlpUsdcAmount - state.unhedgedGlpInUsdc;\\n            state.unhedgedGlpInUsdc += _convertAssetToAUsdc(glpToUsdcAmount);\\n        } else if (unhedgedGlpUsdcAmount < state.unhedgedGlpInUsdc) {\\n            uint256 usdcToGlpAmount = state.unhedgedGlpInUsdc - unhedgedGlpUsdcAmount;\\n            state.unhedgedGlpInUsdc -= usdcToGlpAmount;\\n            _convertAUsdcToAsset(usdcToGlpAmount);\\n        }\\n    }\\n\\n    /*\\n        AAVE HELPERS\\n    */\\n\\n    function _executeBorrow(address token, uint256 amount) internal {\\n        state.pool.borrow(token, amount, VARIABLE_INTEREST_MODE, 0, address(this));\\n    }\\n\\n    function _executeRepay(address token, uint256 amount) internal {\\n        state.pool.repay(token, amount, VARIABLE_INTEREST_MODE, address(this));\\n    }\\n\\n    function _executeSupply(address token, uint256 amount) internal {\\n        state.pool.supply(token, amount, address(this), 0);\\n    }\\n\\n    function _executeWithdraw(\\n        address token,\\n        uint256 amount,\\n        address receiver\\n    ) internal {\\n        state.pool.withdraw(token, amount, receiver);\\n    }\\n\\n    function _getLiquidationThreshold(address asset) internal view returns (uint256) {\\n        DataTypes.ReserveConfigurationMap memory config = state.pool.getConfiguration(asset);\\n        (\\n            ,\\n            /** uint256 ltv **/\\n            uint256 liquidationThreshold, /** uint256 liquidationBonus */ /** uint256 decimals */ /** uint256 reserveFactor */\\n            ,\\n            ,\\n            ,\\n\\n        ) = config.getParams();\\n\\n        return liquidationThreshold;\\n    }\\n\\n    /*\\n        BALANCER HELPERS\\n    */\\n\\n    function _executeOperationToken(\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 usdcAmount,\\n        uint256 premium,\\n        bool repayDebt\\n    ) internal {\\n        if (!repayDebt) {\\n            // console.log('swapTokenToUSD');\\n            uint256 amountWithPremium = tokenAmount + premium;\\n            // console.log('amountWithPremium borrow', amountWithPremium, token);\\n            (uint256 usdcReceived, uint256 tokensUsed) = SwapManager.swapToken(token, tokenAmount, usdcAmount);\\n            tokensUsed; // silence warning\\n            _executeSupply(address(state.usdc), usdcReceived);\\n            _executeBorrow(token, amountWithPremium);\\n            IERC20(token).transfer(address(state.balancerVault), amountWithPremium);\\n            state.dnUsdcDeposited += usdcReceived.toInt256();\\n        } else {\\n            // console.log('swapUSDCToToken');\\n            (uint256 usdcPaid, uint256 tokensReceived) = SwapManager.swapUSDC(token, tokenAmount, usdcAmount);\\n            uint256 amountWithPremium = usdcPaid + premium;\\n            // console.log('amountWithPremium', amountWithPremium, token);\\n            state.dnUsdcDeposited -= amountWithPremium.toInt256();\\n            // console.log('tokensReceived', tokensReceived);\\n            _executeRepay(token, tokensReceived);\\n            //withdraws to balancerVault\\n            _executeWithdraw(address(state.usdc), amountWithPremium, address(this));\\n            state.usdc.transfer(address(state.balancerVault), usdcAmount + premium);\\n        }\\n    }\\n\\n    function _executeFlashloan(\\n        address[] memory assets,\\n        uint256[] memory amounts,\\n        uint256 _btcTokenAmount,\\n        uint256 _btcUsdcAmount,\\n        uint256 _ethTokenAmount,\\n        uint256 _ethUsdcAmount,\\n        bool _repayDebtBtc,\\n        bool _repayDebtEth\\n    ) internal {\\n        if (assets.length != amounts.length) revert ArraysLengthMismatch();\\n\\n        state._hasFlashloaned = true;\\n\\n        state.balancerVault.flashLoan(\\n            address(this),\\n            assets,\\n            amounts,\\n            abi.encode(_btcTokenAmount, _btcUsdcAmount, _ethTokenAmount, _ethUsdcAmount, _repayDebtBtc, _repayDebtEth)\\n        );\\n\\n        state._hasFlashloaned = false;\\n    }\\n}\\n\",\"keccak256\":\"0x1130dd762be50a58cfd2b95329e325c50b1d8a08d8b941e28f19ae8236dc2f07\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615a3c80620000216000396000f3fe608060405234801561001057600080fd5b50600436106103625760003560e01c80638044ddeb116101c8578063ba08765211610104578063dbd5edc7116100a2578063e74b981b1161007c578063e74b981b146106c4578063ef8b30f7146106d7578063f04f2707146106ea578063f2fde38b146106fd57600080fd5b8063dbd5edc714610670578063dd62ed3e14610678578063e245b5af146106b157600080fd5b8063c6e6f592116100de578063c6e6f5921461062f578063ce96cb7714610642578063d627b53014610655578063d905777e1461065d57600080fd5b8063ba08765214610601578063bf9571f114610614578063c63d75b61461061c57600080fd5b806395d89b4111610171578063a9059cbb1161014b578063a9059cbb146105b5578063af4d66c8146105c8578063b3d7f6b9146105db578063b460af94146105ee57600080fd5b806395d89b411461059257806395e2da7c1461059a578063a457c2d7146105a257600080fd5b80638da5cb5b116101a25780638da5cb5b1461056657806394bf804d1461057757806395956cc11461058a57600080fd5b80638044ddeb146105435780638456cb59146105565780638d315d7b1461055e57600080fd5b80633d672a45116102a25780635c9a9b55116102405780636f2067211161021a5780636f206721146104f757806370a082311461050a578063715018a6146105335780637d7c2a1c1461053b57600080fd5b80635c9a9b55146104c957806365eda557146104dc5780636e553f65146104e457600080fd5b8063476343ee1161027c578063476343ee146104905780634cdad50614610498578063554070bc146104ab5780635c975abb146104be57600080fd5b80633d672a451461046d5780633f4ba83a14610475578063402d267d1461047d57600080fd5b8063160d62191161030f57806323b872dd116102e957806323b872dd1461040d578063313ce5671461042057806338d52e0f1461042f578063395093511461045a57600080fd5b8063160d6219146103ea57806318160ddd146103fd5780631f5edd8d1461040557600080fd5b8063095ea7b311610340578063095ea7b3146103aa5780630a28a477146103cd578063138cc18f146103e057600080fd5b806301e1d1141461036757806306fdde031461038257806307a2d13a14610397575b600080fd5b61036f610710565b6040519081526020015b60405180910390f35b61038a61078c565b6040516103799190614e2c565b61036f6103a5366004614e5f565b61081e565b6103bd6103b8366004614e8d565b6108c7565b6040519015158152602001610379565b61036f6103db366004614e5f565b6108e1565b6103e861097e565b005b6103e86103f8366004614ec9565b6111b8565b60355461036f565b6103e8611223565b6103bd61041b366004614f0b565b61138a565b60405160128152602001610379565b606554610442906001600160a01b031681565b6040516001600160a01b039091168152602001610379565b6103bd610468366004614e8d565b6113ae565b61036f6113ed565b6103e861150a565b61036f61048b366004614f4c565b61151c565b6103e86115a7565b61036f6104a6366004614e5f565b611661565b61036f6104b9366004614e5f565b61166c565b60985460ff166103bd565b6103e86104d7366004614f69565b611690565b6103e86116dd565b61036f6104f2366004614fbc565b6118fb565b6103e861050536600461502a565b611917565b61036f610518366004614f4c565b6001600160a01b031660009081526033602052604090205490565b6103e861204d565b6103e861205f565b6103e86105513660046150f1565b612314565b6103e8612365565b61036f612375565b6066546001600160a01b0316610442565b61036f610585366004614fbc565b6125bf565b6103e86125db565b61038a612724565b61036f612733565b6103bd6105b0366004614e8d565b6127c8565b6103bd6105c3366004614e8d565b61285a565b6103e86105d636600461514c565b612868565b61036f6105e9366004614e5f565b6128f1565b61036f6105fc3660046151bd565b61298c565b61036f61060f3660046151bd565b612a99565b6103e8612bbe565b61036f61062a366004614f4c565b6130c2565b61036f61063d366004614e5f565b6130d0565b61036f610650366004614f4c565b61316d565b6103bd61318f565b61036f61066b366004614f4c565b6132fa565b60d65461036f565b61036f6106863660046151ff565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b61036f6106bf36600461523b565b613318565b6103e86106d2366004614f4c565b613438565b61036f6106e5366004614e5f565b6134c7565b6103e86106f83660046153c8565b6134d2565b6103e861070b366004614f4c565b613756565b604051637343773360e11b815260ca60048201526000907301759Fa78950D071E606C8C25eB0cD34e4D40E7C9063e686ee6690602401602060405180830381865af4158015610763573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078791906154d3565b905090565b60606036805461079b906154ec565b80601f01602080910402602001604051908101604052809291908181526020018280546107c7906154ec565b80156108145780601f106107e957610100808354040283529160200191610814565b820191906000526020600020905b8154815290600101906020018083116107f757829003601f168201915b5050505050905090565b60008061082a60355490565b905080156108be57604051635a69be9d60e01b815260ca6004820152600060248201526108b9907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90635a69be9d90604401602060405180830381865af415801561088d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b191906154d3565b8490836137cc565b6108c0565b825b9392505050565b6000336108d58185856137eb565b60019150505b92915050565b6000806108ed60355490565b905080156108be57604051635a69be9d60e01b815260ca6004820152600060248201526108b99082907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90635a69be9d90604401602060405180830381865af4158015610952573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097691906154d3565b85919061390f565b60ed5460408051630d43254f60e31b815290516000926001600160a01b031691636a192a789160048083019260209291908290030181865afa1580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec9190615537565b9050600060ca60230160009054906101000a90046001600160a01b03166001600160a01b0316630ce4018a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a9190615537565b604051637aeceb1f60e11b81523060048201526001600160a01b03848116602483015291925060009183169063f5d9d63e90604401602060405180830381865afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae091906154d3565b60ed5460405163185b800160e11b815260006004820181905260248201819052600160448301819052606483018190526084830181905260a483015260c48201529192506001600160a01b0316906330b700029060e401600060405180830381600087803b158015610b5157600080fd5b505af1158015610b65573d6000803e3d6000fd5b5050604051637aeceb1f60e11b81523060048201526001600160a01b0386811660248301526000935084925085169063f5d9d63e90604401602060405180830381865afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde91906154d3565b610be8919061556a565b60ca54909150610bfc9082906127106137cc565b60d08054600090610c0e908490615581565b909155505060d25460cf5460e9546040516370a0823160e01b815230600482015260009392916001600160a01b0316906370a0823190602401602060405180830381865afa158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8891906154d3565b610c92919061556a565b610c9c919061556a565b60d35490915081111561115b5760ca5460009061271090610cbd9084615599565b610cc791906155b8565b90508060ca6005016000828254610cde9190615581565b9091555060009050610cf0828461556a565b90506000610d89826c0c9f2c9cd04674edea4000000060ca60020160009054906101000a90046001600160a01b03166001600160a01b031663e3696edd6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610d5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8291906154d3565b91906137cc565b90506000610d97828461556a565b905060008260ca60080154610dac9190615581565b60eb5460e9546040516340d3096b60e11b81526001600160a01b0391821660048201529293506000929116906381a612d690602401602060405180830381865afa158015610dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2291906154d3565b60e254909150600090610e7590610e4690600160b01b900461ffff166127106155da565b610e549061ffff1684615599565b610e6d6127106c0c9f2c9cd04674edea40000000615599565b8691906137cc565b9050610e9a610e866012600a6156e1565b610e926012600a6156e1565b8391906137cc565b60ee5460e954604051634ce3696f60e11b81526001600160a01b03918216600482015260248101889052604481018490529293506000929116906399c6d2de906064016020604051808303816000875af1158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2091906154d3565b60d3549091508411156110f25760e254600090610fdf90610f4e90600160b01b900461ffff166127106155da565b610f5c9061ffff1687615599565b610f756c0c9f2c9cd04674edea40000000612710615599565b60e95460405163439c755d60e11b815260ca60048201526001600160a01b039091166024820152600160448201527301759Fa78950D071E606C8C25eB0cD34e4D40E7C90638738eaba90606401602060405180830381865af4158015610d5e573d6000803e3d6000fd5b60e954604051631c9862ab60e21b81526001600160a01b039091166004820152602481018790526044810182905290915060009081907323A4AbF9AcA2242Ca698AA839E72419Ae4b11024906372618aac906064016040805180830381865af4158015611050573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107491906156ed565b60e754919350915061108f906001600160a01b03168361393d565b600060d255604080518d8152602081018f9052908101899052606081018a90526080810185905260a081018390527f158c029cea1e3fee2bbf8bd978c70589b9698ea9c382e6ce92bb481622a06db49060c00160405180910390a150505061114e565b60d2849055604080518a8152602081018c90529081018690526060810187905260808101829052600060a08201527f158c029cea1e3fee2bbf8bd978c70589b9698ea9c382e6ce92bb481622a06db49060c00160405180910390a15b50505050505050506111b1565b60408051828152602081018490526000818301819052606082018190526080820181905260a082015290517f158c029cea1e3fee2bbf8bd978c70589b9698ea9c382e6ce92bb481622a06db49181900360c00190a15b5050505050565b6111c06139b5565b60d8805461ffff9092166d0100000000000000000000000000026effff000000000000000000000000001963ffffffff909416690100000000000000000002939093166effffffffffff0000000000000000001990921691909117919091179055565b61122b6139b5565b60ed5460408051633671df2560e01b815290516000926001600160a01b031691633671df259160048083019260209291908290030181865afa158015611275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112999190615537565b6001600160a01b0316634e71d92d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc91906154d3565b60cd5460ed54604080516331e67c7160e01b81529051939450611387936001600160a01b0393841693869316916331e67c719160048083019260209291908290030181865afa158015611353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113779190615537565b6001600160a01b03169190613a0f565b50565b600033611398858285613a77565b6113a3858585613b09565b506001949350505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906108d590829086906113e8908790615581565b6137eb565b60ec5460405163019c8a3b60e11b81526000600482018190529182916001600160a01b0390911690630339147690602401602060405180830381865afa15801561143b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145f91906154d3565b9050600060ca601c0160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dd91906154d3565b9050611503600160801b6114fb8369d3c21bcecceda1000000615599565b8491906137cc565b9250505090565b6115126139b5565b61151a613cd7565b565b604051635a69be9d60e01b815260ca6004820152600160248201526000907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90635a69be9d90604401602060405180830381865af4158015611576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159a91906154d3565b60d6546108db919061556a565b60cf8054600090915560e95460cd5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015611605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116299190615711565b506040518181527f9800e6f57aeb4360eaa72295a820a4293e1e66fbfcabcd8874ae141304a76deb906020015b60405180910390a150565b60006108db8261081e565b60006108db61167b6000613318565b83906c0c9f2c9cd04674edea400000006137cc565b6116986139b5565b60e080546001600160a01b039586166001600160a01b03199182161790915560df80549486169482169490941790935560e19190915560e28054919093169116179055565b6116e56139b5565b60ed5460408051633671df2560e01b815290516001600160a01b0390921691633671df25916004808201926020929091908290030181865afa15801561172f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117539190615537565b6001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561178d57600080fd5b505af11580156117a1573d6000803e3d6000fd5b505060ed5460408051630d43254f60e31b81529051600094506001600160a01b039092169250636a192a789160048083019260209291908290030181865afa1580156117f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118159190615537565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561185b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187f91906154d3565b60ed54604051633be3166560e21b8152600481018390529192506001600160a01b03169063ef8c599490602401600060405180830381600087803b1580156118c657600080fd5b505af11580156118da573d6000803e3d6000fd5b505050508060ca60060160008282546118f39190615581565b909155505050565b6000611905613d29565b61190d613d6f565b6108c08383613eeb565b600054610100900460ff16158080156119375750600054600160ff909116105b806119515750303b158015611951575060005460ff166001145b6119b95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156119dc576000805461ff0019166101001790555b6119e4613fa6565b6119ec613fd5565b611a6f6119ff6060850160408601614f4c565b8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061400492505050565b611a7c6020840184614f4c565b60e980546001600160a01b0319166001600160a01b0392909216919091179055611aac6040840160208501614f4c565b60ea80546001600160a01b0319166001600160a01b0392909216919091179055611adc6080840160608501614f4c565b60e780546001600160a01b0319166001600160a01b0392909216919091179055611b0c60a0840160808501614f4c565b60e880546001600160a01b03199081166001600160a01b039384161790915560df8054821688841617905560ed8054821687841617905560db805490911684831617905560655460408051633c5103f760e11b8152905191909216916378a207ee9160048281019260209291908290030181865afa158015611b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb69190615537565b60e680546001600160a01b0319166001600160a01b0392831617905560655460408051633e9b6c6f60e21b81529051919092169163fa6db1bc9160048083019260209291908290030181865afa158015611c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c389190615537565b60ec80546001600160a01b0319166001600160a01b039283161790556065546040805162af394d60e81b81529051919092169163af394d009160048083019260209291908290030181865afa158015611c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb99190615537565b60e480546001600160a01b0319166001600160a01b0392831617905560ec546040805163fbfa77cf60e01b81529051919092169163fbfa77cf9160048083019260209291908290030181865afa158015611d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3b9190615537565b60eb80546001600160a01b0319166001600160a01b0392831617905560db546040805163026b1d5f60e01b81529051919092169163026b1d5f9160048083019260209291908290030181865afa158015611d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbd9190615537565b60d980546001600160a01b0319166001600160a01b0392831617905560db5460408051631f94a27560e31b81529051919092169163fca513a89160048083019260209291908290030181865afa158015611e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3f9190615537565b60da80546001600160a01b0319166001600160a01b0392831617905560d95460e7546040516335ea6a7560e01b815290831660048201529116906335ea6a75906024016101e060405180830381865afa158015611ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec491906157b0565b610100015160dc80546001600160a01b0319166001600160a01b0392831617905560d95460ea546040516335ea6a7560e01b815290831660048201529116906335ea6a75906024016101e060405180830381865afa158015611f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4e91906157b0565b610140015160dd80546001600160a01b0319166001600160a01b0392831617905560d95460e9546040516335ea6a7560e01b815290831660048201529116906335ea6a75906024016101e060405180830381865afa158015611fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd891906157b0565b610140015160de80546001600160a01b0319166001600160a01b039092169190911790558015612042576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6120556139b5565b61151a6000614032565b60cb546001600160a01b0316331461209f5760cb546040516329b7946d60e01b81523360048201526001600160a01b0390911660248201526044016119b0565b6120a761318f565b6120c45760405163a039e79960e01b815260040160405180910390fd5b6120cc61097e565b6040516321b16f2160e11b815260ca600482015260009081907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90634362de42906024016040805180830381865af4158015612120573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214491906156ed565b604051633e72ca6960e11b815260ca6004820152602481018390526044810182905291935091506000907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90637ce594d290606401602060405180830381865af41580156121aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ce91906154d3565b604051638684b69760e01b815260ca6004820152602481018290529091507301759Fa78950D071E606C8C25eB0cD34e4D40E7C90638684b6979060440160006040518083038186803b15801561222357600080fd5b505af4158015612237573d6000803e3d6000fd5b5050505060ca7301759Fa78950D071E606C8C25eB0cD34e4D40E7C633cb6767590918585612263610710565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160006040518083038186803b1580156122ac57600080fd5b505af41580156122c0573d6000803e3d6000fd5b505060d8805468ffffffffffffffff0019166101004267ffffffffffffffff160217905550506040517fc741dbaad15a4f298fe8d80943fa8e005e7bcb2f5b0a0c8dec1fc35be457f14690600090a1505050565b61231c6139b5565b60cb80546001600160a01b03199081166001600160a01b039788161790915560cc805482169587169590951790945560d69290925560ee8054909316931692909217905560ce55565b61236d6139b5565b61151a614084565b6040516321b16f2160e11b815260ca6004820152600090819081907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90634362de42906024016040805180830381865af41580156123cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ef91906156ed565b604051633e72ca6960e11b815260ca6004820152602481018390526044810182905291935091506000907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90637ce594d290606401602060405180830381865af4158015612455573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247991906154d3565b9050600060ca60240160009054906101000a90046001600160a01b03166001600160a01b031663584150756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f791906154d3565b60e4546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561253f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256391906154d3565b61256d9190615581565b9050612578826140c1565b60d154612584906140c1565b60d7546125986125938561166c565b6140c1565b6125a291906158d3565b6125ac91906158d3565b6125b69190615914565b94505050505090565b60006125c9613d29565b6125d1613d6f565b6108c08383614105565b6125e36139b5565b60ed5460d0546040516364f6446760e01b81526001600160a01b03909216916364f64467916126189160040190815260200190565b600060405180830381600087803b15801561263257600080fd5b505af1158015612646573d6000803e3d6000fd5b505060ed5460408051633671df2560e01b815290516001600160a01b039092169350633671df2592506004808201926020929091908290030181865afa158015612694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b89190615537565b60d05460405163b6b55f2560e01b81526001600160a01b03929092169163b6b55f25916126eb9160040190815260200190565b600060405180830381600087803b15801561270557600080fd5b505af1158015612719573d6000803e3d6000fd5b5050600060d0555050565b60606037805461079b906154ec565b600061274360ca600701546140c1565b60d75460dc546040516370a0823160e01b81523060048201526127b4916001600160a01b0316906370a0823190602401602060405180830381865afa158015612790573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259391906154d3565b6127be9190615914565b6107879190615914565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091908381101561284d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016119b0565b6113a382868684036137eb565b6000336108d5818585613b09565b6128706139b5565b60e2805463ffffffff60a01b1916600160b01b61ffff9889160261ffff60a01b191617600160a01b96909716959095029590951790935560e380547fffffffffffff0000000000000000000000000000000000000000000000000000166001600160d01b03939093169290921790915560d39190915560d49190915560d555565b6000806128fd60355490565b905080156108be57604051635a69be9d60e01b815260ca6004820152600160248201526108b9907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90635a69be9d90604401602060405180830381865af4158015612960573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298491906154d3565b84908361390f565b6000612996613d29565b61299e613d6f565b6129a7846108e1565b9050336001600160a01b038316146129f7576001600160a01b038216600090815260346020908152604080832033845290915290205460001981146129f5576129f583336113e8858561556a565b505b60ce54600090612a1790612a0d9061271061556a565b86906127106137cc565b9050612a24818386614186565b612a2e8383614291565b60408051828152602081018490526001600160a01b03808616929087169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db91015b60405180910390a4606554612a91906001600160a01b03168583613a0f565b509392505050565b6000612aa3613d29565b612aab613d6f565b336001600160a01b03831614612af9576001600160a01b03821660009081526034602090815260408083203384529091529020546000198114612af757612af783336113e8888561556a565b505b612b0284611661565b905080612b3f5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b60448201526064016119b0565b60ce54600090612b5f90612b559061271061556a565b83906127106137cc565b9050612b6c818686614186565b612b768386614291565b60408051828152602081018790526001600160a01b03808616929087169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db9101612a72565b612bc66139b5565b60d95460df5460ea5460405163095ea7b360e01b81526001600160a01b0393841660048201819052600019602483015293928316929091169063095ea7b3906044016020604051808303816000875af1158015612c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4b9190615711565b5060ea5460405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc49190615711565b5060e95460405163095ea7b360e01b81526001600160a01b03848116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3d9190615711565b5060e95460405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db69190615711565b5060e95460ee5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015612e0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e319190615711565b5060e75460405163095ea7b360e01b81526001600160a01b03848116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eaa9190615711565b5060e75460405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f239190615711565b5060e75460ee5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015612f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9e9190615711565b5060dc5460cc5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015612ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130199190615711565b5060655460ec5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015613070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130949190615711565b506040517fba5bb3f899c7a3edcc9ff9d46c4e08449c6a608b6f8254132bc5af4898645cbc90600090a15050565b60006108db61063d8361151c565b6000806130dc60355490565b905080156108be57604051635a69be9d60e01b815260ca6004820152600160248201526108b99082907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90635a69be9d90604401602060405180830381865af4158015613141573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316591906154d3565b8591906137cc565b6001600160a01b0381166000908152603360205260408120546108db9061081e565b604051630d0d70b960e11b815260ca60048201526000907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90631a1ae17290602401602060405180830381865af41580156131e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132069190615711565b806132805750604051633925aae560e21b815260ca60048201527301759Fa78950D071E606C8C25eB0cD34e4D40E7C9063e496ab9490602401602060405180830381865af415801561325c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132809190615711565b8061078757506040516355b51a6d60e01b815260ca60048201527301759Fa78950D071E606C8C25eB0cD34e4D40E7C906355b51a6d90602401602060405180830381865af41580156132d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107879190615711565b6001600160a01b0381166000908152603360205260408120546108db565b60ec5460405163019c8a3b60e11b8152821515600482015260009182916001600160a01b0390911690630339147690602401602060405180830381865afa158015613367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338b91906154d3565b9050600060ca601c0160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061340991906154d3565b90506134306c0c9f2c9cd04674edea400000006114fb8369d3c21bcecceda1000000615599565b949350505050565b6134406139b5565b60cd546001600160a01b038281169116146134755760cd80546001600160a01b0319166001600160a01b03831617905561348e565b604051630ed1b8b360e31b815260040160405180910390fd5b6040516001600160a01b03821681527f7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc290602001611656565b60006108db826130d0565b60e0546001600160a01b031633146134fd5760405163f4a8e62160e01b815260040160405180910390fd5b60d85460ff1661352057604051637869c16160e11b815260040160405180910390fd5b6000806000806000808680602001905181019061353d9190615953565b9550955095509550955095506000808380156135565750825b156135d3576135a4878c600081518110613572576135726159b2565b60200260200101518c60008151811061358d5761358d6159b2565b60200260200101516137cc9092919063ffffffff16565b9150818a6000815181106135ba576135ba6159b2565b60200260200101516135cc919061556a565b905061370a565b87158015906135e157508515155b156136c4576000846136265760ea548d516001600160a01b03909116908e9060009061360f5761360f6159b2565b60200260200101516001600160a01b03161461365b565b60e7548d516001600160a01b03909116908e90600090613648576136486159b2565b60200260200101516001600160a01b0316145b15613664575060015b8a81613671576001613674565b60005b60ff1681518110613687576136876159b2565b602002602001015192508a8161369e5760006136a1565b60015b60ff16815181106136b4576136b46159b2565b602002602001015191505061370a565b87156136ec57896000815181106136dd576136dd6159b2565b6020026020010151915061370a565b896000815181106136ff576136ff6159b2565b602002602001015190505b87156137295760ea54613729906001600160a01b0316898985886143df565b85156137485760e954613748906001600160a01b0316878784876143df565b505050505050505050505050565b61375e6139b5565b6001600160a01b0381166137c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016119b0565b61138781614032565b8282028115158415858304851417166137e457600080fd5b0492915050565b6001600160a01b03831661384d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016119b0565b6001600160a01b0382166138ae5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016119b0565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b82820281151584158583048514171661392757600080fd5b6001826001830304018115150290509392505050565b60d95460405163617ba03760e01b81526001600160a01b03848116600483015260248201849052306044830152600060648301529091169063617ba037906084015b600060405180830381600087803b15801561399957600080fd5b505af11580156139ad573d6000803e3d6000fd5b505050505050565b6066546001600160a01b0316331461151a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016119b0565b6040516001600160a01b038316602482015260448101829052613a7290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526146bc565b505050565b6001600160a01b038381166000908152603460209081526040808320938616835292905220546000198114613b035781811015613af65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016119b0565b613b0384848484036137eb565b50505050565b6001600160a01b038316613b6d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016119b0565b6001600160a01b038216613bcf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016119b0565b6001600160a01b03831660009081526033602052604090205481811015613c475760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016119b0565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290613c7e908490615581565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051613cca91815260200190565b60405180910390a3613b03565b613cdf61478e565b6098805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60985460ff161561151a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016119b0565b613d7761097e565b6040516321b16f2160e11b815260ca600482015260009081907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90634362de42906024016040805180830381865af4158015613dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613def91906156ed565b604051633e72ca6960e11b815260ca6004820152602481018390526044810182905291935091506000907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90637ce594d290606401602060405180830381865af4158015613e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e7991906154d3565b604051638684b69760e01b815260ca6004820152602481018290529091507301759Fa78950D071E606C8C25eB0cD34e4D40E7C90638684b6979060440160006040518083038186803b158015613ece57600080fd5b505af4158015613ee2573d6000803e3d6000fd5b50505050505050565b6000613ef6836134c7565b905080613f335760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b60448201526064016119b0565b606554613f4b906001600160a01b03163330866147e0565b613f558282614818565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a36108db8382846148f8565b600054610100900460ff16613fcd5760405162461bcd60e51b81526004016119b0906159c8565b61151a6149c5565b600054610100900460ff16613ffc5760405162461bcd60e51b81526004016119b0906159c8565b61151a6149f5565b61400e8282614a28565b5050606580546001600160a01b0319166001600160a01b0392909216919091179055565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61408c613d29565b6098805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613d0c3390565b6000600160ff1b82106141015760405162461bcd60e51b81526020600482015260086024820152674f766572666c6f7760c01b60448201526064016119b0565b5090565b6000614110836128f1565b60655490915061412b906001600160a01b03163330846147e0565b6141358284614818565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a36108db8184846148f8565b6040516321b16f2160e11b815260ca600482015260009081907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90634362de42906024016040805180830381865af41580156141da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141fe91906156ed565b90925090507301759Fa78950D071E606C8C25eB0cD34e4D40E7C633cb6767560ca84848961422a610710565b614234919061556a565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160006040518083038186803b15801561427d57600080fd5b505af4158015612042573d6000803e3d6000fd5b6001600160a01b0382166142f15760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016119b0565b6001600160a01b038216600090815260336020526040902054818110156143655760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016119b0565b6001600160a01b038316600090815260336020526040812083830390556035805484929061439490849061556a565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b806145475760006143f08386615581565b604051631c9862ab60e21b81526001600160a01b0388166004820152602481018790526044810186905290915060009081907323A4AbF9AcA2242Ca698AA839E72419Ae4b11024906372618aac906064016040805180830381865af415801561445d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061448191906156ed565b60e754919350915061449c906001600160a01b03168361393d565b6144a68884614a59565b60e05460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018590529089169063a9059cbb906044016020604051808303816000875af11580156144f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061451d9190615711565b50614527826140c1565b60d780546000906145399084906158d3565b909155506111b19350505050565b604051632ea82dd560e21b81526001600160a01b0386166004820152602481018590526044810184905260009081907323A4AbF9AcA2242Ca698AA839E72419Ae4b110249063baa0b754906064016040805180830381865af41580156145b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d591906156ed565b909250905060006145e68584615581565b90506145f1816140c1565b60d78054600090614603908490615914565b9091555061461390508883614aa6565b60e75461462a906001600160a01b03168230614b2a565b60e75460e0546001600160a01b039182169163a9059cbb911661464d888a615581565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015614698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120429190615711565b6000614711826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614ba99092919063ffffffff16565b805190915015613a72578080602001905181019061472f9190615711565b613a725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016119b0565b60985460ff1661151a5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016119b0565b6040516001600160a01b0380851660248301528316604482015260648101829052613b039085906323b872dd60e01b90608401613a3b565b6001600160a01b03821661486e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016119b0565b80603560008282546148809190615581565b90915550506001600160a01b038216600090815260336020526040812080548392906148ad908490615581565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35b5050565b60d654614903610710565b1115614922576040516324d758c360e21b815260040160405180910390fd5b6040516321b16f2160e11b815260ca600482015260009081907301759Fa78950D071E606C8C25eB0cD34e4D40E7C90634362de42906024016040805180830381865af4158015614976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061499a91906156ed565b90925090507301759Fa78950D071E606C8C25eB0cD34e4D40E7C633cb6767560ca8484614234610710565b600054610100900460ff166149ec5760405162461bcd60e51b81526004016119b0906159c8565b61151a33614032565b600054610100900460ff16614a1c5760405162461bcd60e51b81526004016119b0906159c8565b6098805460ff19169055565b600054610100900460ff16614a4f5760405162461bcd60e51b81526004016119b0906159c8565b6148f48282614bb8565b60d95460405163a415bcad60e01b81526001600160a01b0384811660048301526024820184905260026044830152600060648301523060848301529091169063a415bcad9060a40161397f565b60d95460405163573ade8160e01b81526001600160a01b03848116600483015260248201849052600260448301523060648301529091169063573ade81906084016020604051808303816000875af1158015614b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a7291906154d3565b60d954604051631a4ca37b60e21b81526001600160a01b038581166004830152602482018590528381166044830152909116906369328dec906064016020604051808303816000875af1158015614b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b0391906154d3565b60606134308484600085614c06565b600054610100900460ff16614bdf5760405162461bcd60e51b81526004016119b0906159c8565b8151614bf2906036906020850190614d70565b508051613a72906037906020840190614d70565b606082471015614c675760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016119b0565b6001600160a01b0385163b614cbe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016119b0565b600080866001600160a01b03168587604051614cda9190615a13565b60006040518083038185875af1925050503d8060008114614d17576040519150601f19603f3d011682016040523d82523d6000602084013e614d1c565b606091505b5091509150614d2c828286614d37565b979650505050505050565b60608315614d465750816108c0565b825115614d565782518084602001fd5b8160405162461bcd60e51b81526004016119b09190614e2c565b828054614d7c906154ec565b90600052602060002090601f016020900481019282614d9e5760008555614de4565b82601f10614db757805160ff1916838001178555614de4565b82800160010185558215614de4579182015b82811115614de4578251825591602001919060010190614dc9565b506141019291505b808211156141015760008155600101614dec565b60005b83811015614e1b578181015183820152602001614e03565b83811115613b035750506000910152565b6020815260008251806020840152614e4b816040850160208701614e00565b601f01601f19169190910160400192915050565b600060208284031215614e7157600080fd5b5035919050565b6001600160a01b038116811461138757600080fd5b60008060408385031215614ea057600080fd5b8235614eab81614e78565b946020939093013593505050565b61ffff8116811461138757600080fd5b60008060408385031215614edc57600080fd5b823563ffffffff81168114614ef057600080fd5b91506020830135614f0081614eb9565b809150509250929050565b600080600060608486031215614f2057600080fd5b8335614f2b81614e78565b92506020840135614f3b81614e78565b929592945050506040919091013590565b600060208284031215614f5e57600080fd5b81356108c081614e78565b60008060008060808587031215614f7f57600080fd5b8435614f8a81614e78565b93506020850135614f9a81614e78565b9250604085013591506060850135614fb181614e78565b939692955090935050565b60008060408385031215614fcf57600080fd5b823591506020830135614f0081614e78565b60008083601f840112614ff357600080fd5b50813567ffffffffffffffff81111561500b57600080fd5b60208301915083602082850101111561502357600080fd5b9250929050565b600080600080600080600080888a0361014081121561504857600080fd5b893567ffffffffffffffff8082111561506057600080fd5b61506c8d838e01614fe1565b909b50995060208c013591508082111561508557600080fd5b506150928c828d01614fe1565b90985096505060408a01356150a681614e78565b945060608a01356150b681614e78565b935060a0607f19820112156150ca57600080fd5b506080890191506101208901356150e081614e78565b809150509295985092959890939650565b600080600080600060a0868803121561510957600080fd5b853561511481614e78565b9450602086013561512481614e78565b935060408601359250606086013561513b81614e78565b949793965091946080013592915050565b60008060008060008060c0878903121561516557600080fd5b863561517081614eb9565b9550602087013561518081614eb9565b945060408701356001600160d01b038116811461519c57600080fd5b959894975094956060810135955060808101359460a0909101359350915050565b6000806000606084860312156151d257600080fd5b8335925060208401356151e481614e78565b915060408401356151f481614e78565b809150509250925092565b6000806040838503121561521257600080fd5b823561521d81614e78565b91506020830135614f0081614e78565b801515811461138757600080fd5b60006020828403121561524d57600080fd5b81356108c08161522d565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff8111828210171561529257615292615258565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156152c1576152c1615258565b604052919050565b600067ffffffffffffffff8211156152e3576152e3615258565b5060051b60200190565b600082601f8301126152fe57600080fd5b8135602061531361530e836152c9565b615298565b82815260059290921b8401810191818101908684111561533257600080fd5b8286015b8481101561534d5780358352918301918301615336565b509695505050505050565b600082601f83011261536957600080fd5b813567ffffffffffffffff81111561538357615383615258565b615396601f8201601f1916602001615298565b8181528460208386010111156153ab57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156153de57600080fd5b843567ffffffffffffffff808211156153f657600080fd5b818701915087601f83011261540a57600080fd5b8135602061541a61530e836152c9565b82815260059290921b8401810191818101908b84111561543957600080fd5b948201945b8386101561546057853561545181614e78565b8252948201949082019061543e565b9850508801359250508082111561547657600080fd5b615482888389016152ed565b9450604087013591508082111561549857600080fd5b6154a4888389016152ed565b935060608701359150808211156154ba57600080fd5b506154c787828801615358565b91505092959194509250565b6000602082840312156154e557600080fd5b5051919050565b600181811c9082168061550057607f821691505b6020821081141561552157634e487b7160e01b600052602260045260246000fd5b50919050565b805161553281614e78565b919050565b60006020828403121561554957600080fd5b81516108c081614e78565b634e487b7160e01b600052601160045260246000fd5b60008282101561557c5761557c615554565b500390565b6000821982111561559457615594615554565b500190565b60008160001904831182151516156155b3576155b3615554565b500290565b6000826155d557634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff838116908316818110156155f5576155f5615554565b039392505050565b600181815b8085111561563857816000190482111561561e5761561e615554565b8085161561562b57918102915b93841c9390800290615602565b509250929050565b60008261564f575060016108db565b8161565c575060006108db565b8160018114615672576002811461567c57615698565b60019150506108db565b60ff84111561568d5761568d615554565b50506001821b6108db565b5060208310610133831016604e8410600b84101617156156bb575081810a6108db565b6156c583836155fd565b80600019048211156156d9576156d9615554565b029392505050565b60006108c08383615640565b6000806040838503121561570057600080fd5b505080516020909101519092909150565b60006020828403121561572357600080fd5b81516108c08161522d565b60006020828403121561574057600080fd5b6040516020810181811067ffffffffffffffff8211171561576357615763615258565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461553257600080fd5b805164ffffffffff8116811461553257600080fd5b805161553281614eb9565b60006101e082840312156157c357600080fd5b6157cb61526e565b6157d5848461572e565b81526157e360208401615770565b60208201526157f460408401615770565b604082015261580560608401615770565b606082015261581660808401615770565b608082015261582760a08401615770565b60a082015261583860c08401615790565b60c082015261584960e084016157a5565b60e082015261010061585c818501615527565b9082015261012061586e848201615527565b90820152610140615880848201615527565b90820152610160615892848201615527565b908201526101806158a4848201615770565b908201526101a06158b6848201615770565b908201526101c06158c8848201615770565b908201529392505050565b600080821280156001600160ff1b03849003851316156158f5576158f5615554565b600160ff1b839003841281161561590e5761590e615554565b50500190565b60008083128015600160ff1b85018412161561593257615932615554565b6001600160ff1b038401831381161561594d5761594d615554565b50500390565b60008060008060008060c0878903121561596c57600080fd5b8651955060208701519450604087015193506060870151925060808701516159938161522d565b60a08801519092506159a48161522d565b809150509295509295509295565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251615a25818460208701614e00565b919091019291505056fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103625760003560e01c80638044ddeb116101c8578063ba08765211610104578063dbd5edc7116100a2578063e74b981b1161007c578063e74b981b146106c4578063ef8b30f7146106d7578063f04f2707146106ea578063f2fde38b146106fd57600080fd5b8063dbd5edc714610670578063dd62ed3e14610678578063e245b5af146106b157600080fd5b8063c6e6f592116100de578063c6e6f5921461062f578063ce96cb7714610642578063d627b53014610655578063d905777e1461065d57600080fd5b8063ba08765214610601578063bf9571f114610614578063c63d75b61461061c57600080fd5b806395d89b4111610171578063a9059cbb1161014b578063a9059cbb146105b5578063af4d66c8146105c8578063b3d7f6b9146105db578063b460af94146105ee57600080fd5b806395d89b411461059257806395e2da7c1461059a578063a457c2d7146105a257600080fd5b80638da5cb5b116101a25780638da5cb5b1461056657806394bf804d1461057757806395956cc11461058a57600080fd5b80638044ddeb146105435780638456cb59146105565780638d315d7b1461055e57600080fd5b80633d672a45116102a25780635c9a9b55116102405780636f2067211161021a5780636f206721146104f757806370a082311461050a578063715018a6146105335780637d7c2a1c1461053b57600080fd5b80635c9a9b55146104c957806365eda557146104dc5780636e553f65146104e457600080fd5b8063476343ee1161027c578063476343ee146104905780634cdad50614610498578063554070bc146104ab5780635c975abb146104be57600080fd5b80633d672a451461046d5780633f4ba83a14610475578063402d267d1461047d57600080fd5b8063160d62191161030f57806323b872dd116102e957806323b872dd1461040d578063313ce5671461042057806338d52e0f1461042f578063395093511461045a57600080fd5b8063160d6219146103ea57806318160ddd146103fd5780631f5edd8d1461040557600080fd5b8063095ea7b311610340578063095ea7b3146103aa5780630a28a477146103cd578063138cc18f146103e057600080fd5b806301e1d1141461036757806306fdde031461038257806307a2d13a14610397575b600080fd5b61036f610710565b6040519081526020015b60405180910390f35b61038a61078c565b6040516103799190614e2c565b61036f6103a5366004614e5f565b61081e565b6103bd6103b8366004614e8d565b6108c7565b6040519015158152602001610379565b61036f6103db366004614e5f565b6108e1565b6103e861097e565b005b6103e86103f8366004614ec9565b6111b8565b60355461036f565b6103e8611223565b6103bd61041b366004614f0b565b61138a565b60405160128152602001610379565b606554610442906001600160a01b031681565b6040516001600160a01b039091168152602001610379565b6103bd610468366004614e8d565b6113ae565b61036f6113ed565b6103e861150a565b61036f61048b366004614f4c565b61151c565b6103e86115a7565b61036f6104a6366004614e5f565b611661565b61036f6104b9366004614e5f565b61166c565b60985460ff166103bd565b6103e86104d7366004614f69565b611690565b6103e86116dd565b61036f6104f2366004614fbc565b6118fb565b6103e861050536600461502a565b611917565b61036f610518366004614f4c565b6001600160a01b031660009081526033602052604090205490565b6103e861204d565b6103e861205f565b6103e86105513660046150f1565b612314565b6103e8612365565b61036f612375565b6066546001600160a01b0316610442565b61036f610585366004614fbc565b6125bf565b6103e86125db565b61038a612724565b61036f612733565b6103bd6105b0366004614e8d565b6127c8565b6103bd6105c3366004614e8d565b61285a565b6103e86105d636600461514c565b612868565b61036f6105e9366004614e5f565b6128f1565b61036f6105fc3660046151bd565b61298c565b61036f61060f3660046151bd565b612a99565b6103e8612bbe565b61036f61062a366004614f4c565b6130c2565b61036f61063d366004614e5f565b6130d0565b61036f610650366004614f4c565b61316d565b6103bd61318f565b61036f61066b366004614f4c565b6132fa565b60d65461036f565b61036f6106863660046151ff565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b61036f6106bf36600461523b565b613318565b6103e86106d2366004614f4c565b613438565b61036f6106e5366004614e5f565b6134c7565b6103e86106f83660046153c8565b6134d2565b6103e861070b366004614f4c565b613756565b604051637343773360e11b815260ca600482015260009073__$e69b62c1cd9e88f96bb775811e046ce5a9$__9063e686ee6690602401602060405180830381865af4158015610763573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078791906154d3565b905090565b60606036805461079b906154ec565b80601f01602080910402602001604051908101604052809291908181526020018280546107c7906154ec565b80156108145780601f106107e957610100808354040283529160200191610814565b820191906000526020600020905b8154815290600101906020018083116107f757829003601f168201915b5050505050905090565b60008061082a60355490565b905080156108be57604051635a69be9d60e01b815260ca6004820152600060248201526108b99073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90635a69be9d90604401602060405180830381865af415801561088d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b191906154d3565b8490836137cc565b6108c0565b825b9392505050565b6000336108d58185856137eb565b60019150505b92915050565b6000806108ed60355490565b905080156108be57604051635a69be9d60e01b815260ca6004820152600060248201526108b990829073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90635a69be9d90604401602060405180830381865af4158015610952573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097691906154d3565b85919061390f565b60ed5460408051630d43254f60e31b815290516000926001600160a01b031691636a192a789160048083019260209291908290030181865afa1580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec9190615537565b9050600060ca60230160009054906101000a90046001600160a01b03166001600160a01b0316630ce4018a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a9190615537565b604051637aeceb1f60e11b81523060048201526001600160a01b03848116602483015291925060009183169063f5d9d63e90604401602060405180830381865afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae091906154d3565b60ed5460405163185b800160e11b815260006004820181905260248201819052600160448301819052606483018190526084830181905260a483015260c48201529192506001600160a01b0316906330b700029060e401600060405180830381600087803b158015610b5157600080fd5b505af1158015610b65573d6000803e3d6000fd5b5050604051637aeceb1f60e11b81523060048201526001600160a01b0386811660248301526000935084925085169063f5d9d63e90604401602060405180830381865afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde91906154d3565b610be8919061556a565b60ca54909150610bfc9082906127106137cc565b60d08054600090610c0e908490615581565b909155505060d25460cf5460e9546040516370a0823160e01b815230600482015260009392916001600160a01b0316906370a0823190602401602060405180830381865afa158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8891906154d3565b610c92919061556a565b610c9c919061556a565b60d35490915081111561115b5760ca5460009061271090610cbd9084615599565b610cc791906155b8565b90508060ca6005016000828254610cde9190615581565b9091555060009050610cf0828461556a565b90506000610d89826c0c9f2c9cd04674edea4000000060ca60020160009054906101000a90046001600160a01b03166001600160a01b031663e3696edd6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610d5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8291906154d3565b91906137cc565b90506000610d97828461556a565b905060008260ca60080154610dac9190615581565b60eb5460e9546040516340d3096b60e11b81526001600160a01b0391821660048201529293506000929116906381a612d690602401602060405180830381865afa158015610dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2291906154d3565b60e254909150600090610e7590610e4690600160b01b900461ffff166127106155da565b610e549061ffff1684615599565b610e6d6127106c0c9f2c9cd04674edea40000000615599565b8691906137cc565b9050610e9a610e866012600a6156e1565b610e926012600a6156e1565b8391906137cc565b60ee5460e954604051634ce3696f60e11b81526001600160a01b03918216600482015260248101889052604481018490529293506000929116906399c6d2de906064016020604051808303816000875af1158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2091906154d3565b60d3549091508411156110f25760e254600090610fdf90610f4e90600160b01b900461ffff166127106155da565b610f5c9061ffff1687615599565b610f756c0c9f2c9cd04674edea40000000612710615599565b60e95460405163439c755d60e11b815260ca60048201526001600160a01b0390911660248201526001604482015273__$e69b62c1cd9e88f96bb775811e046ce5a9$__90638738eaba90606401602060405180830381865af4158015610d5e573d6000803e3d6000fd5b60e954604051631c9862ab60e21b81526001600160a01b0390911660048201526024810187905260448101829052909150600090819073__$f09208ef53137b379b85ea4a8d399069d8$__906372618aac906064016040805180830381865af4158015611050573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107491906156ed565b60e754919350915061108f906001600160a01b03168361393d565b600060d255604080518d8152602081018f9052908101899052606081018a90526080810185905260a081018390527f158c029cea1e3fee2bbf8bd978c70589b9698ea9c382e6ce92bb481622a06db49060c00160405180910390a150505061114e565b60d2849055604080518a8152602081018c90529081018690526060810187905260808101829052600060a08201527f158c029cea1e3fee2bbf8bd978c70589b9698ea9c382e6ce92bb481622a06db49060c00160405180910390a15b50505050505050506111b1565b60408051828152602081018490526000818301819052606082018190526080820181905260a082015290517f158c029cea1e3fee2bbf8bd978c70589b9698ea9c382e6ce92bb481622a06db49181900360c00190a15b5050505050565b6111c06139b5565b60d8805461ffff9092166d0100000000000000000000000000026effff000000000000000000000000001963ffffffff909416690100000000000000000002939093166effffffffffff0000000000000000001990921691909117919091179055565b61122b6139b5565b60ed5460408051633671df2560e01b815290516000926001600160a01b031691633671df259160048083019260209291908290030181865afa158015611275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112999190615537565b6001600160a01b0316634e71d92d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc91906154d3565b60cd5460ed54604080516331e67c7160e01b81529051939450611387936001600160a01b0393841693869316916331e67c719160048083019260209291908290030181865afa158015611353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113779190615537565b6001600160a01b03169190613a0f565b50565b600033611398858285613a77565b6113a3858585613b09565b506001949350505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906108d590829086906113e8908790615581565b6137eb565b60ec5460405163019c8a3b60e11b81526000600482018190529182916001600160a01b0390911690630339147690602401602060405180830381865afa15801561143b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145f91906154d3565b9050600060ca601c0160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dd91906154d3565b9050611503600160801b6114fb8369d3c21bcecceda1000000615599565b8491906137cc565b9250505090565b6115126139b5565b61151a613cd7565b565b604051635a69be9d60e01b815260ca60048201526001602482015260009073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90635a69be9d90604401602060405180830381865af4158015611576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159a91906154d3565b60d6546108db919061556a565b60cf8054600090915560e95460cd5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015611605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116299190615711565b506040518181527f9800e6f57aeb4360eaa72295a820a4293e1e66fbfcabcd8874ae141304a76deb906020015b60405180910390a150565b60006108db8261081e565b60006108db61167b6000613318565b83906c0c9f2c9cd04674edea400000006137cc565b6116986139b5565b60e080546001600160a01b039586166001600160a01b03199182161790915560df80549486169482169490941790935560e19190915560e28054919093169116179055565b6116e56139b5565b60ed5460408051633671df2560e01b815290516001600160a01b0390921691633671df25916004808201926020929091908290030181865afa15801561172f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117539190615537565b6001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561178d57600080fd5b505af11580156117a1573d6000803e3d6000fd5b505060ed5460408051630d43254f60e31b81529051600094506001600160a01b039092169250636a192a789160048083019260209291908290030181865afa1580156117f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118159190615537565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561185b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187f91906154d3565b60ed54604051633be3166560e21b8152600481018390529192506001600160a01b03169063ef8c599490602401600060405180830381600087803b1580156118c657600080fd5b505af11580156118da573d6000803e3d6000fd5b505050508060ca60060160008282546118f39190615581565b909155505050565b6000611905613d29565b61190d613d6f565b6108c08383613eeb565b600054610100900460ff16158080156119375750600054600160ff909116105b806119515750303b158015611951575060005460ff166001145b6119b95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156119dc576000805461ff0019166101001790555b6119e4613fa6565b6119ec613fd5565b611a6f6119ff6060850160408601614f4c565b8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061400492505050565b611a7c6020840184614f4c565b60e980546001600160a01b0319166001600160a01b0392909216919091179055611aac6040840160208501614f4c565b60ea80546001600160a01b0319166001600160a01b0392909216919091179055611adc6080840160608501614f4c565b60e780546001600160a01b0319166001600160a01b0392909216919091179055611b0c60a0840160808501614f4c565b60e880546001600160a01b03199081166001600160a01b039384161790915560df8054821688841617905560ed8054821687841617905560db805490911684831617905560655460408051633c5103f760e11b8152905191909216916378a207ee9160048281019260209291908290030181865afa158015611b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb69190615537565b60e680546001600160a01b0319166001600160a01b0392831617905560655460408051633e9b6c6f60e21b81529051919092169163fa6db1bc9160048083019260209291908290030181865afa158015611c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c389190615537565b60ec80546001600160a01b0319166001600160a01b039283161790556065546040805162af394d60e81b81529051919092169163af394d009160048083019260209291908290030181865afa158015611c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb99190615537565b60e480546001600160a01b0319166001600160a01b0392831617905560ec546040805163fbfa77cf60e01b81529051919092169163fbfa77cf9160048083019260209291908290030181865afa158015611d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3b9190615537565b60eb80546001600160a01b0319166001600160a01b0392831617905560db546040805163026b1d5f60e01b81529051919092169163026b1d5f9160048083019260209291908290030181865afa158015611d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbd9190615537565b60d980546001600160a01b0319166001600160a01b0392831617905560db5460408051631f94a27560e31b81529051919092169163fca513a89160048083019260209291908290030181865afa158015611e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3f9190615537565b60da80546001600160a01b0319166001600160a01b0392831617905560d95460e7546040516335ea6a7560e01b815290831660048201529116906335ea6a75906024016101e060405180830381865afa158015611ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec491906157b0565b610100015160dc80546001600160a01b0319166001600160a01b0392831617905560d95460ea546040516335ea6a7560e01b815290831660048201529116906335ea6a75906024016101e060405180830381865afa158015611f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4e91906157b0565b610140015160dd80546001600160a01b0319166001600160a01b0392831617905560d95460e9546040516335ea6a7560e01b815290831660048201529116906335ea6a75906024016101e060405180830381865afa158015611fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd891906157b0565b610140015160de80546001600160a01b0319166001600160a01b039092169190911790558015612042576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6120556139b5565b61151a6000614032565b60cb546001600160a01b0316331461209f5760cb546040516329b7946d60e01b81523360048201526001600160a01b0390911660248201526044016119b0565b6120a761318f565b6120c45760405163a039e79960e01b815260040160405180910390fd5b6120cc61097e565b6040516321b16f2160e11b815260ca6004820152600090819073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90634362de42906024016040805180830381865af4158015612120573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214491906156ed565b604051633e72ca6960e11b815260ca60048201526024810183905260448101829052919350915060009073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90637ce594d290606401602060405180830381865af41580156121aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ce91906154d3565b604051638684b69760e01b815260ca60048201526024810182905290915073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90638684b6979060440160006040518083038186803b15801561222357600080fd5b505af4158015612237573d6000803e3d6000fd5b5050505060ca73__$e69b62c1cd9e88f96bb775811e046ce5a9$__633cb6767590918585612263610710565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160006040518083038186803b1580156122ac57600080fd5b505af41580156122c0573d6000803e3d6000fd5b505060d8805468ffffffffffffffff0019166101004267ffffffffffffffff160217905550506040517fc741dbaad15a4f298fe8d80943fa8e005e7bcb2f5b0a0c8dec1fc35be457f14690600090a1505050565b61231c6139b5565b60cb80546001600160a01b03199081166001600160a01b039788161790915560cc805482169587169590951790945560d69290925560ee8054909316931692909217905560ce55565b61236d6139b5565b61151a614084565b6040516321b16f2160e11b815260ca60048201526000908190819073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90634362de42906024016040805180830381865af41580156123cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ef91906156ed565b604051633e72ca6960e11b815260ca60048201526024810183905260448101829052919350915060009073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90637ce594d290606401602060405180830381865af4158015612455573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247991906154d3565b9050600060ca60240160009054906101000a90046001600160a01b03166001600160a01b031663584150756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f791906154d3565b60e4546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561253f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256391906154d3565b61256d9190615581565b9050612578826140c1565b60d154612584906140c1565b60d7546125986125938561166c565b6140c1565b6125a291906158d3565b6125ac91906158d3565b6125b69190615914565b94505050505090565b60006125c9613d29565b6125d1613d6f565b6108c08383614105565b6125e36139b5565b60ed5460d0546040516364f6446760e01b81526001600160a01b03909216916364f64467916126189160040190815260200190565b600060405180830381600087803b15801561263257600080fd5b505af1158015612646573d6000803e3d6000fd5b505060ed5460408051633671df2560e01b815290516001600160a01b039092169350633671df2592506004808201926020929091908290030181865afa158015612694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b89190615537565b60d05460405163b6b55f2560e01b81526001600160a01b03929092169163b6b55f25916126eb9160040190815260200190565b600060405180830381600087803b15801561270557600080fd5b505af1158015612719573d6000803e3d6000fd5b5050600060d0555050565b60606037805461079b906154ec565b600061274360ca600701546140c1565b60d75460dc546040516370a0823160e01b81523060048201526127b4916001600160a01b0316906370a0823190602401602060405180830381865afa158015612790573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259391906154d3565b6127be9190615914565b6107879190615914565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091908381101561284d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016119b0565b6113a382868684036137eb565b6000336108d5818585613b09565b6128706139b5565b60e2805463ffffffff60a01b1916600160b01b61ffff9889160261ffff60a01b191617600160a01b96909716959095029590951790935560e380547fffffffffffff0000000000000000000000000000000000000000000000000000166001600160d01b03939093169290921790915560d39190915560d49190915560d555565b6000806128fd60355490565b905080156108be57604051635a69be9d60e01b815260ca6004820152600160248201526108b99073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90635a69be9d90604401602060405180830381865af4158015612960573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298491906154d3565b84908361390f565b6000612996613d29565b61299e613d6f565b6129a7846108e1565b9050336001600160a01b038316146129f7576001600160a01b038216600090815260346020908152604080832033845290915290205460001981146129f5576129f583336113e8858561556a565b505b60ce54600090612a1790612a0d9061271061556a565b86906127106137cc565b9050612a24818386614186565b612a2e8383614291565b60408051828152602081018490526001600160a01b03808616929087169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db91015b60405180910390a4606554612a91906001600160a01b03168583613a0f565b509392505050565b6000612aa3613d29565b612aab613d6f565b336001600160a01b03831614612af9576001600160a01b03821660009081526034602090815260408083203384529091529020546000198114612af757612af783336113e8888561556a565b505b612b0284611661565b905080612b3f5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b60448201526064016119b0565b60ce54600090612b5f90612b559061271061556a565b83906127106137cc565b9050612b6c818686614186565b612b768386614291565b60408051828152602081018790526001600160a01b03808616929087169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db9101612a72565b612bc66139b5565b60d95460df5460ea5460405163095ea7b360e01b81526001600160a01b0393841660048201819052600019602483015293928316929091169063095ea7b3906044016020604051808303816000875af1158015612c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4b9190615711565b5060ea5460405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc49190615711565b5060e95460405163095ea7b360e01b81526001600160a01b03848116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3d9190615711565b5060e95460405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db69190615711565b5060e95460ee5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015612e0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e319190615711565b5060e75460405163095ea7b360e01b81526001600160a01b03848116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eaa9190615711565b5060e75460405163095ea7b360e01b81526001600160a01b03838116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015612eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f239190615711565b5060e75460ee5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015612f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9e9190615711565b5060dc5460cc5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015612ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130199190615711565b5060655460ec5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015613070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130949190615711565b506040517fba5bb3f899c7a3edcc9ff9d46c4e08449c6a608b6f8254132bc5af4898645cbc90600090a15050565b60006108db61063d8361151c565b6000806130dc60355490565b905080156108be57604051635a69be9d60e01b815260ca6004820152600160248201526108b990829073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90635a69be9d90604401602060405180830381865af4158015613141573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316591906154d3565b8591906137cc565b6001600160a01b0381166000908152603360205260408120546108db9061081e565b604051630d0d70b960e11b815260ca600482015260009073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90631a1ae17290602401602060405180830381865af41580156131e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132069190615711565b806132805750604051633925aae560e21b815260ca600482015273__$e69b62c1cd9e88f96bb775811e046ce5a9$__9063e496ab9490602401602060405180830381865af415801561325c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132809190615711565b8061078757506040516355b51a6d60e01b815260ca600482015273__$e69b62c1cd9e88f96bb775811e046ce5a9$__906355b51a6d90602401602060405180830381865af41580156132d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107879190615711565b6001600160a01b0381166000908152603360205260408120546108db565b60ec5460405163019c8a3b60e11b8152821515600482015260009182916001600160a01b0390911690630339147690602401602060405180830381865afa158015613367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338b91906154d3565b9050600060ca601c0160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061340991906154d3565b90506134306c0c9f2c9cd04674edea400000006114fb8369d3c21bcecceda1000000615599565b949350505050565b6134406139b5565b60cd546001600160a01b038281169116146134755760cd80546001600160a01b0319166001600160a01b03831617905561348e565b604051630ed1b8b360e31b815260040160405180910390fd5b6040516001600160a01b03821681527f7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc290602001611656565b60006108db826130d0565b60e0546001600160a01b031633146134fd5760405163f4a8e62160e01b815260040160405180910390fd5b60d85460ff1661352057604051637869c16160e11b815260040160405180910390fd5b6000806000806000808680602001905181019061353d9190615953565b9550955095509550955095506000808380156135565750825b156135d3576135a4878c600081518110613572576135726159b2565b60200260200101518c60008151811061358d5761358d6159b2565b60200260200101516137cc9092919063ffffffff16565b9150818a6000815181106135ba576135ba6159b2565b60200260200101516135cc919061556a565b905061370a565b87158015906135e157508515155b156136c4576000846136265760ea548d516001600160a01b03909116908e9060009061360f5761360f6159b2565b60200260200101516001600160a01b03161461365b565b60e7548d516001600160a01b03909116908e90600090613648576136486159b2565b60200260200101516001600160a01b0316145b15613664575060015b8a81613671576001613674565b60005b60ff1681518110613687576136876159b2565b602002602001015192508a8161369e5760006136a1565b60015b60ff16815181106136b4576136b46159b2565b602002602001015191505061370a565b87156136ec57896000815181106136dd576136dd6159b2565b6020026020010151915061370a565b896000815181106136ff576136ff6159b2565b602002602001015190505b87156137295760ea54613729906001600160a01b0316898985886143df565b85156137485760e954613748906001600160a01b0316878784876143df565b505050505050505050505050565b61375e6139b5565b6001600160a01b0381166137c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016119b0565b61138781614032565b8282028115158415858304851417166137e457600080fd5b0492915050565b6001600160a01b03831661384d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016119b0565b6001600160a01b0382166138ae5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016119b0565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b82820281151584158583048514171661392757600080fd5b6001826001830304018115150290509392505050565b60d95460405163617ba03760e01b81526001600160a01b03848116600483015260248201849052306044830152600060648301529091169063617ba037906084015b600060405180830381600087803b15801561399957600080fd5b505af11580156139ad573d6000803e3d6000fd5b505050505050565b6066546001600160a01b0316331461151a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016119b0565b6040516001600160a01b038316602482015260448101829052613a7290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526146bc565b505050565b6001600160a01b038381166000908152603460209081526040808320938616835292905220546000198114613b035781811015613af65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016119b0565b613b0384848484036137eb565b50505050565b6001600160a01b038316613b6d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016119b0565b6001600160a01b038216613bcf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016119b0565b6001600160a01b03831660009081526033602052604090205481811015613c475760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016119b0565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290613c7e908490615581565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051613cca91815260200190565b60405180910390a3613b03565b613cdf61478e565b6098805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60985460ff161561151a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016119b0565b613d7761097e565b6040516321b16f2160e11b815260ca6004820152600090819073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90634362de42906024016040805180830381865af4158015613dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613def91906156ed565b604051633e72ca6960e11b815260ca60048201526024810183905260448101829052919350915060009073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90637ce594d290606401602060405180830381865af4158015613e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e7991906154d3565b604051638684b69760e01b815260ca60048201526024810182905290915073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90638684b6979060440160006040518083038186803b158015613ece57600080fd5b505af4158015613ee2573d6000803e3d6000fd5b50505050505050565b6000613ef6836134c7565b905080613f335760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b60448201526064016119b0565b606554613f4b906001600160a01b03163330866147e0565b613f558282614818565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a36108db8382846148f8565b600054610100900460ff16613fcd5760405162461bcd60e51b81526004016119b0906159c8565b61151a6149c5565b600054610100900460ff16613ffc5760405162461bcd60e51b81526004016119b0906159c8565b61151a6149f5565b61400e8282614a28565b5050606580546001600160a01b0319166001600160a01b0392909216919091179055565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61408c613d29565b6098805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613d0c3390565b6000600160ff1b82106141015760405162461bcd60e51b81526020600482015260086024820152674f766572666c6f7760c01b60448201526064016119b0565b5090565b6000614110836128f1565b60655490915061412b906001600160a01b03163330846147e0565b6141358284614818565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a36108db8184846148f8565b6040516321b16f2160e11b815260ca6004820152600090819073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90634362de42906024016040805180830381865af41580156141da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141fe91906156ed565b909250905073__$e69b62c1cd9e88f96bb775811e046ce5a9$__633cb6767560ca84848961422a610710565b614234919061556a565b6040516001600160e01b031960e087901b168152600481019490945260248401929092526044830152606482015260840160006040518083038186803b15801561427d57600080fd5b505af4158015612042573d6000803e3d6000fd5b6001600160a01b0382166142f15760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016119b0565b6001600160a01b038216600090815260336020526040902054818110156143655760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016119b0565b6001600160a01b038316600090815260336020526040812083830390556035805484929061439490849061556a565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b806145475760006143f08386615581565b604051631c9862ab60e21b81526001600160a01b03881660048201526024810187905260448101869052909150600090819073__$f09208ef53137b379b85ea4a8d399069d8$__906372618aac906064016040805180830381865af415801561445d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061448191906156ed565b60e754919350915061449c906001600160a01b03168361393d565b6144a68884614a59565b60e05460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018590529089169063a9059cbb906044016020604051808303816000875af11580156144f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061451d9190615711565b50614527826140c1565b60d780546000906145399084906158d3565b909155506111b19350505050565b604051632ea82dd560e21b81526001600160a01b03861660048201526024810185905260448101849052600090819073__$f09208ef53137b379b85ea4a8d399069d8$__9063baa0b754906064016040805180830381865af41580156145b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d591906156ed565b909250905060006145e68584615581565b90506145f1816140c1565b60d78054600090614603908490615914565b9091555061461390508883614aa6565b60e75461462a906001600160a01b03168230614b2a565b60e75460e0546001600160a01b039182169163a9059cbb911661464d888a615581565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015614698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120429190615711565b6000614711826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614ba99092919063ffffffff16565b805190915015613a72578080602001905181019061472f9190615711565b613a725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016119b0565b60985460ff1661151a5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016119b0565b6040516001600160a01b0380851660248301528316604482015260648101829052613b039085906323b872dd60e01b90608401613a3b565b6001600160a01b03821661486e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016119b0565b80603560008282546148809190615581565b90915550506001600160a01b038216600090815260336020526040812080548392906148ad908490615581565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35b5050565b60d654614903610710565b1115614922576040516324d758c360e21b815260040160405180910390fd5b6040516321b16f2160e11b815260ca6004820152600090819073__$e69b62c1cd9e88f96bb775811e046ce5a9$__90634362de42906024016040805180830381865af4158015614976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061499a91906156ed565b909250905073__$e69b62c1cd9e88f96bb775811e046ce5a9$__633cb6767560ca8484614234610710565b600054610100900460ff166149ec5760405162461bcd60e51b81526004016119b0906159c8565b61151a33614032565b600054610100900460ff16614a1c5760405162461bcd60e51b81526004016119b0906159c8565b6098805460ff19169055565b600054610100900460ff16614a4f5760405162461bcd60e51b81526004016119b0906159c8565b6148f48282614bb8565b60d95460405163a415bcad60e01b81526001600160a01b0384811660048301526024820184905260026044830152600060648301523060848301529091169063a415bcad9060a40161397f565b60d95460405163573ade8160e01b81526001600160a01b03848116600483015260248201849052600260448301523060648301529091169063573ade81906084016020604051808303816000875af1158015614b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a7291906154d3565b60d954604051631a4ca37b60e21b81526001600160a01b038581166004830152602482018590528381166044830152909116906369328dec906064016020604051808303816000875af1158015614b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b0391906154d3565b60606134308484600085614c06565b600054610100900460ff16614bdf5760405162461bcd60e51b81526004016119b0906159c8565b8151614bf2906036906020850190614d70565b508051613a72906037906020840190614d70565b606082471015614c675760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016119b0565b6001600160a01b0385163b614cbe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016119b0565b600080866001600160a01b03168587604051614cda9190615a13565b60006040518083038185875af1925050503d8060008114614d17576040519150601f19603f3d011682016040523d82523d6000602084013e614d1c565b606091505b5091509150614d2c828286614d37565b979650505050505050565b60608315614d465750816108c0565b825115614d565782518084602001fd5b8160405162461bcd60e51b81526004016119b09190614e2c565b828054614d7c906154ec565b90600052602060002090601f016020900481019282614d9e5760008555614de4565b82601f10614db757805160ff1916838001178555614de4565b82800160010185558215614de4579182015b82811115614de4578251825591602001919060010190614dc9565b506141019291505b808211156141015760008155600101614dec565b60005b83811015614e1b578181015183820152602001614e03565b83811115613b035750506000910152565b6020815260008251806020840152614e4b816040850160208701614e00565b601f01601f19169190910160400192915050565b600060208284031215614e7157600080fd5b5035919050565b6001600160a01b038116811461138757600080fd5b60008060408385031215614ea057600080fd5b8235614eab81614e78565b946020939093013593505050565b61ffff8116811461138757600080fd5b60008060408385031215614edc57600080fd5b823563ffffffff81168114614ef057600080fd5b91506020830135614f0081614eb9565b809150509250929050565b600080600060608486031215614f2057600080fd5b8335614f2b81614e78565b92506020840135614f3b81614e78565b929592945050506040919091013590565b600060208284031215614f5e57600080fd5b81356108c081614e78565b60008060008060808587031215614f7f57600080fd5b8435614f8a81614e78565b93506020850135614f9a81614e78565b9250604085013591506060850135614fb181614e78565b939692955090935050565b60008060408385031215614fcf57600080fd5b823591506020830135614f0081614e78565b60008083601f840112614ff357600080fd5b50813567ffffffffffffffff81111561500b57600080fd5b60208301915083602082850101111561502357600080fd5b9250929050565b600080600080600080600080888a0361014081121561504857600080fd5b893567ffffffffffffffff8082111561506057600080fd5b61506c8d838e01614fe1565b909b50995060208c013591508082111561508557600080fd5b506150928c828d01614fe1565b90985096505060408a01356150a681614e78565b945060608a01356150b681614e78565b935060a0607f19820112156150ca57600080fd5b506080890191506101208901356150e081614e78565b809150509295985092959890939650565b600080600080600060a0868803121561510957600080fd5b853561511481614e78565b9450602086013561512481614e78565b935060408601359250606086013561513b81614e78565b949793965091946080013592915050565b60008060008060008060c0878903121561516557600080fd5b863561517081614eb9565b9550602087013561518081614eb9565b945060408701356001600160d01b038116811461519c57600080fd5b959894975094956060810135955060808101359460a0909101359350915050565b6000806000606084860312156151d257600080fd5b8335925060208401356151e481614e78565b915060408401356151f481614e78565b809150509250925092565b6000806040838503121561521257600080fd5b823561521d81614e78565b91506020830135614f0081614e78565b801515811461138757600080fd5b60006020828403121561524d57600080fd5b81356108c08161522d565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff8111828210171561529257615292615258565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156152c1576152c1615258565b604052919050565b600067ffffffffffffffff8211156152e3576152e3615258565b5060051b60200190565b600082601f8301126152fe57600080fd5b8135602061531361530e836152c9565b615298565b82815260059290921b8401810191818101908684111561533257600080fd5b8286015b8481101561534d5780358352918301918301615336565b509695505050505050565b600082601f83011261536957600080fd5b813567ffffffffffffffff81111561538357615383615258565b615396601f8201601f1916602001615298565b8181528460208386010111156153ab57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156153de57600080fd5b843567ffffffffffffffff808211156153f657600080fd5b818701915087601f83011261540a57600080fd5b8135602061541a61530e836152c9565b82815260059290921b8401810191818101908b84111561543957600080fd5b948201945b8386101561546057853561545181614e78565b8252948201949082019061543e565b9850508801359250508082111561547657600080fd5b615482888389016152ed565b9450604087013591508082111561549857600080fd5b6154a4888389016152ed565b935060608701359150808211156154ba57600080fd5b506154c787828801615358565b91505092959194509250565b6000602082840312156154e557600080fd5b5051919050565b600181811c9082168061550057607f821691505b6020821081141561552157634e487b7160e01b600052602260045260246000fd5b50919050565b805161553281614e78565b919050565b60006020828403121561554957600080fd5b81516108c081614e78565b634e487b7160e01b600052601160045260246000fd5b60008282101561557c5761557c615554565b500390565b6000821982111561559457615594615554565b500190565b60008160001904831182151516156155b3576155b3615554565b500290565b6000826155d557634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff838116908316818110156155f5576155f5615554565b039392505050565b600181815b8085111561563857816000190482111561561e5761561e615554565b8085161561562b57918102915b93841c9390800290615602565b509250929050565b60008261564f575060016108db565b8161565c575060006108db565b8160018114615672576002811461567c57615698565b60019150506108db565b60ff84111561568d5761568d615554565b50506001821b6108db565b5060208310610133831016604e8410600b84101617156156bb575081810a6108db565b6156c583836155fd565b80600019048211156156d9576156d9615554565b029392505050565b60006108c08383615640565b6000806040838503121561570057600080fd5b505080516020909101519092909150565b60006020828403121561572357600080fd5b81516108c08161522d565b60006020828403121561574057600080fd5b6040516020810181811067ffffffffffffffff8211171561576357615763615258565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461553257600080fd5b805164ffffffffff8116811461553257600080fd5b805161553281614eb9565b60006101e082840312156157c357600080fd5b6157cb61526e565b6157d5848461572e565b81526157e360208401615770565b60208201526157f460408401615770565b604082015261580560608401615770565b606082015261581660808401615770565b608082015261582760a08401615770565b60a082015261583860c08401615790565b60c082015261584960e084016157a5565b60e082015261010061585c818501615527565b9082015261012061586e848201615527565b90820152610140615880848201615527565b90820152610160615892848201615527565b908201526101806158a4848201615770565b908201526101a06158b6848201615770565b908201526101c06158c8848201615770565b908201529392505050565b600080821280156001600160ff1b03849003851316156158f5576158f5615554565b600160ff1b839003841281161561590e5761590e615554565b50500190565b60008083128015600160ff1b85018412161561593257615932615554565b6001600160ff1b038401831381161561594d5761594d615554565b50500390565b60008060008060008060c0878903121561596c57600080fd5b8651955060208701519450604087015193506060870151925060808701516159938161522d565b60a08801519092506159a48161522d565b809150509295509295509295565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251615a25818460208701614e00565b919091019291505056fea164736f6c634300080a000a",
  "libraries": {
    "SwapManager": "0x23A4AbF9AcA2242Ca698AA839E72419Ae4b11024",
    "DnGmxJuniorVaultHelpers": "0x01759Fa78950D071E606C8C25eB0cD34e4D40E7C"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "maxRedeem(address)": {
        "details": "Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert."
      },
      "maxWithdraw(address)": {
        "details": "Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "previewDeposit(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
      },
      "previewRedeem(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "harvestFees()": {
        "notice": "stakes the rewards from the staked Glp and claims WETH to buy glp"
      },
      "withdrawFees()": {
        "notice": "withdraw accumulated WETH fees"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4084,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 4087,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5353,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4374,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4380,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4382,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 4384,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 4386,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 4965,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 6508,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "asset",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 3956,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_owner",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 4076,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4249,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "_paused",
        "offset": 0,
        "slot": "152",
        "type": "t_bool"
      },
      {
        "astId": 4354,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12303,
        "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
        "label": "state",
        "offset": 0,
        "slot": "202",
        "type": "t_struct(State)9035_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAToken)218": {
        "encoding": "inplace",
        "label": "contract IAToken",
        "numberOfBytes": "20"
      },
      "t_contract(IBalancerVault)7540": {
        "encoding": "inplace",
        "label": "contract IBalancerVault",
        "numberOfBytes": "20"
      },
      "t_contract(IDebtToken)7015": {
        "encoding": "inplace",
        "label": "contract IDebtToken",
        "numberOfBytes": "20"
      },
      "t_contract(IDnGmxBatchingManager)7175": {
        "encoding": "inplace",
        "label": "contract IDnGmxBatchingManager",
        "numberOfBytes": "20"
      },
      "t_contract(IDnGmxSeniorVault)7339": {
        "encoding": "inplace",
        "label": "contract IDnGmxSeniorVault",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)5435": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)5460": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IGlpManager)7841": {
        "encoding": "inplace",
        "label": "contract IGlpManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)1121": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolAddressesProvider)1330": {
        "encoding": "inplace",
        "label": "contract IPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)1350": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardRouterV2)8043": {
        "encoding": "inplace",
        "label": "contract IRewardRouterV2",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardTracker)8143": {
        "encoding": "inplace",
        "label": "contract IRewardTracker",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsController)3657": {
        "encoding": "inplace",
        "label": "contract IRewardsController",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)6482": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)8705": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(State)9035_storage": {
        "encoding": "inplace",
        "label": "struct DnGmxJuniorVaultHelpers.State",
        "members": [
          {
            "astId": 8929,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "FEE",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8931,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "keeper",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8934,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "dnGmxSeniorVault",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IDnGmxSeniorVault)7339"
          },
          {
            "astId": 8936,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "feeRecipient",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 8938,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "withdrawFeeBps",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8940,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "protocolFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8942,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "protocolEsGmx",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8944,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "unhedgedGlpInUsdc",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8946,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "seniorVaultWethRewards",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8948,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "wethConversionThreshold",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 8950,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "hedgeUsdcAmountThreshold",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 8952,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "hfThreshold",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 8954,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "depositCap",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 8956,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "dnUsdcDeposited",
            "offset": 0,
            "slot": "13",
            "type": "t_int256"
          },
          {
            "astId": 8958,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "_hasFlashloaned",
            "offset": 0,
            "slot": "14",
            "type": "t_bool"
          },
          {
            "astId": 8960,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "lastRebalanceTS",
            "offset": 1,
            "slot": "14",
            "type": "t_uint64"
          },
          {
            "astId": 8962,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "rebalanceTimeThreshold",
            "offset": 9,
            "slot": "14",
            "type": "t_uint32"
          },
          {
            "astId": 8964,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "rebalanceDeltaThreshold",
            "offset": 13,
            "slot": "14",
            "type": "t_uint16"
          },
          {
            "astId": 8968,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "pool",
            "offset": 0,
            "slot": "15",
            "type": "t_contract(IPool)1121"
          },
          {
            "astId": 8971,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "oracle",
            "offset": 0,
            "slot": "16",
            "type": "t_contract(IPriceOracle)1350"
          },
          {
            "astId": 8974,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "poolAddressProvider",
            "offset": 0,
            "slot": "17",
            "type": "t_contract(IPoolAddressesProvider)1330"
          },
          {
            "astId": 8977,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "aUsdc",
            "offset": 0,
            "slot": "18",
            "type": "t_contract(IAToken)218"
          },
          {
            "astId": 8980,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "vWbtc",
            "offset": 0,
            "slot": "19",
            "type": "t_contract(IDebtToken)7015"
          },
          {
            "astId": 8983,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "vWeth",
            "offset": 0,
            "slot": "20",
            "type": "t_contract(IDebtToken)7015"
          },
          {
            "astId": 8986,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "swapRouter",
            "offset": 0,
            "slot": "21",
            "type": "t_contract(ISwapRouter)6482"
          },
          {
            "astId": 8989,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "balancerVault",
            "offset": 0,
            "slot": "22",
            "type": "t_contract(IBalancerVault)7540"
          },
          {
            "astId": 8991,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "targetHealthFactor",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 8994,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "aaveRewardsController",
            "offset": 0,
            "slot": "24",
            "type": "t_contract(IRewardsController)3657"
          },
          {
            "astId": 8997,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "slippageThresholdGmx",
            "offset": 20,
            "slot": "24",
            "type": "t_uint16"
          },
          {
            "astId": 8999,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "slippageThresholdSwap",
            "offset": 22,
            "slot": "24",
            "type": "t_uint16"
          },
          {
            "astId": 9001,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "usdcConversionThreshold",
            "offset": 0,
            "slot": "25",
            "type": "t_uint208"
          },
          {
            "astId": 9004,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "fsGlp",
            "offset": 0,
            "slot": "26",
            "type": "t_contract(IERC20)5435"
          },
          {
            "astId": 9007,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "sGmx",
            "offset": 0,
            "slot": "27",
            "type": "t_contract(IRewardTracker)8143"
          },
          {
            "astId": 9010,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "glp",
            "offset": 0,
            "slot": "28",
            "type": "t_contract(IERC20Metadata)5460"
          },
          {
            "astId": 9013,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "usdc",
            "offset": 0,
            "slot": "29",
            "type": "t_contract(IERC20Metadata)5460"
          },
          {
            "astId": 9016,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "usdt",
            "offset": 0,
            "slot": "30",
            "type": "t_contract(IERC20Metadata)5460"
          },
          {
            "astId": 9019,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "weth",
            "offset": 0,
            "slot": "31",
            "type": "t_contract(IERC20Metadata)5460"
          },
          {
            "astId": 9022,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "wbtc",
            "offset": 0,
            "slot": "32",
            "type": "t_contract(IERC20Metadata)5460"
          },
          {
            "astId": 9025,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "gmxVault",
            "offset": 0,
            "slot": "33",
            "type": "t_contract(IVault)8705"
          },
          {
            "astId": 9028,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "glpManager",
            "offset": 0,
            "slot": "34",
            "type": "t_contract(IGlpManager)7841"
          },
          {
            "astId": 9031,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "rewardRouter",
            "offset": 0,
            "slot": "35",
            "type": "t_contract(IRewardRouterV2)8043"
          },
          {
            "astId": 9034,
            "contract": "contracts/vaults/DnGmxJuniorVault.sol:DnGmxJuniorVault",
            "label": "batchingManager",
            "offset": 0,
            "slot": "36",
            "type": "t_contract(IDnGmxBatchingManager)7175"
          }
        ],
        "numberOfBytes": "1184"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint208": {
        "encoding": "inplace",
        "label": "uint208",
        "numberOfBytes": "26"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}