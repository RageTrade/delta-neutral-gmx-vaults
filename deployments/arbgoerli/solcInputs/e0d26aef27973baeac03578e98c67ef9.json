{
  "language": "Solidity",
  "sources": {
    "contracts/ERC4626/ERC4626Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport { ERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\n\n/// @notice Minimal ERC4626 tokenized Vault implementation.\n/// @author Copied and modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\nabstract contract ERC4626Upgradeable is ERC20Upgradeable {\n    using SafeERC20 for IERC20Metadata;\n    using FixedPointMathLib for uint256;\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /*//////////////////////////////////////////////////////////////\n                               STATE\n    //////////////////////////////////////////////////////////////*/\n\n    IERC20Metadata public asset;\n\n    /* solhint-disable func-name-mixedcase */\n    function __ERC4626Upgradeable_init(\n        IERC20Metadata _asset,\n        string memory _name,\n        string memory _symbol\n    ) internal {\n        __ERC20_init(_name, _symbol);\n        asset = _asset;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\n        // Check for rounding error since we round down in previewDeposit.\n        require((shares = previewDeposit(assets)) != 0, 'ZERO_SHARES');\n\n        // Need to transfer before minting or ERC777s could reenter.\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares, receiver);\n    }\n\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\n\n        // Need to transfer before minting or ERC777s could reenter.\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares, receiver);\n    }\n\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public virtual returns (uint256 shares) {\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\n\n        if (msg.sender != owner) {\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\n        }\n\n        beforeWithdraw(assets, shares, receiver);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        asset.safeTransfer(receiver, assets);\n    }\n\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) public virtual returns (uint256 assets) {\n        if (msg.sender != owner) {\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\n        }\n\n        // Check for rounding error since we round down in previewRedeem.\n        require((assets = previewRedeem(shares)) != 0, 'ZERO_ASSETS');\n\n        beforeWithdraw(assets, shares, receiver);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        asset.safeTransfer(receiver, assets);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function totalAssets() public view virtual returns (uint256);\n\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\n    }\n\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\n    }\n\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return convertToShares(assets);\n    }\n\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\n    }\n\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\n    }\n\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return convertToAssets(shares);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return convertToAssets(balanceOf(owner));\n    }\n\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          INTERNAL HOOKS LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /* solhint-disable no-empty-blocks */\n    function beforeWithdraw(\n        uint256 assets,\n        uint256 shares,\n        address receiver\n    ) internal virtual {}\n\n    /* solhint-disable no-empty-blocks */\n    function afterDeposit(\n        uint256 assets,\n        uint256 shares,\n        address receiver\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@rari-capital/solmate/src/utils/FixedPointMathLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\nlibrary FixedPointMathLib {\n    /*//////////////////////////////////////////////////////////////\n                    SIMPLIFIED FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\n    }\n\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\n    }\n\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\n    }\n\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    LOW LEVEL FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function mulDivDown(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // Divide z by the denominator.\n            z := div(z, denominator)\n        }\n    }\n\n    function mulDivUp(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // First, divide z - 1 by the denominator and add 1.\n            // We allow z - 1 to underflow if z is 0, because we multiply the\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\n        }\n    }\n\n    function rpow(\n        uint256 x,\n        uint256 n,\n        uint256 scalar\n    ) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := scalar\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store scalar in z for now.\n                    z := scalar\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, scalar)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, scalar)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, scalar)\n                    }\n                }\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        assembly {\n            // Start off with z at 1.\n            z := 1\n\n            // Used below to help find a nearby power of 2.\n            let y := x\n\n            // Find the lowest power of 2 that is at least sqrt(x).\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\n                y := shr(128, y) // Like dividing by 2 ** 128.\n                z := shl(64, z) // Like multiplying by 2 ** 64.\n            }\n            if iszero(lt(y, 0x10000000000000000)) {\n                y := shr(64, y) // Like dividing by 2 ** 64.\n                z := shl(32, z) // Like multiplying by 2 ** 32.\n            }\n            if iszero(lt(y, 0x100000000)) {\n                y := shr(32, y) // Like dividing by 2 ** 32.\n                z := shl(16, z) // Like multiplying by 2 ** 16.\n            }\n            if iszero(lt(y, 0x10000)) {\n                y := shr(16, y) // Like dividing by 2 ** 16.\n                z := shl(8, z) // Like multiplying by 2 ** 8.\n            }\n            if iszero(lt(y, 0x100)) {\n                y := shr(8, y) // Like dividing by 2 ** 8.\n                z := shl(4, z) // Like multiplying by 2 ** 4.\n            }\n            if iszero(lt(y, 0x10)) {\n                y := shr(4, y) // Like dividing by 2 ** 4.\n                z := shl(2, z) // Like multiplying by 2 ** 2.\n            }\n            if iszero(lt(y, 0x8)) {\n                // Equivalent to 2 ** z.\n                z := shl(1, z)\n            }\n\n            // Shifting right by 1 is like dividing by 2.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // Compute a rounded down version of z.\n            let zRoundDown := div(x, z)\n\n            // If zRoundDown is smaller, use it.\n            if lt(zRoundDown, z) {\n                z := zRoundDown\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@ragetrade/vaults/contracts/utils/ERC4626Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport { ERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\n\n/// @notice Minimal ERC4626 tokenized Vault implementation.\n/// @author Copied and modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\nabstract contract ERC4626Upgradeable is ERC20Upgradeable {\n    using SafeERC20 for IERC20Metadata;\n    using FixedPointMathLib for uint256;\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /*//////////////////////////////////////////////////////////////\n                               STATE\n    //////////////////////////////////////////////////////////////*/\n\n    IERC20Metadata public asset;\n\n    /* solhint-disable func-name-mixedcase */\n    function __ERC4626Upgradeable_init(\n        IERC20Metadata _asset,\n        string memory _name,\n        string memory _symbol\n    ) internal {\n        __ERC20_init(_name, _symbol);\n        asset = _asset;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\n        // Check for rounding error since we round down in previewDeposit.\n        require((shares = previewDeposit(assets)) != 0, 'ZERO_SHARES');\n\n        // Need to transfer before minting or ERC777s could reenter.\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares);\n    }\n\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\n\n        // Need to transfer before minting or ERC777s could reenter.\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares);\n    }\n\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public virtual returns (uint256 shares) {\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\n\n        if (msg.sender != owner) {\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\n        }\n\n        beforeWithdraw(assets, shares);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        asset.safeTransfer(receiver, assets);\n    }\n\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) public virtual returns (uint256 assets) {\n        if (msg.sender != owner) {\n            uint256 allowed = allowance(owner, msg.sender); // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) _approve(owner, msg.sender, allowed - shares);\n        }\n\n        // Check for rounding error since we round down in previewRedeem.\n        require((assets = previewRedeem(shares)) != 0, 'ZERO_ASSETS');\n\n        beforeWithdraw(assets, shares);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        asset.safeTransfer(receiver, assets);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function totalAssets() public view virtual returns (uint256);\n\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\n    }\n\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\n    }\n\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return convertToShares(assets);\n    }\n\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\n    }\n\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\n    }\n\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return convertToAssets(shares);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return convertToAssets(balanceOf(owner));\n    }\n\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          INTERNAL HOOKS LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /* solhint-disable no-empty-blocks */\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\n\n    /* solhint-disable no-empty-blocks */\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\n}\n"
    },
    "@ragetrade/vaults/contracts/base/RageERC4626.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport { IBaseVault } from '../interfaces/IBaseVault.sol';\n\nimport { Logic } from '../libraries/Logic.sol';\nimport { ERC4626Upgradeable } from '../utils/ERC4626Upgradeable.sol';\nimport { FixedPointMathLib } from '@rari-capital/solmate/src/utils/FixedPointMathLib.sol';\n\nabstract contract RageERC4626 is ERC4626Upgradeable {\n    using SafeERC20 for IERC20Metadata;\n    using FixedPointMathLib for uint256;\n\n    struct RageERC4626InitParams {\n        IERC20Metadata asset;\n        string name;\n        string symbol;\n    }\n\n    /* solhint-disable-next-line func-name-mixedcase */\n    function __RageERC4626_init(RageERC4626InitParams memory params) internal {\n        __ERC4626Upgradeable_init(params.asset, params.name, params.symbol);\n    }\n\n    function _convertToSharesRoundUp(uint256 assets) internal view returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\n    }\n\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\n        (uint256 adjustedAssets, ) = _simulateBeforeWithdraw(assets);\n        return _convertToSharesRoundUp(adjustedAssets);\n    }\n\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\n        uint256 assets = convertToAssets(shares);\n        (uint256 adjustedAssets, ) = _simulateBeforeWithdraw(assets);\n        return adjustedAssets;\n    }\n\n    function deposit(uint256 amount, address to) public virtual override returns (uint256 shares) {\n        _beforeShareAllocation();\n        shares = super.deposit(amount, to);\n    }\n\n    function mint(uint256 shares, address to) public virtual override returns (uint256 amount) {\n        _beforeShareAllocation();\n        amount = super.mint(shares, to);\n    }\n\n    function withdraw(\n        uint256 amount,\n        address to,\n        address from\n    ) public override returns (uint256 shares) {\n        _beforeShareAllocation();\n        (uint256 adjustedAmount, int256 tokensToTrade) = _simulateBeforeWithdraw(amount);\n\n        shares = _convertToSharesRoundUp(adjustedAmount);\n\n        beforeWithdrawClosePosition(tokensToTrade);\n\n        if (msg.sender != from) {\n            uint256 allowed = allowance(from, msg.sender); // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) _approve(from, msg.sender, allowed - shares);\n        }\n\n        beforeWithdraw(adjustedAmount, shares);\n\n        _burn(from, shares);\n\n        emit Withdraw(msg.sender, to, from, adjustedAmount, shares);\n\n        asset.safeTransfer(to, adjustedAmount);\n    }\n\n    function redeem(\n        uint256 shares,\n        address to,\n        address from\n    ) public override returns (uint256 amount) {\n        _beforeShareAllocation();\n\n        // Check for rounding error since we round down in previewRedeem.\n        uint256 assets = convertToAssets(shares);\n        int256 tokensToTrade;\n        (amount, tokensToTrade) = _simulateBeforeWithdraw(assets);\n        uint256 adjustedShares = _convertToSharesRoundUp(amount);\n        require(amount != 0, 'ZERO_ASSETS');\n\n        if (msg.sender != from) {\n            uint256 allowed = allowance(from, msg.sender); // Saves gas for limited approvals.\n            if (allowed != type(uint256).max) _approve(from, msg.sender, allowed - adjustedShares);\n        }\n\n        //Additional cap on withdraw to ensure the position closed does not breach slippage tolerance\n        //In case tolerance is reached only partial withdraw is executed\n\n        beforeWithdrawClosePosition(tokensToTrade);\n\n        beforeWithdraw(amount, adjustedShares);\n\n        _burn(from, adjustedShares);\n\n        emit Withdraw(msg.sender, to, from, amount, adjustedShares);\n\n        asset.safeTransfer(to, amount);\n    }\n\n    function _beforeShareAllocation() internal virtual;\n\n    function _simulateBeforeWithdraw(uint256 assets)\n        internal\n        view\n        virtual\n        returns (uint256 adjustedAssets, int256 tokensToTrade);\n\n    function beforeWithdrawClosePosition(int256 tokensToTrade) internal virtual;\n}\n"
    },
    "@ragetrade/vaults/contracts/interfaces/IBaseVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.9;\n\nimport { ISwapSimulator } from './ISwapSimulator.sol';\nimport { IClearingHouse } from '@ragetrade/core/contracts/interfaces/IClearingHouse.sol';\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\ninterface IBaseVault {\n    function rebalance() external;\n\n    function closeTokenPosition() external;\n\n    function ethPoolId() external view returns (uint32);\n\n    function depositCap() external view returns (uint256);\n\n    function rageAccountNo() external view returns (uint256);\n\n    function rageVPool() external view returns (IUniswapV3Pool);\n\n    function swapSimulator() external view returns (ISwapSimulator);\n\n    function rageClearingHouse() external view returns (IClearingHouse);\n}\n"
    },
    "@ragetrade/vaults/contracts/libraries/Logic.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport { AggregatorV3Interface } from '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport { UniswapV3PoolHelper } from '@ragetrade/core/contracts/libraries/UniswapV3PoolHelper.sol';\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\nimport { SignedMath } from '@ragetrade/core/contracts/libraries/SignedMath.sol';\nimport { SignedFullMath } from '@ragetrade/core/contracts/libraries/SignedFullMath.sol';\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\n\nimport { IVPoolWrapper } from '@ragetrade/core/contracts/interfaces/IVPoolWrapper.sol';\nimport { IClearingHouse } from '@ragetrade/core/contracts/interfaces/IClearingHouse.sol';\nimport { ClearingHouseExtsload } from '@ragetrade/core/contracts/extsloads/ClearingHouseExtsload.sol';\nimport { IClearingHouseStructures } from '@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseStructures.sol';\n\nimport { IBaseVault } from '../interfaces/IBaseVault.sol';\nimport { ISwapSimulator } from '../interfaces/ISwapSimulator.sol';\nimport { ICurveGauge } from '../interfaces/curve/ICurveGauge.sol';\nimport { ILPPriceGetter } from '../interfaces/curve/ILPPriceGetter.sol';\nimport { ICurveStableSwap } from '../interfaces/curve/ICurveStableSwap.sol';\n\nimport { SafeCast } from '../libraries/SafeCast.sol';\nimport { SwapManager } from '../libraries/SwapManager.sol';\n\ninterface IBaseVaultGetters {\n    function minNotionalPositionToCloseThreshold() external view returns (uint64);\n\n    function closePositionSlippageSqrtToleranceBps() external view returns (uint16);\n}\n\nlibrary Logic {\n    using SafeCast for uint256;\n    using FullMath for uint256;\n    using SignedMath for int256;\n    using SignedFullMath for int256;\n\n    using UniswapV3PoolHelper for IUniswapV3Pool;\n    using ClearingHouseExtsload for IClearingHouse;\n\n    event Harvested(uint256 crvAmount);\n    event Staked(uint256 amount, address indexed depositor);\n\n    event FeesUpdated(uint256 fee);\n    event FeesWithdrawn(uint256 total);\n\n    event CurveParamsUpdated(\n        uint256 feeBps,\n        uint256 stablecoinSlippage,\n        uint256 crvHarvestThreshold,\n        uint256 crvSlippageTolerance,\n        address indexed crvOracle\n    );\n\n    event CrvSwapFailedDueToSlippage(uint256 crvSlippageTolerance);\n\n    event EightyTwentyParamsUpdated(\n        uint16 closePositionSlippageSqrtToleranceBps,\n        uint16 resetPositionThresholdBps,\n        uint64 minNotionalPositionToCloseThreshold\n    );\n\n    event BaseParamsUpdated(\n        uint256 newDepositCap,\n        address newKeeperAddress,\n        uint32 rebalanceTimeThreshold,\n        uint16 rebalancePriceThresholdBps\n    );\n\n    event Rebalance();\n    event TokenPositionClosed();\n\n    event StateInfo(uint256 lpPrice);\n\n    // base vault\n\n    function getTwapSqrtPriceX96(IUniswapV3Pool rageVPool, uint32 rageTwapDuration)\n        external\n        view\n        returns (uint160 twapSqrtPriceX96)\n    {\n        twapSqrtPriceX96 = rageVPool.twapSqrtPrice(rageTwapDuration);\n    }\n\n    function _getTwapSqrtPriceX96(IUniswapV3Pool rageVPool, uint32 rageTwapDuration)\n        internal\n        view\n        returns (uint160 twapSqrtPriceX96)\n    {\n        twapSqrtPriceX96 = rageVPool.twapSqrtPrice(rageTwapDuration);\n    }\n\n    // 80 20\n\n    function _simulateClose(\n        uint32 ethPoolId,\n        int256 tokensToTrade,\n        uint160 sqrtPriceX96,\n        IClearingHouse clearingHouse,\n        ISwapSimulator swapSimulator,\n        uint16 slippageSqrtToleranceBps\n    ) internal view returns (int256 vTokenAmountOut, int256 vQuoteAmountOut) {\n        uint160 sqrtPriceLimitX96;\n\n        if (tokensToTrade > 0) {\n            sqrtPriceLimitX96 = uint256(sqrtPriceX96).mulDiv(1e4 + slippageSqrtToleranceBps, 1e4).toUint160();\n        } else {\n            sqrtPriceLimitX96 = uint256(sqrtPriceX96).mulDiv(1e4 - slippageSqrtToleranceBps, 1e4).toUint160();\n        }\n\n        IVPoolWrapper.SwapResult memory swapResult = swapSimulator.simulateSwapView(\n            clearingHouse,\n            ethPoolId,\n            tokensToTrade,\n            sqrtPriceLimitX96,\n            false\n        );\n\n        return (-swapResult.vTokenIn, -swapResult.vQuoteIn);\n    }\n\n    function simulateBeforeWithdraw(\n        address vault,\n        uint256 amountBeforeWithdraw,\n        uint256 amountWithdrawn\n    ) external view returns (uint256 updatedAmountWithdrawn, int256 tokensToTrade) {\n        uint32 ethPoolId = IBaseVault(vault).ethPoolId();\n        IClearingHouse clearingHouse = IClearingHouse(IBaseVault(vault).rageClearingHouse());\n\n        uint160 sqrtPriceX96 = _getTwapSqrtPriceX96(\n            IBaseVault(vault).rageVPool(),\n            clearingHouse.getTwapDuration(ethPoolId)\n        );\n\n        int256 netPosition = clearingHouse.getAccountNetTokenPosition(IBaseVault(vault).rageAccountNo(), ethPoolId);\n\n        tokensToTrade = -netPosition.mulDiv(amountWithdrawn, amountBeforeWithdraw);\n\n        uint256 tokensToTradeNotionalAbs = _getTokenNotionalAbs(netPosition, sqrtPriceX96);\n\n        uint64 minNotionalPositionToCloseThreshold = IBaseVaultGetters(vault).minNotionalPositionToCloseThreshold();\n        uint16 closePositionSlippageSqrtToleranceBps = IBaseVaultGetters(vault).closePositionSlippageSqrtToleranceBps();\n\n        ISwapSimulator swapSimulatorCopied = IBaseVault(vault).swapSimulator();\n\n        if (tokensToTradeNotionalAbs > minNotionalPositionToCloseThreshold) {\n            (int256 vTokenAmountOut, ) = _simulateClose(\n                ethPoolId,\n                tokensToTrade,\n                sqrtPriceX96,\n                clearingHouse,\n                swapSimulatorCopied,\n                closePositionSlippageSqrtToleranceBps\n            );\n\n            if (vTokenAmountOut == tokensToTrade) updatedAmountWithdrawn = amountWithdrawn;\n            else {\n                int256 updatedAmountWithdrawnInt = -vTokenAmountOut.mulDiv(\n                    amountBeforeWithdraw.toInt256(),\n                    netPosition\n                );\n                updatedAmountWithdrawn = uint256(updatedAmountWithdrawnInt);\n                tokensToTrade = vTokenAmountOut;\n            }\n        } else {\n            updatedAmountWithdrawn = amountWithdrawn;\n            tokensToTrade = 0;\n        }\n    }\n\n    /// @notice Get token notional absolute\n    /// @param tokenAmount Token amount\n    /// @param sqrtPriceX96 Sqrt of price in X96\n    function _getTokenNotionalAbs(int256 tokenAmount, uint160 sqrtPriceX96)\n        internal\n        pure\n        returns (uint256 tokenNotionalAbs)\n    {\n        tokenNotionalAbs = tokenAmount\n            .mulDiv(sqrtPriceX96, FixedPoint96.Q96)\n            .mulDiv(sqrtPriceX96, FixedPoint96.Q96)\n            .absUint();\n    }\n\n    /// @notice checks if upper and lower ticks are valid for rebalacing between current twap price and rebalance threshold\n    function isValidRebalanceRangeWithoutCheckReset(\n        IUniswapV3Pool rageVPool,\n        uint32 rageTwapDuration,\n        uint16 rebalancePriceThresholdBps,\n        int24 baseTickLower,\n        int24 baseTickUpper\n    ) external view returns (bool isValid) {\n        uint256 twapSqrtPriceX96 = uint256(_getTwapSqrtPriceX96(rageVPool, rageTwapDuration));\n        uint256 twapSqrtPriceX96Delta = twapSqrtPriceX96.mulDiv(rebalancePriceThresholdBps, 1e4);\n        if (\n            TickMath.getTickAtSqrtRatio((twapSqrtPriceX96 + twapSqrtPriceX96Delta).toUint160()) > baseTickUpper ||\n            TickMath.getTickAtSqrtRatio((twapSqrtPriceX96 - twapSqrtPriceX96Delta).toUint160()) < baseTickLower\n        ) isValid = true;\n    }\n\n    /// @notice convert sqrt price in X96 to initializable tick\n    /// @param sqrtPriceX96 Sqrt of price in X96\n    /// @param isTickUpper true if price represents upper tick and false if price represents lower tick\n    function sqrtPriceX96ToValidTick(uint160 sqrtPriceX96, bool isTickUpper) external pure returns (int24 roundedTick) {\n        int24 tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\n        if (isTickUpper) {\n            roundedTick = tick + 10 - (tick % 10);\n        } else {\n            roundedTick = tick - (tick % 10);\n        }\n\n        if (tick < 0) roundedTick -= 10;\n    }\n\n    /// @notice helper to get nearest tick for sqrtPriceX96 (tickSpacing = 10)\n    function _sqrtPriceX96ToValidTick(uint160 sqrtPriceX96, bool isTickUpper)\n        internal\n        pure\n        returns (int24 roundedTick)\n    {\n        int24 tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\n        if (isTickUpper) {\n            roundedTick = tick + 10 - (tick % 10);\n        } else {\n            roundedTick = tick - (tick % 10);\n        }\n\n        if (tick < 0) roundedTick -= 10;\n    }\n\n    /// @notice Get updated base range params\n    /// @param sqrtPriceX96 Sqrt of price in X96\n    /// @param vaultMarketValue Market value of vault in USDC\n    function getUpdatedBaseRangeParams(\n        uint160 sqrtPriceX96,\n        int256 vaultMarketValue,\n        /* solhint-disable var-name-mixedcase */\n        uint64 SQRT_PRICE_FACTOR_PIPS\n    )\n        external\n        pure\n        returns (\n            int24 baseTickLowerUpdate,\n            int24 baseTickUpperUpdate,\n            uint128 baseLiquidityUpdate\n        )\n    {\n        {\n            uint160 sqrtPriceLowerX96 = uint256(sqrtPriceX96).mulDiv(SQRT_PRICE_FACTOR_PIPS, 1e6).toUint160();\n            uint160 sqrtPriceUpperX96 = uint256(sqrtPriceX96).mulDiv(1e6, SQRT_PRICE_FACTOR_PIPS).toUint160();\n\n            baseTickLowerUpdate = _sqrtPriceX96ToValidTick(sqrtPriceLowerX96, false);\n            baseTickUpperUpdate = _sqrtPriceX96ToValidTick(sqrtPriceUpperX96, true);\n        }\n\n        uint160 updatedSqrtPriceLowerX96 = TickMath.getSqrtRatioAtTick(baseTickLowerUpdate);\n\n        // assert(vaultMarketValue > 0);\n        baseLiquidityUpdate = (\n            uint256(vaultMarketValue).mulDiv(FixedPoint96.Q96 / 10, (sqrtPriceX96 - updatedSqrtPriceLowerX96))\n        ).toUint128();\n    }\n\n    // curve yield strategy\n    function convertAssetToSettlementToken(\n        uint256 amount,\n        uint256 slippage,\n        ILPPriceGetter lpPriceHolder,\n        ICurveGauge gauge,\n        ICurveStableSwap triCryptoPool,\n        IERC20 usdt,\n        ISwapRouter uniV3Router,\n        IERC20 usdc\n    ) external returns (uint256 usdcAmount) {\n        uint256 pricePerLP = lpPriceHolder.lp_price();\n        uint256 lpToWithdraw = ((amount * (10**12)) * (10**18)) / pricePerLP;\n\n        gauge.withdraw(lpToWithdraw);\n        triCryptoPool.remove_liquidity_one_coin(lpToWithdraw, 0, 0);\n\n        uint256 balance = usdt.balanceOf(address(this));\n\n        bytes memory path = abi.encodePacked(usdt, uint24(500), usdc);\n\n        usdcAmount = SwapManager.swapUsdtToUsdc(balance, slippage, path, uniV3Router);\n    }\n\n    function getMarketValue(uint256 amount, ILPPriceGetter lpPriceHolder) external view returns (uint256 marketValue) {\n        marketValue = amount.mulDiv(_getPriceX128(lpPriceHolder), FixedPoint128.Q128);\n    }\n\n    function getPriceX128(ILPPriceGetter lpPriceHolder) external view returns (uint256 priceX128) {\n        return _getPriceX128(lpPriceHolder);\n    }\n\n    function _getPriceX128(ILPPriceGetter lpPriceHolder) internal view returns (uint256 priceX128) {\n        uint256 pricePerLP = lpPriceHolder.lp_price();\n        return pricePerLP.mulDiv(FixedPoint128.Q128, 10**30); // 10**6 / (10**18*10**18)\n    }\n}\n"
    },
    "@ragetrade/vaults/contracts/interfaces/ISwapSimulator.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.9;\n\nimport { IVPoolWrapper } from '@ragetrade/core/contracts/interfaces/IVPoolWrapper.sol';\nimport { IClearingHouse } from '@ragetrade/core/contracts/interfaces/IClearingHouse.sol';\n\ninterface ISwapSimulator {\n    function simulateSwapView(\n        IClearingHouse clearingHouse,\n        uint32 poolId,\n        int256 amount,\n        uint160 sqrtPriceLimitX96,\n        bool isNotional\n    ) external view returns (IVPoolWrapper.SwapResult memory swapResult);\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport {IUniswapV3PoolImmutables} from './pool/IUniswapV3PoolImmutables.sol';\nimport {IUniswapV3PoolState} from './pool/IUniswapV3PoolState.sol';\nimport {IUniswapV3PoolDerivedState} from './pool/IUniswapV3PoolDerivedState.sol';\nimport {IUniswapV3PoolActions} from './pool/IUniswapV3PoolActions.sol';\nimport {IUniswapV3PoolOwnerActions} from './pool/IUniswapV3PoolOwnerActions.sol';\nimport {IUniswapV3PoolErrors} from './pool/IUniswapV3PoolErrors.sol';\nimport {IUniswapV3PoolEvents} from './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolErrors,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/IClearingHouse.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.4;\n\nimport { IGovernable } from './IGovernable.sol';\n\nimport { IClearingHouseActions } from './clearinghouse/IClearingHouseActions.sol';\nimport { IClearingHouseCustomErrors } from './clearinghouse/IClearingHouseCustomErrors.sol';\nimport { IClearingHouseEnums } from './clearinghouse/IClearingHouseEnums.sol';\nimport { IClearingHouseEvents } from './clearinghouse/IClearingHouseEvents.sol';\nimport { IClearingHouseOwnerActions } from './clearinghouse/IClearingHouseOwnerActions.sol';\nimport { IClearingHouseStructures } from './clearinghouse/IClearingHouseStructures.sol';\nimport { IClearingHouseSystemActions } from './clearinghouse/IClearingHouseSystemActions.sol';\nimport { IClearingHouseView } from './clearinghouse/IClearingHouseView.sol';\n\ninterface IClearingHouse is\n    IGovernable,\n    IClearingHouseEnums,\n    IClearingHouseStructures,\n    IClearingHouseActions,\n    IClearingHouseCustomErrors,\n    IClearingHouseEvents,\n    IClearingHouseOwnerActions,\n    IClearingHouseSystemActions,\n    IClearingHouseView\n{}\n"
    },
    "@ragetrade/core/contracts/interfaces/IVPoolWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.4;\n\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport { IVQuote } from './IVQuote.sol';\nimport { IVToken } from './IVToken.sol';\n\ninterface IVPoolWrapper {\n    struct InitializeVPoolWrapperParams {\n        address clearingHouse; // address of clearing house contract (proxy)\n        IVToken vToken; // address of vToken contract\n        IVQuote vQuote; // address of vQuote contract\n        IUniswapV3Pool vPool; // address of Uniswap V3 Pool contract, created using vToken and vQuote\n        uint24 liquidityFeePips; // liquidity fee fraction (in 1e6)\n        uint24 protocolFeePips; // protocol fee fraction (in 1e6)\n    }\n\n    struct SwapResult {\n        int256 amountSpecified; // amount of tokens/vQuote which were specified in the swap request\n        int256 vTokenIn; // actual amount of vTokens paid by account to the Pool\n        int256 vQuoteIn; // actual amount of vQuotes paid by account to the Pool\n        uint256 liquidityFees; // actual amount of fees paid by account to the Pool\n        uint256 protocolFees; // actual amount of fees paid by account to the Protocol\n        uint160 sqrtPriceX96Start; // sqrt price at the beginning of the swap\n        uint160 sqrtPriceX96End; // sqrt price at the end of the swap\n    }\n\n    struct WrapperValuesInside {\n        int256 sumAX128; // sum of all the A terms in the pool\n        int256 sumBInsideX128; // sum of all the B terms in side the tick range in the pool\n        int256 sumFpInsideX128; // sum of all the Fp terms in side the tick range in the pool\n        uint256 sumFeeInsideX128; // sum of all the fee terms in side the tick range in the pool\n    }\n\n    /// @notice Emitted whenever a swap takes place\n    /// @param swapResult the swap result values\n    event Swap(SwapResult swapResult);\n\n    /// @notice Emitted whenever liquidity is added\n    /// @param tickLower the lower tick of the range\n    /// @param tickUpper the upper tick of the range\n    /// @param liquidity the amount of liquidity that was added\n    /// @param vTokenPrincipal the amount of vToken that was sent to UniswapV3Pool\n    /// @param vQuotePrincipal the mount of vQuote charged was sent to UniswapV3Pool\n    event Mint(int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 vTokenPrincipal, uint256 vQuotePrincipal);\n\n    /// @notice Emitted whenever liquidity is removed\n    /// @param tickLower the lower tick of the range\n    /// @param tickUpper the upper tick of the range\n    /// @param liquidity the amount of liquidity that was removed\n    /// @param vTokenPrincipal the amount of vToken that was received from UniswapV3Pool\n    /// @param vQuotePrincipal the mount of vQuote charged was received from UniswapV3Pool\n    event Burn(int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 vTokenPrincipal, uint256 vQuotePrincipal);\n\n    /// @notice Emitted whenever clearing house enquired about the accrued protocol fees\n    /// @param amount the amount of accrued protocol fees\n    event AccruedProtocolFeeCollected(uint256 amount);\n\n    /// @notice Emitted when governance updates the liquidity fees\n    /// @param liquidityFeePips the new liquidity fee ratio\n    event LiquidityFeeUpdated(uint24 liquidityFeePips);\n\n    /// @notice Emitted when governance updates the protocol fees\n    /// @param protocolFeePips the new protocol fee ratio\n    event ProtocolFeeUpdated(uint24 protocolFeePips);\n\n    /// @notice Emitted when funding rate override is updated\n    /// @param fundingRateOverrideX128 the new funding rate override value\n    event FundingRateOverrideUpdated(int256 fundingRateOverrideX128);\n\n    function initialize(InitializeVPoolWrapperParams memory params) external;\n\n    function vPool() external view returns (IUniswapV3Pool);\n\n    function getValuesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (WrapperValuesInside memory wrapperValuesInside);\n\n    function getExtrapolatedValuesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (WrapperValuesInside memory wrapperValuesInside);\n\n    function swap(\n        bool swapVTokenForVQuote, // zeroForOne\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) external returns (SwapResult memory swapResult);\n\n    function mint(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 liquidity\n    )\n        external\n        returns (\n            uint256 vTokenPrincipal,\n            uint256 vQuotePrincipal,\n            WrapperValuesInside memory wrapperValuesInside\n        );\n\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 liquidity\n    )\n        external\n        returns (\n            uint256 vTokenPrincipal,\n            uint256 vQuotePrincipal,\n            WrapperValuesInside memory wrapperValuesInside\n        );\n\n    function getSumAX128() external view returns (int256);\n\n    function getExtrapolatedSumAX128() external view returns (int256);\n\n    function liquidityFeePips() external view returns (uint24);\n\n    function protocolFeePips() external view returns (uint24);\n\n    /// @notice Used by clearing house to update funding rate when clearing house is paused or unpaused.\n    /// @param useZeroFundingRate: used to discount funding payment during the duration ch was paused.\n    function updateGlobalFundingState(bool useZeroFundingRate) external;\n\n    /// @notice Used by clearing house to know how much protocol fee was collected.\n    /// @return accruedProtocolFeeLast amount of protocol fees accrued since last collection.\n    /// @dev Does not do any token transfer, just reduces the state in wrapper by accruedProtocolFeeLast.\n    ///     Clearing house already has the amount of settlement tokens to send to treasury.\n    function collectAccruedProtocolFee() external returns (uint256 accruedProtocolFeeLast);\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/IVToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IVToken is IERC20 {\n    function mint(address account, uint256 amount) external;\n\n    function burn(uint256 amount) external;\n\n    function setVPoolWrapper(address) external;\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/IVQuote.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IVQuote is IERC20 {\n    function mint(address account, uint256 amount) external;\n\n    function burn(uint256 amount) external;\n\n    function authorize(address vPoolWrapper) external;\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// @return observationIndex The index of the last oracle observation that was written,\n    /// @return observationCardinality The current maximum number of observations stored in the pool,\n    /// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// @return feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    /// @return The liquidity at the current price of the pool\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper\n    /// @return liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// @return feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// @return feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// @return tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// @return secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// @return secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// @return initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return liquidity The amount of liquidity in the position,\n    /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// @return initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolErrors.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Errors emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolErrors {\n    error LOK();\n    error TLU();\n    error TLM();\n    error TUM();\n    error AI();\n    error M0();\n    error M1();\n    error AS();\n    error IIA();\n    error L();\n    error F0();\n    error F1();\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface IGovernable {\n    function governance() external view returns (address);\n\n    function governancePending() external view returns (address);\n\n    function teamMultisig() external view returns (address);\n\n    function teamMultisigPending() external view returns (address);\n\n    function initiateGovernanceTransfer(address newGovernancePending) external;\n\n    function acceptGovernanceTransfer() external;\n\n    function initiateTeamMultisigTransfer(address newTeamMultisigPending) external;\n\n    function acceptTeamMultisigTransfer() external;\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseCustomErrors.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.4;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport { IVToken } from '../IVToken.sol';\n\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\n\ninterface IClearingHouseCustomErrors is IClearingHouseStructures {\n    /// @notice error to denote invalid account access\n    /// @param senderAddress address of msg sender\n    error AccessDenied(address senderAddress);\n\n    /// @notice error to denote usage of uninitialized token\n    /// @param collateralId address of token\n    error CollateralDoesNotExist(uint32 collateralId);\n\n    /// @notice error to denote usage of unsupported collateral token\n    /// @param collateralId address of token\n    error CollateralNotAllowedForUse(uint32 collateralId);\n\n    /// @notice error to denote unpause is in progress, hence cannot pause\n    error CannotPauseIfUnpauseInProgress();\n\n    /// @notice error to denote pause is in progress, hence cannot unpause\n    error CannotUnpauseIfPauseInProgress();\n\n    /// @notice error to denote incorrect address is supplied while updating collateral settings\n    /// @param incorrectAddress incorrect address of collateral token\n    /// @param correctAddress correct address of collateral token\n    error IncorrectCollateralAddress(IERC20 incorrectAddress, IERC20 correctAddress);\n\n    /// @notice error to denote invalid address supplied as a collateral token\n    /// @param invalidAddress invalid address of collateral token\n    error InvalidCollateralAddress(address invalidAddress);\n\n    /// @notice error to denote invalid token liquidation (fraction to liquidate> 1)\n    error InvalidTokenLiquidationParameters();\n\n    /// @notice this is errored when the enum (uint8) value is out of bounds\n    /// @param multicallOperationType is the value that is out of bounds\n    error InvalidMulticallOperationType(MulticallOperationType multicallOperationType);\n\n    /// @notice error to denote that keeper fee is negative or zero\n    error KeeperFeeNotPositive(int256 keeperFee);\n\n    /// @notice error to denote low notional value of txn\n    /// @param notionalValue notional value of txn\n    error LowNotionalValue(uint256 notionalValue);\n\n    /// @notice error to denote that caller is not ragetrade factory\n    error NotRageTradeFactory();\n\n    /// @notice error to denote usage of uninitialized pool\n    /// @param poolId unitialized truncated address supplied\n    error PoolDoesNotExist(uint32 poolId);\n\n    /// @notice error to denote usage of unsupported pool\n    /// @param poolId address of token\n    error PoolNotAllowedForTrade(uint32 poolId);\n\n    /// @notice error to denote slippage of txn beyond set threshold\n    error SlippageBeyondTolerance();\n\n    /// @notice error to denote that zero amount is passed and it's prohibited\n    error ZeroAmount();\n\n    /// @notice error to denote an invalid setting for parameters\n    error InvalidSetting(uint256 errorCode);\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\n\ninterface IClearingHouseActions is IClearingHouseStructures {\n    /// @notice creates a new account and adds it to the accounts map\n    /// @return newAccountId - serial number of the new account created\n    function createAccount() external returns (uint256 newAccountId);\n\n    /// @notice deposits 'amount' of token associated with 'poolId'\n    /// @param accountId account id\n    /// @param collateralId truncated address of token to deposit\n    /// @param amount amount of token to deposit\n    function updateMargin(\n        uint256 accountId,\n        uint32 collateralId,\n        int256 amount\n    ) external;\n\n    /// @notice creates a new account and deposits 'amount' of token associated with 'poolId'\n    /// @param collateralId truncated address of collateral token to deposit\n    /// @param amount amount of token to deposit\n    /// @return newAccountId - serial number of the new account created\n    function createAccountAndAddMargin(uint32 collateralId, uint256 amount) external returns (uint256 newAccountId);\n\n    /// @notice withdraws 'amount' of settlement token from the profit made\n    /// @param accountId account id\n    /// @param amount amount of token to withdraw\n    function updateProfit(uint256 accountId, int256 amount) external;\n\n    /// @notice settles the profit/loss made with the settlement token collateral deposits\n    /// @param accountId account id\n    function settleProfit(uint256 accountId) external;\n\n    /// @notice swaps token associated with 'poolId' by 'amount' (Long if amount>0 else Short)\n    /// @param accountId account id\n    /// @param poolId truncated address of token to withdraw\n    /// @param swapParams swap parameters\n    function swapToken(\n        uint256 accountId,\n        uint32 poolId,\n        SwapParams memory swapParams\n    ) external returns (int256 vTokenAmountOut, int256 vQuoteAmountOut);\n\n    /// @notice updates range order of token associated with 'poolId' by 'liquidityDelta' (Adds if amount>0 else Removes)\n    /// @notice also can be used to update limitOrderType\n    /// @param accountId account id\n    /// @param poolId truncated address of token to withdraw\n    /// @param liquidityChangeParams liquidity change parameters\n    function updateRangeOrder(\n        uint256 accountId,\n        uint32 poolId,\n        LiquidityChangeParams calldata liquidityChangeParams\n    ) external returns (int256 vTokenAmountOut, int256 vQuoteAmountOut);\n\n    /// @notice keeper call to remove a limit order\n    /// @dev checks the position of current price relative to limit order and checks limitOrderType\n    /// @param accountId account id\n    /// @param poolId truncated address of token to withdraw\n    /// @param tickLower liquidity change parameters\n    /// @param tickUpper liquidity change parameters\n    function removeLimitOrder(\n        uint256 accountId,\n        uint32 poolId,\n        int24 tickLower,\n        int24 tickUpper\n    ) external;\n\n    /// @notice keeper call for liquidation of range position\n    /// @dev removes all the active range positions and gives liquidator a percent of notional amount closed + fixedFee\n    /// @param accountId account id\n    function liquidateLiquidityPositions(uint256 accountId) external;\n\n    /// @notice keeper call for liquidation of token position\n    /// @dev transfers the fraction of token position at a discount to current price to liquidators account and gives liquidator some fixedFee\n    /// @param targetAccountId account id\n    /// @param poolId truncated address of token to withdraw\n    /// @return keeperFee - amount of fees transferred to keeper\n    function liquidateTokenPosition(uint256 targetAccountId, uint32 poolId) external returns (int256 keeperFee);\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseStructures.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport { IOracle } from '../IOracle.sol';\nimport { IVToken } from '../IVToken.sol';\nimport { IVPoolWrapper } from '../IVPoolWrapper.sol';\n\nimport { IClearingHouseEnums } from './IClearingHouseEnums.sol';\n\ninterface IClearingHouseStructures is IClearingHouseEnums {\n    struct BalanceAdjustments {\n        int256 vQuoteIncrease; // specifies the increase in vQuote balance\n        int256 vTokenIncrease; // specifies the increase in token balance\n        int256 traderPositionIncrease; // specifies the increase in trader position\n    }\n\n    struct Collateral {\n        IERC20 token; // address of the collateral token\n        CollateralSettings settings; // collateral settings, changable by governance later\n    }\n\n    struct CollateralSettings {\n        IOracle oracle; // address of oracle which gives price to be used for collateral\n        uint32 twapDuration; // duration of the twap in seconds\n        bool isAllowedForDeposit; // whether the collateral is allowed to be deposited at the moment\n    }\n\n    struct CollateralDepositView {\n        IERC20 collateral; // address of the collateral token\n        uint256 balance; // balance of the collateral in the account\n    }\n\n    struct LiquidityChangeParams {\n        int24 tickLower; // tick lower of the range\n        int24 tickUpper; // tick upper of the range\n        int128 liquidityDelta; // positive to add liquidity, negative to remove liquidity\n        uint160 sqrtPriceCurrent; // hint for virtual price, to prevent sandwitch attack\n        uint16 slippageToleranceBps; // slippage tolerance in bps, to prevent sandwitch attack\n        bool closeTokenPosition; // whether to close the token position generated due to the liquidity change\n        LimitOrderType limitOrderType; // limit order type\n        bool settleProfit; // whether to settle profit against USDC margin\n    }\n\n    struct LiquidityPositionView {\n        int24 tickLower; // tick lower of the range\n        int24 tickUpper; // tick upper of the range\n        uint128 liquidity; // liquidity in the range by the account\n        int256 vTokenAmountIn; // amount of token supplied by the account, to calculate net position\n        int256 sumALastX128; // checkpoint of the term A in funding payment math\n        int256 sumBInsideLastX128; // checkpoint of the term B in funding payment math\n        int256 sumFpInsideLastX128; // checkpoint of the term Fp in funding payment math\n        uint256 sumFeeInsideLastX128; // checkpoint of the trading fees\n        LimitOrderType limitOrderType; // limit order type\n    }\n\n    struct LiquidationParams {\n        uint16 rangeLiquidationFeeFraction; // fraction of net token position rm from the range to be charged as liquidation fees (in 1e5)\n        uint16 tokenLiquidationFeeFraction; // fraction of traded amount of vquote to be charged as liquidation fees (in 1e5)\n        uint16 closeFactorMMThresholdBps; // fraction the MM threshold for partial liquidation (in 1e4)\n        uint16 partialLiquidationCloseFactorBps; // fraction the % of position to be liquidated if partial liquidation should occur (in 1e4)\n        uint16 insuranceFundFeeShareBps; // fraction of the fee share for insurance fund out of the total liquidation fee (in 1e4)\n        uint16 liquidationSlippageSqrtToleranceBps; // fraction of the max sqrt price slippage threshold (in 1e4) (can be set to - actual price slippage tolerance / 2)\n        uint64 maxRangeLiquidationFees; // maximum range liquidation fees (in settlement token amount decimals)\n        uint64 minNotionalLiquidatable; // minimum notional value of position for it to be eligible for partial liquidation (in settlement token amount decimals)\n    }\n\n    struct MulticallOperation {\n        MulticallOperationType operationType; // operation type\n        bytes data; // abi encoded data for the operation\n    }\n\n    struct Pool {\n        IVToken vToken; // address of the vToken, poolId = vToken.truncate()\n        IUniswapV3Pool vPool; // address of the UniswapV3Pool(token0=vToken, token1=vQuote, fee=500)\n        IVPoolWrapper vPoolWrapper; // wrapper address\n        PoolSettings settings; // pool settings, which can be updated by governance later\n    }\n\n    struct PoolSettings {\n        uint16 initialMarginRatioBps; // margin ratio (1e4) considered for create/update position, removing margin or profit\n        uint16 maintainanceMarginRatioBps; // margin ratio (1e4) considered for liquidations by keeper\n        uint16 maxVirtualPriceDeviationRatioBps; // maximum deviation (1e4) from the current virtual price\n        uint32 twapDuration; // twap duration (seconds) for oracle\n        bool isAllowedForTrade; // whether the pool is allowed to be traded at the moment\n        bool isCrossMargined; // whether cross margined is done for positions of this pool\n        IOracle oracle; // spot price feed twap oracle for this pool\n    }\n\n    struct SwapParams {\n        int256 amount; // amount of tokens/vQuote to swap\n        uint160 sqrtPriceLimit; // threshold sqrt price which should not be crossed\n        bool isNotional; // whether the amount represents vQuote amount\n        bool isPartialAllowed; // whether to end swap (partial) when sqrtPriceLimit is reached, instead of reverting\n        bool settleProfit; // whether to settle profit against USDC margin\n    }\n\n    struct TickRange {\n        int24 tickLower;\n        int24 tickUpper;\n    }\n\n    struct VTokenPositionView {\n        uint32 poolId; // id of the pool of which this token position is for\n        int256 balance; // vTokenLong - vTokenShort\n        int256 netTraderPosition; // net position due to trades and liquidity change carries\n        int256 sumALastX128; // checkoint of the term A in funding payment math\n        LiquidityPositionView[] liquidityPositions; // liquidity positions of the account in the pool\n    }\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport { IVToken } from '../IVToken.sol';\n\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\n\ninterface IClearingHouseEvents is IClearingHouseStructures {\n    /// @notice denotes new account creation\n    /// @param ownerAddress wallet address of account owner\n    /// @param accountId serial number of the account\n    event AccountCreated(address indexed ownerAddress, uint256 accountId);\n\n    /// @notice new collateral supported as margin\n    /// @param cTokenInfo collateral token info\n    event CollateralSettingsUpdated(IERC20 cToken, CollateralSettings cTokenInfo);\n\n    /// @notice maintainance margin ratio of a pool changed\n    /// @param poolId id of the rage trade pool\n    /// @param settings new settings\n    event PoolSettingsUpdated(uint32 poolId, PoolSettings settings);\n\n    /// @notice protocol settings changed\n    /// @param liquidationParams liquidation params\n    /// @param removeLimitOrderFee fee for remove limit order\n    /// @param minimumOrderNotional minimum order notional\n    /// @param minRequiredMargin minimum required margin\n    event ProtocolSettingsUpdated(\n        LiquidationParams liquidationParams,\n        uint256 removeLimitOrderFee,\n        uint256 minimumOrderNotional,\n        uint256 minRequiredMargin\n    );\n\n    event PausedUpdated(bool paused);\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport { IVToken } from '../IVToken.sol';\n\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\n\ninterface IClearingHouseOwnerActions is IClearingHouseStructures {\n    /// @notice updates the collataral settings\n    /// @param cToken collateral token\n    /// @param collateralSettings settings\n    function updateCollateralSettings(IERC20 cToken, CollateralSettings memory collateralSettings) external;\n\n    /// @notice updates the rage trade pool settings\n    /// @param poolId rage trade pool id\n    /// @param newSettings updated rage trade pool settings\n    function updatePoolSettings(uint32 poolId, PoolSettings calldata newSettings) external;\n\n    /// @notice updates the protocol settings\n    /// @param liquidationParams liquidation params\n    /// @param removeLimitOrderFee fee for remove limit order\n    /// @param minimumOrderNotional minimum order notional\n    /// @param minRequiredMargin minimum required margin\n    function updateProtocolSettings(\n        LiquidationParams calldata liquidationParams,\n        uint256 removeLimitOrderFee,\n        uint256 minimumOrderNotional,\n        uint256 minRequiredMargin\n    ) external;\n\n    /// @notice withdraws protocol fees collected in the supplied wrappers to team multisig\n    /// @param numberOfPoolsToUpdateInThisTx number of pools to collect fees from\n    function withdrawProtocolFee(uint256 numberOfPoolsToUpdateInThisTx) external;\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseEnums.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IClearingHouseEnums {\n    enum LimitOrderType {\n        NONE,\n        LOWER_LIMIT,\n        UPPER_LIMIT\n    }\n\n    enum MulticallOperationType {\n        UPDATE_MARGIN,\n        UPDATE_PROFIT,\n        SWAP_TOKEN,\n        UPDATE_RANGE_ORDER,\n        REMOVE_LIMIT_ORDER,\n        LIQUIDATE_LIQUIDITY_POSITIONS,\n        LIQUIDATE_TOKEN_POSITION\n    }\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseSystemActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport { IInsuranceFund } from '../IInsuranceFund.sol';\nimport { IOracle } from '../IOracle.sol';\nimport { IVQuote } from '../IVQuote.sol';\nimport { IVToken } from '../IVToken.sol';\n\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\n\ninterface IClearingHouseSystemActions is IClearingHouseStructures {\n    /// @notice initializes clearing house contract\n    /// @param rageTradeFactoryAddress rage trade factory address\n    /// @param defaultCollateralToken address of default collateral token\n    /// @param defaultCollateralTokenOracle address of default collateral token oracle\n    /// @param insuranceFund address of insurance fund\n    /// @param vQuote address of vQuote\n    function initialize(\n        address rageTradeFactoryAddress,\n        address initialGovernance,\n        address initialTeamMultisig,\n        IERC20 defaultCollateralToken,\n        IOracle defaultCollateralTokenOracle,\n        IInsuranceFund insuranceFund,\n        IVQuote vQuote\n    ) external;\n\n    function registerPool(Pool calldata poolInfo) external;\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/clearinghouse/IClearingHouseView.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\nimport { IExtsload } from '../IExtsload.sol';\n\ninterface IClearingHouseView is IClearingHouseStructures, IExtsload {\n    /// @notice Gets the market value and required margin of an account\n    /// @dev This method can be used to check if an account is under water or not.\n    ///     If accountMarketValue < requiredMargin then liquidation can take place.\n    /// @param accountId the account id\n    /// @param isInitialMargin true is initial margin, false is maintainance margin\n    /// @return accountMarketValue the market value of the account, due to collateral and positions\n    /// @return requiredMargin margin needed due to positions\n    function getAccountMarketValueAndRequiredMargin(uint256 accountId, bool isInitialMargin)\n        external\n        view\n        returns (int256 accountMarketValue, int256 requiredMargin);\n\n    /// @notice Gets the net profit of an account\n    /// @param accountId the account id\n    /// @return accountNetProfit the net profit of the account\n    function getAccountNetProfit(uint256 accountId) external view returns (int256 accountNetProfit);\n\n    /// @notice Gets the net position of an account\n    /// @param accountId the account id\n    /// @param poolId the id of the pool (vETH, ... etc)\n    /// @return netPosition the net position of the account\n    function getAccountNetTokenPosition(uint256 accountId, uint32 poolId) external view returns (int256 netPosition);\n\n    /// @notice Gets the real twap price from the respective oracle of the given poolId\n    /// @param poolId the id of the pool\n    /// @return realPriceX128 the real price of the pool\n    function getRealTwapPriceX128(uint32 poolId) external view returns (uint256 realPriceX128);\n\n    /// @notice Gets the virtual twap price from the respective oracle of the given poolId\n    /// @param poolId the id of the pool\n    /// @return virtualPriceX128 the virtual price of the pool\n    function getVirtualTwapPriceX128(uint32 poolId) external view returns (uint256 virtualPriceX128);\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface IOracle {\n    function getTwapPriceX128(uint32 twapDuration) external view returns (uint256 priceX128);\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/IInsuranceFund.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.4;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IInsuranceFund {\n    function initialize(\n        IERC20 settlementToken,\n        address clearingHouse,\n        string calldata name,\n        string calldata symbol\n    ) external;\n\n    function claim(uint256 amount) external;\n}\n"
    },
    "@ragetrade/core/contracts/interfaces/IExtsload.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\n/// @title This is an interface to read contract's state that supports extsload.\ninterface IExtsload {\n    /// @notice Returns a value from the storage.\n    /// @param slot to read from.\n    /// @return value stored at the slot.\n    function extsload(bytes32 slot) external view returns (bytes32 value);\n\n    /// @notice Returns multiple values from storage.\n    /// @param slots to read from.\n    /// @return values stored at the slots.\n    function extsload(bytes32[] memory slots) external view returns (bytes32[] memory);\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = a * b\n            // Compute the product mod 2**256 and mod 2**256 - 1\n            // then use the Chinese Remainder Theorem to reconstruct\n            // the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2**256 + prod0\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(a, b, not(0))\n                prod0 := mul(a, b)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division\n            if (prod1 == 0) {\n                require(denominator > 0);\n                assembly {\n                    result := div(prod0, denominator)\n                }\n                return result;\n            }\n\n            // Make sure the result is less than 2**256.\n            // Also prevents denominator == 0\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0]\n            // Compute remainder using mulmod\n            uint256 remainder;\n            assembly {\n                remainder := mulmod(a, b, denominator)\n            }\n            // Subtract 256 bit number from 512 bit number\n            assembly {\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator\n            // Compute largest power of two divisor of denominator.\n            // Always >= 1.\n            uint256 twos = (0 - denominator) & denominator;\n            // Divide denominator by power of two\n            assembly {\n                denominator := div(denominator, twos)\n            }\n\n            // Divide [prod1 prod0] by the factors of two\n            assembly {\n                prod0 := div(prod0, twos)\n            }\n            // Shift in bits from prod1 into prod0. For this we need\n            // to flip `twos` such that it is 2**256 / twos.\n            // If twos is zero, then it becomes one\n            assembly {\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2**256\n            // Now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inv = (3 * denominator) ^ 2;\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // inverse mod 2**8\n            inv *= 2 - denominator * inv; // inverse mod 2**16\n            inv *= 2 - denominator * inv; // inverse mod 2**32\n            inv *= 2 - denominator * inv; // inverse mod 2**64\n            inv *= 2 - denominator * inv; // inverse mod 2**128\n            inv *= 2 - denominator * inv; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the precoditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n            return result;\n        }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            result = mulDiv(a, b, denominator);\n            if (mulmod(a, b, denominator) > 0) {\n                require(result < type(uint256).max);\n                result++;\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "@ragetrade/vaults/contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        unchecked {\n            require((z = uint160(y)) == y, 'Overflow');\n        }\n    }\n\n    /// @notice Cast a uint256 to a uint128, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\n        unchecked {\n            /* solhint-disable reason-string */\n            require((z = uint128(y)) == y);\n        }\n    }\n\n    /// @notice Cast a uint128 to a int128, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt128(uint128 y) internal pure returns (int128 z) {\n        unchecked {\n            require(y < 2**127, 'Overflow');\n            z = int128(y);\n        }\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        unchecked {\n            require((z = int128(y)) == y, 'Overflow');\n        }\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        unchecked {\n            require(y < 2**255, 'Overflow');\n            z = int256(y);\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    error T();\n    error R();\n\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        unchecked {\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\n\n            uint256 ratio = absTick & 0x1 != 0\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\n                : 0x100000000000000000000000000000000;\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n            if (tick > 0) ratio = type(uint256).max / ratio;\n\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n        }\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        unchecked {\n            // second inequality must be < because the price can never reach the price at the max tick\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n            uint256 r = ratio;\n            uint256 msb = 0;\n\n            assembly {\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(5, gt(r, 0xFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(4, gt(r, 0xFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(3, gt(r, 0xFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(2, gt(r, 0xF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(1, gt(r, 0x3))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := gt(r, 0x1)\n                msb := or(msb, f)\n            }\n\n            if (msb >= 128) r = ratio >> (msb - 127);\n            else r = ratio << (127 - msb);\n\n            int256 log_2 = (int256(msb) - 128) << 64;\n\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(63, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(62, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(61, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(60, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(59, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(58, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(57, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(56, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(55, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(54, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(53, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(52, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(51, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(50, f))\n            }\n\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n        }\n    }\n}\n"
    },
    "@ragetrade/core/contracts/extsloads/ClearingHouseExtsload.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\nimport { IExtsload } from '../interfaces/IExtsload.sol';\nimport { IOracle } from '../interfaces/IOracle.sol';\nimport { IVQuote } from '../interfaces/IVQuote.sol';\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\nimport { IVToken } from '../interfaces/IVToken.sol';\n\nimport { Uint48Lib } from '../libraries/Uint48.sol';\nimport { WordHelper } from '../libraries/WordHelper.sol';\n\nlibrary ClearingHouseExtsload {\n    // Terminology:\n    // SLOT is a storage location value which can be sloaded, typed in bytes32.\n    // OFFSET is an slot offset value which should not be sloaded, henced typed in uint256.\n\n    using WordHelper for bytes32;\n    using WordHelper for WordHelper.Word;\n\n    /**\n     * PROTOCOL\n     */\n\n    bytes32 constant PROTOCOL_SLOT = bytes32(uint256(100));\n    uint256 constant PROTOCOL_POOLS_MAPPING_OFFSET = 0;\n    uint256 constant PROTOCOL_COLLATERALS_MAPPING_OFFSET = 1;\n    uint256 constant PROTOCOL_SETTLEMENT_TOKEN_OFFSET = 3;\n    uint256 constant PROTOCOL_VQUOTE_OFFSET = 4;\n    uint256 constant PROTOCOL_LIQUIDATION_PARAMS_STRUCT_OFFSET = 5;\n    uint256 constant PROTOCOL_MINIMUM_REQUIRED_MARGIN_OFFSET = 6;\n    uint256 constant PROTOCOL_REMOVE_LIMIT_ORDER_FEE_OFFSET = 7;\n    uint256 constant PROTOCOL_MINIMUM_ORDER_NOTIONAL_OFFSET = 8;\n\n    function _decodeLiquidationParamsSlot(bytes32 data)\n        internal\n        pure\n        returns (IClearingHouse.LiquidationParams memory liquidationParams)\n    {\n        WordHelper.Word memory result = data.copyToMemory();\n        liquidationParams.rangeLiquidationFeeFraction = result.popUint16();\n        liquidationParams.tokenLiquidationFeeFraction = result.popUint16();\n        liquidationParams.closeFactorMMThresholdBps = result.popUint16();\n        liquidationParams.partialLiquidationCloseFactorBps = result.popUint16();\n        liquidationParams.insuranceFundFeeShareBps = result.popUint16();\n        liquidationParams.liquidationSlippageSqrtToleranceBps = result.popUint16();\n        liquidationParams.maxRangeLiquidationFees = result.popUint64();\n        liquidationParams.minNotionalLiquidatable = result.popUint64();\n    }\n\n    /// @notice Gets the protocol info, global protocol settings\n    /// @return settlementToken the token in which profit is settled\n    /// @return vQuote the vQuote token contract\n    /// @return liquidationParams the liquidation parameters\n    /// @return minRequiredMargin minimum required margin an account has to keep with non-zero netPosition\n    /// @return removeLimitOrderFee the fee charged for using removeLimitOrder service\n    /// @return minimumOrderNotional the minimum order notional\n    function getProtocolInfo(IClearingHouse clearingHouse)\n        internal\n        view\n        returns (\n            IERC20 settlementToken,\n            IVQuote vQuote,\n            IClearingHouse.LiquidationParams memory liquidationParams,\n            uint256 minRequiredMargin,\n            uint256 removeLimitOrderFee,\n            uint256 minimumOrderNotional\n        )\n    {\n        bytes32[] memory arr = new bytes32[](6);\n        arr[0] = PROTOCOL_SLOT.offset(PROTOCOL_SETTLEMENT_TOKEN_OFFSET);\n        arr[1] = PROTOCOL_SLOT.offset(PROTOCOL_VQUOTE_OFFSET);\n        arr[2] = PROTOCOL_SLOT.offset(PROTOCOL_LIQUIDATION_PARAMS_STRUCT_OFFSET);\n        arr[3] = PROTOCOL_SLOT.offset(PROTOCOL_MINIMUM_REQUIRED_MARGIN_OFFSET);\n        arr[4] = PROTOCOL_SLOT.offset(PROTOCOL_REMOVE_LIMIT_ORDER_FEE_OFFSET);\n        arr[5] = PROTOCOL_SLOT.offset(PROTOCOL_MINIMUM_ORDER_NOTIONAL_OFFSET);\n        arr = clearingHouse.extsload(arr);\n        settlementToken = IERC20(arr[0].toAddress());\n        vQuote = IVQuote(arr[1].toAddress());\n        liquidationParams = _decodeLiquidationParamsSlot(arr[2]);\n        minRequiredMargin = arr[3].toUint256();\n        removeLimitOrderFee = arr[4].toUint256();\n        minimumOrderNotional = arr[5].toUint256();\n    }\n\n    /**\n     * PROTOCOL POOLS MAPPING\n     */\n\n    uint256 constant POOL_VTOKEN_OFFSET = 0;\n    uint256 constant POOL_VPOOL_OFFSET = 1;\n    uint256 constant POOL_VPOOLWRAPPER_OFFSET = 2;\n    uint256 constant POOL_SETTINGS_STRUCT_OFFSET = 3;\n\n    function poolStructSlot(uint32 poolId) internal pure returns (bytes32) {\n        return\n            WordHelper.keccak256Two({\n                mappingSlot: PROTOCOL_SLOT.offset(PROTOCOL_POOLS_MAPPING_OFFSET),\n                paddedKey: WordHelper.fromUint(poolId)\n            });\n    }\n\n    function _decodePoolSettingsSlot(bytes32 data) internal pure returns (IClearingHouse.PoolSettings memory settings) {\n        WordHelper.Word memory result = data.copyToMemory();\n        settings.initialMarginRatioBps = result.popUint16();\n        settings.maintainanceMarginRatioBps = result.popUint16();\n        settings.maxVirtualPriceDeviationRatioBps = result.popUint16();\n        settings.twapDuration = result.popUint32();\n        settings.isAllowedForTrade = result.popBool();\n        settings.isCrossMargined = result.popBool();\n        settings.oracle = IOracle(result.popAddress());\n    }\n\n    /// @notice Gets the info about a supported pool in the protocol\n    /// @param poolId the id of the pool\n    /// @return pool the Pool struct\n    function getPoolInfo(IClearingHouse clearingHouse, uint32 poolId)\n        internal\n        view\n        returns (IClearingHouse.Pool memory pool)\n    {\n        bytes32 POOL_SLOT = poolStructSlot(poolId);\n        bytes32[] memory arr = new bytes32[](4);\n        arr[0] = POOL_SLOT; // POOL_VTOKEN_OFFSET\n        arr[1] = POOL_SLOT.offset(POOL_VPOOL_OFFSET);\n        arr[2] = POOL_SLOT.offset(POOL_VPOOLWRAPPER_OFFSET);\n        arr[3] = POOL_SLOT.offset(POOL_SETTINGS_STRUCT_OFFSET);\n        arr = clearingHouse.extsload(arr);\n        pool.vToken = IVToken(arr[0].toAddress());\n        pool.vPool = IUniswapV3Pool(arr[1].toAddress());\n        pool.vPoolWrapper = IVPoolWrapper(arr[2].toAddress());\n        pool.settings = _decodePoolSettingsSlot(arr[3]);\n    }\n\n    function getVPool(IClearingHouse clearingHouse, uint32 poolId) internal view returns (IUniswapV3Pool vPool) {\n        bytes32 result = clearingHouse.extsload(poolStructSlot(poolId).offset(POOL_VPOOL_OFFSET));\n        assembly {\n            vPool := result\n        }\n    }\n\n    function getPoolSettings(IClearingHouse clearingHouse, uint32 poolId)\n        internal\n        view\n        returns (IClearingHouse.PoolSettings memory)\n    {\n        bytes32 SETTINGS_SLOT = poolStructSlot(poolId).offset(POOL_SETTINGS_STRUCT_OFFSET);\n        return _decodePoolSettingsSlot(clearingHouse.extsload(SETTINGS_SLOT));\n    }\n\n    function getTwapDuration(IClearingHouse clearingHouse, uint32 poolId) internal view returns (uint32 twapDuration) {\n        bytes32 result = clearingHouse.extsload(poolStructSlot(poolId).offset(POOL_SETTINGS_STRUCT_OFFSET));\n        twapDuration = result.slice(0x30, 0x50).toUint32();\n    }\n\n    function getVPoolAndTwapDuration(IClearingHouse clearingHouse, uint32 poolId)\n        internal\n        view\n        returns (IUniswapV3Pool vPool, uint32 twapDuration)\n    {\n        bytes32[] memory arr = new bytes32[](2);\n\n        bytes32 POOL_SLOT = poolStructSlot(poolId);\n        arr[0] = POOL_SLOT.offset(POOL_VPOOL_OFFSET); // vPool\n        arr[1] = POOL_SLOT.offset(POOL_SETTINGS_STRUCT_OFFSET); // settings\n        arr = clearingHouse.extsload(arr);\n\n        vPool = IUniswapV3Pool(arr[0].toAddress());\n        twapDuration = arr[1].slice(0xB0, 0xD0).toUint32();\n    }\n\n    /// @notice Checks if a poolId is unused\n    /// @param poolId the id of the pool\n    /// @return true if the poolId is unused, false otherwise\n    function isPoolIdAvailable(IClearingHouse clearingHouse, uint32 poolId) internal view returns (bool) {\n        bytes32 VTOKEN_SLOT = poolStructSlot(poolId).offset(POOL_VTOKEN_OFFSET);\n        bytes32 result = clearingHouse.extsload(VTOKEN_SLOT);\n        return result == WordHelper.fromUint(0);\n    }\n\n    /**\n     * PROTOCOL COLLATERALS MAPPING\n     */\n\n    uint256 constant COLLATERAL_TOKEN_OFFSET = 0;\n    uint256 constant COLLATERAL_SETTINGS_OFFSET = 1;\n\n    function collateralStructSlot(uint32 collateralId) internal pure returns (bytes32) {\n        return\n            WordHelper.keccak256Two({\n                mappingSlot: PROTOCOL_SLOT.offset(PROTOCOL_COLLATERALS_MAPPING_OFFSET),\n                paddedKey: WordHelper.fromUint(collateralId)\n            });\n    }\n\n    function _decodeCollateralSettings(bytes32 data)\n        internal\n        pure\n        returns (IClearingHouse.CollateralSettings memory settings)\n    {\n        WordHelper.Word memory result = data.copyToMemory();\n        settings.oracle = IOracle(result.popAddress());\n        settings.twapDuration = result.popUint32();\n        settings.isAllowedForDeposit = result.popBool();\n    }\n\n    /// @notice Gets the info about a supported collateral in the protocol\n    /// @param collateralId the id of the collateral\n    /// @return collateral the Collateral struct\n    function getCollateralInfo(IClearingHouse clearingHouse, uint32 collateralId)\n        internal\n        view\n        returns (IClearingHouse.Collateral memory collateral)\n    {\n        bytes32[] memory arr = new bytes32[](2);\n        bytes32 COLLATERAL_STRUCT_SLOT = collateralStructSlot(collateralId);\n        arr[0] = COLLATERAL_STRUCT_SLOT; // COLLATERAL_TOKEN_OFFSET\n        arr[1] = COLLATERAL_STRUCT_SLOT.offset(COLLATERAL_SETTINGS_OFFSET);\n        arr = clearingHouse.extsload(arr);\n        collateral.token = IVToken(arr[0].toAddress());\n        collateral.settings = _decodeCollateralSettings(arr[1]);\n    }\n\n    /**\n     * ACCOUNT MAPPING\n     */\n    bytes32 constant ACCOUNTS_MAPPING_SLOT = bytes32(uint256(211));\n    uint256 constant ACCOUNT_ID_OWNER_OFFSET = 0;\n    uint256 constant ACCOUNT_VTOKENPOSITIONS_ACTIVE_SET_OFFSET = 1;\n    uint256 constant ACCOUNT_VTOKENPOSITIONS_MAPPING_OFFSET = 2;\n    uint256 constant ACCOUNT_VQUOTE_BALANCE_OFFSET = 3;\n    uint256 constant ACCOUNT_COLLATERAL_ACTIVE_SET_OFFSET = 104;\n    uint256 constant ACCOUNT_COLLATERAL_MAPPING_OFFSET = 105;\n\n    // VTOKEN POSITION STRUCT\n    uint256 constant ACCOUNT_VTOKENPOSITION_BALANCE_OFFSET = 0;\n    uint256 constant ACCOUNT_VTOKENPOSITION_NET_TRADER_POSITION_OFFSET = 1;\n    uint256 constant ACCOUNT_VTOKENPOSITION_SUM_A_LAST_OFFSET = 2;\n    uint256 constant ACCOUNT_VTOKENPOSITION_LIQUIDITY_ACTIVE_OFFSET = 3;\n    uint256 constant ACCOUNT_VTOKENPOSITION_LIQUIDITY_MAPPING_OFFSET = 4;\n\n    // LIQUIDITY POSITION STRUCT\n    uint256 constant ACCOUNT_TP_LP_SLOT0_OFFSET = 0; // limit order type, tl, tu, liquidity\n    uint256 constant ACCOUNT_TP_LP_VTOKEN_AMOUNTIN_OFFSET = 1;\n    uint256 constant ACCOUNT_TP_LP_SUM_A_LAST_OFFSET = 2;\n    uint256 constant ACCOUNT_TP_LP_SUM_B_LAST_OFFSET = 3;\n    uint256 constant ACCOUNT_TP_LP_SUM_FP_LAST_OFFSET = 4;\n    uint256 constant ACCOUNT_TP_LP_SUM_FEE_LAST_OFFSET = 5;\n\n    function accountStructSlot(uint256 accountId) internal pure returns (bytes32) {\n        return\n            WordHelper.keccak256Two({ mappingSlot: ACCOUNTS_MAPPING_SLOT, paddedKey: WordHelper.fromUint(accountId) });\n    }\n\n    function accountCollateralStructSlot(bytes32 ACCOUNT_STRUCT_SLOT, uint32 collateralId)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            WordHelper.keccak256Two({\n                mappingSlot: ACCOUNT_STRUCT_SLOT.offset(ACCOUNT_COLLATERAL_MAPPING_OFFSET),\n                paddedKey: WordHelper.fromUint(collateralId)\n            });\n    }\n\n    function accountVTokenPositionStructSlot(bytes32 ACCOUNT_STRUCT_SLOT, uint32 poolId)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            WordHelper.keccak256Two({\n                mappingSlot: ACCOUNT_STRUCT_SLOT.offset(ACCOUNT_VTOKENPOSITIONS_MAPPING_OFFSET),\n                paddedKey: WordHelper.fromUint(poolId)\n            });\n    }\n\n    function accountLiquidityPositionStructSlot(\n        bytes32 ACCOUNT_VTOKENPOSITION_STRUCT_SLOT,\n        int24 tickLower,\n        int24 tickUpper\n    ) internal pure returns (bytes32) {\n        return\n            WordHelper.keccak256Two({\n                mappingSlot: ACCOUNT_VTOKENPOSITION_STRUCT_SLOT.offset(ACCOUNT_VTOKENPOSITION_LIQUIDITY_MAPPING_OFFSET),\n                paddedKey: WordHelper.fromUint(Uint48Lib.concat(tickLower, tickUpper))\n            });\n    }\n\n    function getAccountInfo(IClearingHouse clearingHouse, uint256 accountId)\n        internal\n        view\n        returns (\n            address owner,\n            int256 vQuoteBalance,\n            uint32[] memory activeCollateralIds,\n            uint32[] memory activePoolIds\n        )\n    {\n        bytes32[] memory arr = new bytes32[](4);\n        bytes32 ACCOUNT_SLOT = accountStructSlot(accountId);\n        arr[0] = ACCOUNT_SLOT; // ACCOUNT_ID_OWNER_OFFSET\n        arr[1] = ACCOUNT_SLOT.offset(ACCOUNT_VQUOTE_BALANCE_OFFSET);\n        arr[2] = ACCOUNT_SLOT.offset(ACCOUNT_COLLATERAL_ACTIVE_SET_OFFSET);\n        arr[3] = ACCOUNT_SLOT.offset(ACCOUNT_VTOKENPOSITIONS_ACTIVE_SET_OFFSET);\n\n        arr = clearingHouse.extsload(arr);\n\n        owner = arr[0].slice(0, 160).toAddress();\n        vQuoteBalance = arr[1].toInt256();\n        activeCollateralIds = arr[2].convertToUint32Array();\n        activePoolIds = arr[3].convertToUint32Array();\n    }\n\n    function getAccountCollateralInfo(\n        IClearingHouse clearingHouse,\n        uint256 accountId,\n        uint32 collateralId\n    ) internal view returns (IERC20 collateral, uint256 balance) {\n        bytes32[] memory arr = new bytes32[](2);\n        arr[0] = accountCollateralStructSlot(accountStructSlot(accountId), collateralId); // ACCOUNT_COLLATERAL_BALANCE_SLOT\n        arr[1] = collateralStructSlot(collateralId); // COLLATERAL_TOKEN_ADDRESS_SLOT\n\n        arr = clearingHouse.extsload(arr);\n\n        balance = arr[0].toUint256();\n        collateral = IERC20(arr[1].toAddress());\n    }\n\n    function getAccountCollateralBalance(\n        IClearingHouse clearingHouse,\n        uint256 accountId,\n        uint32 collateralId\n    ) internal view returns (uint256 balance) {\n        bytes32 COLLATERAL_BALANCE_SLOT = accountCollateralStructSlot(accountStructSlot(accountId), collateralId);\n\n        balance = clearingHouse.extsload(COLLATERAL_BALANCE_SLOT).toUint256();\n    }\n\n    function getAccountTokenPositionInfo(\n        IClearingHouse clearingHouse,\n        uint256 accountId,\n        uint32 poolId\n    )\n        internal\n        view\n        returns (\n            int256 balance,\n            int256 netTraderPosition,\n            int256 sumALastX128\n        )\n    {\n        bytes32 VTOKEN_POSITION_STRUCT_SLOT = accountVTokenPositionStructSlot(accountStructSlot(accountId), poolId);\n\n        bytes32[] memory arr = new bytes32[](3);\n        arr[0] = VTOKEN_POSITION_STRUCT_SLOT; // BALANCE\n        arr[1] = VTOKEN_POSITION_STRUCT_SLOT.offset(ACCOUNT_VTOKENPOSITION_NET_TRADER_POSITION_OFFSET);\n        arr[2] = VTOKEN_POSITION_STRUCT_SLOT.offset(ACCOUNT_VTOKENPOSITION_SUM_A_LAST_OFFSET);\n\n        arr = clearingHouse.extsload(arr);\n\n        balance = arr[0].toInt256();\n        netTraderPosition = arr[1].toInt256();\n        sumALastX128 = arr[2].toInt256();\n    }\n\n    function getAccountPositionInfo(\n        IClearingHouse clearingHouse,\n        uint256 accountId,\n        uint32 poolId\n    )\n        internal\n        view\n        returns (\n            int256 balance,\n            int256 netTraderPosition,\n            int256 sumALastX128,\n            IClearingHouse.TickRange[] memory activeTickRanges\n        )\n    {\n        bytes32 VTOKEN_POSITION_STRUCT_SLOT = accountVTokenPositionStructSlot(accountStructSlot(accountId), poolId);\n\n        bytes32[] memory arr = new bytes32[](4);\n        arr[0] = VTOKEN_POSITION_STRUCT_SLOT; // BALANCE\n        arr[1] = VTOKEN_POSITION_STRUCT_SLOT.offset(ACCOUNT_VTOKENPOSITION_NET_TRADER_POSITION_OFFSET);\n        arr[2] = VTOKEN_POSITION_STRUCT_SLOT.offset(ACCOUNT_VTOKENPOSITION_SUM_A_LAST_OFFSET);\n        arr[3] = VTOKEN_POSITION_STRUCT_SLOT.offset(ACCOUNT_VTOKENPOSITION_LIQUIDITY_ACTIVE_OFFSET);\n\n        arr = clearingHouse.extsload(arr);\n\n        balance = arr[0].toInt256();\n        netTraderPosition = arr[1].toInt256();\n        sumALastX128 = arr[2].toInt256();\n        activeTickRanges = arr[3].convertToTickRangeArray();\n    }\n\n    function getAccountLiquidityPositionList(\n        IClearingHouse clearingHouse,\n        uint256 accountId,\n        uint32 poolId\n    ) internal view returns (IClearingHouse.TickRange[] memory activeTickRanges) {\n        return\n            clearingHouse\n                .extsload(\n                    accountVTokenPositionStructSlot(accountStructSlot(accountId), poolId).offset(\n                        ACCOUNT_VTOKENPOSITION_LIQUIDITY_ACTIVE_OFFSET\n                    )\n                )\n                .convertToTickRangeArray();\n    }\n\n    function getAccountLiquidityPositionInfo(\n        IClearingHouse clearingHouse,\n        uint256 accountId,\n        uint32 poolId,\n        int24 tickLower,\n        int24 tickUpper\n    )\n        internal\n        view\n        returns (\n            uint8 limitOrderType,\n            uint128 liquidity,\n            int256 vTokenAmountIn,\n            int256 sumALastX128,\n            int256 sumBInsideLastX128,\n            int256 sumFpInsideLastX128,\n            uint256 sumFeeInsideLastX128\n        )\n    {\n        bytes32 LIQUIDITY_POSITION_STRUCT_SLOT = accountLiquidityPositionStructSlot(\n            accountVTokenPositionStructSlot(accountStructSlot(accountId), poolId),\n            tickLower,\n            tickUpper\n        );\n\n        bytes32[] memory arr = new bytes32[](6);\n        arr[0] = LIQUIDITY_POSITION_STRUCT_SLOT; // BALANCE\n        arr[1] = LIQUIDITY_POSITION_STRUCT_SLOT.offset(ACCOUNT_TP_LP_VTOKEN_AMOUNTIN_OFFSET);\n        arr[2] = LIQUIDITY_POSITION_STRUCT_SLOT.offset(ACCOUNT_TP_LP_SUM_A_LAST_OFFSET);\n        arr[3] = LIQUIDITY_POSITION_STRUCT_SLOT.offset(ACCOUNT_TP_LP_SUM_B_LAST_OFFSET);\n        arr[4] = LIQUIDITY_POSITION_STRUCT_SLOT.offset(ACCOUNT_TP_LP_SUM_FP_LAST_OFFSET);\n        arr[5] = LIQUIDITY_POSITION_STRUCT_SLOT.offset(ACCOUNT_TP_LP_SUM_FEE_LAST_OFFSET);\n\n        arr = clearingHouse.extsload(arr);\n\n        WordHelper.Word memory slot0 = arr[0].copyToMemory();\n        limitOrderType = slot0.popUint8();\n        slot0.pop(48); // discard 48 bits\n        liquidity = slot0.popUint128();\n        vTokenAmountIn = arr[1].toInt256();\n        sumALastX128 = arr[2].toInt256();\n        sumBInsideLastX128 = arr[3].toInt256();\n        sumFpInsideLastX128 = arr[4].toInt256();\n        sumFeeInsideLastX128 = arr[5].toUint256();\n    }\n\n    function _getProtocolSlot() internal pure returns (bytes32) {\n        return PROTOCOL_SLOT;\n    }\n\n    function _getProtocolOffsets()\n        internal\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            PROTOCOL_POOLS_MAPPING_OFFSET,\n            PROTOCOL_COLLATERALS_MAPPING_OFFSET,\n            PROTOCOL_SETTLEMENT_TOKEN_OFFSET,\n            PROTOCOL_VQUOTE_OFFSET,\n            PROTOCOL_LIQUIDATION_PARAMS_STRUCT_OFFSET,\n            PROTOCOL_MINIMUM_REQUIRED_MARGIN_OFFSET,\n            PROTOCOL_REMOVE_LIMIT_ORDER_FEE_OFFSET,\n            PROTOCOL_MINIMUM_ORDER_NOTIONAL_OFFSET\n        );\n    }\n\n    function _getPoolOffsets()\n        internal\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (POOL_VTOKEN_OFFSET, POOL_VPOOL_OFFSET, POOL_VPOOLWRAPPER_OFFSET, POOL_SETTINGS_STRUCT_OFFSET);\n    }\n\n    function _getCollateralOffsets() internal pure returns (uint256, uint256) {\n        return (COLLATERAL_TOKEN_OFFSET, COLLATERAL_SETTINGS_OFFSET);\n    }\n\n    function _getAccountsMappingSlot() internal pure returns (bytes32) {\n        return ACCOUNTS_MAPPING_SLOT;\n    }\n\n    function _getAccountOffsets()\n        internal\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            ACCOUNT_ID_OWNER_OFFSET,\n            ACCOUNT_VTOKENPOSITIONS_ACTIVE_SET_OFFSET,\n            ACCOUNT_VTOKENPOSITIONS_MAPPING_OFFSET,\n            ACCOUNT_VQUOTE_BALANCE_OFFSET,\n            ACCOUNT_COLLATERAL_ACTIVE_SET_OFFSET,\n            ACCOUNT_COLLATERAL_MAPPING_OFFSET\n        );\n    }\n\n    function _getVTokenPositionOffsets()\n        internal\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            ACCOUNT_VTOKENPOSITION_BALANCE_OFFSET,\n            ACCOUNT_VTOKENPOSITION_NET_TRADER_POSITION_OFFSET,\n            ACCOUNT_VTOKENPOSITION_SUM_A_LAST_OFFSET,\n            ACCOUNT_VTOKENPOSITION_LIQUIDITY_ACTIVE_OFFSET,\n            ACCOUNT_VTOKENPOSITION_LIQUIDITY_MAPPING_OFFSET\n        );\n    }\n\n    function _getLiquidityPositionOffsets()\n        internal\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            ACCOUNT_TP_LP_SLOT0_OFFSET,\n            ACCOUNT_TP_LP_VTOKEN_AMOUNTIN_OFFSET,\n            ACCOUNT_TP_LP_SUM_A_LAST_OFFSET,\n            ACCOUNT_TP_LP_SUM_B_LAST_OFFSET,\n            ACCOUNT_TP_LP_SUM_FP_LAST_OFFSET,\n            ACCOUNT_TP_LP_SUM_FEE_LAST_OFFSET\n        );\n    }\n}\n"
    },
    "@ragetrade/core/contracts/libraries/UniswapV3PoolHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.4;\n\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\n\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\n/// @title UniswapV3Pool helper functions\nlibrary UniswapV3PoolHelper {\n    using UniswapV3PoolHelper for IUniswapV3Pool;\n\n    error UV3PH_OracleConsultFailed();\n\n    /// @notice Get the pool's current tick\n    /// @param v3Pool The uniswap v3 pool contract\n    /// @return tick the current tick\n    function tickCurrent(IUniswapV3Pool v3Pool) internal view returns (int24 tick) {\n        (, tick, , , , , ) = v3Pool.slot0();\n    }\n\n    /// @notice Get the pool's current sqrt price\n    /// @param v3Pool The uniswap v3 pool contract\n    /// @return sqrtPriceX96 the current sqrt price\n    function sqrtPriceCurrent(IUniswapV3Pool v3Pool) internal view returns (uint160 sqrtPriceX96) {\n        (sqrtPriceX96, , , , , , ) = v3Pool.slot0();\n    }\n\n    /// @notice Get twap price for uniswap v3 pool\n    /// @param v3Pool The uniswap v3 pool contract\n    /// @param twapDuration The twap period\n    /// @return sqrtPriceX96 the twap price\n    function twapSqrtPrice(IUniswapV3Pool v3Pool, uint32 twapDuration) internal view returns (uint160 sqrtPriceX96) {\n        int24 _twapTick = v3Pool.twapTick(twapDuration);\n        sqrtPriceX96 = TickMath.getSqrtRatioAtTick(_twapTick);\n    }\n\n    /// @notice Get twap tick for uniswap v3 pool\n    /// @param v3Pool The uniswap v3 pool contract\n    /// @param twapDuration The twap period\n    /// @return _twapTick the twap tick\n    function twapTick(IUniswapV3Pool v3Pool, uint32 twapDuration) internal view returns (int24 _twapTick) {\n        if (twapDuration == 0) {\n            return v3Pool.tickCurrent();\n        }\n\n        uint32[] memory secondAgos = new uint32[](2);\n        secondAgos[0] = twapDuration;\n        secondAgos[1] = 0;\n\n        // this call will fail if period is bigger than MaxObservationPeriod\n        try v3Pool.observe(secondAgos) returns (int56[] memory tickCumulatives, uint160[] memory) {\n            int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n            int24 timeWeightedAverageTick = int24(tickCumulativesDelta / int56(uint56(twapDuration)));\n\n            // Always round to negative infinity\n            if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56(uint56(twapDuration)) != 0)) {\n                timeWeightedAverageTick--;\n            }\n            return timeWeightedAverageTick;\n        } catch {\n            // if for some reason v3Pool.observe fails, fallback to the current tick\n            (, _twapTick, , , , , ) = v3Pool.slot0();\n        }\n    }\n}\n"
    },
    "@ragetrade/core/contracts/libraries/SignedFullMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\n\nimport { SignedMath } from './SignedMath.sol';\n\n/// @title Signed full math functions\nlibrary SignedFullMath {\n    using SafeCast for uint256;\n    using SignedMath for int256;\n\n    /// @notice uses full math on signed int and two unsigned ints\n    /// @param a: signed int\n    /// @param b: unsigned int to be multiplied by\n    /// @param denominator: unsigned int to be divided by\n    /// @return result of a * b / denominator\n    function mulDiv(\n        int256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (int256 result) {\n        result = FullMath.mulDiv(a < 0 ? uint256(-1 * a) : uint256(a), b, denominator).toInt256();\n        if (a < 0) {\n            result = -result;\n        }\n    }\n\n    /// @notice uses full math on three signed ints\n    /// @param a: signed int\n    /// @param b: signed int to be multiplied by\n    /// @param denominator: signed int to be divided by\n    /// @return result of a * b / denominator\n    function mulDiv(\n        int256 a,\n        int256 b,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        bool resultPositive = true;\n        uint256 _a;\n        uint256 _b;\n        uint256 _denominator;\n\n        (_a, resultPositive) = a.extractSign(resultPositive);\n        (_b, resultPositive) = b.extractSign(resultPositive);\n        (_denominator, resultPositive) = denominator.extractSign(resultPositive);\n\n        result = FullMath.mulDiv(_a, _b, _denominator).toInt256();\n        if (!resultPositive) {\n            result = -result;\n        }\n    }\n\n    /// @notice rounds down towards negative infinity\n    /// @dev in Solidity -3/2 is -1. But this method result is -2\n    /// @param a: signed int\n    /// @param b: unsigned int to be multiplied by\n    /// @param denominator: unsigned int to be divided by\n    /// @return result of a * b / denominator rounded towards negative infinity\n    function mulDivRoundingDown(\n        int256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (int256 result) {\n        result = mulDiv(a, b, denominator);\n        if (result < 0 && _hasRemainder(a.absUint(), b, denominator)) {\n            result += -1;\n        }\n    }\n\n    /// @notice rounds down towards negative infinity\n    /// @dev in Solidity -3/2 is -1. But this method result is -2\n    /// @param a: signed int\n    /// @param b: signed int to be multiplied by\n    /// @param denominator: signed int to be divided by\n    /// @return result of a * b / denominator rounded towards negative infinity\n    function mulDivRoundingDown(\n        int256 a,\n        int256 b,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        result = mulDiv(a, b, denominator);\n        if (result < 0 && _hasRemainder(a.absUint(), b.absUint(), denominator.absUint())) {\n            result += -1;\n        }\n    }\n\n    /// @notice checks if full multiplication of a & b would have a remainder if divided by denominator\n    /// @param a: multiplicand\n    /// @param b: multiplier\n    /// @param denominator: divisor\n    /// @return hasRemainder true if there is a remainder, false otherwise\n    function _hasRemainder(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) private pure returns (bool hasRemainder) {\n        assembly {\n            let remainder := mulmod(a, b, denominator)\n            if gt(remainder, 0) {\n                hasRemainder := 1\n            }\n        }\n    }\n}\n"
    },
    "@ragetrade/core/contracts/libraries/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nint256 constant ONE = 1;\n\n/// @title Signed math functions\nlibrary SignedMath {\n    /// @notice gives the absolute value of a signed int\n    /// @param value signed int\n    /// @return absolute value of signed int\n    function abs(int256 value) internal pure returns (int256) {\n        return value > 0 ? value : -value;\n    }\n\n    /// @notice gives the absolute value of a signed int\n    /// @param value signed int\n    /// @return absolute value of signed int as unsigned int\n    function absUint(int256 value) internal pure returns (uint256) {\n        return uint256(abs(value));\n    }\n\n    /// @notice gives the sign of a signed int\n    /// @param value signed int\n    /// @return -1 if negative, 1 if non-negative\n    function sign(int256 value) internal pure returns (int256) {\n        return value >= 0 ? ONE : -ONE;\n    }\n\n    /// @notice converts a signed integer into an unsigned integer and inverts positive bool if negative\n    /// @param a signed int\n    /// @param positive initial value of positive bool\n    /// @return _a absolute value of int provided\n    /// @return bool xor of the positive boolean and sign of the provided int\n    function extractSign(int256 a, bool positive) internal pure returns (uint256 _a, bool) {\n        if (a < 0) {\n            positive = !positive;\n            _a = uint256(-a);\n        } else {\n            _a = uint256(a);\n        }\n        return (_a, positive);\n    }\n\n    /// @notice extracts the sign of a signed int\n    /// @param a signed int\n    /// @return _a unsigned int\n    /// @return bool sign of the provided int\n    function extractSign(int256 a) internal pure returns (uint256 _a, bool) {\n        return extractSign(a, true);\n    }\n\n    /// @notice returns the max of two int256 numbers\n    /// @param a first number\n    /// @param b second number\n    /// @return c = max of a and b\n    function max(int256 a, int256 b) internal pure returns (int256 c) {\n        if (a > b) c = a;\n        else c = b;\n    }\n}\n"
    },
    "@ragetrade/vaults/contracts/interfaces/curve/ICurveGauge.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.9;\n\n/* solhint-disable func-name-mixedcase */\n/* solhint-disable var-name-mixedcase */\n\ninterface ICurveGauge {\n    function deposit(uint256 _value) external;\n\n    function deposit(uint256 _value, address addr) external;\n\n    function balanceOf(address arg0) external view returns (uint256);\n\n    function withdraw(uint256 _value) external;\n\n    function withdraw(uint256 _value, bool claim_rewards) external;\n\n    function claim_rewards() external;\n\n    function claim_rewards(address addr) external;\n\n    function claimable_tokens(address addr) external returns (uint256);\n\n    function claimable_reward(address user, address token) external view returns (uint256);\n\n    function integrate_fraction(address arg0) external view returns (uint256);\n\n    function claimable_reward_write(address user, address token) external returns (uint256);\n}\n"
    },
    "@ragetrade/vaults/contracts/libraries/SwapManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.9;\n\nimport { ISwapRouter } from '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\nimport { ICurveStableSwap } from '../interfaces/curve/ICurveStableSwap.sol';\n\nimport { AggregatorV3Interface } from '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\n\n/* solhint-disable not-rely-on-time */\n\nlibrary SwapManager {\n    error CYS_NEGATIVE_CRV_PRICE();\n\n    uint256 internal constant MAX_BPS = 10_000;\n\n    function _getCrvPrice(AggregatorV3Interface crvOracle) internal view returns (uint256) {\n        (, int256 answer, , , ) = crvOracle.latestRoundData();\n        if (answer < 0) revert CYS_NEGATIVE_CRV_PRICE();\n        return (uint256(answer));\n    }\n\n    function swapUsdcToUsdtAndAddLiquidity(\n        uint256 amount,\n        uint256 slippage,\n        bytes memory path,\n        ISwapRouter uniV3Router,\n        ICurveStableSwap triCrypto\n    ) external {\n        uint256 minOut = (amount * (MAX_BPS - slippage)) / MAX_BPS;\n\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\n            path: path,\n            amountIn: amount,\n            amountOutMinimum: minOut,\n            recipient: address(this),\n            deadline: block.timestamp\n        });\n\n        uint256 usdtOut = uniV3Router.exactInput(params);\n\n        // USDT, WBTC, WETH\n        uint256[3] memory amounts = [usdtOut, uint256(0), uint256(0)];\n        triCrypto.add_liquidity(amounts, 0);\n    }\n\n    function swapUsdtToUsdc(\n        uint256 amount,\n        uint256 slippage,\n        bytes memory path,\n        ISwapRouter uniV3Router\n    ) external returns (uint256 usdcOut) {\n        uint256 minOut = (amount * (MAX_BPS - slippage)) / MAX_BPS;\n\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\n            path: path,\n            amountIn: amount,\n            amountOutMinimum: minOut,\n            recipient: address(this),\n            deadline: block.timestamp\n        });\n\n        usdcOut = uniV3Router.exactInput(params);\n    }\n\n    function swapCrvToUsdtAndAddLiquidity(\n        uint256 crvAmount,\n        uint256 crvSwapSlippageTolerance,\n        AggregatorV3Interface crvOracle,\n        bytes memory path,\n        ISwapRouter uniV3Router,\n        ICurveStableSwap triCrypto\n    ) external returns (uint256 usdtOut) {\n        uint256 minOut = (_getCrvPrice(crvOracle) * crvAmount * (MAX_BPS - crvSwapSlippageTolerance)) / MAX_BPS;\n        // should not underflow because crvAmount > crv swap threshold\n        minOut = ((minOut * (10**6)) / 10**18) / 10**8;\n\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\n            path: path,\n            amountIn: crvAmount,\n            amountOutMinimum: minOut,\n            recipient: address(this),\n            deadline: block.timestamp\n        });\n\n        usdtOut = uniV3Router.exactInput(params);\n\n        uint256[3] memory amounts = [usdtOut, uint256(0), uint256(0)];\n        triCrypto.add_liquidity(amounts, 0);\n    }\n}\n"
    },
    "@ragetrade/vaults/contracts/interfaces/curve/ILPPriceGetter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.9;\n\n/* solhint-disable func-name-mixedcase */\n\ninterface ILPPriceGetter {\n    function lp_price() external view returns (uint256);\n}\n"
    },
    "@ragetrade/vaults/contracts/interfaces/curve/ICurveStableSwap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.9;\n\n/* solhint-disable func-name-mixedcase */\n/* solhint-disable var-name-mixedcase */\n\ninterface ICurveStableSwap {\n    function get_virtual_price() external view returns (uint256);\n\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\n\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount) external;\n\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts) external;\n\n    function remove_liquidity_one_coin(\n        uint256 token_amount,\n        uint256 index,\n        uint256 min_amount\n    ) external;\n\n    function exchange(\n        int128 from,\n        int128 to,\n        uint256 _from_amount,\n        uint256 _min_to_amount\n    ) external;\n\n    function exchange(\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        bool\n    ) external;\n\n    function get_dy(\n        uint256,\n        uint256,\n        uint256\n    ) external view returns (uint256);\n\n    function balances(uint256) external view returns (uint256);\n\n    function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@ragetrade/core/contracts/libraries/WordHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\n\nimport { Uint48Lib } from '../libraries/Uint48.sol';\n\nlibrary WordHelper {\n    using WordHelper for bytes32;\n\n    struct Word {\n        bytes32 data;\n    }\n\n    // struct Word methods\n\n    function copyToMemory(bytes32 data) internal pure returns (Word memory) {\n        return Word(data);\n    }\n\n    function pop(Word memory input, uint256 bits) internal pure returns (uint256 value) {\n        (value, input.data) = pop(input.data, bits);\n    }\n\n    function popAddress(Word memory input) internal pure returns (address value) {\n        (value, input.data) = popAddress(input.data);\n    }\n\n    function popUint8(Word memory input) internal pure returns (uint8 value) {\n        (value, input.data) = popUint8(input.data);\n    }\n\n    function popUint16(Word memory input) internal pure returns (uint16 value) {\n        (value, input.data) = popUint16(input.data);\n    }\n\n    function popUint32(Word memory input) internal pure returns (uint32 value) {\n        (value, input.data) = popUint32(input.data);\n    }\n\n    function popUint64(Word memory input) internal pure returns (uint64 value) {\n        (value, input.data) = popUint64(input.data);\n    }\n\n    function popUint128(Word memory input) internal pure returns (uint128 value) {\n        (value, input.data) = popUint128(input.data);\n    }\n\n    function popBool(Word memory input) internal pure returns (bool value) {\n        (value, input.data) = popBool(input.data);\n    }\n\n    function slice(\n        Word memory input,\n        uint256 start,\n        uint256 end\n    ) internal pure returns (bytes32 val) {\n        return slice(input.data, start, end);\n    }\n\n    // primitive uint256 methods\n\n    function fromUint(uint256 input) internal pure returns (bytes32 output) {\n        assembly {\n            output := input\n        }\n    }\n\n    // primitive bytes32 methods\n\n    function keccak256One(bytes32 input) internal pure returns (bytes32 result) {\n        assembly {\n            mstore(0, input)\n            result := keccak256(0, 0x20)\n        }\n    }\n\n    function keccak256Two(bytes32 paddedKey, bytes32 mappingSlot) internal pure returns (bytes32 result) {\n        assembly {\n            mstore(0, paddedKey)\n            mstore(0x20, mappingSlot)\n            result := keccak256(0, 0x40)\n        }\n    }\n\n    function offset(bytes32 key, uint256 offset_) internal pure returns (bytes32) {\n        assembly {\n            key := add(key, offset_)\n        }\n        return key;\n    }\n\n    function slice(\n        bytes32 input,\n        uint256 start,\n        uint256 end\n    ) internal pure returns (bytes32 val) {\n        assembly {\n            val := shl(start, input)\n            val := shr(add(start, sub(256, end)), val)\n        }\n    }\n\n    /// @notice pops bits from the right side of the input\n    /// @dev E.g. input = 0x0102030405060708091011121314151617181920212223242526272829303132\n    ///          input.pop(16) -> 0x3132\n    ///          input.pop(16) -> 0x2930\n    ///          input -> 0x0000000001020304050607080910111213141516171819202122232425262728\n    /// @dev this does not throw on underflow, value returned would be zero\n    /// @param input the input bytes\n    /// @param bits the number of bits to pop\n    /// @return value of the popped bits\n    /// @return inputUpdated the input bytes shifted right by bits\n    function pop(bytes32 input, uint256 bits) internal pure returns (uint256 value, bytes32 inputUpdated) {\n        assembly {\n            let shift := sub(256, bits)\n            value := shr(shift, shl(shift, input))\n            inputUpdated := shr(bits, input)\n        }\n    }\n\n    function popAddress(bytes32 input) internal pure returns (address value, bytes32 inputUpdated) {\n        uint256 temp;\n        (temp, inputUpdated) = pop(input, 160);\n        assembly {\n            value := temp\n        }\n    }\n\n    function popUint8(bytes32 input) internal pure returns (uint8 value, bytes32 inputUpdated) {\n        uint256 temp;\n        (temp, inputUpdated) = pop(input, 8);\n        value = uint8(temp);\n    }\n\n    function popUint16(bytes32 input) internal pure returns (uint16 value, bytes32 inputUpdated) {\n        uint256 temp;\n        (temp, inputUpdated) = pop(input, 16);\n        value = uint16(temp);\n    }\n\n    function popUint32(bytes32 input) internal pure returns (uint32 value, bytes32 inputUpdated) {\n        uint256 temp;\n        (temp, inputUpdated) = pop(input, 32);\n        value = uint32(temp);\n    }\n\n    function popUint64(bytes32 input) internal pure returns (uint64 value, bytes32 inputUpdated) {\n        uint256 temp;\n        (temp, inputUpdated) = pop(input, 64);\n        value = uint64(temp);\n    }\n\n    function popUint128(bytes32 input) internal pure returns (uint128 value, bytes32 inputUpdated) {\n        uint256 temp;\n        (temp, inputUpdated) = pop(input, 128);\n        value = uint128(temp);\n    }\n\n    function popBool(bytes32 input) internal pure returns (bool value, bytes32 inputUpdated) {\n        uint256 temp;\n        (temp, inputUpdated) = pop(input, 8);\n        value = temp != 0;\n    }\n\n    function toAddress(bytes32 input) internal pure returns (address value) {\n        return address(toUint160(input));\n    }\n\n    function toUint8(bytes32 input) internal pure returns (uint8 value) {\n        return uint8(toUint256(input));\n    }\n\n    function toUint16(bytes32 input) internal pure returns (uint16 value) {\n        return uint16(toUint256(input));\n    }\n\n    function toUint32(bytes32 input) internal pure returns (uint32 value) {\n        return uint32(toUint256(input));\n    }\n\n    function toUint48(bytes32 input) internal pure returns (uint48 value) {\n        return uint48(toUint256(input));\n    }\n\n    function toUint64(bytes32 input) internal pure returns (uint64 value) {\n        return uint64(toUint256(input));\n    }\n\n    function toUint128(bytes32 input) internal pure returns (uint128 value) {\n        return uint128(toUint256(input));\n    }\n\n    function toUint160(bytes32 input) internal pure returns (uint160 value) {\n        return uint160(toUint256(input));\n    }\n\n    function toUint256(bytes32 input) internal pure returns (uint256 value) {\n        assembly {\n            value := input\n        }\n    }\n\n    function toInt256(bytes32 input) internal pure returns (int256 value) {\n        assembly {\n            value := input\n        }\n    }\n\n    function toBool(bytes32 input) internal pure returns (bool value) {\n        (value, ) = popBool(input);\n    }\n\n    bytes32 constant ZERO = bytes32(uint256(0));\n\n    function convertToUint32Array(bytes32 active) internal pure returns (uint32[] memory activeArr) {\n        unchecked {\n            uint256 i = 8;\n            while (i > 0) {\n                bytes32 id = active.slice((i - 1) * 32, i * 32);\n                if (id == ZERO) {\n                    break;\n                }\n                i--;\n            }\n            activeArr = new uint32[](8 - i);\n            while (i < 8) {\n                activeArr[7 - i] = active.slice(i * 32, (i + 1) * 32).toUint32();\n                i++;\n            }\n        }\n    }\n\n    function convertToTickRangeArray(bytes32 active)\n        internal\n        pure\n        returns (IClearingHouseStructures.TickRange[] memory activeArr)\n    {\n        unchecked {\n            uint256 i = 5;\n            while (i > 0) {\n                bytes32 id = active.slice((i - 1) * 48, i * 48);\n                if (id == ZERO) {\n                    break;\n                }\n                i--;\n            }\n            activeArr = new IClearingHouseStructures.TickRange[](5 - i);\n            while (i < 5) {\n                // 256 - 48 * 5 = 16\n                (int24 tickLower, int24 tickUpper) = Uint48Lib.unconcat(\n                    active.slice(16 + i * 48, 16 + (i + 1) * 48).toUint48()\n                );\n                activeArr[4 - i].tickLower = tickLower;\n                activeArr[4 - i].tickUpper = tickUpper;\n                i++;\n            }\n        }\n    }\n}\n"
    },
    "@ragetrade/core/contracts/libraries/Uint48.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\n/// @title Uint48 concating functions\nlibrary Uint48Lib {\n    /// @notice Packs two int24 values into uint48\n    /// @dev Used for concating two ticks into 48 bits value\n    /// @param val1 First 24 bits value\n    /// @param val2 Second 24 bits value\n    /// @return concatenated value\n    function concat(int24 val1, int24 val2) internal pure returns (uint48 concatenated) {\n        assembly {\n            concatenated := add(shl(24, val1), and(val2, 0x000000ffffff))\n        }\n    }\n\n    /// @notice Unpacks uint48 into two int24 values\n    /// @dev Used for unpacking 48 bits value into two 24 bits values\n    /// @param concatenated 48 bits value\n    /// @return val1 First 24 bits value\n    /// @return val2 Second 24 bits value\n    function unconcat(uint48 concatenated) internal pure returns (int24 val1, int24 val2) {\n        assembly {\n            val2 := concatenated\n            val1 := shr(24, concatenated)\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"
    },
    "@ragetrade/vaults/contracts/yieldStrategy/gmx/GMXBatchingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\n\nimport { SafeCast } from '../../libraries/SafeCast.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\n\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\n\nimport { IERC4626 } from 'contracts/interfaces/IERC4626.sol';\nimport { IGlpManager } from 'contracts/interfaces/gmx/IGlpManager.sol';\nimport { IRewardRouterV2 } from 'contracts/interfaces/gmx/IRewardRouterV2.sol';\nimport { IGMXBatchingManager } from 'contracts/interfaces/gmx/IGMXBatchingManager.sol';\n\ncontract GMXBatchingManager is IGMXBatchingManager, OwnableUpgradeable, PausableUpgradeable {\n    using FullMath for uint256;\n    using FullMath for uint128;\n    using SafeCast for uint256;\n\n    struct VaultBatchingState {\n        uint256 currentRound;\n        uint256 roundGlpBalance;\n        mapping(address => UserDeposit) userDeposits;\n        mapping(uint256 => RoundDeposit) roundDeposits;\n    }\n\n    uint256[100] private _gaps;\n\n    address public keeper;\n    address public stakingManager; // used for depositing harvested rewards\n\n    uint16 public vaultCount;\n    uint256 public stakingManagerGlpBalance;\n\n    IERC20 private sGlp;\n    IGlpManager private glpManager;\n    IRewardRouterV2 private rewardRouter;\n\n    mapping(IERC4626 => VaultBatchingState) public vaultBatchingState;\n\n    IERC4626[10] public vaults;\n\n    uint256[100] private _gaps2;\n\n    modifier onlyStakingManager() {\n        if (msg.sender != stakingManager) revert CallerNotStakingManager();\n        _;\n    }\n\n    modifier onlyKeeper() {\n        if (msg.sender != keeper) revert CallerNotKeeper();\n        _;\n    }\n\n    function initialize(\n        IERC20 _sGlp,\n        IRewardRouterV2 _rewardRouter,\n        IGlpManager _glpManager,\n        address _stakingManager,\n        address _keeper\n    ) external initializer {\n        __Ownable_init();\n        __Pausable_init();\n        __GMXBatchingManager_init(_sGlp, _rewardRouter, _glpManager, _stakingManager, _keeper);\n    }\n\n    /* solhint-disable-next-line func-name-mixedcase */\n    function __GMXBatchingManager_init(\n        IERC20 _sGlp,\n        IRewardRouterV2 _rewardRouter,\n        IGlpManager _glpManager,\n        address _stakingManager,\n        address _keeper\n    ) internal onlyInitializing {\n        sGlp = _sGlp;\n        rewardRouter = _rewardRouter;\n        glpManager = _glpManager;\n\n        stakingManager = _stakingManager;\n\n        keeper = _keeper;\n        emit KeeperUpdated(_keeper);\n    }\n\n    /// @notice grants the allowance to the vault to pull sGLP (via safeTransfer from in vault.deposit)\n    /// @dev allowance is granted while vault is added via addVault, this is only failsafe if that allowance is exhausted\n    /// @param gmxVault address of gmx vault\n    function grantAllowances(IERC4626 gmxVault) external onlyOwner {\n        _ensureVaultIsValid(gmxVault);\n        sGlp.approve(address(gmxVault), type(uint256).max);\n    }\n\n    /// @notice sets the keeper address (to pause & unpause deposits)\n    /// @param _keeper address of keeper\n    function setKeeper(address _keeper) external onlyOwner {\n        keeper = _keeper;\n        emit KeeperUpdated(_keeper);\n    }\n\n    /// @notice pauses deposits (to prevent DOS due to GMX 15 min cooldown)\n    function pauseDeposit() external onlyKeeper {\n        _pause();\n    }\n\n    /// @notice unpauses the deposit function\n    function unpauseDeposit() external onlyKeeper {\n        _unpause();\n    }\n\n    /// @notice convert the token into glp and obtain staked glp\n    /// @dev this function should be only called by staking manager\n    /// @param token address of input token (should be supported on gmx)\n    /// @param amount amount of token to be used\n    /// @param minUSDG minimum output of swap in terms of USDG\n    function depositToken(\n        address token,\n        uint256 amount,\n        uint256 minUSDG\n    ) external whenNotPaused onlyStakingManager returns (uint256 glpStaked) {\n        if (token == address(0)) revert InvalidInput(0x30);\n        if (amount == 0) revert InvalidInput(0x31);\n\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n\n        // Convert tokens to glp\n        glpStaked = _stakeGlp(token, amount, minUSDG);\n        stakingManagerGlpBalance += glpStaked.toUint128();\n\n        emit DepositToken(0, token, msg.sender, amount, glpStaked);\n    }\n\n    /// @notice convert the token into glp and obtain staked glp and deposits sGLP into vault\n    /// @param gmxVault address of vault in which sGLP should be deposited\n    /// @param token address of input token (should be supported on gmx)\n    /// @param amount amount of token to be used\n    /// @param minUSDG minimum output of swap in terms of USDG\n    /// @param receiver address which will receive shares from vault+\n    function depositToken(\n        IERC4626 gmxVault,\n        address token,\n        uint256 amount,\n        uint256 minUSDG,\n        address receiver\n    ) external whenNotPaused returns (uint256 glpStaked) {\n        if (token == address(0)) revert InvalidInput(0x20);\n        if (amount == 0) revert InvalidInput(0x21);\n        if (receiver == address(0)) revert InvalidInput(0x22);\n\n        // input vault address should be valid registered vault\n        _ensureVaultIsValid(gmxVault);\n\n        // Transfer Tokens To Manager\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n\n        VaultBatchingState storage state = vaultBatchingState[gmxVault];\n        UserDeposit storage userDeposit = state.userDeposits[receiver];\n        uint128 userGlpBalance = userDeposit.glpBalance;\n\n        //Convert previous round glp balance into unredeemed shares\n        uint256 userDepositRound = userDeposit.round;\n        if (userDepositRound < state.currentRound && userGlpBalance > 0) {\n            RoundDeposit storage roundDeposit = state.roundDeposits[userDepositRound];\n            userDeposit.unclaimedShares += userDeposit\n                .glpBalance\n                .mulDiv(roundDeposit.totalShares, roundDeposit.totalGlp)\n                .toUint128();\n            userGlpBalance = 0;\n        }\n\n        // Convert tokens to glp\n        glpStaked = _stakeGlp(token, amount, minUSDG);\n\n        //Update round and glp balance for current round\n        userDeposit.round = state.currentRound;\n        userDeposit.glpBalance = userGlpBalance + glpStaked.toUint128();\n        state.roundGlpBalance += glpStaked.toUint128();\n\n        emit DepositToken(state.currentRound, token, receiver, amount, glpStaked);\n    }\n\n    /// @notice executes batch and deposits into appropriate vault with/without minting shares\n    function executeBatchDeposit() external {\n        // Transfer vault glp directly\n        // Needs to be called only for StakingManager\n        if (stakingManagerGlpBalance > 0) {\n            uint256 glpToTransfer = stakingManagerGlpBalance;\n            stakingManagerGlpBalance = 0;\n            sGlp.transfer(address(stakingManager), glpToTransfer);\n            emit VaultDeposit(glpToTransfer);\n        }\n\n        for (uint256 i = 0; i < vaults.length; i++) {\n            IERC4626 vault = vaults[i];\n            if (address(vault) == address(0)) break;\n\n            _executeVaultUserBatchDeposit(vault);\n        }\n        // If the deposit is paused then unpause on execute batch deposit\n        if (paused()) {\n            _unpause();\n        }\n    }\n\n    function _executeVaultUserBatchDeposit(IERC4626 vault) internal {\n        VaultBatchingState storage state = vaultBatchingState[vault];\n\n        // Transfer user glp through deposit\n        if (state.roundGlpBalance > 0) {\n            uint256 totalShares = vault.deposit(state.roundGlpBalance, address(this));\n\n            // Update round data\n            state.roundDeposits[state.currentRound] = RoundDeposit(\n                state.roundGlpBalance.toUint128(),\n                totalShares.toUint128()\n            );\n\n            emit BatchDeposit(state.currentRound, state.roundGlpBalance, totalShares);\n\n            state.roundGlpBalance = 0;\n            ++state.currentRound;\n        }\n    }\n\n    /// @notice get the glp balance for a given vault and account address\n    /// @param gmxVault address of vault\n    /// @param account address of user\n    function glpBalance(IERC4626 gmxVault, address account) public view returns (uint256 balance) {\n        balance = vaultBatchingState[gmxVault].userDeposits[account].glpBalance;\n    }\n\n    /// @notice gives the combined pending glp balance from all registered vaults\n    /// @param account address of user\n    function glpBalanceAllVaults(address account) external view returns (uint256 balance) {\n        for (uint256 i; i < vaults.length; i++) {\n            balance += glpBalance(vaults[i], account);\n        }\n    }\n\n    /// @notice get the unclaimed shares for a given vault and account address\n    /// @param gmxVault address of vault\n    /// @param account address of user\n    function unclaimedShares(IERC4626 gmxVault, address account) external view returns (uint256 shares) {\n        shares = vaultBatchingState[gmxVault].userDeposits[account].unclaimedShares;\n    }\n\n    /// @notice claim the shares received from depositing batch\n    /// @param gmxVault address of vault (shares of this vault will be withdrawn)\n    /// @param receiver address of receiver\n    /// @param amount amount of shares\n    function claim(\n        IERC4626 gmxVault,\n        address receiver,\n        uint256 amount\n    ) external {\n        if (receiver == address(0)) revert InvalidInput(0x10);\n        if (amount == 0) revert InvalidInput(0x11);\n\n        VaultBatchingState storage state = vaultBatchingState[gmxVault];\n        UserDeposit storage userDeposit = state.userDeposits[msg.sender];\n        uint128 userUnclaimedShares = userDeposit.unclaimedShares;\n        uint128 userGlpBalance = userDeposit.glpBalance;\n        {\n            //Convert previous round glp balance into unredeemed shares\n            uint256 userDepositRound = userDeposit.round;\n            if (userDepositRound < state.currentRound && userGlpBalance > 0) {\n                RoundDeposit storage roundDeposit = state.roundDeposits[userDepositRound];\n                userUnclaimedShares += userGlpBalance\n                    .mulDiv(roundDeposit.totalShares, roundDeposit.totalGlp)\n                    .toUint128();\n                userDeposit.glpBalance = 0;\n            }\n        }\n        if (userUnclaimedShares < amount.toUint128()) revert InsufficientShares(userUnclaimedShares);\n        userDeposit.unclaimedShares = userUnclaimedShares - amount.toUint128();\n        IERC20(gmxVault).transfer(receiver, amount);\n\n        emit SharesClaimed(msg.sender, receiver, amount);\n    }\n\n    /// @notice gets the current active round\n    /// @param vault address of vault\n    function currentRound(IERC4626 vault) external view returns (uint256) {\n        return vaultBatchingState[vault].currentRound;\n    }\n\n    /// @notice get the glp balance for current active round\n    /// @param vault address of vault\n    function roundGlpBalance(IERC4626 vault) external view returns (uint256) {\n        return vaultBatchingState[vault].roundGlpBalance;\n    }\n\n    /// @notice get the state of user deposits\n    /// @param vault address of vault\n    /// @param account address of user\n    function userDeposits(IERC4626 vault, address account) external view returns (UserDeposit memory) {\n        return vaultBatchingState[vault].userDeposits[account];\n    }\n\n    /// @notice get the info for given vault and round\n    /// @param vault address of vault\n    /// @param round address of user\n    function roundDeposits(IERC4626 vault, uint256 round) external view returns (RoundDeposit memory) {\n        return vaultBatchingState[vault].roundDeposits[round];\n    }\n\n    /// @notice checks if vault is valid\n    /// @param vault address of vault\n    function isVaultValid(IERC4626 vault) external view returns (bool) {\n        return _isVaultValid(vault);\n    }\n\n    function _stakeGlp(\n        address token,\n        uint256 amount,\n        uint256 minUSDG\n    ) internal returns (uint256 glpStaked) {\n        // Convert tokens to glp and stake glp to obtain sGLP\n        IERC20(token).approve(address(glpManager), amount);\n        glpStaked = rewardRouter.mintAndStakeGlp(token, amount, minUSDG, 0);\n    }\n\n    /// @notice adds new vault to which deposits can be batched\n    /// @param vault address of vault\n    function addVault(IERC4626 vault) external onlyOwner {\n        if (vaultCount == vaults.length) revert VaultsLimitExceeded();\n        if (vaultBatchingState[vault].currentRound != 0) revert VaultAlreadyAdded();\n\n        vaultBatchingState[vault].currentRound = 1;\n        vaults[vaultCount] = vault;\n        ++vaultCount;\n\n        sGlp.approve(address(vault), type(uint256).max);\n\n        emit VaultAdded(address(vault));\n    }\n\n    function _ensureVaultIsValid(IERC4626 vault) internal view {\n        if (!_isVaultValid(vault)) revert InvalidVault(address(vault));\n    }\n\n    function _isVaultValid(IERC4626 vault) internal view returns (bool) {\n        return vaultBatchingState[vault].currentRound != 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/IERC20Metadata.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\n\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) external returns (uint256 assets);\n}\n"
    },
    "contracts/interfaces/gmx/IGlpManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IGlpManager {\n    function cooldownDuration() external returns (uint256);\n\n    function lastAddedAt(address _account) external returns (uint256);\n\n    function addLiquidity(\n        address _token,\n        uint256 _amount,\n        uint256 _minUsdg,\n        uint256 _minGlp\n    ) external returns (uint256);\n\n    function addLiquidityForAccount(\n        address _fundingAccount,\n        address _account,\n        address _token,\n        uint256 _amount,\n        uint256 _minUsdg,\n        uint256 _minGlp\n    ) external returns (uint256);\n\n    function removeLiquidity(\n        address _tokenOut,\n        uint256 _glpAmount,\n        uint256 _minOut,\n        address _receiver\n    ) external returns (uint256);\n\n    function removeLiquidityForAccount(\n        address _account,\n        address _tokenOut,\n        uint256 _glpAmount,\n        uint256 _minOut,\n        address _receiver\n    ) external returns (uint256);\n\n    function getAums() external view returns (uint256[] memory);\n\n    function vault() external view returns (address);\n\n    function getAumInUsdg(bool maximise) external view returns (uint256);\n\n    function getAum(bool maximise) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/gmx/IRewardRouterV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IRewardRouterV2 {\n    event StakeGmx(address account, address token, uint256 amount);\n    event UnstakeGmx(address account, address token, uint256 amount);\n\n    event StakeGlp(address account, uint256 amount);\n    event UnstakeGlp(address account, uint256 amount);\n\n    function batchStakeGmxForAccount(address[] memory _accounts, uint256[] memory _amounts) external;\n\n    function stakeGmxForAccount(address _account, uint256 _amount) external;\n\n    function stakeGmx(uint256 _amount) external;\n\n    function stakeEsGmx(uint256 _amount) external;\n\n    function unstakeGmx(uint256 _amount) external;\n\n    function unstakeEsGmx(uint256 _amount) external;\n\n    function mintAndStakeGlp(\n        address _token,\n        uint256 _amount,\n        uint256 _minUsdg,\n        uint256 _minGlp\n    ) external returns (uint256);\n\n    function mintAndStakeGlpETH(uint256 _minUsdg, uint256 _minGlp) external payable returns (uint256);\n\n    function unstakeAndRedeemGlp(\n        address _tokenOut,\n        uint256 _glpAmount,\n        uint256 _minOut,\n        address _receiver\n    ) external returns (uint256);\n\n    function unstakeAndRedeemGlpETH(\n        uint256 _glpAmount,\n        uint256 _minOut,\n        address payable _receiver\n    ) external returns (uint256);\n\n    function claim() external;\n\n    function claimEsGmx() external;\n\n    function claimFees() external;\n\n    function compound() external;\n\n    function compoundForAccount(address _account) external;\n\n    function handleRewards(\n        bool _shouldClaimGmx,\n        bool _shouldStakeGmx,\n        bool _shouldClaimEsGmx,\n        bool _shouldStakeEsGmx,\n        bool _shouldStakeMultiplierPoints,\n        bool _shouldClaimWeth,\n        bool _shouldConvertWethToEth\n    ) external;\n\n    function batchCompoundForAccounts(address[] memory _accounts) external;\n\n    function signalTransfer(address _receiver) external;\n\n    function acceptTransfer(address _sender) external;\n}\n"
    },
    "contracts/interfaces/gmx/IGMXBatchingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC4626 } from '../IERC4626.sol';\n\npragma solidity ^0.8.0;\n\ninterface IGMXBatchingManager {\n    error InvalidVault(address vault);\n    error InvalidInput(uint256 errorCode);\n    error InsufficientShares(uint256 balance);\n    error InvalidSetDepositPaused(bool currentValue);\n\n    error ZeroBalance();\n\n    error VaultAlreadyAdded();\n    error VaultsLimitExceeded();\n\n    error CallerNotKeeper();\n    error CallerNotStakingManager();\n\n    event DepositToken(\n        uint256 indexed round,\n        address indexed token,\n        address indexed receiver,\n        uint256 amount,\n        uint256 glpStaked\n    );\n\n    event VaultAdded(address vault);\n    event VaultDeposit(uint256 vaultGlpAmount);\n\n    event KeeperUpdated(address newKeeper);\n\n    event SharesClaimed(address indexed from, address indexed receiver, uint256 claimAmount);\n    event BatchDeposit(uint256 indexed round, uint256 userGlpAmount, uint256 userShareAmount);\n\n    struct UserDeposit {\n        uint256 round;\n        uint128 glpBalance;\n        uint128 unclaimedShares;\n    }\n    struct RoundDeposit {\n        uint128 totalGlp;\n        uint128 totalShares;\n    }\n\n    function depositToken(\n        address token,\n        uint256 amount,\n        uint256 minUSDG\n    ) external returns (uint256 glpStaked);\n\n    function depositToken(\n        IERC4626 gmxVault,\n        address token,\n        uint256 amount,\n        uint256 minUSDG,\n        address receiver\n    ) external returns (uint256 glpStaked);\n\n    function executeBatchDeposit() external;\n\n    function stakingManagerGlpBalance() external view returns (uint256 balance);\n\n    function glpBalanceAllVaults(address account) external view returns (uint256 balance);\n\n    function glpBalance(IERC4626 gmxVault, address account) external view returns (uint256 balance);\n\n    function unclaimedShares(IERC4626 gmxVault, address account) external view returns (uint256 shares);\n\n    function claim(\n        IERC4626 gmxVault,\n        address receiver,\n        uint256 amount\n    ) external;\n\n    function currentRound(IERC4626 gmxVault) external view returns (uint256);\n\n    function roundDeposits(IERC4626 vault, uint256 round) external view returns (RoundDeposit memory);\n}\n"
    },
    "@ragetrade/vaults/contracts/yieldStrategy/gmx/GlpStakingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IERC4626 } from 'contracts/interfaces/IERC4626.sol';\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\n\nimport { IGlpManager } from 'contracts/interfaces/gmx/IGlpManager.sol';\nimport { IVault as IGMXVault } from 'contracts/interfaces/gmx/IVault.sol';\nimport { ISGLPExtended } from 'contracts/interfaces/gmx/ISGLPExtended.sol';\nimport { IRewardRouterV2 } from 'contracts/interfaces/gmx/IRewardRouterV2.sol';\nimport { IGMXBatchingManager } from 'contracts/interfaces/gmx/IGMXBatchingManager.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\n\nimport { RageERC4626 } from '../../base/RageERC4626.sol';\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\ncontract GlpStakingManager is RageERC4626, OwnableUpgradeable {\n    using FullMath for uint256;\n\n    error GSM_CALLER_NOT_VAULT();\n    error GSM_INVALID_SET_VAULT();\n    error GSM_INVALID_SET_FEE_RECEIPIENT();\n    error GSM_INVALID_SETTER_VALUES();\n\n    event FeesWithdrawn(uint256 vaule);\n    event VaultUpdated(address vaultAddress, bool isVault);\n    event FeeRecipientUpdated(address feeRecipient);\n    event GmxParamsUpdated(uint256 newFee, uint256 wethThreshold, uint256 slippageThreshold, address batchingManager);\n\n    event TokenWithdrawn(address indexed token, uint256 shares, address indexed receiver);\n    event TokenRedeemded(address indexed token, uint256 _sGLPQuantity, address indexed receiver);\n\n    uint256[100] private _gaps;\n\n    /* solhint-disable var-name-mixedcase */\n    uint256 public constant MAX_BPS = 10_000;\n\n    uint256 public constant USDG_DECIMALS = 18;\n    uint256 public constant WETH_DECIMALS = 18;\n\n    uint256 public constant PRICE_PRECISION = 10**30;\n\n    /* solhint-disable var-name-mixedcase */\n    uint256 public FEE = 1000;\n\n    uint256 public protocolFee;\n    uint256 public wethThreshold;\n    uint256 public slippageThreshold;\n    address public feeRecipient;\n\n    IERC20 private weth;\n    IERC20 private usdc;\n    IERC20 private fsGlp;\n\n    IGMXVault private gmxVault;\n    IGlpManager private glpManager;\n    IRewardRouterV2 private rewardRouter;\n    IGMXBatchingManager private batchingManager;\n\n    mapping(address => bool) public isVault;\n\n    uint256[100] private _gaps2;\n\n    error ZeroShares();\n\n    struct GlpStakingManagerInitParams {\n        RageERC4626InitParams rageErc4626InitParams;\n        IERC20 weth;\n        IERC20 usdc;\n        address feeRecipient;\n        IRewardRouterV2 rewardRouter;\n    }\n\n    function initialize(GlpStakingManagerInitParams memory glpStakingManagerInitParams) external initializer {\n        __Ownable_init();\n        __RageERC4626_init(glpStakingManagerInitParams.rageErc4626InitParams);\n        __GlpStakingManager_init(glpStakingManagerInitParams);\n    }\n\n    /* solhint-disable-next-line func-name-mixedcase */\n    function __GlpStakingManager_init(GlpStakingManagerInitParams memory params) internal onlyInitializing {\n        weth = params.weth;\n        usdc = params.usdc;\n        rewardRouter = params.rewardRouter;\n        feeRecipient = params.feeRecipient;\n\n        fsGlp = IERC20(ISGLPExtended(address(asset)).stakedGlpTracker());\n        glpManager = IGlpManager(ISGLPExtended(address(asset)).glpManager());\n\n        gmxVault = IGMXVault(glpManager.vault());\n    }\n\n    /// @notice updates several state variables related to external addresses, slippage, fee, threshold, etc.\n    /// @param _feeBps fee value (in terms of BPS) to be charged on WETH rewards\n    /// @param _wethThreshold minimum threshold to swap WETH to GLP\n    /// @param _slippageThreshold maximum slippage allowed (in BPS) on converting tokens to GLP\n    /// @param _batchingManager address of batching manager (which batches deposits to GYS)\n    function updateGMXParams(\n        uint256 _feeBps,\n        uint256 _wethThreshold,\n        uint256 _slippageThreshold,\n        address _batchingManager\n    ) external onlyOwner {\n        if (_feeBps < MAX_BPS && _slippageThreshold < MAX_BPS && _batchingManager != address(0)) {\n            FEE = _feeBps;\n            wethThreshold = _wethThreshold;\n            slippageThreshold = _slippageThreshold;\n            batchingManager = IGMXBatchingManager(_batchingManager);\n        } else revert GSM_INVALID_SETTER_VALUES();\n\n        emit GmxParamsUpdated(_feeBps, _wethThreshold, _slippageThreshold, _batchingManager);\n    }\n\n    /// @notice add/remove vaults for allowing to stake using this contract\n    /// @param vaultAddress address of vault (GmxYieldStrategy)\n    /// @param _isVault true to set, false to unset\n    function setVault(address vaultAddress, bool _isVault) external onlyOwner {\n        if (isVault[vaultAddress] != _isVault) {\n            isVault[vaultAddress] = _isVault;\n        } else revert GSM_INVALID_SET_VAULT();\n\n        emit VaultUpdated(vaultAddress, _isVault);\n    }\n\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\n        if (feeRecipient != _feeRecipient) {\n            feeRecipient = _feeRecipient;\n        } else revert GSM_INVALID_SET_FEE_RECEIPIENT();\n\n        emit FeeRecipientUpdated(_feeRecipient);\n    }\n\n    /// @notice grants one time max allowance to various third parties\n    function grantAllowances() public onlyOwner {\n        weth.approve(address(batchingManager), type(uint256).max);\n\n        usdc.approve(address(batchingManager), type(uint256).max);\n    }\n\n    /// @notice withdraw accumulated WETH fees\n    function withdrawFees() external {\n        uint256 amount = protocolFee;\n        protocolFee = 0;\n        weth.transfer(feeRecipient, amount);\n        emit FeesWithdrawn(amount);\n    }\n\n    /// @notice stakes the rewards from the staked Glp and claims WETH to buy glp\n    function harvestFees() public {\n        rewardRouter.handleRewards(\n            false, // _shouldClaimGmx\n            false, // _shouldStakeGmx\n            true, // _shouldClaimEsGmx\n            true, // _shouldStakeEsGmx\n            true, // _shouldStakeMultiplierPoints\n            true, // _shouldClaimWeth\n            false // _shouldConvertWethToEth\n        );\n\n        uint256 wethHarvested = weth.balanceOf(address(this)) - protocolFee;\n        if (wethHarvested > wethThreshold) {\n            uint256 protocolFeeHarvested = (wethHarvested * FEE) / MAX_BPS;\n            protocolFee += protocolFeeHarvested;\n\n            uint256 wethToCompound = wethHarvested - protocolFeeHarvested;\n\n            uint256 price = gmxVault.getMinPrice(address(weth));\n            uint256 usdgAmount = wethToCompound.mulDiv(\n                price * (MAX_BPS - slippageThreshold),\n                PRICE_PRECISION * MAX_BPS\n            );\n\n            usdgAmount = usdgAmount.mulDiv(10**USDG_DECIMALS, 10**WETH_DECIMALS);\n\n            batchingManager.depositToken(address(weth), wethToCompound, usdgAmount);\n        }\n    }\n\n    function _beforeShareAllocation() internal override {\n        /// @dev check if the msg.sender is vault\n        if (!isVault[msg.sender]) revert GSM_CALLER_NOT_VAULT();\n        harvestFees();\n    }\n\n    /* solhint-disable no-empty-blocks */\n    function beforeWithdrawClosePosition(int256) internal override {\n        /// @dev NO OP but not removed because of backwards compatibility with RageERC4626\n    }\n\n    function _simulateBeforeWithdraw(uint256 assets)\n        internal\n        pure\n        override\n        returns (uint256 adjustedAssets, int256 tokensToTrade)\n    {\n        return (assets, 0);\n    }\n\n    /// @notice total assets controlled by this staking manager\n    function totalAssets() public view override returns (uint256) {\n        return fsGlp.balanceOf(address(this)) + batchingManager.stakingManagerGlpBalance();\n    }\n\n    /// @notice converts input token to sGLP\n    /// @dev only works for usdc and weth because approval is only given for those tokens\n    /// @param token address of token\n    /// @param amount amount of token\n    function depositToken(address token, uint256 amount) external returns (uint256 shares) {\n        _beforeShareAllocation();\n\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n\n        uint256 price = gmxVault.getMinPrice(token);\n        uint256 usdgAmount = amount.mulDiv(price * (MAX_BPS - slippageThreshold), PRICE_PRECISION * MAX_BPS);\n\n        usdgAmount = usdgAmount.mulDiv(10**USDG_DECIMALS, 10**IERC20Metadata(token).decimals());\n\n        uint256 assets = batchingManager.depositToken(token, amount, usdgAmount);\n\n        shares = previewDeposit(assets);\n        if (shares == 0) revert ZeroShares();\n\n        // // Need to transfer before minting or ERC777s could reenter.\n        // asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(msg.sender, shares);\n\n        emit Deposit(msg.sender, msg.sender, assets, shares);\n\n        afterDeposit(assets, shares);\n    }\n}\n"
    },
    "contracts/interfaces/gmx/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IVault {\n    function isInitialized() external view returns (bool);\n\n    function isSwapEnabled() external view returns (bool);\n\n    function isLeverageEnabled() external view returns (bool);\n\n    function setError(uint256 _errorCode, string calldata _error) external;\n\n    function router() external view returns (address);\n\n    function usdg() external view returns (address);\n\n    function gov() external view returns (address);\n\n    function whitelistedTokenCount() external view returns (uint256);\n\n    function maxLeverage() external view returns (uint256);\n\n    function minProfitTime() external view returns (uint256);\n\n    function hasDynamicFees() external view returns (bool);\n\n    function fundingInterval() external view returns (uint256);\n\n    function totalTokenWeights() external view returns (uint256);\n\n    function inManagerMode() external view returns (bool);\n\n    function inPrivateLiquidationMode() external view returns (bool);\n\n    function maxGasPrice() external view returns (uint256);\n\n    function approvedRouters(address _account, address _router) external view returns (bool);\n\n    function isLiquidator(address _account) external view returns (bool);\n\n    function isManager(address _account) external view returns (bool);\n\n    function minProfitBasisPoints(address _token) external view returns (uint256);\n\n    function tokenBalances(address _token) external view returns (uint256);\n\n    function lastFundingTimes(address _token) external view returns (uint256);\n\n    function setInManagerMode(bool _inManagerMode) external;\n\n    function setManager(address _manager, bool _isManager) external;\n\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\n\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\n\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\n\n    function setFees(\n        uint256 _taxBasisPoints,\n        uint256 _stableTaxBasisPoints,\n        uint256 _mintBurnFeeBasisPoints,\n        uint256 _swapFeeBasisPoints,\n        uint256 _stableSwapFeeBasisPoints,\n        uint256 _marginFeeBasisPoints,\n        uint256 _liquidationFeeUsd,\n        uint256 _minProfitTime,\n        bool _hasDynamicFees\n    ) external;\n\n    function setTokenConfig(\n        address _token,\n        uint256 _tokenDecimals,\n        uint256 _redemptionBps,\n        uint256 _minProfitBps,\n        uint256 _maxUsdgAmount,\n        bool _isStable,\n        bool _isShortable\n    ) external;\n\n    function setPriceFeed(address _priceFeed) external;\n\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\n\n    function directPoolDeposit(address _token) external;\n\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\n\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\n\n    function swap(\n        address _tokenIn,\n        address _tokenOut,\n        address _receiver\n    ) external returns (uint256);\n\n    function increasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _sizeDelta,\n        bool _isLong\n    ) external;\n\n    function decreasePosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address _receiver\n    ) external returns (uint256);\n\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\n\n    function priceFeed() external view returns (address);\n\n    function fundingRateFactor() external view returns (uint256);\n\n    function stableFundingRateFactor() external view returns (uint256);\n\n    function cumulativeFundingRates(address _token) external view returns (uint256);\n\n    function getNextFundingRate(address _token) external view returns (uint256);\n\n    function getFeeBasisPoints(\n        address _token,\n        uint256 _usdgDelta,\n        uint256 _feeBasisPoints,\n        uint256 _taxBasisPoints,\n        bool _increment\n    ) external view returns (uint256);\n\n    function liquidationFeeUsd() external view returns (uint256);\n\n    function taxBasisPoints() external view returns (uint256);\n\n    function stableTaxBasisPoints() external view returns (uint256);\n\n    function mintBurnFeeBasisPoints() external view returns (uint256);\n\n    function swapFeeBasisPoints() external view returns (uint256);\n\n    function stableSwapFeeBasisPoints() external view returns (uint256);\n\n    function marginFeeBasisPoints() external view returns (uint256);\n\n    function allWhitelistedTokensLength() external view returns (uint256);\n\n    function allWhitelistedTokens(uint256) external view returns (address);\n\n    function whitelistedTokens(address _token) external view returns (bool);\n\n    function stableTokens(address _token) external view returns (bool);\n\n    function shortableTokens(address _token) external view returns (bool);\n\n    function feeReserves(address _token) external view returns (uint256);\n\n    function globalShortSizes(address _token) external view returns (uint256);\n\n    function globalShortAveragePrices(address _token) external view returns (uint256);\n\n    function tokenDecimals(address _token) external view returns (uint256);\n\n    function tokenWeights(address _token) external view returns (uint256);\n\n    function guaranteedUsd(address _token) external view returns (uint256);\n\n    function poolAmounts(address _token) external view returns (uint256);\n\n    function bufferAmounts(address _token) external view returns (uint256);\n\n    function reservedAmounts(address _token) external view returns (uint256);\n\n    function usdgAmounts(address _token) external view returns (uint256);\n\n    function maxUsdgAmounts(address _token) external view returns (uint256);\n\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\n\n    function getMaxPrice(address _token) external view returns (uint256);\n\n    function getMinPrice(address _token) external view returns (uint256);\n\n    function getDelta(\n        address _indexToken,\n        uint256 _size,\n        uint256 _averagePrice,\n        bool _isLong,\n        uint256 _lastIncreasedTime\n    ) external view returns (bool, uint256);\n\n    function getPosition(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong\n    )\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            bool,\n            uint256\n        );\n}\n"
    },
    "contracts/interfaces/gmx/ISGLPExtended.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ISGLPExtended {\n    function glp() external view returns (address);\n\n    function glpManager() external view returns (address);\n\n    function feeGlpTracker() external view returns (address);\n\n    function stakedGlpTracker() external view returns (address);\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\n/**\n * @title IAaveIncentivesController\n * @author Aave\n * @notice Defines the basic interface for an Aave Incentives Controller.\n **/\ninterface IAaveIncentivesController {\n  /**\n   * @dev Emitted during `handleAction`, `claimRewards` and `claimRewardsOnBehalf`\n   * @param user The user that accrued rewards\n   * @param amount The amount of accrued rewards\n   */\n  event RewardsAccrued(address indexed user, uint256 amount);\n\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\n\n  /**\n   * @dev Emitted during `claimRewards` and `claimRewardsOnBehalf`\n   * @param user The address that accrued rewards\n   * @param to The address that will be receiving the rewards\n   * @param claimer The address that performed the claim\n   * @param amount The amount of rewards\n   */\n  event RewardsClaimed(\n    address indexed user,\n    address indexed to,\n    address indexed claimer,\n    uint256 amount\n  );\n\n  /**\n   * @dev Emitted during `setClaimer`\n   * @param user The address of the user\n   * @param claimer The address of the claimer\n   */\n  event ClaimerSet(address indexed user, address indexed claimer);\n\n  /**\n   * @notice Returns the configuration of the distribution for a certain asset\n   * @param asset The address of the reference asset of the distribution\n   * @return The asset index\n   * @return The emission per second\n   * @return The last updated timestamp\n   **/\n  function getAssetData(address asset)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256\n    );\n\n  /**\n   * LEGACY **************************\n   * @dev Returns the configuration of the distribution for a certain asset\n   * @param asset The address of the reference asset of the distribution\n   * @return The asset index, the emission per second and the last updated timestamp\n   **/\n  function assets(address asset)\n    external\n    view\n    returns (\n      uint128,\n      uint128,\n      uint256\n    );\n\n  /**\n   * @notice Whitelists an address to claim the rewards on behalf of another address\n   * @param user The address of the user\n   * @param claimer The address of the claimer\n   */\n  function setClaimer(address user, address claimer) external;\n\n  /**\n   * @notice Returns the whitelisted claimer for a certain address (0x0 if not set)\n   * @param user The address of the user\n   * @return The claimer address\n   */\n  function getClaimer(address user) external view returns (address);\n\n  /**\n   * @notice Configure assets for a certain rewards emission\n   * @param assets The assets to incentivize\n   * @param emissionsPerSecond The emission for each asset\n   */\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\n    external;\n\n  /**\n   * @notice Called by the corresponding asset on any update that affects the rewards distribution\n   * @param asset The address of the user\n   * @param userBalance The balance of the user of the asset in the pool\n   * @param totalSupply The total supply of the asset in the pool\n   **/\n  function handleAction(\n    address asset,\n    uint256 userBalance,\n    uint256 totalSupply\n  ) external;\n\n  /**\n   * @notice Returns the total of rewards of a user, already accrued + not yet accrued\n   * @param assets The assets to accumulate rewards for\n   * @param user The address of the user\n   * @return The rewards\n   **/\n  function getRewardsBalance(address[] calldata assets, address user)\n    external\n    view\n    returns (uint256);\n\n  /**\n   * @notice Claims reward for a user, on the assets of the pool, accumulating the pending rewards\n   * @param assets The assets to accumulate rewards for\n   * @param amount Amount of rewards to claim\n   * @param to Address that will be receiving the rewards\n   * @return Rewards claimed\n   **/\n  function claimRewards(\n    address[] calldata assets,\n    uint256 amount,\n    address to\n  ) external returns (uint256);\n\n  /**\n   * @notice Claims reward for a user on its behalf, on the assets of the pool, accumulating the pending rewards.\n   * @dev The caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n   * @param assets The assets to accumulate rewards for\n   * @param amount The amount of rewards to claim\n   * @param user The address to check and claim rewards\n   * @param to The address that will be receiving the rewards\n   * @return The amount of rewards claimed\n   **/\n  function claimRewardsOnBehalf(\n    address[] calldata assets,\n    uint256 amount,\n    address user,\n    address to\n  ) external returns (uint256);\n\n  /**\n   * @notice Returns the unclaimed rewards of the user\n   * @param user The address of the user\n   * @return The unclaimed user rewards\n   */\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\n\n  /**\n   * @notice Returns the user index for a specific asset\n   * @param user The address of the user\n   * @param asset The asset to incentivize\n   * @return The user index for the asset\n   */\n  function getUserAssetData(address user, address asset) external view returns (uint256);\n\n  /**\n   * @notice for backward compatibility with previous implementation of the Incentives controller\n   * @return The address of the reward token\n   */\n  function REWARD_TOKEN() external view returns (address);\n\n  /**\n   * @notice for backward compatibility with previous implementation of the Incentives controller\n   * @return The precision used in the incentives controller\n   */\n  function PRECISION() external view returns (uint8);\n\n  /**\n   * @dev Gets the distribution end timestamp of the emissions\n   */\n  function DISTRIBUTION_END() external view returns (uint256);\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\n/**\n * @title IScaledBalanceToken\n * @author Aave\n * @notice Defines the basic interface for a scaledbalance token.\n **/\ninterface IScaledBalanceToken {\n  /**\n   * @dev Emitted after the mint action\n   * @param caller The address performing the mint\n   * @param onBehalfOf The address of the user that will receive the minted scaled balance tokens\n   * @param value The amount being minted (user entered amount + balance increase from interest)\n   * @param balanceIncrease The increase in balance since the last action of the user\n   * @param index The next liquidity index of the reserve\n   **/\n  event Mint(\n    address indexed caller,\n    address indexed onBehalfOf,\n    uint256 value,\n    uint256 balanceIncrease,\n    uint256 index\n  );\n\n  /**\n   * @dev Emitted after scaled balance tokens are burned\n   * @param from The address from which the scaled tokens will be burned\n   * @param target The address that will receive the underlying, if any\n   * @param value The amount being burned (user entered amount - balance increase from interest)\n   * @param balanceIncrease The increase in balance since the last action of the user\n   * @param index The next liquidity index of the reserve\n   **/\n  event Burn(\n    address indexed from,\n    address indexed target,\n    uint256 value,\n    uint256 balanceIncrease,\n    uint256 index\n  );\n\n  /**\n   * @notice Returns the scaled balance of the user.\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\n   * at the moment of the update\n   * @param user The user whose balance is calculated\n   * @return The scaled balance of the user\n   **/\n  function scaledBalanceOf(address user) external view returns (uint256);\n\n  /**\n   * @notice Returns the scaled balance of the user and the scaled total supply.\n   * @param user The address of the user\n   * @return The scaled balance of the user\n   * @return The scaled total supply\n   **/\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\n\n  /**\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\n   * @return The scaled total supply\n   **/\n  function scaledTotalSupply() external view returns (uint256);\n\n  /**\n   * @notice Returns last index interest was accrued to the user's balance\n   * @param user The address of the user\n   * @return The last index interest was accrued to the user's balance, expressed in ray\n   **/\n  function getPreviousIndex(address user) external view returns (uint256);\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\n/**\n * @title IPoolAddressesProvider\n * @author Aave\n * @notice Defines the basic interface for a Pool Addresses Provider.\n **/\ninterface IPoolAddressesProvider {\n  /**\n   * @dev Emitted when the market identifier is updated.\n   * @param oldMarketId The old id of the market\n   * @param newMarketId The new id of the market\n   */\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\n\n  /**\n   * @dev Emitted when the pool is updated.\n   * @param oldAddress The old address of the Pool\n   * @param newAddress The new address of the Pool\n   */\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the pool configurator is updated.\n   * @param oldAddress The old address of the PoolConfigurator\n   * @param newAddress The new address of the PoolConfigurator\n   */\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the price oracle is updated.\n   * @param oldAddress The old address of the PriceOracle\n   * @param newAddress The new address of the PriceOracle\n   */\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the ACL manager is updated.\n   * @param oldAddress The old address of the ACLManager\n   * @param newAddress The new address of the ACLManager\n   */\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the ACL admin is updated.\n   * @param oldAddress The old address of the ACLAdmin\n   * @param newAddress The new address of the ACLAdmin\n   */\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the price oracle sentinel is updated.\n   * @param oldAddress The old address of the PriceOracleSentinel\n   * @param newAddress The new address of the PriceOracleSentinel\n   */\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the pool data provider is updated.\n   * @param oldAddress The old address of the PoolDataProvider\n   * @param newAddress The new address of the PoolDataProvider\n   */\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when a new proxy is created.\n   * @param id The identifier of the proxy\n   * @param proxyAddress The address of the created proxy contract\n   * @param implementationAddress The address of the implementation contract\n   */\n  event ProxyCreated(\n    bytes32 indexed id,\n    address indexed proxyAddress,\n    address indexed implementationAddress\n  );\n\n  /**\n   * @dev Emitted when a new non-proxied contract address is registered.\n   * @param id The identifier of the contract\n   * @param oldAddress The address of the old contract\n   * @param newAddress The address of the new contract\n   */\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the implementation of the proxy registered with id is updated\n   * @param id The identifier of the contract\n   * @param proxyAddress The address of the proxy contract\n   * @param oldImplementationAddress The address of the old implementation contract\n   * @param newImplementationAddress The address of the new implementation contract\n   */\n  event AddressSetAsProxy(\n    bytes32 indexed id,\n    address indexed proxyAddress,\n    address oldImplementationAddress,\n    address indexed newImplementationAddress\n  );\n\n  /**\n   * @notice Returns the id of the Aave market to which this contract points to.\n   * @return The market id\n   **/\n  function getMarketId() external view returns (string memory);\n\n  /**\n   * @notice Associates an id with a specific PoolAddressesProvider.\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\n   * identify and validate multiple Aave markets.\n   * @param newMarketId The market id\n   */\n  function setMarketId(string calldata newMarketId) external;\n\n  /**\n   * @notice Returns an address by its identifier.\n   * @dev The returned address might be an EOA or a contract, potentially proxied\n   * @dev It returns ZERO if there is no registered address with the given id\n   * @param id The id\n   * @return The address of the registered for the specified id\n   */\n  function getAddress(bytes32 id) external view returns (address);\n\n  /**\n   * @notice General function to update the implementation of a proxy registered with\n   * certain `id`. If there is no proxy registered, it will instantiate one and\n   * set as implementation the `newImplementationAddress`.\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\n   * setter function, in order to avoid unexpected consequences\n   * @param id The id\n   * @param newImplementationAddress The address of the new implementation\n   */\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\n\n  /**\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\n   * @param id The id\n   * @param newAddress The address to set\n   */\n  function setAddress(bytes32 id, address newAddress) external;\n\n  /**\n   * @notice Returns the address of the Pool proxy.\n   * @return The Pool proxy address\n   **/\n  function getPool() external view returns (address);\n\n  /**\n   * @notice Updates the implementation of the Pool, or creates a proxy\n   * setting the new `pool` implementation when the function is called for the first time.\n   * @param newPoolImpl The new Pool implementation\n   **/\n  function setPoolImpl(address newPoolImpl) external;\n\n  /**\n   * @notice Returns the address of the PoolConfigurator proxy.\n   * @return The PoolConfigurator proxy address\n   **/\n  function getPoolConfigurator() external view returns (address);\n\n  /**\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\n   **/\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\n\n  /**\n   * @notice Returns the address of the price oracle.\n   * @return The address of the PriceOracle\n   */\n  function getPriceOracle() external view returns (address);\n\n  /**\n   * @notice Updates the address of the price oracle.\n   * @param newPriceOracle The address of the new PriceOracle\n   */\n  function setPriceOracle(address newPriceOracle) external;\n\n  /**\n   * @notice Returns the address of the ACL manager.\n   * @return The address of the ACLManager\n   */\n  function getACLManager() external view returns (address);\n\n  /**\n   * @notice Updates the address of the ACL manager.\n   * @param newAclManager The address of the new ACLManager\n   **/\n  function setACLManager(address newAclManager) external;\n\n  /**\n   * @notice Returns the address of the ACL admin.\n   * @return The address of the ACL admin\n   */\n  function getACLAdmin() external view returns (address);\n\n  /**\n   * @notice Updates the address of the ACL admin.\n   * @param newAclAdmin The address of the new ACL admin\n   */\n  function setACLAdmin(address newAclAdmin) external;\n\n  /**\n   * @notice Returns the address of the price oracle sentinel.\n   * @return The address of the PriceOracleSentinel\n   */\n  function getPriceOracleSentinel() external view returns (address);\n\n  /**\n   * @notice Updates the address of the price oracle sentinel.\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\n   **/\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\n\n  /**\n   * @notice Returns the address of the data provider.\n   * @return The address of the DataProvider\n   */\n  function getPoolDataProvider() external view returns (address);\n\n  /**\n   * @notice Updates the address of the data provider.\n   * @param newDataProvider The address of the new DataProvider\n   **/\n  function setPoolDataProvider(address newDataProvider) external;\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\n/**\n * @title IPriceOracle\n * @author Aave\n * @notice Defines the basic interface for a Price oracle.\n **/\ninterface IPriceOracle {\n  /**\n   * @notice Returns the asset price in the base currency\n   * @param asset The address of the asset\n   * @return The price of the asset\n   **/\n  function getAssetPrice(address asset) external view returns (uint256);\n\n  /**\n   * @notice Set the price of the asset\n   * @param asset The address of the asset\n   * @param price The price of the asset\n   **/\n  function setAssetPrice(address asset, uint256 price) external;\n}\n"
    },
    "contracts/vaults/DnGmxBatchingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\n\nimport { SafeCast } from '../libraries/SafeCast.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\n\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\n\nimport { IERC4626 } from 'contracts/interfaces/IERC4626.sol';\nimport { IGlpManager } from 'contracts/interfaces/gmx/IGlpManager.sol';\nimport { IRewardRouterV2 } from 'contracts/interfaces/gmx/IRewardRouterV2.sol';\nimport { IDnGmxBatchingManager } from 'contracts/interfaces/IDnGmxBatchingManager.sol';\nimport { IDnGmxJuniorVault } from '../interfaces/IDnGmxJuniorVault.sol';\n\ncontract DnGmxBatchingManager is IDnGmxBatchingManager, OwnableUpgradeable, PausableUpgradeable {\n    using FullMath for uint256;\n    using FullMath for uint128;\n    using SafeCast for uint256;\n\n    struct VaultBatchingState {\n        uint256 currentRound;\n        uint256 roundUsdcBalance;\n        uint256 roundGlpStaked;\n        mapping(address => UserDeposit) userDeposits;\n        mapping(uint256 => RoundDeposit) roundDeposits;\n    }\n    uint256 private constant USDC_REDEEM_SLIPPAGE_BPS = 100;\n    uint256 private constant MAX_BPS = 10_000;\n\n    uint256[100] private _gaps;\n\n    address public keeper;\n    IDnGmxJuniorVault public dnGmxJuniorVault; // used for depositing harvested rewards\n\n    uint16 public vaultCount;\n    uint256 public dnGmxJuniorVaultGlpBalance;\n\n    IERC20 private sGlp;\n    IERC20 private usdc;\n    IGlpManager private glpManager;\n    IRewardRouterV2 private rewardRouter;\n\n    VaultBatchingState public vaultBatchingState;\n\n    uint256[100] private _gaps2;\n\n    modifier onlyDnGmxJuniorVault() {\n        if (msg.sender != address(dnGmxJuniorVault)) revert CallerNotVault();\n        _;\n    }\n\n    modifier onlyKeeper() {\n        if (msg.sender != keeper) revert CallerNotKeeper();\n        _;\n    }\n\n    function initialize(\n        IERC20 _sGlp,\n        IERC20 _usdc,\n        IRewardRouterV2 _rewardRouter,\n        IGlpManager _glpManager,\n        address _dnGmxJuniorVault,\n        address _keeper\n    ) external initializer {\n        __Ownable_init();\n        __Pausable_init();\n        __GMXBatchingManager_init(_sGlp, _usdc, _rewardRouter, _glpManager, _dnGmxJuniorVault, _keeper);\n    }\n\n    /* solhint-disable-next-line func-name-mixedcase */\n    function __GMXBatchingManager_init(\n        IERC20 _sGlp,\n        IERC20 _usdc,\n        IRewardRouterV2 _rewardRouter,\n        IGlpManager _glpManager,\n        address _dnGmxJuniorVault,\n        address _keeper\n    ) internal onlyInitializing {\n        sGlp = _sGlp;\n        usdc = _usdc;\n        rewardRouter = _rewardRouter;\n        glpManager = _glpManager;\n\n        dnGmxJuniorVault = IDnGmxJuniorVault(_dnGmxJuniorVault);\n\n        keeper = _keeper;\n        vaultBatchingState.currentRound = 1;\n        emit KeeperUpdated(_keeper);\n    }\n\n    /// @notice grants the allowance to the vault to pull sGLP (via safeTransfer from in vault.deposit)\n    /// @dev allowance is granted while vault is added via addVault, this is only failsafe if that allowance is exhausted\n    function grantAllowances() external onlyOwner {\n        sGlp.approve(address(dnGmxJuniorVault), type(uint256).max);\n    }\n\n    /// @notice sets the keeper address (to pause & unpause deposits)\n    /// @param _keeper address of keeper\n    function setKeeper(address _keeper) external onlyOwner {\n        keeper = _keeper;\n        emit KeeperUpdated(_keeper);\n    }\n\n    /// @notice pauses deposits (to prevent DOS due to GMX 15 min cooldown)\n    function pauseDeposit() external onlyKeeper {\n        _pause();\n    }\n\n    /// @notice unpauses the deposit function\n    function unpauseDeposit() external onlyKeeper {\n        _unpause();\n    }\n\n    /// @notice convert the token into glp and obtain staked glp\n    /// @dev this function should be only called by staking manager\n    /// @param token address of input token (should be supported on gmx)\n    /// @param amount amount of token to be used\n    /// @param minUSDG minimum output of swap in terms of USDG\n    function depositToken(\n        address token,\n        uint256 amount,\n        uint256 minUSDG\n    ) external whenNotPaused onlyDnGmxJuniorVault returns (uint256 glpStaked) {\n        if (token == address(0)) revert InvalidInput(0x30);\n        if (amount == 0) revert InvalidInput(0x31);\n\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n\n        // Convert tokens to glp\n        glpStaked = _stakeGlp(token, amount, minUSDG);\n        dnGmxJuniorVaultGlpBalance += glpStaked.toUint128();\n\n        emit DepositToken(0, token, msg.sender, amount, glpStaked);\n    }\n\n    // /// @notice convert the token into glp and obtain staked glp and deposits sGLP into vault\n    // /// @param token address of input token (should be supported on gmx)\n    // /// @param amount amount of token to be used\n    // /// @param minUSDG minimum output of swap in terms of USDG\n    // /// @param receiver address which will receive shares from vault+\n    // function depositToken(\n    //     address token,\n    //     uint256 amount,\n    //     uint256 minUSDG,\n    //     address receiver\n    // ) external whenNotPaused returns (uint256 glpStaked) {\n    //     if (token == address(0)) revert InvalidInput(0x20);\n    //     if (amount == 0) revert InvalidInput(0x21);\n    //     if (receiver == address(0)) revert InvalidInput(0x22);\n\n    //     // Transfer Tokens To Manager\n    //     IERC20(token).transferFrom(msg.sender, address(this), amount);\n\n    //     UserDeposit storage userDeposit = vaultBatchingState.userDeposits[receiver];\n    //     uint128 userUsdcBalance = userDeposit.usdcBalance;\n\n    //     //Convert previous round glp balance into unredeemed shares\n    //     uint256 userDepositRound = userDeposit.round;\n    //     if (userDepositRound < vaultBatchingState.currentRound && userUsdcBalance > 0) {\n    //         RoundDeposit storage roundDeposit = vaultBatchingState.roundDeposits[userDepositRound];\n    //         userDeposit.unclaimedShares += userDeposit\n    //             .usdcBalance\n    //             .mulDiv(roundDeposit.totalShares, roundDeposit.totalUsdc)\n    //             .toUint128();\n    //         userUsdcBalance = 0;\n    //     }\n\n    //     // Convert tokens to glp\n    //     glpStaked = _stakeGlp(token, amount, minUSDG);\n\n    //     //Update round and glp balance for current round\n    //     userDeposit.round = vaultBatchingState.currentRound;\n    //     userDeposit.usdcBalance = userUsdcBalance + glpStaked.toUint128();\n    //     vaultBatchingState.roundUsdcBalance += glpStaked.toUint128();\n\n    //     emit DepositToken(vaultBatchingState.currentRound, token, receiver, amount, glpStaked);\n    // }\n\n    function depositUsdc(uint256 amount, address receiver) external whenNotPaused returns (uint256 glpStaked) {\n        if (amount == 0) revert InvalidInput(0x21);\n        if (receiver == address(0)) revert InvalidInput(0x22);\n\n        // Transfer Tokens To Manager\n        usdc.transferFrom(msg.sender, address(this), amount);\n\n        UserDeposit storage userDeposit = vaultBatchingState.userDeposits[receiver];\n        uint128 userUsdcBalance = userDeposit.usdcBalance;\n\n        //Convert previous round glp balance into unredeemed shares\n        uint256 userDepositRound = userDeposit.round;\n        if (userDepositRound < vaultBatchingState.currentRound && userUsdcBalance > 0) {\n            RoundDeposit storage roundDeposit = vaultBatchingState.roundDeposits[userDepositRound];\n            userDeposit.unclaimedShares += userDeposit\n                .usdcBalance\n                .mulDiv(roundDeposit.totalShares, roundDeposit.totalUsdc)\n                .toUint128();\n            userUsdcBalance = 0;\n        }\n\n        // Convert tokens to glp\n        // glpStaked = _stakeGlp(token, amount, minUSDG);\n\n        //Update round and glp balance for current round\n        userDeposit.round = vaultBatchingState.currentRound;\n        userDeposit.usdcBalance = userUsdcBalance + amount.toUint128();\n        vaultBatchingState.roundUsdcBalance += amount.toUint128();\n\n        emit DepositToken(vaultBatchingState.currentRound, address(usdc), receiver, amount, glpStaked);\n    }\n\n    /// @notice executes batch and deposits into appropriate vault with/without minting shares\n    function executeBatchStake() external whenNotPaused {\n        // Transfer vault glp directly\n        // Needs to be called only for dnGmxJuniorVault\n        // if (dnGmxJuniorVaultGlpBalance > 0) {\n        //     uint256 glpToTransfer = dnGmxJuniorVaultGlpBalance;\n        //     dnGmxJuniorVaultGlpBalance = 0;\n        //     sGlp.transfer(address(dnGmxJuniorVault), glpToTransfer);\n        //     emit VaultDeposit(glpToTransfer);\n        // }\n\n        _executeVaultUserBatchStake();\n        // If the deposit is unpaused then pause on execute batch stake\n        // To be unpaused when the staked amount is deposited\n        if (!paused()) {\n            _pause();\n        }\n    }\n\n    /// @notice executes batch and deposits into appropriate vault with/without minting shares\n    function executeBatchDeposit() external {\n        // Transfer vault glp directly\n        // Needs to be called only for dnGmxJuniorVault\n        if (dnGmxJuniorVaultGlpBalance > 0) {\n            uint256 glpToTransfer = dnGmxJuniorVaultGlpBalance;\n            dnGmxJuniorVaultGlpBalance = 0;\n            sGlp.transfer(address(dnGmxJuniorVault), glpToTransfer);\n            emit VaultDeposit(glpToTransfer);\n        }\n\n        _executeVaultUserBatchDeposit();\n        // If the deposit is paused then unpause on execute batch deposit\n        if (paused()) {\n            _unpause();\n        }\n    }\n\n    function _executeVaultUserBatchStake() internal {\n        uint256 _roundUsdcBalance = vaultBatchingState.roundUsdcBalance;\n        if (_roundUsdcBalance > 0) {\n            uint256 minUsdg = _roundUsdcBalance.mulDiv((MAX_BPS - USDC_REDEEM_SLIPPAGE_BPS) * 1e12, MAX_BPS); // calculates minUsdg in 10**18 (usdg 10**18 and usdc 10**6)\n\n            vaultBatchingState.roundGlpStaked = _stakeGlp(address(usdc), _roundUsdcBalance, minUsdg);\n            emit BatchStake(vaultBatchingState.currentRound, _roundUsdcBalance, vaultBatchingState.roundGlpStaked);\n        } else {\n            revert NoUsdcBalance();\n        }\n    }\n\n    function _executeVaultUserBatchDeposit() internal {\n        // Transfer user glp through deposit\n        if (vaultBatchingState.roundGlpStaked > 0) {\n            uint256 totalShares = dnGmxJuniorVault.deposit(vaultBatchingState.roundGlpStaked, address(this));\n\n            // Update round data\n            vaultBatchingState.roundDeposits[vaultBatchingState.currentRound] = RoundDeposit(\n                vaultBatchingState.roundUsdcBalance.toUint128(),\n                totalShares.toUint128()\n            );\n\n            emit BatchDeposit(\n                vaultBatchingState.currentRound,\n                vaultBatchingState.roundUsdcBalance,\n                vaultBatchingState.roundGlpStaked,\n                totalShares\n            );\n\n            vaultBatchingState.roundUsdcBalance = 0;\n            vaultBatchingState.roundGlpStaked = 0;\n            ++vaultBatchingState.currentRound;\n        }\n    }\n\n    /// @notice get the glp balance for a given vault and account address\n    /// @param account address of user\n    function usdcBalance(address account) public view returns (uint256 balance) {\n        balance = vaultBatchingState.userDeposits[account].usdcBalance;\n    }\n\n    /// @notice get the unclaimed shares for a given vault and account address\n    /// @param account address of user\n    function unclaimedShares(address account) external view returns (uint256 shares) {\n        UserDeposit memory userDeposit = vaultBatchingState.userDeposits[account];\n        shares = userDeposit.unclaimedShares;\n\n        if (userDeposit.round < vaultBatchingState.currentRound && userDeposit.usdcBalance > 0) {\n            RoundDeposit memory roundDeposit = vaultBatchingState.roundDeposits[userDeposit.round];\n            shares += userDeposit.usdcBalance.mulDiv(roundDeposit.totalShares, roundDeposit.totalUsdc).toUint128();\n        }\n    }\n\n    /// @notice claim the shares received from depositing batch\n    /// @param receiver address of receiver\n    /// @param amount amount of shares\n    function claim(address receiver, uint256 amount) external {\n        if (receiver == address(0)) revert InvalidInput(0x10);\n        if (amount == 0) revert InvalidInput(0x11);\n\n        UserDeposit storage userDeposit = vaultBatchingState.userDeposits[msg.sender];\n        uint128 userUnclaimedShares = userDeposit.unclaimedShares;\n        uint128 userUsdcBalance = userDeposit.usdcBalance;\n        {\n            //Convert previous round glp balance into unredeemed shares\n            uint256 userDepositRound = userDeposit.round;\n            if (userDepositRound < vaultBatchingState.currentRound && userUsdcBalance > 0) {\n                RoundDeposit storage roundDeposit = vaultBatchingState.roundDeposits[userDepositRound];\n                userUnclaimedShares += userUsdcBalance\n                    .mulDiv(roundDeposit.totalShares, roundDeposit.totalUsdc)\n                    .toUint128();\n                userDeposit.usdcBalance = 0;\n            }\n        }\n        if (userUnclaimedShares < amount.toUint128()) revert InsufficientShares(userUnclaimedShares);\n        userDeposit.unclaimedShares = userUnclaimedShares - amount.toUint128();\n        dnGmxJuniorVault.transfer(receiver, amount);\n\n        emit SharesClaimed(msg.sender, receiver, amount);\n    }\n\n    /// @notice gets the current active round\n    function currentRound() external view returns (uint256) {\n        return vaultBatchingState.currentRound;\n    }\n\n    /// @notice get the glp balance for current active round\n    function roundUsdcBalance() external view returns (uint256) {\n        return vaultBatchingState.roundUsdcBalance;\n    }\n\n    /// @notice get the glp balance for current active round\n    function roundGlpStaked() external view returns (uint256) {\n        return vaultBatchingState.roundGlpStaked;\n    }\n\n    /// @notice get the vaultBatchingState of user deposits\n    /// @param account address of user\n    function userDeposits(address account) external view returns (UserDeposit memory) {\n        return vaultBatchingState.userDeposits[account];\n    }\n\n    /// @notice get the info for given vault and round\n    /// @param round address of user\n    function roundDeposits(uint256 round) external view returns (RoundDeposit memory) {\n        return vaultBatchingState.roundDeposits[round];\n    }\n\n    function _stakeGlp(\n        address token,\n        uint256 amount,\n        uint256 minUSDG\n    ) internal returns (uint256 glpStaked) {\n        // Convert tokens to glp and stake glp to obtain sGLP\n        IERC20(token).approve(address(glpManager), amount);\n        glpStaked = rewardRouter.mintAndStakeGlp(token, amount, minUSDG, 0);\n    }\n}\n"
    },
    "contracts/interfaces/IDnGmxBatchingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC4626 } from './IERC4626.sol';\n\npragma solidity ^0.8.0;\n\ninterface IDnGmxBatchingManager {\n    error InvalidVault(address vault);\n    error InvalidInput(uint256 errorCode);\n    error InsufficientShares(uint256 balance);\n    error InvalidSetDepositPaused(bool currentValue);\n\n    error ZeroBalance();\n\n    error VaultAlreadyAdded();\n    error VaultsLimitExceeded();\n\n    error CallerNotKeeper();\n    error CallerNotVault();\n    error NoUsdcBalance();\n\n    event DepositToken(\n        uint256 indexed round,\n        address indexed token,\n        address indexed receiver,\n        uint256 amount,\n        uint256 glpStaked\n    );\n\n    event VaultAdded(address vault);\n    event VaultDeposit(uint256 vaultGlpAmount);\n\n    event KeeperUpdated(address newKeeper);\n\n    event SharesClaimed(address indexed from, address indexed receiver, uint256 claimAmount);\n    event BatchStake(uint256 indexed round, uint256 userUsdcAmount, uint256 userGlpAmount);\n    event BatchDeposit(uint256 indexed round, uint256 userUsdcAmount, uint256 userGlpAmount, uint256 userShareAmount);\n\n    struct UserDeposit {\n        uint256 round;\n        uint128 usdcBalance;\n        uint128 unclaimedShares;\n    }\n    struct RoundDeposit {\n        uint128 totalUsdc;\n        uint128 totalShares;\n    }\n\n    function depositToken(\n        address token,\n        uint256 amount,\n        uint256 minUSDG\n    ) external returns (uint256 glpStaked);\n\n    function depositUsdc(uint256 amount, address receiver) external returns (uint256 glpStaked);\n\n    function executeBatchStake() external;\n\n    function executeBatchDeposit() external;\n\n    function dnGmxJuniorVaultGlpBalance() external view returns (uint256 balance);\n\n    function usdcBalance(address account) external view returns (uint256 balance);\n\n    function unclaimedShares(address account) external view returns (uint256 shares);\n\n    function claim(address receiver, uint256 amount) external;\n\n    function currentRound() external view returns (uint256);\n\n    function roundDeposits(uint256 round) external view returns (RoundDeposit memory);\n}\n"
    },
    "contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        unchecked {\n            require((z = uint160(y)) == y, 'Overflow');\n        }\n    }\n\n    /// @notice Cast a uint256 to a uint128, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\n        unchecked {\n            /* solhint-disable reason-string */\n            require((z = uint128(y)) == y);\n        }\n    }\n\n    /// @notice Cast a uint128 to a int128, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt128(uint128 y) internal pure returns (int128 z) {\n        unchecked {\n            require(y < 2**127, 'Overflow');\n            z = int128(y);\n        }\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        unchecked {\n            require((z = int128(y)) == y, 'Overflow');\n        }\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        unchecked {\n            require(y < 2**255, 'Overflow');\n            z = int256(y);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IDnGmxJuniorVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IERC4626 } from './IERC4626.sol';\nimport { IBorrower } from './IBorrower.sol';\n\ninterface IDnGmxJuniorVault is IERC4626, IBorrower {\n    function getMarketValue(uint256 assetAmount) external view returns (uint256 marketValue);\n\n    function harvestFees() external;\n\n    function getPriceX128() external view returns (uint256);\n\n    function getVaultMarketValue() external view returns (uint256);\n\n    function depositCap() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IBorrower.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IBorrower {\n    function getUsdcBorrowed() external view returns (uint256);\n}\n"
    },
    "contracts/libraries/FeeSplitStrategy.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.8.0;\n\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\n\n/**\n * @title FeeSplitStrategy contract\n * @notice Implements the calculation of the eth reward split depending on the utilization of reserve\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE`\n * point of utilization and another from that one to 100%\n * @author Rage\n **/\nlibrary FeeSplitStrategy {\n    using FullMath for uint256;\n\n    uint256 internal constant RATE_PRECISION = 1e30;\n\n    struct Info {\n        /**\n         * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\n         * Expressed in ray\n         **/\n        uint256 optimalUtilizationRate;\n        // Base variable borrow rate when Utilization rate = 0. Expressed in ray\n        uint256 baseVariableBorrowRate;\n        // Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\n        uint256 variableRateSlope1;\n        // Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\n        uint256 variableRateSlope2;\n    }\n\n    function getMaxVariableBorrowRate(Info storage feeStrategyInfo) internal view returns (uint256) {\n        return\n            feeStrategyInfo.baseVariableBorrowRate +\n            feeStrategyInfo.variableRateSlope1 +\n            feeStrategyInfo.variableRateSlope2;\n    }\n\n    /**\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\n     * NOTE This function is kept for compatibility with the previous DefaultInterestRateStrategy interface.\n     * New protocol implementation uses the new calculateInterestRates() interface\n     * @param availableLiquidity The liquidity available in the corresponding aToken\n     * @param usedLiquidity The total borrowed from the reserve at a variable rate\n     **/\n    function calculateFeeSplit(\n        Info storage feeStrategy,\n        uint256 availableLiquidity,\n        uint256 usedLiquidity\n    ) internal view returns (uint256 feeSplitRate) {\n        uint256 utilizationRate = usedLiquidity == 0\n            ? 0\n            : usedLiquidity.mulDiv(RATE_PRECISION, availableLiquidity + usedLiquidity);\n\n        uint256 excessUtilizationRate = RATE_PRECISION - feeStrategy.optimalUtilizationRate;\n\n        if (utilizationRate > feeStrategy.optimalUtilizationRate) {\n            uint256 excessUtilizationRateRatio = (utilizationRate - feeStrategy.optimalUtilizationRate).mulDiv(\n                RATE_PRECISION,\n                excessUtilizationRate\n            );\n\n            feeSplitRate =\n                feeStrategy.baseVariableBorrowRate +\n                feeStrategy.variableRateSlope1 +\n                feeStrategy.variableRateSlope2.mulDiv(excessUtilizationRateRatio, RATE_PRECISION);\n        } else {\n            feeSplitRate =\n                feeStrategy.baseVariableBorrowRate +\n                utilizationRate.mulDiv(feeStrategy.variableRateSlope1, feeStrategy.optimalUtilizationRate);\n        }\n    }\n}\n"
    },
    "contracts/mocks/FeeSplitStrategyMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { FeeSplitStrategy } from '../libraries/FeeSplitStrategy.sol';\n\ncontract FeeSplitStrategyMock {\n    using FeeSplitStrategy for FeeSplitStrategy.Info;\n\n    FeeSplitStrategy.Info public info;\n\n    function setFeeSplitStrategy(FeeSplitStrategy.Info calldata _info) external {\n        info = _info;\n    }\n\n    function getMaxVariableBorrowRate() external view returns (uint256) {\n        return info.getMaxVariableBorrowRate();\n    }\n\n    function calculateFeeSplit(uint256 availableLiquidity, uint256 usedLiquidity)\n        external\n        view\n        returns (uint256 feeSplitRate)\n    {\n        feeSplitRate = info.calculateFeeSplit(availableLiquidity, usedLiquidity);\n    }\n}\n"
    },
    "contracts/interfaces/ILeveragePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\nimport { IBorrower } from './IBorrower.sol';\n\ninterface ILeveragePool is IBorrower {}\n"
    },
    "contracts/interfaces/gmx/IGlpStakingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC4626 } from 'contracts/interfaces/IERC4626.sol';\n\ninterface IGlpStakingManager is IERC4626 {\n    function depositToken(address token, uint256 amount) external returns (uint256 shares);\n\n    function harvestFees() external;\n}\n"
    },
    "contracts/interfaces/IDnGmxSeniorVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC4626 } from './IERC4626.sol';\n\ninterface IDnGmxSeniorVault is IERC4626 {\n    function borrow(uint256 amount) external;\n\n    function repay(uint256 amount) external;\n\n    function getEthRewardsSplitRate() external returns (uint256);\n\n    function getPriceX128() external view returns (uint256);\n\n    function getVaultMarketValue() external view returns (uint256);\n\n    function depositCap() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/balancer/IBalancerVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IBalancerVault {\n    /**\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\n     *\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n     * for each token contract. `tokens` must be sorted in ascending order.\n     *\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n     * `receiveFlashLoan` call.\n     *\n     * Emits `FlashLoan` events.\n     */\n    function flashLoan(\n        address recipient,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory userData\n    ) external;\n}\n"
    },
    "contracts/mocks/balancer/BalancerVaultMock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport { IBalancerVault } from '../../interfaces/balancer/IBalancerVault.sol';\nimport { IFlashLoanRecipient } from '../../interfaces/balancer/IFlashLoanRecipient.sol';\n\ncontract BalancerVaultMock is IBalancerVault {\n    using SafeERC20 for IERC20;\n\n    function flashLoan(\n        address recipient,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory userData\n    ) external override {\n        uint256[] memory preLoanBalances = new uint256[](tokens.length);\n        uint256[] memory feeAmounts = new uint256[](tokens.length);\n\n        address previousToken = address(0);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(tokens[i] > previousToken, 'BalancerVaultMock: tokens must be sorted');\n            previousToken = tokens[i];\n\n            preLoanBalances[i] = IERC20(tokens[i]).balanceOf(address(this));\n\n            require(preLoanBalances[i] >= amounts[i], 'BalancerVaultMock: insufficient balance to flashloan');\n            IERC20(tokens[i]).safeTransfer(recipient, amounts[i]);\n            feeAmounts[i] = 0; // fee is zero\n        }\n\n        IFlashLoanRecipient(recipient).receiveFlashLoan(tokens, amounts, feeAmounts, userData);\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 postLoanBalance = IERC20(tokens[i]).balanceOf(address(this));\n\n            require(postLoanBalance >= preLoanBalances[i], 'BalancerVaultMock: amount not returned');\n        }\n    }\n}\n"
    },
    "contracts/interfaces/balancer/IFlashLoanRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IFlashLoanRecipient {\n    /**\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n     *\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n     * Vault, or else the entire flash loan will revert.\n     *\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\n     */\n    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external;\n}\n"
    },
    "contracts/interfaces/curve/IStableSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IStableSwap {\n    ///@dev Get the amount of coin j one would receive for swapping _dx of coin i.\n    function get_dy(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external returns (uint256);\n\n    /**\n    Perform an exchange between two coins.\n\n    i: Index value for the coin to send\n    j: Index value of the coin to receive\n    _dx: Amount of i being exchanged\n    _min_dy: Minimum amount of j to receive\n\n    Returns the actual amount of coin j received. Index values can be found via the coins public getter method.\n    */\n    function exchange(\n        uint256 i,\n        uint256 j,\n        uint256 dx,\n        uint256 min_dy,\n        bool use_eth\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/curve/IExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IExchange {\n    function get_exchange_amount(\n        address _pool,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external view returns (uint256);\n\n    function exchange(\n        address _pool,\n        address _from,\n        address _to,\n        uint256 _amount,\n        uint256 _expected\n    ) external returns (uint256);\n\n    function get_best_rate(\n        address _from,\n        address _to,\n        uint256 _amount,\n        address[8] calldata _exclude_pools\n    ) external view returns (address, uint256);\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@ragetrade/vaults/contracts/yieldStrategy/gmx/GlpStakingManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@ragetrade/vaults/contracts/yieldStrategy/gmx/GlpStakingManager.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@ragetrade/vaults/contracts/yieldStrategy/gmx/GMXBatchingManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@ragetrade/vaults/contracts/yieldStrategy/gmx/GMXBatchingManager.sol';\n"
    },
    "contracts/interfaces/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\npragma solidity ^0.8.9;\n\ninterface IWETH9 is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 _amount) external;\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 0
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}