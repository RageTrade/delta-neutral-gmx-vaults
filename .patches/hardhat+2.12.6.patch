diff --git a/node_modules/hardhat/internal/hardhat-network/provider/node.js b/node_modules/hardhat/internal/hardhat-network/provider/node.js
index 11c6991..870b5b4 100644
--- a/node_modules/hardhat/internal/hardhat-network/provider/node.js
+++ b/node_modules/hardhat/internal/hardhat-network/provider/node.js
@@ -1554,7 +1554,7 @@ Hardhat Network's forking functionality only works with blocks from at least spu
             originalCommon = this._vm._common;
             this._vm._common = ethereumjs_common_1.Common.custom({
                 chainId: this._forkBlockNumber === undefined ||
-                    blockContext.header.number >= this._forkBlockNumber
+                    blockContext.header.number > this._forkBlockNumber
                     ? this._configChainId
                     : this._forkNetworkId,
                 networkId: this._forkNetworkId ?? this._configNetworkId,
diff --git a/node_modules/hardhat/internal/hardhat-network/stack-traces/solidity-errors.js b/node_modules/hardhat/internal/hardhat-network/stack-traces/solidity-errors.js
index ee18603..35511d0 100644
--- a/node_modules/hardhat/internal/hardhat-network/stack-traces/solidity-errors.js
+++ b/node_modules/hardhat/internal/hardhat-network/stack-traces/solidity-errors.js
@@ -108,9 +108,9 @@ function encodeStackTraceEntry(stackTraceEntry) {
     }
 }
 function sourceReferenceToSolidityCallsite(sourceReference) {
-    return new SolidityCallSite(sourceReference.sourceName, sourceReference.contract, sourceReference.function !== undefined
-        ? sourceReference.function
-        : solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, sourceReference.line);
+    return new SolidityCallSite(sourceReference?.sourceName, sourceReference?.contract, sourceReference?.function !== undefined
+        ? sourceReference?.function
+        : solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, sourceReference?.line);
 }
 function getMessageFromLastStackTraceEntry(stackTraceEntry) {
     switch (stackTraceEntry.type) {
